<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

// Code automatically generated by FOMCodeGen version <#=FOM.GeneratorVersion#> from <#=System.IO.Path.GetFileName(FOM.Filename)#>, do not edit
<# if (FOM.UsePrecompiledHeaders) { #>
#include "stdafx.h"
<#}#>

#include <vector>
#include <cassert>

<# if (FOM.IsFloatTime) { #>
#include "RTI/time/HLAfloat64Time.h"
<#} else {#>
#include "RTI/time/HLAinteger64Time.h"
<#}#>

#include "<#=InteractionsHeaderFilename#>"
#include "<#=ObjectsHeaderFilename#>"

<#
foreach (var namespacePart in FOM.Namespace)
{
#>
namespace <#=namespacePart#> {
<#  } #>
<# 
foreach (var interactionClass in FOM.InteractionClasses)
{
  if (interactionClass.BaseClass != null)
  {
#>
// object class type '<#=interactionClass.Name#>'
<#=interactionClass.Name#>InteractionClass::<#=interactionClass.Name#>InteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, <#=interactionClass.BaseClass.Name#>InteractionClass* baseClass)
<# } else {#>
<#=interactionClass.Name#>InteractionClass::<#=interactionClass.Name#>InteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry)
<# } #>
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

<# if (interactionClass.BaseClass != null) { #>
  mBaseClass = baseClass;
<# } #>
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"<#=interactionClass.QualifiedName#>");
<# 
  foreach (var parameter in interactionClass.Parameters)
  {
    if (parameter.DataType != null)
    {
#>  // parameter <#=parameter.Name#> : <#=parameter.DataType.Name#>
  m<#=parameter.Name#>ParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"<#=parameter.Name#>");
<#  } else { #>
// parameter <#=interactionClass.Name#>.<#=parameter.Name#> : no data type
<#  
    } // if (parameter.DataType != null)
  } // foreach (var parameter in interactionClass.Parameters)
#>
}

ObjectClassRegistry* <#=interactionClass.Name#>InteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void <#=interactionClass.Name#>InteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void <#=interactionClass.Name#>InteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void <#=interactionClass.Name#>InteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void <#=interactionClass.Name#>InteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void <#=interactionClass.Name#>InteractionClass::send(<#=interactionClass.CppParameterList#>)
{
  rti1516ev::ParameterHandleValueMap parameters;
<# 
  foreach (var parameter in interactionClass.AllParameters)
  {
    if (parameter.DataType != null)
    { #>
  <#= parameter.ToEncoderExpression() #>
  parameters.insert(std::make_pair(Get<#=parameter.Name#>ParameterHandle(), <#=parameter.Name#>Encoder.encode()));
<#  
    } // if (parameter.DataType != null)
  } // foreach (var parameter in interactionClass.Parameters)
#>
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void <#=interactionClass.Name#>InteractionClass::sendWithTime(<#=interactionClass.CppParameterList#><# if (interactionClass.Parameters.Count > 0) {#>, <#}#><#=FOM.NativeTimeType#> time)
{
  rti1516ev::ParameterHandleValueMap parameters;
<# 
  foreach (var parameter in interactionClass.AllParameters)
  {
    if (parameter.DataType != null)
    { #>
  <#= parameter.ToEncoderExpression() #>
  parameters.insert(std::make_pair(Get<#=parameter.Name#>ParameterHandle(), <#=parameter.Name#>Encoder.encode()));
<#  
    } // if (parameter.DataType != null)
  } // foreach (var parameter in interactionClass.Parameters)
#>
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), <#=FOM.LogicalTimeType#>(time));
}

void <#=interactionClass.Name#>InteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&<#if (interactionClass.HasValidParameters) {#> parameters <#}#>)
{
<#
  List<string> callArguments = new List<string>();
  foreach (var parameter in interactionClass.AllParameters) {
    if (parameter.DataType != null) {
      callArguments.Add(parameter.DataType.CppGetter(parameter.Name + "Decoder"));
#>
  <#=parameter.DataType.Encoding#> <#=parameter.Name#>Decoder;
  rti1516ev::ParameterHandleValueMap::const_iterator <#=parameter.Name#>Iter = parameters.find(Get<#=parameter.Name#>ParameterHandle());
  if (<#=parameter.Name#>Iter != parameters.end())
  {
    <#=parameter.Name#>Decoder.decode(<#=parameter.Name#>Iter->second);
  }
<#  
    } // if (parameter.DataType != null)
  } // foreach (var parameter in interactionClass.Parameters)
#>
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(<#=string.Join(", ", callArguments)#>);
  }
}

void <#=interactionClass.Name#>InteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&<#if (interactionClass.HasValidParameters) {#> parameters <#}#>, const rti1516ev::LogicalTime& time, OrderType orderType)
{
<#
{
  List<string> callArgumentsWithTime = new List<string>();
  var timeArgument = "static_cast<const " + FOM.LogicalTimeType + "&>(time).getTime()";
  foreach (var parameter in interactionClass.AllParameters) {
    if (parameter.DataType != null) {
      callArgumentsWithTime.Add(parameter.DataType.CppGetter(parameter.Name + "Decoder"));
#>
  <#=parameter.DataType.Encoding#> <#=parameter.Name#>Decoder;
  rti1516ev::ParameterHandleValueMap::const_iterator <#=parameter.Name#>Iter = parameters.find(Get<#=parameter.Name#>ParameterHandle());
  if (<#=parameter.Name#>Iter != parameters.end())
  {
    <#=parameter.Name#>Decoder.decode(<#=parameter.Name#>Iter->second);
  }
<#  
    } // if (parameter.DataType != null)
  } // foreach (var parameter in interactionClass.Parameters)
#>
  for (auto& entry : _receiveCallbacksWithTime) {
    auto& callback = entry.second;
<#    if (callArgumentsWithTime.Count > 0) { #>
    callback(<#=string.Join(", ", callArgumentsWithTime)#>, <#=timeArgument#>, orderType);
<#    } else {#>
    callback(<#=timeArgument#>, orderType);
<#    }#>
<#}#>
  }
}

uint32_t <#=interactionClass.Name#>InteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

uint32_t <#=interactionClass.Name#>InteractionClass::RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback)
{
  uint32_t key = _receiveCallbacksWithTimeNextKey++;
  _receiveCallbacksWithTime.insert(std::make_pair(key, callback));
  return key;
}

rti1516ev::ParameterHandleSet <#=interactionClass.Name#>InteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
<# 
  foreach (var parameter in interactionClass.AllParameters) {
    if (parameter.DataType != null) {
#>
  result.insert(Get<#=parameter.Name#>ParameterHandle());
<#  
    } // if (parameter.DataType != null)
  } // foreach (var parameter in interactionClass.Parameters)
#>
  return result;
}

<# } // foreach (var interactionClass in FOM.InteractionClasses) #> 

InteractionClassRegistry::InteractionClassRegistry(ObjectClassRegistry* objectClassRegistry)
  : mRtiAmbassador(nullptr), mObjectClassRegistry(objectClassRegistry)
{
}

InteractionClassRegistry::~InteractionClassRegistry()
{
}

void InteractionClassRegistry::Initialize(rti1516ev::RTIambassador* rtiAmbassador)
{
  mRtiAmbassador = rtiAmbassador;
<#  foreach (var interactionClass in FOM.InteractionClasses) { #>
  try
  {
<#    if (interactionClass.BaseClass != null) { #>
    m<#=interactionClass.Name#>InteractionClass = std::unique_ptr<<#=interactionClass.Name#>InteractionClass>(new <#=interactionClass.Name#>InteractionClass(mRtiAmbassador, this, m<#=interactionClass.BaseClass.Name#>InteractionClass.get()));
<#    } else { #>
    m<#=interactionClass.Name#>InteractionClass = std::unique_ptr<<#=interactionClass.Name#>InteractionClass>(new <#=interactionClass.Name#>InteractionClass(mRtiAmbassador, this));
<#    } // if #>
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
<#  } // foreach #>
} // Initialize

void InteractionClassRegistry::ReceiveInteraction(rti1516ev::InteractionClassHandle theInteractionClass, const rti1516ev::ParameterHandleValueMap & parameters)
{
<# 
  bool firstInClassRegistryReceiveInteractionParameter = true;
  foreach (var interactionClass in FOM.InteractionClasses)
  {
    if (interactionClass.HasValidParameters)
    { 
      if (firstInClassRegistryReceiveInteractionParameter) { #>
  if (theInteractionClass == m<#=interactionClass.Name#>InteractionClass->GetInteractionClassHandle())
<#    } else { #>
  else if (theInteractionClass == m<#=interactionClass.Name#>InteractionClass->GetInteractionClassHandle())
<#    } // if
      firstInClassRegistryReceiveInteractionParameter = false; #>
  {
    m<#=interactionClass.Name#>InteractionClass->ReceiveInteraction(parameters);
  }
<#  
    } // if (interactionClass.hasValidParameters)
} // foreach 
#>
}

void InteractionClassRegistry::ReceiveInteraction(rti1516ev::InteractionClassHandle theInteractionClass,
                                                  const rti1516ev::ParameterHandleValueMap & parameters,
                                                  const rti1516ev::LogicalTime& time,
                                                  OrderType orderType)
{
<# 
  bool firstInClassRegistryReceiveWithTimeParameter = true;
  foreach (var interactionClass in FOM.InteractionClasses)
  {
    if (interactionClass.HasValidParameters)
    { 
      if (firstInClassRegistryReceiveWithTimeParameter) { #>
  if (theInteractionClass == m<#=interactionClass.Name#>InteractionClass->GetInteractionClassHandle())
<#    } else { #>
  else if (theInteractionClass == m<#=interactionClass.Name#>InteractionClass->GetInteractionClassHandle())
<#    } // if
      firstInClassRegistryReceiveWithTimeParameter = false; #>
  {
    m<#=interactionClass.Name#>InteractionClass->ReceiveInteraction(parameters, time, orderType);
  }
<#  
    } // if (interactionClass.hasValidParameters)
} // foreach 
#>
}

<# foreach (var namespacePart in FOM.Namespace) { #>
} // namespace <#=namespacePart#>
<# } #>
