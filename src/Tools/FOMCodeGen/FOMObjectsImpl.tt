<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

// Code automatically generated by T4 template from <#=FOM.Filename#>, do not edit
<# if (FOM.UsePrecompiledHeaders) { #>
#include "stdafx.h"
<#}#>

#include <vector>
#include <cassert>

<#=FOM.PredefinedTypeIncludes#>

#include "<#=ObjectsHeaderFilename#>"

<#
foreach (var namespacePart in FOM.Namespace)
{
#>
namespace <#=namespacePart#> {
<#  } #>
<# 
foreach (var objectClass in FOM.ObjectClasses)
{
  if (objectClass.BaseClass != null)
  {
#>
// object class type '<#=objectClass.Name#>'
<#=objectClass.Name#>ObjectClass::<#=objectClass.Name#>ObjectClass(rti1516ev::RTIambassador* rtiAmbassador, <#=objectClass.BaseClass.Name#>ObjectClass* baseClass)
<# } else {#>
<#=objectClass.Name#>ObjectClass::<#=objectClass.Name#>ObjectClass(rti1516ev::RTIambassador* rtiAmbassador)
<# } #>
{
  mRtiAmbassador = rtiAmbassador;
<# if (objectClass.BaseClass != null) { #>
  mBaseClass = baseClass;
<# } #>
  mObjectClassHandle = rtiAmbassador->getObjectClassHandle(L"<#=objectClass.QualifiedName#>");
<# 
  foreach (var attribute in objectClass.Attributes)
  {
    if (attribute.DataType != null)
    {
#>  // attribute <#=attribute.Name#> : <#=attribute.DataType.Name#>
  m<#=attribute.Name#>AttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"<#=attribute.Name#>");
<#  } else { #>
// attribute <#=objectClass.Name#>.<#=attribute.Name#> : no data type
<#  
    } // if (attribute.DataType != null)
  } // foreach (var attribute in objectClass.Attributes)
#>
}

void <#=objectClass.Name#>ObjectClass::Publish()
{
  if (!mPublished)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->publishObjectClassAttributes(mObjectClassHandle, attributes);
    mPublished = true;
  }
}

void <#=objectClass.Name#>ObjectClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishObjectClass(mObjectClassHandle);
    mPublished = false;
  }
}

void <#=objectClass.Name#>ObjectClass::Subscribe()
{
  if (!mSubscribed)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->subscribeObjectClassAttributes(mObjectClassHandle, attributes);
    mSubscribed = true;
  }
}

void <#=objectClass.Name#>ObjectClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeObjectClass(mObjectClassHandle);
    mSubscribed = false;
  }
}

void <#=objectClass.Name#>ObjectClass::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle, const std::wstring& instanceName)
{
  assert(mObjectInstancesByName.find(instanceName) == mObjectInstancesByName.end());
  assert(mObjectInstancesByHandle.find(instanceHandle) == mObjectInstancesByHandle.end());
  <#=objectClass.Name#>* newObject = new <#=objectClass.Name#>(mRtiAmbassador, instanceName, instanceHandle);
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  mObjectInstancesByHandle.insert(std::make_pair(instanceHandle, newObject));
}

void <#=objectClass.Name#>ObjectClass::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  std::wstring instanceName = mRtiAmbassador->getObjectInstanceName(theObject);
  auto iter = mObjectInstancesByName.find(instanceName);
  assert(iter != mObjectInstancesByName.end());
  mObjectInstancesByName.erase(iter);
  mObjectInstancesByHandle.erase(theObject);
}

I<#=objectClass.Name#>* <#=objectClass.Name#>ObjectClass::GetObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

I<#=objectClass.Name#>* <#=objectClass.Name#>ObjectClass::GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle)
{
  auto iter = mObjectInstancesByHandle.find(instanceHandle);
  if (iter != mObjectInstancesByHandle.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

I<#=objectClass.Name#>* <#=objectClass.Name#>ObjectClass::CreateObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return nullptr;
  }
  if (!mPublished)
  {
    throw rti1516ev::ObjectClassNotPublished(L"<#=objectClass.Name#>");
  }
  rti1516ev::ObjectInstanceHandle instanceHandle = mRtiAmbassador->registerObjectInstance(mObjectClassHandle, instanceName);
  <#=objectClass.Name#>* newObject = new <#=objectClass.Name#>(mRtiAmbassador, instanceName, instanceHandle);
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  return newObject;
}

// object instances of type '<#=objectClass.Name#>'
<#=objectClass.Name#>::<#=objectClass.Name#>()
{
}

<#=objectClass.Name#>::<#=objectClass.Name#>(rti1516ev::RTIambassador* rtiAmbassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle)
  : mInstanceName(instanceName)
  , mObjectInstanceHandle(instanceHandle)
  , mRtiAmbassador(rtiAmbassador)
{
}

<#=objectClass.Name#>::~<#=objectClass.Name#>()
{
}

<# 
  foreach (var attribute in objectClass.AllAttributes)
  {
    if (attribute.DataType != null)
    {
#>// attribute <#=attribute.Name#> : <#=attribute.DataType.Name#>
<#=attribute.DataType.ReturnCppType#> <#=objectClass.Name#>::Get<#=attribute.Name#>() const
{
<# if (attribute.DataType is FOMParser.EnumeratedDataType) { #>
  return static_cast<<#=attribute.DataType.CPPType#>>(m<#=attribute.Name#>.get());
<# } else if (attribute.DataType.CanTranslateToCpp) { #>
  return m<#=attribute.Name#>.get();
<# } else {#>
  return m<#=attribute.Name#>Encoder;
<# } #>
}

void <#=objectClass.Name#>::Set<#=attribute.Name#>(<#=attribute.DataType.CPPType#> newValue)
{
<# if (attribute.DataType.CanTranslateToCpp) { #>
  m<#=attribute.Name#>.set(newValue);
<# } else {#>
  m<#=attribute.Name#>Encoder = newValue;
<# } #>
  mDirty |= k<#=attribute.Name#>Bit;
}

<#  } else { #>
// attribute <#=objectClass.Name#>.<#=attribute.Name#> : no data type

<#  
    } // if (attribute.DataType != null)
  } // foreach (var attribute in objectClass.AllAttributes)
#>
rti1516ev::AttributeHandleValueMap <#=objectClass.Name#>::GetAllAttributeValues() const
{
  rti1516ev::AttributeHandleValueMap result;
<#
  foreach (var attribute in objectClass.AllAttributes)
  {
    if (attribute.DataType != null)
    {
#>
  result[mObjectClass->Get<#=attribute.Name#>AttributeHandle()] = m<#=attribute.Name#>.encode();
<#
    } // if
  } // foreach
#>
  return result;
}

rti1516ev::AttributeHandleValueMap <#=objectClass.Name#>::GetModifiedAttributeValues() const
{
  rti1516ev::AttributeHandleValueMap result;
<#
  foreach (var attribute in objectClass.Attributes)
  {
    if (attribute.DataType != null)
    {
#>
  if (mDirty & k<#=attribute.Name#>Bit)
  {
    result[mObjectClass->Get<#=attribute.Name#>AttributeHandle()] = m<#=attribute.Name#>.encode();
  }
<#
    } // if
  } // foreach
#>
  return result;
}

<# if (objectClass.HasValidAttributes) { #>
void <#=objectClass.Name#>::UpdateAllAttributeValues()
{
  rti1516ev::AttributeHandleValueMap attributes = GetAllAttributeValues();
  mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData());
}

void <#=objectClass.Name#>::UpdateAllAttributeValues(const rti1516ev::LogicalTime& time)
{
  rti1516ev::AttributeHandleValueMap attributes = GetAllAttributeValues();
  mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData(), time);
}

void <#=objectClass.Name#>::UpdateModifiedAttributeValues()
{
  rti1516ev::AttributeHandleValueMap attributes = GetModifiedAttributeValues();
  mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData());
  ClearDirtyBits();
}

void <#=objectClass.Name#>::UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time)
{
  rti1516ev::AttributeHandleValueMap attributes = GetModifiedAttributeValues();
  mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData(), time);
  ClearDirtyBits();
}

void <#=objectClass.Name#>::ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes)
{
  for (auto& attributeHandleValue : attributes)
  {
    rti1516ev::AttributeHandle attributeHandle = attributeHandleValue.first;
<#
  {
  bool firstInObjectInstanceReflectAttributeValues = true;
  foreach (var attribute in objectClass.Attributes)
  {
    if (attribute.DataType != null)
    {
#>
<# if (firstInObjectInstanceReflectAttributeValues)  {#>
    if (attributeHandle == mObjectClass->Get<#=attribute.Name#>AttributeHandle())
<# } else { #>
    else if (attributeHandle == mObjectClass->Get<#=attribute.Name#>AttributeHandle())
<# } #>
    {
      m<#=attribute.Name#>.decode(attributeHandleValue.second);
      mLastUpdated |= k<#=attribute.Name#>Bit;
    }
<#
      firstInObjectInstanceReflectAttributeValues = false;
    } // if
  } // foreach
  }
#>
  } // for (auto& attributeHandleValue : attributes)
} // <#=objectClass.Name#>::ReflectAttributeValues

<# if (objectClass.ChildClasses.Count == 0) { #>
uint32_t <#=objectClass.Name#>::RegisterUpdateCallback(UpdateCallbackType callback)
{
  mLastCallbackToken++;
  mUpdateCallbacks.insert(std::make_pair(mLastCallbackToken, callback));
  return mLastCallbackToken;
}

void <#=objectClass.Name#>::UnregisterUpdateCallback(uint32_t callbackToken)
{
  mUpdateCallbacks.erase(callbackToken);
}

void <#=objectClass.Name#>::ExecuteUpdateCallbacks()
{
  for (auto& callbackEntry : mUpdateCallbacks)
  {
    auto& callback = callbackEntry.second;
    callback(this);
  }
}
<# } // if (objectClass.ChildClasses.Count == 0) #>
<# } // if (objectClass.HasValidAttributes) #>

<# } // foreach (var objectClass in FOM.ObjectClasses) #> 

ClassRegistry* ClassRegistry::sClassRegistry = nullptr;

ClassRegistry::ClassRegistry(rti1516ev::RTIambassador* rtiAmbassador)
  : mRtiAmbassador(rtiAmbassador)
{
  assert(sClassRegistry == nullptr);
  sClassRegistry = this;
  Initialize();
}

ClassRegistry::~ClassRegistry()
{
  sClassRegistry = nullptr;
}

void ClassRegistry::Initialize()
{
<# 
  foreach (var objectClass in FOM.ObjectClasses)
  {
    if (objectClass.BaseClass != null)
    {
#>
  m<#=objectClass.Name#>ObjectClass = std::unique_ptr<<#=objectClass.Name#>ObjectClass>(new <#=objectClass.Name#>ObjectClass(mRtiAmbassador, m<#=objectClass.BaseClass.Name#>ObjectClass.get()));
<# } else { #>
  m<#=objectClass.Name#>ObjectClass = std::unique_ptr<<#=objectClass.Name#>ObjectClass>(new <#=objectClass.Name#>ObjectClass(mRtiAmbassador));
<# } // if #>
<# } // foreach #>
} // Initialize

void ClassRegistry::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName)
{
  rti1516ev::ObjectClassHandle theObjectClass = mRtiAmbassador->getKnownObjectClassHandle(theObject);
<# 
  bool first = true;
  foreach (var objectClass in FOM.ObjectClasses)
  {
#>
<#  if (first) { #>
  if (theObjectClass == m<#=objectClass.Name#>ObjectClass->GetObjectClassHandle())
<# } else { #>
  else if (theObjectClass == m<#=objectClass.Name#>ObjectClass->GetObjectClassHandle())
<# } // if
   first=false;
#>
  {
    m<#=objectClass.Name#>ObjectClass->DiscoverObjectInstance(theObject, theObjectInstanceName);
  }
<# } // foreach #>
}

void ClassRegistry::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  rti1516ev::ObjectClassHandle theObjectClass = mRtiAmbassador->getKnownObjectClassHandle(theObject);
<# 
  bool firstInRemoveObjectInstance = true;
  foreach (var objectClass in FOM.ObjectClasses)
  {
#>
<#  if (firstInRemoveObjectInstance) { #>
  if (theObjectClass == m<#=objectClass.Name#>ObjectClass->GetObjectClassHandle())
<# } else { #>
  else if (theObjectClass == m<#=objectClass.Name#>ObjectClass->GetObjectClassHandle())
<# } // if
   firstInRemoveObjectInstance=false;
#>
  {
    m<#=objectClass.Name#>ObjectClass->RemoveObjectInstance(theObject);
  }
<# } // foreach #>
}

void ClassRegistry::ReflectAttributeValues(rti1516ev::ObjectInstanceHandle theObject, const rti1516ev::AttributeHandleValueMap & attributes)
{
  rti1516ev::ObjectClassHandle theObjectClass = mRtiAmbassador->getKnownObjectClassHandle(theObject);
<# 
  bool firstInClassRegistryReflectAttributeValues = true;
  foreach (var objectClass in FOM.ObjectClasses)
  {
    if (objectClass.HasValidAttributes)
    { 
      if (firstInClassRegistryReflectAttributeValues) { #>
  if (theObjectClass == m<#=objectClass.Name#>ObjectClass->GetObjectClassHandle())
<#    } else { #>
  else if (theObjectClass == m<#=objectClass.Name#>ObjectClass->GetObjectClassHandle())
<#    } // if
      firstInClassRegistryReflectAttributeValues = false; #>
  {
    static_cast<<#=objectClass.Name#>*>(m<#=objectClass.Name#>ObjectClass->GetObjectInstance(theObject))->ReflectAttributeValues(attributes);
  }
<#  
    } // if (objectClass.hasValidAttributes)
} // foreach 
#>
}

IClassRegistry* GetClassRegistry()
{
  return ClassRegistry::GetInstance();
}

<# foreach (var namespacePart in FOM.Namespace) { #>
} // namespace <#=namespacePart#>
<# } #>
