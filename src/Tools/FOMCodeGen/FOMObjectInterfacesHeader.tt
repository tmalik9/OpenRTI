<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

// Code automatically generated by T4 template from <#=FOM.Filename#>, do not edit
#pragma once

#include <vector>
#include <functional>

<#=FOM.PredefinedTypeIncludes#>
#include "<#=EncodingHeaderFilename#>"

<#
foreach (var namespacePart in FOM.Namespace)
{
#>
namespace <#=namespacePart#> {
<# } #>

<# 
foreach (var objectClass in FOM.ObjectClasses)
{
#>
class I<#=objectClass.Name#>;
class I<#=objectClass.Name#>ObjectClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual I<#=objectClass.Name#>* GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual I<#=objectClass.Name#>* CreateObjectInstance(const std::wstring& instanceName) = 0;
};

class I<#=objectClass.Name#><#
  if (objectClass.BaseClass != null)
  {
#> : public I<#=objectClass.BaseClass.Name#>
<# } else {
#>

<# } // if #>
{
<# 
  string attributeBitsClass = "uint32_t";
  string attributeBitsPostfix = "";
  if (objectClass.Attributes.Count > 32)
  {
    attributeBitsClass = "uint64_t";
    attributeBitsPostfix = "ull";
  }
#>
  public:
<# if (objectClass.BaseClass == null)  {#>
    using AttributeBits = <#=attributeBitsClass#>;
    static const AttributeBits kNone = 0x0;
<# } #>
<# 
  ulong bit;
  if (objectClass.BaseClass != null)
    bit = (ulong)(1 << objectClass.BaseClass.AllAttributes.Count);
  else
    bit = 1;
  foreach (var attribute in objectClass.Attributes)
  {
    if (attribute.DataType != null)
    { #>
    static const AttributeBits k<#=attribute.Name#>Bit = 0x<#=bit.ToString("X")#><#=attributeBitsPostfix#>;
<#
      bit = bit << 1;
    } // if (attribute.DataType != null)
  } // foreach (var attribute in objectClass.Attributes)
#>

    I<#=objectClass.Name#>() {}
<# if (objectClass.BaseClass == null)  {#>
    virtual ~I<#=objectClass.Name#>() {}
<#  } else { #>
    ~I<#=objectClass.Name#>() {}
<# } #>
    I<#=objectClass.Name#>(const I<#=objectClass.Name#>&) = delete;
    I<#=objectClass.Name#>(I<#=objectClass.Name#>&&) = delete;
    I<#=objectClass.Name#>& operator=(const I<#=objectClass.Name#>&) = delete;
    I<#=objectClass.Name#>& operator=(I<#=objectClass.Name#>&&) = delete;

<# if (objectClass.BaseClass == null)  {#>
    virtual std::wstring GetObjectInstanceName() const = 0;
<# } #>
<# 
  foreach (var attribute in objectClass.Attributes)
  {
    if (attribute.DataType != null)
    { #>
    // attribute <#=attribute.Name#> : <#=attribute.DataType.Name#>
    virtual <#=attribute.DataType.ReturnCppType#> Get<#=attribute.Name#>() const = 0;
    virtual void Set<#=attribute.Name#>(<#=attribute.DataType.CPPType#> newValue) = 0;
<#  } else { #>
    // attribute <#=attribute.Name#> : no data type
<#  
    } // if (attribute.DataType != null)
  } // foreach (var attribute in objectClass.Attributes)
#>
<# if (objectClass.HasValidAttributes) { #>
<# if (objectClass.BaseClass != null && !objectClass.BaseClass.HasValidAttributes) { #>
    virtual void UpdateAllAttributeValues() = 0;
    virtual void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time) = 0;
    virtual void UpdateModifiedAttributeValues() = 0;
    virtual void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time) = 0;
    virtual AttributeBits GetUpdatedAttributes() const = 0;
<# } #>
<# if (objectClass.ChildClasses.Count == 0) { #>
    using UpdateCallbackType = std::function<void(I<#=objectClass.Name#>*)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallbackType callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
<# } // if (objectClass.ChildClasses.Count == 0) #>
<# } // if (objectClass.HasValidAttributes) #>
};

<# } // foreach (var objectClass in FOM.ObjectClasses) #>

class IObjectClassRegistry
{
  public:
<# foreach (var objectClass in FOM.ObjectClasses) { #>
    virtual I<#=objectClass.Name#>ObjectClass* Get<#=objectClass.Name#>ObjectClass() const = 0;
<# } #>
  protected:
    virtual ~IObjectClassRegistry() {}
}; // class IObjectClassRegistry

IObjectClassRegistry* GetObjectClassRegistry();

<#
foreach (var namespacePart in FOM.Namespace)
{
#>
} // namespace <#=namespacePart#>
<#  } #>
