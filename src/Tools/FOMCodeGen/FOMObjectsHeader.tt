<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

// Code automatically generated by T4 template from <#=FOM.Filename#>, do not edit
#pragma once

#include <vector>
<#=FOM.PredefinedTypeIncludes#>

<#
foreach (var namespacePart in FOM.Namespace)
{
#>
namespace <#=namespacePart#> {
<#  } #>
<# 
foreach (var objectClass in FOM.ObjectClasses)
{
#>
class <#=objectClass.Name#><#
  if (objectClass.BaseClass != null)
  {
#> : public <#=objectClass.BaseClass.Name#>
<# } else {
#>

<# } // if #>
{
  public:
    <#=objectClass.Name#>();
    ~<#=objectClass.Name#>() = default;
    <#=objectClass.Name#>(const <#=objectClass.Name#>&) = delete;
    <#=objectClass.Name#>(<#=objectClass.Name#>&&) = delete;
    <#=objectClass.Name#>& operator=(const <#=objectClass.Name#>&) = delete;
    <#=objectClass.Name#>& operator=(<#=objectClass.Name#>&&) = delete;

<# 
  foreach (var attribute in objectClass.Attributes)
  {
    if (attribute.DataType != null)
    {
#>    // attribute <#=attribute.Name#> : <#=attribute.DataType.Name#>
    <#=attribute.DataType.CPPType#> Get<#=attribute.Name#>() const;
    void Set<#=attribute.Name#>(<#=attribute.DataType.CPPType#> newValue);
<#  } else {
#>    // attribute <#=attribute.Name#> : no data type
<#  
    } // if (attribute.DataType != null)
  } // foreach (var attribute in objectClass.Attributes)
#>
  private:
<# 
  foreach (var attribute in objectClass.Attributes)
  {
    if (attribute.DataType != null)
    {
#>    // attribute <#=attribute.Name#> : <#=attribute.DataType.Name#>
    <#=attribute.DataType.Encoding#> m<#=attribute.Name#>Encoder;
<#  } else {
#>    // attribute <#=attribute.Name#> : no data type
<#  
    } // if (attribute.DataType != null)
  } // foreach (var attribute in objectClass.Attributes)
#>};

<# } // foreach (var objectClass in FOM.ObjectClasses) #> 

<#
foreach (var namespacePart in FOM.Namespace)
{
#>
} // namespace <#=namespacePart#>
<#  } #>
