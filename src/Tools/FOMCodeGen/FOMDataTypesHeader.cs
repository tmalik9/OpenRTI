// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FOMCodeGen
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class FOMDataTypesHeader : FOMDataTypesHeaderBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n// Code automatically generated by FOMCodeGen version ");
            
            #line 7 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.GeneratorVersion));
            
            #line default
            #line hidden
            this.Write(" from ");
            
            #line 7 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(System.IO.Path.GetFileName(FOM.Filename)));
            
            #line default
            #line hidden
            this.Write(", do not edit\r\n\r\n");
            
            #line 9 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 if (FOM.ModelIdentification.Name != null) { 
            
            #line default
            #line hidden
            
            #line 10 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOMParser.FormatAsComment(FOM.ModelIdentification.Name, "Name: ")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 11 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } 
            
            #line default
            #line hidden
            
            #line 12 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 if (FOM.ModelIdentification.Copyright != null) { 
            
            #line default
            #line hidden
            
            #line 13 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOMParser.FormatAsComment(FOM.ModelIdentification.Copyright, "Copyright: ")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 14 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } 
            
            #line default
            #line hidden
            
            #line 15 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 if (FOM.ModelIdentification.Version != null) { 
            
            #line default
            #line hidden
            
            #line 16 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOMParser.FormatAsComment(FOM.ModelIdentification.Version, "Version: ")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 17 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } 
            
            #line default
            #line hidden
            
            #line 18 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 if (FOM.ModelIdentification.Description != null) { 
            
            #line default
            #line hidden
            
            #line 19 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOMParser.FormatAsComment(FOM.ModelIdentification.Description, "Description: ")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 20 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } 
            
            #line default
            #line hidden
            
            #line 21 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 if (FOM.ModelIdentification.Purpose != null) { 
            
            #line default
            #line hidden
            
            #line 22 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOMParser.FormatAsComment(FOM.ModelIdentification.Purpose, "Purpose: ")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 23 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n#pragma once\r\n\r\n#include <vector>\r\n#include <ostream>\r\n#include <cassert>\r\n#inc" +
                    "lude <new>\r\n#include <utility>\r\n#include <type_traits>\r\n\r\n");
            
            #line 34 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.GetPredefinedTypeIncludes(FOMParser.FileContext.kDataTypes)));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 36 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

foreach (var namespacePart in FOM.Namespace)
{

            
            #line default
            #line hidden
            this.Write("namespace ");
            
            #line 40 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespacePart));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 41 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n// define placement_new in case some other header has redefined operator new to" +
                    " sth. different (e.g. MS crtdbg)\r\n#ifndef _PLACEMENT_NEW_DEFINED\r\n#pragma push_m" +
                    "acro(\"new\")\r\n#undef new\r\ntemplate <class X, typename ... Types>\r\ninline X* place" +
                    "ment_new(void* addr, Types&& ... args)\r\n{\r\n  return new (addr) X(std::forward<Ty" +
                    "pes>(args)...);\r\n}\r\n#pragma pop_macro(\"new\")\r\n#define _PLACEMENT_NEW_DEFINED\r\n#e" +
                    "ndif\r\n\r\n// define our own simplified \'optional\' types, similar to but independen" +
                    "t of std::optional (since C++17) or boost::optional\r\n#pragma warning(push)\r\n#pra" +
                    "gma warning(disable: 4324) // MSVC: \'struct_name\' : structure was padded due to " +
                    "__declspec(align())\r\ntemplate< typename T > struct optional\r\n{\r\n  static_assert(" +
                    "!std::is_reference< T >::value,\r\n    \"reference is not supported as optional val" +
                    "ue\");\r\n  // constructors\r\n  optional() : _valid(false) {}\r\n  optional(const opti" +
                    "onal& rhs): _valid(rhs._valid) { create(rhs); }\r\n  optional(optional&& rhs): _va" +
                    "lid(rhs._valid) { create(std::forward< optional >(rhs)); }\r\n  optional(const T& " +
                    "w): _valid(true) { create(w); }\r\n  template<typename Other>\r\n  optional(const Ot" +
                    "her& w): _valid(true) { create(w); }\r\n\r\n  // destructor\r\n  ~optional() { if(_val" +
                    "id) destroy(); }\r\n\r\n  // check for value presence\r\n  bool operator ! () const { " +
                    "return !_valid; }\r\n  explicit operator bool() const { return _valid; }\r\n\r\n  // a" +
                    "ssign\r\n  optional& operator = (optional const& rhs) { return assign(rhs); }\r\n  o" +
                    "ptional& operator = (optional&& rhs) { return assign(rhs); }\r\n  optional& operat" +
                    "or = (T const& w) { return assign(w); }\r\n\r\n  // get value\r\n  T const& operator *" +
                    " () const { return *get(); }\r\n  T& operator * () { return *get(); }\r\n  T const* " +
                    "operator -> () const { return get(); }\r\n  T* operator -> () { return get(); }\r\np" +
                    "rivate:\r\n  template<typename Other>\r\n  void create(const Other& w) {\r\n    placem" +
                    "ent_new<T>(_value, w);\r\n  }\r\n  void create(T&& w) {\r\n    placement_new<T>(_value" +
                    ", std::forward< T >(w));\r\n  }\r\n  void create(const optional& rhs) {\r\n    if(_val" +
                    "id) create(*rhs.get());\r\n  }\r\n  void create(optional&& rhs) {\r\n    if(_valid) cr" +
                    "eate(std::move(*rhs.get()));\r\n  }\r\n  void destroy() {\r\n    get()->~T();\r\n  }\r\n  " +
                    "T const* get() const {\r\n    assert(_valid && \"no optional value\");\r\n    return r" +
                    "einterpret_cast< const T* >(_value);\r\n  }\r\n  T* get() {\r\n    assert(_valid && \"n" +
                    "o optional value\");\r\n    return reinterpret_cast< T* >(_value);\r\n  }\r\n  void cle" +
                    "anup() {\r\n    destroy(); _valid = false;\r\n  }\r\n  optional& assign(const T& w) {\r" +
                    "\n    if(_valid) *get() = w;\r\n    else create(w), _valid = true;\r\n    return *thi" +
                    "s;\r\n  }\r\n  optional& assign(T&& w) {\r\n    if(_valid) *get() = w;\r\n    else creat" +
                    "e(std::forward(w)), _valid = true;\r\n    return *this;\r\n  }\r\n  optional& assign(c" +
                    "onst optional& rhs) {\r\n    if(rhs._valid) return assign(*rhs.get());\r\n    if(!_v" +
                    "alid) return *this;\r\n    cleanup();\r\n    return *this;\r\n  }\r\n  optional& assign(" +
                    "optional&& rhs) {\r\n    if(rhs._valid) return assign(std::move(*rhs.get()));\r\n   " +
                    " if(!_valid) return *this;\r\n    cleanup();\r\n    return *this;\r\n  }\r\n  bool _vali" +
                    "d;\r\n  alignas(alignof(T)) uint8_t _value[sizeof(T)];\r\n};\r\n\r\ntemplate< typename T" +
                    " > struct optional<const T&>\r\n{\r\n  // constructors\r\n  optional() : _valid(false)" +
                    " {}\r\n  optional(const optional& rhs): _valid(rhs._valid), _pointer(rhs._pointer)" +
                    " { }\r\n  optional(optional&& rhs): _valid(rhs._valid), _pointer(rhs._pointer) { }" +
                    "\r\n  optional(const T& rhs): _valid(true), _pointer(&rhs) { }\r\n  template<typenam" +
                    "e Other>\r\n  optional(const Other& rhs): _valid(true), _pointer(&rhs) { }\r\n\r\n  //" +
                    " destructor\r\n  ~optional() { }\r\n\r\n  // check for value presence\r\n  bool operator" +
                    " ! () const { return !_valid; }\r\n  explicit operator bool() const { return _vali" +
                    "d; }\r\n\r\n  // assign\r\n  optional& operator = (const optional& rhs) {\r\n    _valid " +
                    "= rhs._valid;\r\n    _pointer = rhs._pointer;\r\n    return *this;\r\n  }\r\n  //optiona" +
                    "l& operator = (optional&& rhs) { return assign(rhs); }\r\n  optional& operator = (" +
                    "const T& w) {\r\n    _valid = true;\r\n    _pointer = &w;\r\n    return *this;\r\n  }\r\n " +
                    " // get value\r\n  T const& operator * () const { return *get(); }\r\n  T const* ope" +
                    "rator -> () const { return get(); }\r\nprivate:\r\n  const T* get() const {\r\n    ass" +
                    "ert(_valid && \"no optional value\");\r\n    return _pointer;\r\n  }\r\n  bool _valid;\r\n" +
                    "  const T* _pointer = nullptr;\r\n};\r\n#pragma warning(pop)\r\n\r\n// extended receive " +
                    "order type, includes \'interpolated\' for application-generated timestamps\r\nenum c" +
                    "lass OrderType { RECEIVE, TIMESTAMP, INTERPOLATED };\r\n\r\ntemplate<typename char_t" +
                    "ype, typename traits_type>\r\nstd::basic_ostream<char_type, traits_type>&\r\noperato" +
                    "r<<(std::basic_ostream<char_type, traits_type>& os, OrderType value)\r\n{\r\n  switc" +
                    "h (value)\r\n  {\r\n    case OrderType::RECEIVE: os << \"RECEIVE\"; break;\r\n    case O" +
                    "rderType::TIMESTAMP: os << \"TIMESTAMP\"; break;\r\n    case OrderType::INTERPOLATED" +
                    ": os << \"INTERPOLATED\"; break;\r\n  }\r\n  return os;\r\n}\r\n\r\ninline std::string to_st" +
                    "ring(OrderType value)\r\n{\r\n  switch (value)\r\n  {\r\n    case OrderType::RECEIVE: re" +
                    "turn \"RECEIVE\";\r\n    case OrderType::TIMESTAMP: return \"TIMESTAMP\";\r\n    case Or" +
                    "derType::INTERPOLATED: return \"INTERPOLATED\";\r\n  }\r\n}\r\n\r\ninline std::wstring to_" +
                    "wstring(OrderType value)\r\n{\r\n  switch (value)\r\n  {\r\n    case OrderType::RECEIVE:" +
                    " return L\"RECEIVE\";\r\n    case OrderType::TIMESTAMP: return L\"TIMESTAMP\";\r\n    ca" +
                    "se OrderType::INTERPOLATED: return L\"INTERPOLATED\";\r\n  }\r\n}\r\n");
            
            #line 219 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.DataTypeForwardDeclarations));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 222 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

foreach (var dataType in FOM.DataTypes)
{
  if (dataType is FOMParser.SimpleDataType && dataType.Generate)
  {
    var simpleDataType = dataType as FOMParser.SimpleDataType;
    if (dataType.Comment != null && dataType.Comment != "")
    {
            
            #line default
            #line hidden
            
            #line 230 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Comment));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 231 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write("typedef ");
            
            #line 232 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleDataType.Representation.CPPType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 232 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleDataType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 234 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
} // if (dataType is FOMParser.SimpleDataType)
  else if (dataType is FOMParser.FixedRecordDataType)
  {
    var fixedRecordDataType = dataType as FOMParser.FixedRecordDataType;
    if (dataType.Comment != null && dataType.Comment != "")
    {
            
            #line default
            #line hidden
            
            #line 240 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedRecordDataType.Comment));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 241 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
  } 
            
            #line default
            #line hidden
            this.Write("class ");
            
            #line 242 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedRecordDataType.Name));
            
            #line default
            #line hidden
            
            #line 242 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedRecordDataType.BaseClass != null ? " : public " + fixedRecordDataType.BaseClass.Name : ""));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n  public:\r\n    virtual ~");
            
            #line 245 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedRecordDataType.Name));
            
            #line default
            #line hidden
            this.Write("() noexcept {}\r\n");
            
            #line 246 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 if (fixedRecordDataType.BaseClass == null) { 
            
            #line default
            #line hidden
            this.Write("    virtual uint32_t getVersion() const = 0;\r\n");
            
            #line 248 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
  } 
            
            #line default
            #line hidden
            
            #line 249 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 foreach (var field in fixedRecordDataType.Fields) { 
            
            #line default
            #line hidden
            this.Write("    virtual void Set");
            
            #line 250 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 250 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.DataType.ParameterCppType));
            
            #line default
            #line hidden
            this.Write(" value) = 0;\r\n");
            
            #line 251 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 if (field.DataType is FOMParser.ArrayDataType) {
     var arrayDataType = field.DataType as FOMParser.ArrayDataType;

            
            #line default
            #line hidden
            this.Write("    virtual void Set");
            
            #line 254 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("(const ");
            
            #line 254 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arrayDataType.DataType.CPPType));
            
            #line default
            #line hidden
            this.Write("* value, size_t size) = 0;\r\n");
            
            #line 255 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    virtual ");
            
            #line 256 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.DataType.ReturnCppType));
            
            #line default
            #line hidden
            this.Write(" Get");
            
            #line 256 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("() const = 0;\r\n    virtual bool Is");
            
            #line 257 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("Available() const = 0;\r\n");
            
            #line 258 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } // foreach fixedRecordDataType.Fields 
            
            #line default
            #line hidden
            this.Write("\r\n}; // class ");
            
            #line 260 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 262 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

  } // if (dataType is FOMParser.FixedRecordDataType)
  else if (dataType is FOMParser.EnumeratedDataType && dataType.Generate)
  {
    var enumeratedDataType = dataType as FOMParser.EnumeratedDataType;

            
            #line default
            #line hidden
            this.Write("enum class ");
            
            #line 268 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 268 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumeratedDataType.Representation.CPPType));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 270 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    foreach (var enumerator in enumeratedDataType.Enumerators.Values)
    {

            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 274 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 274 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Value));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 275 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    } // foreach enumeratedDataType.Enumerators.Values

            
            #line default
            #line hidden
            this.Write("}; // enum ");
            
            #line 278 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\r\ntemplate<typename char_type, typename traits_type>\r\nstd::basic_ostream<char_t" +
                    "ype, traits_type>&\r\noperator<<(std::basic_ostream<char_type, traits_type>& os, ");
            
            #line 282 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(" value)\r\n{\r\n  switch (value)\r\n  {\r\n");
            
            #line 286 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    foreach (var enumerator in enumeratedDataType.Enumerators.Values)
    {

            
            #line default
            #line hidden
            this.Write("    case ");
            
            #line 290 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("::");
            
            #line 290 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Name));
            
            #line default
            #line hidden
            this.Write(": os << \"");
            
            #line 290 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Name));
            
            #line default
            #line hidden
            this.Write("\"; break;\r\n");
            
            #line 291 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    } // foreach enumeratedDataType.Enumerators.Values

            
            #line default
            #line hidden
            this.Write("    default: os << \"<invalid ");
            
            #line 294 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(">\"; break;\r\n  }\r\n  return os;\r\n}\r\n\r\ninline std::string to_string(");
            
            #line 299 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(" value)\r\n{\r\n  switch (value)\r\n  {\r\n");
            
            #line 303 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    foreach (var enumerator in enumeratedDataType.Enumerators.Values)
    {

            
            #line default
            #line hidden
            this.Write("    case ");
            
            #line 307 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("::");
            
            #line 307 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Name));
            
            #line default
            #line hidden
            this.Write(": return \"");
            
            #line 307 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Name));
            
            #line default
            #line hidden
            this.Write("\";\r\n");
            
            #line 308 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    } // foreach enumeratedDataType.Enumerators.Values

            
            #line default
            #line hidden
            this.Write("    default: return \"<invalid ");
            
            #line 311 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(">\";\r\n  }\r\n}\r\n\r\ninline std::wstring to_wstring(");
            
            #line 315 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(" value)\r\n{\r\n  switch (value)\r\n  {\r\n");
            
            #line 319 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    foreach (var enumerator in enumeratedDataType.Enumerators.Values)
    {

            
            #line default
            #line hidden
            this.Write("    case ");
            
            #line 323 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("::");
            
            #line 323 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Name));
            
            #line default
            #line hidden
            this.Write(": return L\"");
            
            #line 323 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Name));
            
            #line default
            #line hidden
            this.Write("\";\r\n");
            
            #line 324 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    } // foreach enumeratedDataType.Enumerators.Values

            
            #line default
            #line hidden
            this.Write("    default: return L\"<invalid ");
            
            #line 327 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(">\";\r\n  }\r\n}\r\n\r\n");
            
            #line 331 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

  } // if (dataType is FOMParser.EnumeratedDataType)
} // foreach (var dataType in FOM.DataTypes.Values)

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 336 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

foreach (var namespacePart in FOM.Namespace)
{

            
            #line default
            #line hidden
            this.Write("} // namespace ");
            
            #line 340 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespacePart));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 341 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
  } 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class FOMDataTypesHeaderBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
