// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FOMCodeGen
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class FOMDataTypesHeader : FOMDataTypesHeaderBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n// Code automatically generated by FOMCodeGen version ");
            
            #line 7 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.GeneratorVersion));
            
            #line default
            #line hidden
            this.Write(" from ");
            
            #line 7 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(System.IO.Path.GetFileName(FOM.Filename)));
            
            #line default
            #line hidden
            this.Write(", do not edit\r\n\r\n");
            
            #line 9 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 if (FOM.ModelIdentification.Name != null) { 
            
            #line default
            #line hidden
            
            #line 10 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOMParser.FormatAsComment(FOM.ModelIdentification.Name, "Name: ")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 11 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } 
            
            #line default
            #line hidden
            
            #line 12 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 if (FOM.ModelIdentification.Copyright != null) { 
            
            #line default
            #line hidden
            
            #line 13 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOMParser.FormatAsComment(FOM.ModelIdentification.Copyright, "Copyright: ")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 14 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } 
            
            #line default
            #line hidden
            
            #line 15 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 if (FOM.ModelIdentification.Version != null) { 
            
            #line default
            #line hidden
            
            #line 16 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOMParser.FormatAsComment(FOM.ModelIdentification.Version, "Version: ")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 17 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } 
            
            #line default
            #line hidden
            
            #line 18 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 if (FOM.ModelIdentification.Description != null) { 
            
            #line default
            #line hidden
            
            #line 19 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOMParser.FormatAsComment(FOM.ModelIdentification.Description, "Description: ")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 20 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } 
            
            #line default
            #line hidden
            
            #line 21 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 if (FOM.ModelIdentification.Purpose != null) { 
            
            #line default
            #line hidden
            
            #line 22 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOMParser.FormatAsComment(FOM.ModelIdentification.Purpose, "Purpose: ")));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 23 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n#pragma once\r\n\r\n#include <vector>\r\n#include <ostream>\r\n#include <cassert>\r\n#inc" +
                    "lude <new>\r\n#include <utility>\r\n#include <type_traits>\r\n\r\n");
            
            #line 34 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.GetPredefinedTypeIncludes(FOMParser.FileContext.kDataTypes)));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 36 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

foreach (var namespacePart in FOM.Namespace)
{

            
            #line default
            #line hidden
            this.Write("namespace ");
            
            #line 40 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespacePart));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 41 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n// define placement_new in case some other header has redefined operator new to" +
                    " sth. different (e.g. MS crtdbg)\r\n#ifndef _PLACEMENT_NEW_DEFINED\r\n#pragma push_m" +
                    "acro(\"new\")\r\n#undef new\r\ntemplate <class X, typename ... Types>\r\ninline X* place" +
                    "ment_new(void* addr, Types&& ... args)\r\n{\r\n  return new (addr) X(std::forward<Ty" +
                    "pes>(args)...);\r\n}\r\n#pragma pop_macro(\"new\")\r\n#define _PLACEMENT_NEW_DEFINED\r\n#e" +
                    "ndif\r\n\r\n// define our own simplified \'optional\' types, similar to but independen" +
                    "t of std::optional (since C++17) or boost::optional\r\n\r\nstruct nullopt_t\n{\n  enum" +
                    " class _Construct { _Token };\n  explicit constexpr nullopt_t(_Construct) { }\n};\n" +
                    "\n/// Tag to disengage optional objects.\nconstexpr nullopt_t nullopt { nullopt_t:" +
                    ":_Construct::_Token };\n\r\nclass bad_optional_access : public std::exception\r\n{\r\np" +
                    "ublic:\r\n  virtual const char* what() const noexcept override { return (\"Bad opti" +
                    "onal access\"); }\r\n};\r\n\r\n// (empty) base template\r\ntemplate<typename T, bool=std:" +
                    ":is_class<T>::value > struct optional {};\r\n\r\n// Specialization for classes and s" +
                    "tructs used by-value, w. in-place copy-construction.\r\n// This implementation is " +
                    "limited to copy-constructible and default-destructible classes!\r\ntemplate<typena" +
                    "me T> struct optional<T, true>\r\n{\r\n  static_assert(!std::is_reference< T >::valu" +
                    "e, \"reference is not supported as optional value\");\r\n  // constructors\r\n  option" +
                    "al() noexcept : _valid(false) {}\r\n  constexpr optional(nullopt_t) noexcept : _va" +
                    "lid(false) {}\r\n  optional(const optional& rhs): _valid(rhs._valid) { create(rhs)" +
                    "; }\r\n  optional(const T& w): _valid(true) { create(w); }\r\n  template<typename Ot" +
                    "her>\r\n  optional(const Other& w): _valid(true) { create(w); }\r\n  template<typena" +
                    "me Other>\r\n  optional(const optional<Other>& rhs): _valid(rhs.has_value()) { if " +
                    "(rhs.has_value()) create(rhs.value()); }\r\n\r\n  // destructor\r\n  ~optional() { if(" +
                    "_valid) destroy(); }\r\n\r\n  // check for value presence\r\n  bool has_value() const " +
                    "{ return _valid; }\r\n  explicit operator bool() const { return _valid; }\r\n  bool " +
                    "operator ! () const { return !_valid; }\r\n\r\n  // assign\r\n  optional& operator = (" +
                    "optional const& rhs) { return assign(rhs); }\r\n  optional& operator = (T const& w" +
                    ") { return assign(w); }\r\n\r\n  // unchecked access to value\r\n  const T& operator *" +
                    " () const & { return *get(); }\r\n  T& operator * () & { return *get(); }\r\n  T con" +
                    "st* operator -> () const { return get(); }\r\n  T* operator -> () { return get(); " +
                    "}\r\n  // checked access to value\r\n  const T& value() const & {\r\n    if (!_valid) " +
                    "{\r\n      throw bad_optional_access{};\r\n    }\r\n    return *get();\r\n  }\r\n  T& valu" +
                    "e() & {\r\n    if (!_valid) {\r\n      throw bad_optional_access{};\r\n    }\r\n    retu" +
                    "rn *get();\r\n  }\r\nprivate:\r\n  template<typename Other>\r\n  void create(const Other" +
                    "& w) { placement_new<T>(&_value, w); }\r\n  void create(const optional& rhs) { if(" +
                    "_valid) create(*rhs.get()); }\r\n  void destroy() { get()->~T(); }\r\n  T const* get" +
                    "() const { assert(_valid && \"no optional value\"); return reinterpret_cast< const" +
                    " T* >(&_value); }\r\n  T* get() { assert(_valid && \"no optional value\"); return re" +
                    "interpret_cast< T* >(&_value); }\r\n  void cleanup() { destroy(); _valid = false; " +
                    "}\r\n  optional& assign(const T& w) {\r\n    if(_valid) *get() = w;\r\n    else create" +
                    "(w), _valid = true;\r\n    return *this;\r\n  }\r\n  optional& assign(const optional& " +
                    "rhs) {\r\n    if(rhs._valid) return assign(*rhs.get());\r\n    if(!_valid) return *t" +
                    "his;\r\n    cleanup();\r\n    return *this;\r\n  }\r\n  bool _valid;\r\n\tunion {\r\n    type" +
                    "name std::remove_cv<T>::type _value;\r\n  };\r\n};\r\n// Specialization for const-ref " +
                    "parameters, implemented by holding a pointer to the original variable.\r\n// Note " +
                    "that non-const references are *not* supported (but could be easily added)!\r\ntemp" +
                    "late<typename T> struct optional<const T&, false>\r\n{\r\n  // constructors\r\n  optio" +
                    "nal() noexcept : _valid(false), _pointer() {}\r\n  constexpr optional(nullopt_t) n" +
                    "oexcept : _valid(false), _pointer() {}\r\n  optional(const optional& rhs): _valid(" +
                    "rhs._valid), _pointer(rhs._pointer) { }\r\n  optional(const T& rhs) noexcept : _va" +
                    "lid(true), _pointer(&rhs) { }\r\n  template<typename Other>\r\n  optional(const Othe" +
                    "r& rhs): _valid(true), _pointer(&rhs) { }\r\n  template<typename Other>\r\n  optiona" +
                    "l(const optional<Other>& rhs): _valid(rhs.has_value()), _pointer(rhs.operator->(" +
                    ")) { }\r\n\r\n  // destructor\r\n  ~optional() { }\r\n\r\n  // check for value presence\r\n " +
                    " bool has_value() const { return _valid; }\r\n  explicit operator bool() const { r" +
                    "eturn _valid; }\r\n  bool operator ! () const { return !_valid; }\r\n\r\n  // assign\r\n" +
                    "  optional& operator = (const optional& rhs) {\r\n    _valid = rhs._valid;\r\n    _p" +
                    "ointer = rhs._pointer;\r\n    return *this;\r\n  }\r\n  optional& operator = (const T&" +
                    " w) {\r\n    _valid = true;\r\n    _pointer = &w;\r\n    return *this;\r\n  }\r\n  // unch" +
                    "ecked access to value\r\n  T const& operator * () const & { return *get(); }\r\n  T " +
                    "const* operator -> () const & { return get(); }\r\n  // checked access to value\r\n " +
                    " const T& value() const & {\r\n    if (!_valid) {\r\n      throw bad_optional_access" +
                    "{};\r\n    }\r\n    return *get();\r\n  }\r\n  T& value() & {\r\n    if (!_valid) {\r\n     " +
                    " throw bad_optional_access{};\r\n    }\r\n    return *get();\r\n  }\r\nprivate:\r\n  const" +
                    " T* get() const {\r\n    assert(_valid && \"no optional value\");\r\n    return _point" +
                    "er;\r\n  }\r\n  bool _valid;\r\n  const T* _pointer = nullptr;\r\n};\r\n// Specialization " +
                    "for everything else, which includes fundamental types and pointer types.\r\ntempla" +
                    "te<typename T> struct optional<T, false>\r\n{\r\n  // constructors\r\n  optional() noe" +
                    "xcept : _valid(false), _value() {}\r\n  constexpr optional(nullopt_t) noexcept : _" +
                    "valid(false), _value() {}\r\n  optional(const optional& rhs): _valid(rhs._valid), " +
                    "_value(rhs._value) { }\r\n  optional(const T& rhs) : _valid(true), _value(rhs) { }" +
                    "\r\n  template<typename Other>\r\n  optional(const Other& rhs): _valid(true), _value" +
                    "(rhs) { }\r\n  template<typename Other>\r\n  optional(const optional<Other>& rhs): _" +
                    "valid(rhs.has_value()), _value(rhs.operator*()) { }\r\n\r\n  // destructor\r\n  ~optio" +
                    "nal() { }\r\n\r\n  // check for value presence\r\n  bool has_value() const { return _v" +
                    "alid; }\r\n  explicit operator bool() const { return _valid; }\r\n  bool operator ! " +
                    "() const { return !_valid; }\r\n\r\n  // assign\r\n  optional& operator = (const optio" +
                    "nal& rhs) {\r\n    _valid = rhs._valid;\r\n    _value = rhs._value;\r\n    return *thi" +
                    "s;\r\n  }\r\n  optional& operator = (const T& w) {\r\n    _valid = true;\r\n    _value =" +
                    " w;\r\n    return *this;\r\n  }\r\n  // unchecked access to value\r\n  T const& operator" +
                    " * () const & { return _value; }\r\n  T const* operator -> () const { return &_val" +
                    "ue; }\r\n  // checked access to value\r\n  const T& value() const & {\r\n    if (!_val" +
                    "id) {\r\n      throw bad_optional_access{};\r\n    }\r\n    return _value;\r\n  }\r\n  T& " +
                    "value() & {\r\n    if (!_valid) {\r\n      throw bad_optional_access{};\r\n    }\r\n    " +
                    "return _value;\r\n  }\r\nprivate:\r\n  bool _valid;\r\n  T _value;\r\n};\r\n\r\nclass InvalidL" +
                    "ogicalTime : public std::logic_error\r\n{\r\n  public:\r\n    InvalidLogicalTime(const" +
                    " std::string& what_arg) : std::logic_error(what_arg) {}\r\n};\r\n\r\nclass NotConnecte" +
                    "d : public std::logic_error\r\n{\r\n  public:\r\n    NotConnected() : std::logic_error" +
                    "(\"not connected\") {}\r\n};\r\n\r\nclass NotInitialized : public std::logic_error\r\n{\r\n " +
                    " public:\r\n    NotInitialized() : std::logic_error(\"class registry not initialize" +
                    "d\") {}\r\n};\r\n\r\n// extended receive order type, includes \'interpolated\' for applic" +
                    "ation-generated timestamps\r\nenum class OrderType { RECEIVE, TIMESTAMP, INTERPOLA" +
                    "TED };\r\n\r\ntemplate<typename char_type, typename traits_type>\r\nstd::basic_ostream" +
                    "<char_type, traits_type>&\r\noperator<<(std::basic_ostream<char_type, traits_type>" +
                    "& os, OrderType value)\r\n{\r\n  switch (value)\r\n  {\r\n    case OrderType::RECEIVE: o" +
                    "s << \"RECEIVE\"; break;\r\n    case OrderType::TIMESTAMP: os << \"TIMESTAMP\"; break;" +
                    "\r\n    case OrderType::INTERPOLATED: os << \"INTERPOLATED\"; break;\r\n  }\r\n  return " +
                    "os;\r\n}\r\n\r\ninline std::string to_string(OrderType value)\r\n{\r\n  switch (value)\r\n  " +
                    "{\r\n    case OrderType::RECEIVE: return \"RECEIVE\";\r\n    case OrderType::TIMESTAMP" +
                    ": return \"TIMESTAMP\";\r\n    case OrderType::INTERPOLATED: return \"INTERPOLATED\";\r" +
                    "\n  }\r\n}\r\n\r\ninline std::wstring to_wstring(OrderType value)\r\n{\r\n  switch (value)\r" +
                    "\n  {\r\n    case OrderType::RECEIVE: return L\"RECEIVE\";\r\n    case OrderType::TIMES" +
                    "TAMP: return L\"TIMESTAMP\";\r\n    case OrderType::INTERPOLATED: return L\"INTERPOLA" +
                    "TED\";\r\n  }\r\n}\r\n");
            
            #line 300 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.DataTypeForwardDeclarations));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 303 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

foreach (var dataType in FOM.DataTypes)
{
  if (dataType is FOMParser.SimpleDataType && dataType.Generate)
  {
    var simpleDataType = dataType as FOMParser.SimpleDataType;
    if (dataType.Comment != null && dataType.Comment != "")
    {
            
            #line default
            #line hidden
            
            #line 311 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Comment));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 312 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write("typedef ");
            
            #line 313 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleDataType.Representation.CPPType));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 313 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(simpleDataType.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n\r\n");
            
            #line 315 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
} // if (dataType is FOMParser.SimpleDataType)
  else if (dataType is FOMParser.FixedRecordDataType)
  {
    var fixedRecordDataType = dataType as FOMParser.FixedRecordDataType;
    if (dataType.Comment != null && dataType.Comment != "")
    {
            
            #line default
            #line hidden
            
            #line 321 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedRecordDataType.Comment));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 322 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
  } 
            
            #line default
            #line hidden
            this.Write("class ");
            
            #line 323 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedRecordDataType.Name));
            
            #line default
            #line hidden
            
            #line 323 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedRecordDataType.BaseClass != null ? " : public " + fixedRecordDataType.BaseClass.Name : ""));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n  public:\r\n    virtual ~");
            
            #line 326 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedRecordDataType.Name));
            
            #line default
            #line hidden
            this.Write("() noexcept {}\r\n");
            
            #line 327 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 if (fixedRecordDataType.BaseClass == null) { 
            
            #line default
            #line hidden
            this.Write("    virtual uint32_t getVersion() const = 0;\r\n");
            
            #line 329 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
  } 
            
            #line default
            #line hidden
            
            #line 330 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 foreach (var field in fixedRecordDataType.Fields) { 
            
            #line default
            #line hidden
            this.Write("    virtual void Set");
            
            #line 331 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 331 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.DataType.ParameterCppType));
            
            #line default
            #line hidden
            this.Write(" value) = 0;\r\n");
            
            #line 332 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 if (field.DataType is FOMParser.ArrayDataType) {
     var arrayDataType = field.DataType as FOMParser.ArrayDataType;

            
            #line default
            #line hidden
            this.Write("    virtual void Set");
            
            #line 335 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("(const ");
            
            #line 335 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arrayDataType.DataType.CPPType));
            
            #line default
            #line hidden
            this.Write("* value, size_t size) = 0;\r\n");
            
            #line 336 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    virtual ");
            
            #line 337 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.DataType.ReturnCppType));
            
            #line default
            #line hidden
            this.Write(" Get");
            
            #line 337 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("() const = 0;\r\n    virtual bool Is");
            
            #line 338 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("Available() const = 0;\r\n");
            
            #line 339 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
 } // foreach fixedRecordDataType.Fields 
            
            #line default
            #line hidden
            this.Write("\r\n}; // class ");
            
            #line 341 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 343 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

  } // if (dataType is FOMParser.FixedRecordDataType)
  else if (dataType is FOMParser.EnumeratedDataType && dataType.Generate)
  {
    var enumeratedDataType = dataType as FOMParser.EnumeratedDataType;

            
            #line default
            #line hidden
            this.Write("enum class ");
            
            #line 349 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 349 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumeratedDataType.Representation.CPPType));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n");
            
            #line 351 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    foreach (var enumerator in enumeratedDataType.Enumerators.Values)
    {

            
            #line default
            #line hidden
            this.Write("      ");
            
            #line 355 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Name));
            
            #line default
            #line hidden
            this.Write(" = ");
            
            #line 355 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Value));
            
            #line default
            #line hidden
            this.Write(",\r\n");
            
            #line 356 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    } // foreach enumeratedDataType.Enumerators.Values

            
            #line default
            #line hidden
            this.Write("}; // enum ");
            
            #line 359 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\r\ntemplate<typename char_type, typename traits_type>\r\nstd::basic_ostream<char_t" +
                    "ype, traits_type>&\r\noperator<<(std::basic_ostream<char_type, traits_type>& os, ");
            
            #line 363 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(" value)\r\n{\r\n  switch (value)\r\n  {\r\n");
            
            #line 367 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    foreach (var enumerator in enumeratedDataType.Enumerators.Values)
    {

            
            #line default
            #line hidden
            this.Write("    case ");
            
            #line 371 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("::");
            
            #line 371 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Name));
            
            #line default
            #line hidden
            this.Write(": os << \"");
            
            #line 371 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Name));
            
            #line default
            #line hidden
            this.Write("\"; break;\r\n");
            
            #line 372 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    } // foreach enumeratedDataType.Enumerators.Values

            
            #line default
            #line hidden
            this.Write("    default: os << \"<invalid ");
            
            #line 375 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(">\"; break;\r\n  }\r\n  return os;\r\n}\r\n\r\ninline std::string to_string(");
            
            #line 380 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(" value)\r\n{\r\n  switch (value)\r\n  {\r\n");
            
            #line 384 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    foreach (var enumerator in enumeratedDataType.Enumerators.Values)
    {

            
            #line default
            #line hidden
            this.Write("    case ");
            
            #line 388 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("::");
            
            #line 388 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Name));
            
            #line default
            #line hidden
            this.Write(": return \"");
            
            #line 388 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Name));
            
            #line default
            #line hidden
            this.Write("\";\r\n");
            
            #line 389 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    } // foreach enumeratedDataType.Enumerators.Values

            
            #line default
            #line hidden
            this.Write("    default: return \"<invalid ");
            
            #line 392 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(">\";\r\n  }\r\n}\r\n\r\ninline std::wstring to_wstring(");
            
            #line 396 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(" value)\r\n{\r\n  switch (value)\r\n  {\r\n");
            
            #line 400 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    foreach (var enumerator in enumeratedDataType.Enumerators.Values)
    {

            
            #line default
            #line hidden
            this.Write("    case ");
            
            #line 404 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("::");
            
            #line 404 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Name));
            
            #line default
            #line hidden
            this.Write(": return L\"");
            
            #line 404 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(enumerator.Name));
            
            #line default
            #line hidden
            this.Write("\";\r\n");
            
            #line 405 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

    } // foreach enumeratedDataType.Enumerators.Values

            
            #line default
            #line hidden
            this.Write("    default: return L\"<invalid ");
            
            #line 408 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(">\";\r\n  }\r\n}\r\n\r\n");
            
            #line 412 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

  } // if (dataType is FOMParser.EnumeratedDataType)
} // foreach (var dataType in FOM.DataTypes.Values)

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 417 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"

foreach (var namespacePart in FOM.Namespace)
{

            
            #line default
            #line hidden
            this.Write("} // namespace ");
            
            #line 421 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespacePart));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 422 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMDataTypesHeader.tt"
  } 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class FOMDataTypesHeaderBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
