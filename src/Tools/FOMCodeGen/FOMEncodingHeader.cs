// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FOMCodeGen
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class FOMEncodingHeader : FOMEncodingHeaderBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n// Code automatically generated from ");
            
            #line 7 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.Filename));
            
            #line default
            #line hidden
            this.Write(@", do not edit

#pragma once

#include <vector>
#include <cstring>

#include ""RTI/encoding/BasicDataElements.h""
#include ""RTI/encoding/HLAfixedRecord.h""
#include ""RTI/encoding/HLAfixedArray.h""
#include ""RTI/encoding/HLAvariableArray.h""
#include """);
            
            #line 18 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DataTypesHeaderFilename));
            
            #line default
            #line hidden
            this.Write("\"\r\n\r\n");
            
            #line 20 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"

foreach (var namespacePart in FOM.Namespace)
{

            
            #line default
            #line hidden
            this.Write("namespace ");
            
            #line 24 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespacePart));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 25 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 27 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"

foreach (var dataType in FOM.DataTypes.Values)
{
  if (dataType is FOMParser.FixedRecordDataType && dataType.Generate)
  {
    var fixedRecordDataType = dataType as FOMParser.FixedRecordDataType;
    if (dataType.Comment != null && dataType.Comment != "")
    {
            
            #line default
            #line hidden
            
            #line 35 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Comment));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 36 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
  } 
            
            #line default
            #line hidden
            this.Write("class ");
            
            #line 37 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedRecordDataType.Encoding));
            
            #line default
            #line hidden
            this.Write(" : public ");
            
            #line 37 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write(", public rti1516e::HLAfixedRecord\r\n{\r\n  public:\r\n    ");
            
            #line 40 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("Encoding() : rti1516e::HLAfixedRecord(");
            
            #line 40 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedRecordDataType.Version));
            
            #line default
            #line hidden
            this.Write(")\r\n    {\r\n");
            
            #line 42 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"

    foreach (var field in fixedRecordDataType.AllFields)
    {

            
            #line default
            #line hidden
            this.Write("      rti1516e::HLAfixedRecord::appendElementPointer(&m");
            
            #line 46 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 46 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Version));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 47 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"

    } // foreach fixedRecordDataType.Fields

            
            #line default
            #line hidden
            this.Write("    }\r\n    virtual ~");
            
            #line 51 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("Encoding()\r\n    {\r\n    }\r\n    uint32_t getVersion() const override { return rti15" +
                    "16e::HLAfixedRecord::getVersion(); }\r\n");
            
            #line 55 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
 foreach (var field in fixedRecordDataType.AllFields) { 
            
            #line default
            #line hidden
            this.Write("    void Set");
            
            #line 56 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 56 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.DataType.CPPType));
            
            #line default
            #line hidden
            this.Write(" value) override\r\n    {\r\n\t    m");
            
            #line 58 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write(".set(value);\r\n    }\r\n");
            
            #line 60 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
 if (field.DataType is FOMParser.ArrayDataType) {
     var arrayDataType = field.DataType as FOMParser.ArrayDataType;

            
            #line default
            #line hidden
            this.Write("    void Set");
            
            #line 63 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("(const ");
            
            #line 63 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(arrayDataType.DataType.CPPType));
            
            #line default
            #line hidden
            this.Write("* value, size_t size) override\r\n    {\r\n\t    m");
            
            #line 65 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write(".set(value, size);\r\n    }\r\n");
            
            #line 67 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 68 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.DataType.CPPType));
            
            #line default
            #line hidden
            this.Write(" Get");
            
            #line 68 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("() const override\r\n    {\r\n      if (getVersion() < ");
            
            #line 70 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Version));
            
            #line default
            #line hidden
            this.Write(")\r\n      {\r\n        throw rti1516e::EncoderException(L\"field \\\"");
            
            #line 72 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write("\\\" is not available in decoded record version \" + std::to_wstring(getVersion()));" +
                    "\r\n      }\r\n");
            
            #line 74 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
 if (field.DataType is FOMParser.EnumeratedDataType) { 
            
            #line default
            #line hidden
            this.Write("      return static_cast<");
            
            #line 75 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.DataType.CPPType));
            
            #line default
            #line hidden
            this.Write(">(m");
            
            #line 75 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write(".get());\r\n");
            
            #line 76 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("      return m");
            
            #line 77 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write(".get();\r\n");
            
            #line 78 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
 } // else (field.DataType is FOMParser.EnumeratedDataType) 
            
            #line default
            #line hidden
            this.Write("    }\r\n");
            
            #line 80 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
 } // foreach fixedRecordDataType.Fields 
            
            #line default
            #line hidden
            this.Write("\r\n  private:\r\n");
            
            #line 83 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"

    foreach (var field in fixedRecordDataType.AllFields)
    {

            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 87 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.DataType.Encoding));
            
            #line default
            #line hidden
            this.Write(" m");
            
            #line 87 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(field.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 88 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"

    } // foreach fixedRecordDataType.Fields

            
            #line default
            #line hidden
            this.Write("}; // class ");
            
            #line 91 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("Encoding\r\n\r\n");
            
            #line 93 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"

  } // if (dataType is FOMParser.FixedRecordDataType)
  else if (dataType is FOMParser.FixedArrayDataType && dataType.Generate)
  {
    var fixedArrayDataType = dataType as FOMParser.FixedArrayDataType;
    if (dataType.Comment != null && dataType.Comment != "")
    {
            
            #line default
            #line hidden
            
            #line 100 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Comment));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 101 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
  } 
            
            #line default
            #line hidden
            this.Write("class ");
            
            #line 102 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("Encoding : public rti1516e::HLAfixedArray\r\n{\r\n  public:\r\n    ");
            
            #line 105 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("Encoding()\r\n      : HLAfixedArray(");
            
            #line 106 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.DataType.Encoding));
            
            #line default
            #line hidden
            this.Write("(), ");
            
            #line 106 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.Cardinality));
            
            #line default
            #line hidden
            this.Write(")\r\n      , mData(");
            
            #line 107 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.Cardinality));
            
            #line default
            #line hidden
            this.Write(")\r\n    {\r\n      for (int i=0; i < ");
            
            #line 109 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.Cardinality));
            
            #line default
            #line hidden
            this.Write("; i++)\r\n      {\r\n        mEncoding[i].setDataPointer(&mData[i]);\r\n        setElem" +
                    "entPointer(i, &mEncoding[i]);\r\n      }\r\n    }\r\n    ");
            
            #line 115 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("Encoding(");
            
            #line 115 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.CPPType));
            
            #line default
            #line hidden
            this.Write(" data)\r\n      : HLAfixedArray(");
            
            #line 116 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.DataType.Encoding));
            
            #line default
            #line hidden
            this.Write("(), ");
            
            #line 116 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.Cardinality));
            
            #line default
            #line hidden
            this.Write(")\r\n      , mData(");
            
            #line 117 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.Cardinality));
            
            #line default
            #line hidden
            this.Write(")\r\n    {\r\n      set(data.data(), data.size());\r\n      for (int i=0;i<");
            
            #line 120 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.Cardinality));
            
            #line default
            #line hidden
            this.Write(";i++)\r\n      {\r\n        mEncoding[i].setDataPointer(&mData[i]);\r\n        setEleme" +
                    "ntPointer(i, &mEncoding[i]);\r\n      }\r\n    }\r\n    void set(");
            
            #line 126 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.CPPType));
            
            #line default
            #line hidden
            this.Write(" data) {\r\n      set(data.data(), data.size());\r\n    }\r\n    void set(const ");
            
            #line 129 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.DataType.CPPType));
            
            #line default
            #line hidden
            this.Write("* data, size_t size) \r\n    {\r\n      if (size <= ");
            
            #line 131 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.Cardinality));
            
            #line default
            #line hidden
            this.Write(") {\r\n        memcpy(mData.data(), data, size);\r\n      } else {\r\n        memcpy(mD" +
                    "ata.data(), data, ");
            
            #line 134 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.Cardinality));
            
            #line default
            #line hidden
            this.Write(");\r\n      }\r\n    }\r\n    ");
            
            #line 137 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.CPPType));
            
            #line default
            #line hidden
            this.Write(" get() const { return mData; }\r\n  private:\r\n    std::vector<");
            
            #line 139 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.DataType.CPPType));
            
            #line default
            #line hidden
            this.Write("> mData;\r\n    ");
            
            #line 140 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.DataType.Encoding));
            
            #line default
            #line hidden
            this.Write(" mEncoding[");
            
            #line 140 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(fixedArrayDataType.Cardinality));
            
            #line default
            #line hidden
            this.Write("];\r\n}; // class ");
            
            #line 141 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 143 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
  
  }
  else if (dataType is FOMParser.VariableArrayDataType && dataType.Generate)
  {
    var variableArrayDataType = dataType as FOMParser.VariableArrayDataType;
    if (dataType.Comment != null && dataType.Comment != "")
    {
            
            #line default
            #line hidden
            
            #line 150 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Comment));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 151 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
  } 
            
            #line default
            #line hidden
            this.Write("class ");
            
            #line 152 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("Encoding : public rti1516e::HLAvariableArray\r\n{\r\n  public:\r\n    ");
            
            #line 155 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("Encoding()\r\n      : HLAvariableArray(");
            
            #line 156 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableArrayDataType.DataType.Encoding));
            
            #line default
            #line hidden
            this.Write("())\r\n      , mData()\r\n    {\r\n    }\r\n    ");
            
            #line 160 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("Encoding(");
            
            #line 160 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableArrayDataType.CPPType));
            
            #line default
            #line hidden
            this.Write(" data)\r\n      : HLAvariableArray(");
            
            #line 161 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableArrayDataType.DataType.Encoding));
            
            #line default
            #line hidden
            this.Write("())\r\n      , mData(data)\r\n    {\r\n      update();\r\n    }\r\n    void set(");
            
            #line 166 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableArrayDataType.CPPType));
            
            #line default
            #line hidden
            this.Write(" data)\r\n    {\r\n      if (mData.size() != data.size()) {\r\n        mData = data;\r\n " +
                    "       update();\r\n      } else {\r\n        memcpy(mData.data(), data.data(), mDat" +
                    "a.size());\r\n      }\r\n    }\r\n    void set(const ");
            
            #line 175 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableArrayDataType.DataType.CPPType));
            
            #line default
            #line hidden
            this.Write("* data, size_t size)\r\n    {\r\n      if (mData.size() != size) {\r\n        mData.res" +
                    "ize(size);\r\n        update();\r\n      }\r\n      memcpy(mData.data(), data, size);\r" +
                    "\n    }\r\n    ");
            
            #line 183 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableArrayDataType.CPPType));
            
            #line default
            #line hidden
            this.Write(@" get() const { return mData; }
    void resize(size_t size)
    {
      mData.resize(size);
      update();
    }
    // resize buffer and encoder array before actually decoding 
    virtual size_t decodeFrom(const rti1516e::Octet* buffer, size_t bufferSize, size_t index) override
    {
      size_t newSize = decodedSize(buffer, bufferSize, index);
      resize(newSize);
      return HLAvariableArray::decodeFrom(buffer, bufferSize, index);
    }
  private:
    void update()
    {
      size_t size = mData.size();
      mEncoding.resize(size);
      for (size_t i=0; i<size; i++)
      {
        mEncoding[i].setDataPointer(&mData.data()[i]);
        if (i < HLAvariableArray::size()) {
          setElementPointer(i, &mEncoding[i]);
        } else {
          addElementPointer(&mEncoding[i]);
        }
      }
    }
    std::vector<");
            
            #line 211 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableArrayDataType.DataType.CPPType));
            
            #line default
            #line hidden
            this.Write("> mData;\r\n    std::vector<");
            
            #line 212 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(variableArrayDataType.DataType.Encoding));
            
            #line default
            #line hidden
            this.Write("> mEncoding;\r\n}; // class ");
            
            #line 213 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dataType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n");
            
            #line 215 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"

  } // if (dataType is FOMParser.ArrayDataType)
} // foreach (var dataType in FOM.DataTypes.Values)

            
            #line default
            #line hidden
            
            #line 219 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"

foreach (var namespacePart in FOM.Namespace)
{

            
            #line default
            #line hidden
            this.Write("} // namespace ");
            
            #line 223 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespacePart));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 224 "D:\vfs\CANoe\release\15\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMEncodingHeader.tt"
  } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class FOMEncodingHeaderBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
