// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FOMCodeGen
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class FOMObjectsHeader : FOMObjectsHeaderBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n// Code automatically generated by FOMCodeGen version ");
            
            #line 7 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.GeneratorVersion));
            
            #line default
            #line hidden
            this.Write(" from ");
            
            #line 7 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(System.IO.Path.GetFileName(FOM.Filename)));
            
            #line default
            #line hidden
            this.Write(@", do not edit
#pragma once

#include <vector>
#include <mutex>
#include ""RTI/Handle.h""
#include ""RTI/RTIambassador.h""
#include ""RTI/encoding/BasicDataElements.h""
#include ""RTI/encoding/HLAfixedRecord.h""
#include ""RTI/encoding/HLAfixedArray.h""
#include ""RTI/encoding/HLAvariableArray.h""
");
            
            #line 18 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
if (FOM.IsFloatTime) {
            
            #line default
            #line hidden
            this.Write("#include \"RTI/time/HLAloat64Time.h\"\r\n");
            
            #line 20 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("#include \"RTI/time/HLAinteger64Time.h\"\r\n");
            
            #line 22 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 24 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.GetPredefinedTypeIncludes(FOMParser.FileContext.kObjectHeader)));
            
            #line default
            #line hidden
            this.Write("\r\n#include \"");
            
            #line 25 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ObjectInterfacesHeaderFilename));
            
            #line default
            #line hidden
            this.Write("\"\r\n#include \"");
            
            #line 26 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(EncodingHeaderFilename));
            
            #line default
            #line hidden
            this.Write("\"\r\n\r\nclass ObjectClassRegistry;\r\n\r\n");
            
            #line 30 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"

foreach (var namespacePart in FOM.Namespace)
{

            
            #line default
            #line hidden
            this.Write("namespace ");
            
            #line 34 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespacePart));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 35 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\nclass ObjectClassRegistry;\r\n\r\n");
            
            #line 39 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 
foreach (var objectClass in FOM.ObjectClasses)
{

            
            #line default
            #line hidden
            this.Write("class ");
            
            #line 43 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write(";\r\nclass ");
            
            #line 44 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass : public I");
            
            #line 44 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass\r\n{\r\n  public:\r\n    // I");
            
            #line 47 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass\r\n    ");
            
            #line 48 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass() = default;\r\n    virtual ~");
            
            #line 49 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass();\r\n    void Publish() override;\r\n    void Unpublish() override;\r\n   " +
                    " void Subscribe(bool deliverToSelf) override;\r\n    void Unsubscribe() override;\r" +
                    "\n    std::shared_ptr<I");
            
            #line 54 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("> GetObjectInstance(const std::wstring& instanceName) override;\r\n    std::shared_" +
                    "ptr<I");
            
            #line 55 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("> CreateObjectInstance(const std::wstring& instanceName) override;\r\n    std::shar" +
                    "ed_ptr<I");
            
            #line 56 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write(@"> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) override;
    uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) override;
    void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) override;
    void ExecuteDiscoverObjectInstanceCallbacks(std::shared_ptr<I");
            
            #line 59 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write(@"> newObjectInstance);

    uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) override;
    void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) override;
    void ExecuteRemoveObjectInstanceCallbacks(std::shared_ptr<I");
            
            #line 63 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("> newObjectInstance);\r\n    // Set a user-defined creator function, which returns " +
                    "subclasses of ");
            
            #line 64 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    using ObjectInstanceCreatorFunction = std::function<");
            
            #line 65 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("*(");
            
            #line 65 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write(@"ObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* rtiAmbassador)>;
    // When using custom object instance classes, don't forget to set the creator function *before* subscribing to the object class.
    void SetObjectInstanceCreator(ObjectInstanceCreatorFunction creatorFunction) { mCreatorFunction = creatorFunction; }
    // internal
");
            
            #line 69 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"

  if (objectClass.BaseClass != null)
  {

            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 73 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass(rti1516ev::RTIambassador* rtiAmbassador, ObjectClassRegistry* registr" +
                    "y, ");
            
            #line 73 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.BaseClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass* baseClass);\r\n\r\n");
            
            #line 75 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } else {
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 76 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass(rti1516ev::RTIambassador* rtiAmbassador, ObjectClassRegistry* registr" +
                    "y);\r\n");
            
            #line 77 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } 
            
            #line default
            #line hidden
            
            #line 78 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 
  var baseClass = objectClass.BaseClass;
  while (baseClass != null)
  {
    foreach (var attribute in baseClass.Attributes)
    {
      if (attribute.DataType != null)
      { 
            
            #line default
            #line hidden
            this.Write("    // attribute ");
            
            #line 86 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 86 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.DataType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    rti1516ev::AttributeHandle Get");
            
            #line 87 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write("AttributeHandle() const { return mBaseClass->Get");
            
            #line 87 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write("AttributeHandle(); }\r\n");
            
            #line 88 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
    } else { 
            
            #line default
            #line hidden
            this.Write("    // attribute ");
            
            #line 89 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write(" : no data type\r\n");
            
            #line 90 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"

      } // if (attribute.DataType != null)
    } // foreach (var attribute in objectClass.Attributes)
    baseClass = baseClass.BaseClass;
  } // while (baseClass != null)

            
            #line default
            #line hidden
            
            #line 96 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 
  foreach (var attribute in objectClass.Attributes)
  {
    if (attribute.DataType != null)
    { 
            
            #line default
            #line hidden
            this.Write("    // attribute ");
            
            #line 101 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 101 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.DataType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    rti1516ev::AttributeHandle Get");
            
            #line 102 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write("AttributeHandle() const { return m");
            
            #line 102 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write("AttributeHandle; }\r\n");
            
            #line 103 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
  } else { 
            
            #line default
            #line hidden
            this.Write("    // attribute ");
            
            #line 104 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write(" : no data type\r\n");
            
            #line 105 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
  
    } // if (attribute.DataType != null)
  } // foreach (var attribute in objectClass.Attributes)

            
            #line default
            #line hidden
            this.Write(@"    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    std::shared_ptr<I");
            
            #line 112 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write(@"> GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    rti1516ev::AttributeHandleSet GetAllAttributeHandles();
    ObjectClassRegistry* GetObjectClassRegistry() const { return mRegistry; }

    // add object instance to maps (and to maps of base classes)
    void InsertObjectInstanceName(std::shared_ptr<I");
            
            #line 117 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("> objectInstance, const std::wstring& objectInstanceName);\r\n    void InsertObject" +
                    "InstanceHandle(std::shared_ptr<I");
            
            #line 118 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write(@"> objectInstance, rti1516ev::ObjectInstanceHandle objectInstanceHandle);
    // remove object instance from maps (and from maps of base classes)
    void EraseObjectInstance(rti1516ev::ObjectInstanceHandle objectInstanceHandle, const std::wstring& objectInstanceName);
  private:
    ObjectClassRegistry* mRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
");
            
            #line 126 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 if (objectClass.BaseClass != null) { 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 127 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.BaseClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass* mBaseClass;\r\n");
            
            #line 128 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    ObjectInstanceCreatorFunction mCreatorFunction;\r\n    bool mPublished = false;" +
                    "\r\n    bool mSubscribed = false;\r\n    // Attribute handles\r\n");
            
            #line 133 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 
  foreach (var attribute in objectClass.Attributes)
  {
    if (attribute.DataType != null)
    {

            
            #line default
            #line hidden
            this.Write("    // attribute ");
            
            #line 138 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 138 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.DataType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    rti1516ev::AttributeHandle m");
            
            #line 139 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write("AttributeHandle;\r\n");
            
            #line 140 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
  } else {

            
            #line default
            #line hidden
            this.Write("    // attribute ");
            
            #line 141 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write(" : no data type\r\n");
            
            #line 142 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
  
    } // if (attribute.DataType != null)
  } // foreach (var attribute in objectClass.Attributes)

            
            #line default
            #line hidden
            this.Write("    // this mutex guards the data structures below\r\n    mutable std::mutex mMutex" +
                    ";\r\n    std::map<std::wstring, std::shared_ptr<I");
            
            #line 148 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write(">> mObjectInstancesByName;\r\n    std::map<rti1516ev::ObjectInstanceHandle, std::sh" +
                    "ared_ptr<I");
            
            #line 149 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write(@">> mObjectInstancesByHandle;

    std::map<uint32_t, DiscoverObjectInstanceCallback> mDiscoverCallbacks;
    uint32_t mLastDiscoverObjectInstanceCallbackToken = 0;
    std::map<uint32_t, RemoveObjectInstanceCallback> mRemoveObjectInstanceCallbacks;
    uint32_t mLastRemoveObjectInstanceCallbackToken = 0;
};

class ");
            
            #line 157 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write(" : public I");
            
            #line 157 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n  public:\r\n\r\n    virtual ~");
            
            #line 161 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("();\r\n    ");
            
            #line 162 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("(const ");
            
            #line 162 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("&) = delete;\r\n    ");
            
            #line 163 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 163 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("&&) = delete;\r\n    ");
            
            #line 164 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("& operator=(const ");
            
            #line 164 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("&) = delete;\r\n    ");
            
            #line 165 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("& operator=(");
            
            #line 165 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("&&) = delete;\r\n    I");
            
            #line 166 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write(@"ObjectClass* GetObjectClass() const { return mObjectClass; }
    ObjectClassRegistry* GetObjectClassRegistry() const { return mObjectClass->GetObjectClassRegistry(); }
    std::wstring GetObjectInstanceName() const override { return mObjectInstanceName; }
    rti1516ev::ObjectInstanceHandle GetObjectInstanceHandle() const { return mObjectInstanceHandle; }
    bool IsValid() const override;
    bool IsOwner() const override;
    void Release() override;
");
            
            #line 173 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"

  foreach (var attribute in objectClass.AllAttributes)
  {
    if (attribute.DataType != null)
    {

            
            #line default
            #line hidden
            this.Write("    // attribute ");
            
            #line 178 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 178 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.DataType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    ");
            
            #line 179 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.DataType.ReturnCppType));
            
            #line default
            #line hidden
            this.Write(" Get");
            
            #line 179 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write("() const override;\r\n");
            
            #line 180 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
    if (attribute.DataType is FOMParser.FixedRecordDataType) { 
            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 181 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.DataType.ModifiableReturnCppType));
            
            #line default
            #line hidden
            this.Write(" Get");
            
            #line 181 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write("() override;\r\n");
            
            #line 182 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
    } 
            
            #line default
            #line hidden
            this.Write("    void Set");
            
            #line 183 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 183 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.DataType.ParameterCppType));
            
            #line default
            #line hidden
            this.Write(" newValue) override;\r\n");
            
            #line 184 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
  } else { 
            
            #line default
            #line hidden
            this.Write("    // attribute ");
            
            #line 185 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write(" : no data type\r\n");
            
            #line 186 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"

    } // if (attribute.DataType != null)
  } // foreach (var attribute in objectClass.AllAttributes)

            
            #line default
            #line hidden
            this.Write("    // I");
            
            #line 190 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 191 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 if (objectClass.HasValidAttributes) { 
            
            #line default
            #line hidden
            this.Write("    void UpdateAllAttributeValues() override;\r\n    void UpdateAllAttributeValues(" +
                    "");
            
            #line 193 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.NativeTimeType));
            
            #line default
            #line hidden
            this.Write(" time) override;\r\n    void UpdateModifiedAttributeValues() override;\r\n    void Up" +
                    "dateModifiedAttributeValues(");
            
            #line 195 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.NativeTimeType));
            
            #line default
            #line hidden
            this.Write(" time) override;\r\n    void RequestAttributeValues() override;\r\n    void RequestAl" +
                    "lAttributeValues() override;\r\n");
            
            #line 198 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 if (objectClass.ChildClasses.Count == 0) { 
            
            #line default
            #line hidden
            this.Write("    uint32_t RegisterUpdateCallback(UpdateCallback callback) override;\r\n    void " +
                    "UnregisterUpdateCallback(uint32_t callbackToken) override;\r\n");
            
            #line 201 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } // if (objectClass.ChildClasses.Count == 0) 
            
            #line default
            #line hidden
            
            #line 202 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } // if (objectClass.HasValidAttributes) 
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 204 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 if (objectClass.HasValidAttributes) { 
            
            #line default
            #line hidden
            this.Write(@"    // bitmask of attributes ever received
    AttributeBits GetReceivedAttributes() const override;
    // bitmask of attributes received in last update (cleared after update callbacks executed)
    AttributeBits GetUpdatedAttributes() const override;
    // bitmask of attributes ever modified
    AttributeBits GetInitializedAttributes() const override;
    // bitmask of attributes modified since last updateAttributeValues/provideAttributeValues
    AttributeBits GetModifiedAttributes() const override;
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes, const rti1516ev::LogicalTime& theTime, OrderType orderType);
    void ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributes);
");
            
            #line 216 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write("  protected:\r\n    friend class ");
            
            #line 218 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass;\r\n\r\n    ");
            
            #line 220 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("();\r\n    ");
            
            #line 221 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 221 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassa" +
                    "dor* ambassador);\r\n\r\n");
            
            #line 223 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 if (objectClass.HasValidAttributes && objectClass.ChildClasses.Count == 0) { 
            
            #line default
            #line hidden
            this.Write("    void ExecuteUpdateCallbacks(optional<");
            
            #line 224 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.NativeTimeType));
            
            #line default
            #line hidden
            this.Write("> time, optional<OrderType> orderType);\r\n");
            
            #line 225 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"
    // get attribute handle/value map of all attributes
    rti1516ev::AttributeHandleValueMap GetAllAttributeValues() const;
    // get attribute handle/value map of attributes which have been modified since last call to UpdateModifiedAttributeValues
    rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;

    rti1516ev::RTIambassador* mRtiAmbassador;
    // this mutex guards all of the fields below
    mutable std::mutex mMutex;

    ");
            
            #line 236 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass* mObjectClass;\r\n    std::wstring mObjectInstanceName;\r\n    rti1516ev:" +
                    ":ObjectInstanceHandle mObjectInstanceHandle;\r\n    bool mIsOwner = false;\r\n");
            
            #line 240 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 if (objectClass.HasValidAttributes) { 
            
            #line default
            #line hidden
            this.Write(@"    // modified by any ReflectAttributeValues in the past
    AttributeBits mValuesReceived = kNone;
    // modified by any attribute setter
    AttributeBits mValuesSet = kNone;
    // modified by last ReflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next UpdateModifiedAttributeValues
    AttributeBits mDirty = kNone;
");
            
            #line 249 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } 
            
            #line default
            #line hidden
            
            #line 250 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 if (objectClass.HasValidAttributes && objectClass.ChildClasses.Count == 0) { 
            
            #line default
            #line hidden
            this.Write("    std::map<uint32_t, UpdateCallback> mUpdateCallbacks;\r\n    uint32_t mLastCallb" +
                    "ackToken = 0;\r\n");
            
            #line 253 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write("    // Attribute value encoders\r\n");
            
            #line 255 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 
  foreach (var attribute in objectClass.AllAttributes)
  {
    if (attribute.DataType != null)
    {

            
            #line default
            #line hidden
            this.Write("    // attribute ");
            
            #line 260 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 260 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.DataType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    ");
            
            #line 261 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.DataType.Encoding));
            
            #line default
            #line hidden
            this.Write(" m");
            
            #line 261 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 262 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
  } else {

            
            #line default
            #line hidden
            this.Write("    // attribute ");
            
            #line 263 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(attribute.Name));
            
            #line default
            #line hidden
            this.Write(" : no data type\r\n");
            
            #line 264 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
  
    } // if (attribute.DataType != null)
  } // foreach (var attribute in objectClass.Attributes)

            
            #line default
            #line hidden
            this.Write("};\r\n\r\n");
            
            #line 270 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } // foreach (var objectClass in FOM.ObjectClasses) 
            
            #line default
            #line hidden
            this.Write(" \r\n\r\nclass ObjectClassRegistry : public IObjectClassRegistry\r\n{\r\n  public:\r\n    O" +
                    "bjectClassRegistry();\r\n    ~ObjectClassRegistry();\r\n    void Initialize(rti1516e" +
                    "v::RTIambassador* rtiAmbassador);\r\n    void Finalize();\r\n\r\n");
            
            #line 280 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 foreach (var objectClass in FOM.ObjectClasses) { 
            
            #line default
            #line hidden
            this.Write("    I");
            
            #line 281 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass* Get");
            
            #line 281 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass() const override { return m");
            
            #line 281 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass.get(); }\r\n");
            
            #line 282 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write(@"
    void DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    void ReflectAttributeValues(rti1516ev::ObjectInstanceHandle theObject, const rti1516ev::AttributeHandleValueMap & attributes);
    void ReflectAttributeValues(rti1516ev::ObjectInstanceHandle theObject, const rti1516ev::AttributeHandleValueMap & attributes, const rti1516ev::LogicalTime& theTime, OrderType orderType);
    void ProvideAttributeValues(rti1516ev::ObjectClassHandle theObjectClass, rti1516ev::ObjectInstanceHandle theObject, const rti1516ev::AttributeHandleSet& attributeHandles);
    void ObjectInstanceNameReservationSucceeded(std::wstring const & theObjectInstanceName);
    void ObjectInstanceNameReservationFailed(std::wstring const & theObjectInstanceName);
    void RegisterObjectInstanceName(const std::wstring& theObjectInstanceName, std::function<void(bool)> completionCallback);

  private:
    std::map<std::wstring, std::function<void(bool)> > mObjectInstanceNameReservationCallbacks;
    rti1516ev::RTIambassador* mRtiAmbassador;
");
            
            #line 296 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 foreach (var objectClass in FOM.ObjectClasses) { 
            
            #line default
            #line hidden
            this.Write("    std::unique_ptr<");
            
            #line 297 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass> m");
            
            #line 297 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(objectClass.Name));
            
            #line default
            #line hidden
            this.Write("ObjectClass;\r\n");
            
            #line 298 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
 } 
            
            #line default
            #line hidden
            this.Write("}; // class ObjectClassRegistry\r\n\r\n");
            
            #line 301 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"

foreach (var namespacePart in FOM.Namespace)
{

            
            #line default
            #line hidden
            this.Write("} // namespace ");
            
            #line 305 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespacePart));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 306 "D:\vfs\OpenRTI\src\Tools\FOMCodeGen\FOMObjectsHeader.tt"
  } 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class FOMObjectsHeaderBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
