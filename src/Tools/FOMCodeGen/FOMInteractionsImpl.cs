// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace FOMCodeGen
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class FOMInteractionsImpl : FOMInteractionsImplBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n// Code automatically generated by T4 template from ");
            
            #line 7 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(System.IO.Path.GetFileName(FOM.Filename)));
            
            #line default
            #line hidden
            this.Write(", do not edit\r\n");
            
            #line 8 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 if (FOM.UsePrecompiledHeaders) { 
            
            #line default
            #line hidden
            this.Write("#include \"stdafx.h\"\r\n");
            
            #line 10 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n#include <vector>\r\n#include <cassert>\r\n\r\n");
            
            #line 15 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.PredefinedTypeIncludes));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 16 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 if (FOM.IsFloatTime) { 
            
            #line default
            #line hidden
            this.Write("#include \"RTI/time/HLAfloat64Time.h\"\r\n");
            
            #line 18 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
} else {
            
            #line default
            #line hidden
            this.Write("#include \"RTI/time/HLAinteger64Time.h\"\r\n");
            
            #line 20 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
}
            
            #line default
            #line hidden
            this.Write("\r\n#include \"");
            
            #line 22 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(InteractionsHeaderFilename));
            
            #line default
            #line hidden
            this.Write("\"\r\n#include \"");
            
            #line 23 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ObjectsHeaderFilename));
            
            #line default
            #line hidden
            this.Write("\"\r\n\r\n");
            
            #line 25 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"

foreach (var namespacePart in FOM.Namespace)
{

            
            #line default
            #line hidden
            this.Write("namespace ");
            
            #line 29 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespacePart));
            
            #line default
            #line hidden
            this.Write(" {\r\n");
            
            #line 30 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
  } 
            
            #line default
            #line hidden
            
            #line 31 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 
foreach (var interactionClass in FOM.InteractionClasses)
{
  if (interactionClass.BaseClass != null)
  {

            
            #line default
            #line hidden
            this.Write("// object class type \'");
            
            #line 37 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("\'\r\n");
            
            #line 38 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass::");
            
            #line 38 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass(rti1516ev::RTIambassador* rtiAmbassador, ");
            
            #line 38 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.BaseClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass* baseClass)\r\n");
            
            #line 39 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 } else {
            
            #line default
            #line hidden
            
            #line 40 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass::");
            
            #line 40 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass(rti1516ev::RTIambassador* rtiAmbassador)\r\n");
            
            #line 41 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 } 
            
            #line default
            #line hidden
            this.Write("{\r\n  mRtiAmbassador = rtiAmbassador;\r\n");
            
            #line 44 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 if (interactionClass.BaseClass != null) { 
            
            #line default
            #line hidden
            this.Write("  mBaseClass = baseClass;\r\n");
            
            #line 46 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 } 
            
            #line default
            #line hidden
            this.Write("  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L\"");
            
            #line 47 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.QualifiedName));
            
            #line default
            #line hidden
            this.Write("\");\r\n");
            
            #line 48 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 
  foreach (var parameter in interactionClass.Parameters)
  {
    if (parameter.DataType != null)
    {

            
            #line default
            #line hidden
            this.Write("  // parameter ");
            
            #line 53 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write(" : ");
            
            #line 53 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DataType.Name));
            
            #line default
            #line hidden
            this.Write("\r\n  m");
            
            #line 54 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("ParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L\"");
            
            #line 54 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("\");\r\n");
            
            #line 55 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
  } else { 
            
            #line default
            #line hidden
            this.Write("// parameter ");
            
            #line 56 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 56 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write(" : no data type\r\n");
            
            #line 57 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
  
    } // if (parameter.DataType != null)
  } // foreach (var parameter in interactionClass.Parameters)

            
            #line default
            #line hidden
            this.Write("}\r\n\r\nvoid ");
            
            #line 63 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass::Publish()\r\n{\r\n  if (!mPublished)\r\n  {\r\n    mRtiAmbassador->publ" +
                    "ishInteractionClass(mInteractionClassHandle);\r\n    mPublished = true;\r\n  }\r\n}\r\n\r" +
                    "\nvoid ");
            
            #line 72 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass::Unpublish()\r\n{\r\n  if (mPublished)\r\n  {\r\n    mRtiAmbassador->unp" +
                    "ublishInteractionClass(mInteractionClassHandle);\r\n    mPublished = false;\r\n  }\r\n" +
                    "}\r\n\r\nvoid ");
            
            #line 81 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write(@"InteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void ");
            
            #line 91 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass::Unsubscribe()\r\n{\r\n  if (mSubscribed)\r\n  {\r\n    mRtiAmbassador->" +
                    "unsubscribeInteractionClass(mInteractionClassHandle);\r\n    mSubscribed = false;\r" +
                    "\n  }\r\n}\r\n\r\nvoid ");
            
            #line 100 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass::send(");
            
            #line 100 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.CppParameterList));
            
            #line default
            #line hidden
            this.Write(")\r\n{\r\n  rti1516ev::ParameterHandleValueMap parameters;\r\n");
            
            #line 103 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 
  foreach (var parameter in interactionClass.AllParameters)
  {
    if (parameter.DataType != null)
    { 
            
            #line default
            #line hidden
            this.Write("  ");
            
            #line 108 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ToEncoderExpression()));
            
            #line default
            #line hidden
            this.Write("\r\n  parameters.insert(std::make_pair(Get");
            
            #line 109 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("ParameterHandle(), ");
            
            #line 109 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("Encoder.encode()));\r\n");
            
            #line 110 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
  
    } // if (parameter.DataType != null)
  } // foreach (var parameter in interactionClass.Parameters)

            
            #line default
            #line hidden
            this.Write("  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti151" +
                    "6ev::VariableLengthData());\r\n}\r\n\r\n");
            
            #line 117 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 if (interactionClass.Order == FOMParser.Order.Timestamp) { 
            
            #line default
            #line hidden
            this.Write("void ");
            
            #line 118 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass::sendWithTime(");
            
            #line 118 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.CppParameterList));
            
            #line default
            #line hidden
            
            #line 118 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 if (interactionClass.Parameters.Count > 0) {
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 118 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
}
            
            #line default
            #line hidden
            
            #line 118 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.NativeTimeType));
            
            #line default
            #line hidden
            this.Write(" time)\r\n{\r\n  rti1516ev::ParameterHandleValueMap parameters;\r\n");
            
            #line 121 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 
  foreach (var parameter in interactionClass.AllParameters)
  {
    if (parameter.DataType != null)
    { 
            
            #line default
            #line hidden
            this.Write("  ");
            
            #line 126 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.ToEncoderExpression()));
            
            #line default
            #line hidden
            this.Write("\r\n  parameters.insert(std::make_pair(Get");
            
            #line 127 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("ParameterHandle(), ");
            
            #line 127 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("Encoder.encode()));\r\n");
            
            #line 128 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
  
    } // if (parameter.DataType != null)
  } // foreach (var parameter in interactionClass.Parameters)

            
            #line default
            #line hidden
            this.Write("  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti151" +
                    "6ev::VariableLengthData(), ");
            
            #line 132 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FOM.LogicalTimeType));
            
            #line default
            #line hidden
            this.Write("(time));\r\n}\r\n");
            
            #line 134 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 } // if (interactionClass.Order == FOM.Order.Timestamp) 
            
            #line default
            #line hidden
            this.Write("\r\nvoid ");
            
            #line 136 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&");
            
            #line 136 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
if (interactionClass.HasValidParameters) {
            
            #line default
            #line hidden
            this.Write(" parameters ");
            
            #line 136 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
}
            
            #line default
            #line hidden
            this.Write(")\r\n{\r\n");
            
            #line 138 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"

  List<string> callArguments = new List<string>();
  foreach (var parameter in interactionClass.AllParameters) {
    if (parameter.DataType != null) {
      callArguments.Add(parameter.DataType.CppGetter(parameter.Name + "Decoder"));

            
            #line default
            #line hidden
            this.Write("  ");
            
            #line 144 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DataType.Encoding));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 144 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("Decoder;\r\n  rti1516ev::ParameterHandleValueMap::const_iterator ");
            
            #line 145 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("Iter = parameters.find(Get");
            
            #line 145 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("ParameterHandle());\r\n  if (");
            
            #line 146 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("Iter != parameters.end())\r\n  {\r\n    ");
            
            #line 148 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("Decoder.decode(");
            
            #line 148 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("Iter->second);\r\n  }\r\n");
            
            #line 150 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
  
    } // if (parameter.DataType != null)
  } // foreach (var parameter in interactionClass.Parameters)

            
            #line default
            #line hidden
            this.Write("  for (auto& entry : _receiveCallbacks) {\r\n    auto& callback = entry.second;\r\n  " +
                    "  callback(");
            
            #line 156 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", callArguments)));
            
            #line default
            #line hidden
            this.Write(");\r\n  }\r\n}\r\n\r\n");
            
            #line 160 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 if (interactionClass.Order == FOMParser.Order.Timestamp) { 
            
            #line default
            #line hidden
            this.Write("void ");
            
            #line 161 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&");
            
            #line 161 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
if (interactionClass.HasValidParameters) {
            
            #line default
            #line hidden
            this.Write(" parameters ");
            
            #line 161 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
}
            
            #line default
            #line hidden
            this.Write(", const rti1516ev::LogicalTime& time, rti1516ev::OrderType /*receivedOrder*/)\r\n{\r" +
                    "\n");
            
            #line 163 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"

{
  List<string> callArgumentsWithTime = new List<string>();
  var timeArgument = "static_cast<const " + FOM.LogicalTimeType + "&>(time).getTime()";
  foreach (var parameter in interactionClass.AllParameters) {
    if (parameter.DataType != null) {
      callArgumentsWithTime.Add(parameter.DataType.CppGetter(parameter.Name + "Decoder"));

            
            #line default
            #line hidden
            this.Write("  ");
            
            #line 171 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DataType.Encoding));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 171 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("Decoder;\r\n  rti1516ev::ParameterHandleValueMap::const_iterator ");
            
            #line 172 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("Iter = parameters.find(Get");
            
            #line 172 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("ParameterHandle());\r\n  if (");
            
            #line 173 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("Iter != parameters.end())\r\n  {\r\n    ");
            
            #line 175 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("Decoder.decode(");
            
            #line 175 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("Iter->second);\r\n  }\r\n");
            
            #line 177 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
  
    } // if (parameter.DataType != null)
  } // foreach (var parameter in interactionClass.Parameters)

            
            #line default
            #line hidden
            this.Write("  for (auto& entry : _receiveCallbacksWithTime) {\r\n    auto& callback = entry.sec" +
                    "ond;\r\n");
            
            #line 183 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
    if (callArgumentsWithTime.Count > 0) { 
            
            #line default
            #line hidden
            this.Write("    callback(");
            
            #line 184 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", callArgumentsWithTime)));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 184 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(timeArgument));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 185 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
    } else {
            
            #line default
            #line hidden
            this.Write("    callback(");
            
            #line 186 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(timeArgument));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 187 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
    }
            
            #line default
            #line hidden
            
            #line 188 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
}
            
            #line default
            #line hidden
            this.Write("  }\r\n}\r\n");
            
            #line 191 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 } // if (interactionClass.Order == FOM.Order.Timestamp) 
            
            #line default
            #line hidden
            this.Write("\r\nuint32_t ");
            
            #line 193 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass::RegisterReceiveCallback(ReceiveCallback callback)\r\n{\r\n  uint32_" +
                    "t key = _receiveCallbacksNextKey++;\r\n  _receiveCallbacks.insert(std::make_pair(k" +
                    "ey, callback));\r\n  return key;\r\n}\r\n\r\n");
            
            #line 200 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 if (interactionClass.Order == FOMParser.Order.Timestamp) { 
            
            #line default
            #line hidden
            this.Write("uint32_t ");
            
            #line 201 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass::RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callbac" +
                    "k)\r\n{\r\n  uint32_t key = _receiveCallbacksWithTimeNextKey++;\r\n  _receiveCallbacks" +
                    "WithTime.insert(std::make_pair(key, callback));\r\n  return key;\r\n}\r\n");
            
            #line 207 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 } // if (interactionClass.Order == FOM.Order.Timestamp) 
            
            #line default
            #line hidden
            this.Write("\r\nrti1516ev::ParameterHandleSet ");
            
            #line 209 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass::GetAllParameterHandles()\r\n{\r\n  rti1516ev::ParameterHandleSet re" +
                    "sult;\r\n");
            
            #line 212 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 
  foreach (var parameter in interactionClass.AllParameters) {
    if (parameter.DataType != null) {

            
            #line default
            #line hidden
            this.Write("  result.insert(Get");
            
            #line 216 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write("ParameterHandle());\r\n");
            
            #line 217 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
  
    } // if (parameter.DataType != null)
  } // foreach (var parameter in interactionClass.Parameters)

            
            #line default
            #line hidden
            this.Write("  return result;\r\n}\r\n\r\n");
            
            #line 224 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 } // foreach (var interactionClass in FOM.InteractionClasses) 
            
            #line default
            #line hidden
            this.Write(@" 

InteractionClassRegistry* InteractionClassRegistry::sClassRegistry = nullptr;

InteractionClassRegistry::InteractionClassRegistry()
{
  assert(sClassRegistry == nullptr);
  sClassRegistry = this;
}

InteractionClassRegistry::~InteractionClassRegistry()
{
  sClassRegistry = nullptr;
}

void InteractionClassRegistry::Initialize(rti1516ev::RTIambassador* rtiAmbassador)
{
  mRtiAmbassador = rtiAmbassador;
");
            
            #line 242 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 
  foreach (var interactionClass in FOM.InteractionClasses)
  {
    if (interactionClass.BaseClass != null)
    {

            
            #line default
            #line hidden
            this.Write("  m");
            
            #line 248 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass = std::unique_ptr<");
            
            #line 248 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass>(new ");
            
            #line 248 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass(mRtiAmbassador, m");
            
            #line 248 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.BaseClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass.get()));\r\n");
            
            #line 249 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 } else { 
            
            #line default
            #line hidden
            this.Write("  m");
            
            #line 250 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass = std::unique_ptr<");
            
            #line 250 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass>(new ");
            
            #line 250 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass(mRtiAmbassador));\r\n");
            
            #line 251 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 } // if 
            
            #line default
            #line hidden
            
            #line 252 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 } // foreach 
            
            #line default
            #line hidden
            this.Write("} // Initialize\r\n\r\nvoid InteractionClassRegistry::ReceiveInteraction(rti1516ev::I" +
                    "nteractionClassHandle theInteractionClass, const rti1516ev::ParameterHandleValue" +
                    "Map & parameters)\r\n{\r\n");
            
            #line 257 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 
  bool firstInClassRegistryReflectParameterValues = true;
  foreach (var interactionClass in FOM.InteractionClasses)
  {
    if (interactionClass.HasValidParameters)
    { 
      if (firstInClassRegistryReflectParameterValues) { 
            
            #line default
            #line hidden
            this.Write("  if (theInteractionClass == m");
            
            #line 264 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass->GetInteractionClassHandle())\r\n");
            
            #line 265 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
    } else { 
            
            #line default
            #line hidden
            this.Write("  else if (theInteractionClass == m");
            
            #line 266 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass->GetInteractionClassHandle())\r\n");
            
            #line 267 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
    } // if
      firstInClassRegistryReflectParameterValues = false; 
            
            #line default
            #line hidden
            this.Write("  {\r\n    m");
            
            #line 270 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(interactionClass.Name));
            
            #line default
            #line hidden
            this.Write("InteractionClass->ReceiveInteraction(parameters);\r\n  }\r\n");
            
            #line 272 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
  
    } // if (interactionClass.hasValidParameters)
} // foreach 

            
            #line default
            #line hidden
            this.Write("}\r\n\r\nIInteractionClassRegistry* GetInteractionClassRegistry()\r\n{\r\n  return Intera" +
                    "ctionClassRegistry::GetInstance();\r\n}\r\n\r\n");
            
            #line 283 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 foreach (var namespacePart in FOM.Namespace) { 
            
            #line default
            #line hidden
            this.Write("} // namespace ");
            
            #line 284 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(namespacePart));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 285 "D:\vfs\CANoe\release\15.3\Projects_Source\OpenRTI\src\Tools\FOMCodeGen\FOMInteractionsImpl.tt"
 } 
            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class FOMInteractionsImplBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
