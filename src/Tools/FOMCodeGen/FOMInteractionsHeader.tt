<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

// Code automatically generated by T4 template from <#=System.IO.Path.GetFileName(FOM.Filename)#>, do not edit
#pragma once

#include <vector>
#include "RTI/Handle.h"
#include "RTI/RTIambassador.h"
#include "RTI/encoding/BasicDataElements.h"
#include "RTI/encoding/HLAfixedRecord.h"
#include "RTI/encoding/HLAfixedArray.h"
#include "RTI/encoding/HLAvariableArray.h"

<#=FOM.GetPredefinedTypeIncludes(FOMParser.FileContext.kInteractionHeader)#>
#include "<#=InteractionInterfacesHeaderFilename#>"
#include "<#=EncodingHeaderFilename#>"

<# foreach (var namespacePart in FOM.Namespace) { #>
namespace <#=namespacePart#> {
<# } #>

<# foreach (var interactionClass in FOM.InteractionClasses) { #>
class <#=interactionClass.Name#>;
class <#=interactionClass.Name#>InteractionClass : public I<#=interactionClass.Name#>InteractionClass
{
  public:
    // I<#=interactionClass.Name#>InteractionClass
    <#=interactionClass.Name#>InteractionClass() = default;
    virtual ~<#=interactionClass.Name#>InteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(<#=interactionClass.CppParameterList#>) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;
<#   if (interactionClass.Order == FOMParser.Order.Timestamp) { #>
    void sendWithTime(<#=interactionClass.CppParameterList#><# if (interactionClass.Parameters.Count > 0) {#>, <#}#><#=FOM.NativeTimeType#> time) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, rti1516ev::OrderType receivedOrder);
    uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) override;
<#   } // if (interactionClass.Order == FOM.Order.Timestamp) #>

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
<#   if (interactionClass.BaseClass != null) { #>
    <#=interactionClass.Name#>InteractionClass(rti1516ev::RTIambassador* rtiAmbassador, <#=interactionClass.BaseClass.Name#>InteractionClass* baseClass);
<#   } else {#>
    <#=interactionClass.Name#>InteractionClass(rti1516ev::RTIambassador* rtiAmbassador);
<#   } // if (interactionClass.BaseClass != null) #>
<# 
  var baseClass = interactionClass.BaseClass;
  while (baseClass != null)
  {
    foreach (var parameter in baseClass.Parameters)
    {
      if (parameter.DataType != null)
      { #>
    // parameter <#=parameter.Name#> : <#=parameter.DataType.Name#>
    rti1516ev::ParameterHandle Get<#=parameter.Name#>ParameterHandle() const { return mBaseClass->Get<#=parameter.Name#>ParameterHandle(); }
<#    } else { #>
    // parameter <#=parameter.Name#> : no data type
<#
      } // if (parameter.DataType != null)
    } // foreach (var parameter in interactionClass.Parameters)
    baseClass = baseClass.BaseClass;
  } // while (baseClass != null)
#>
<# 
  foreach (var parameter in interactionClass.Parameters)
  {
    if (parameter.DataType != null)
    { #>
    // parameter <#=parameter.Name#> : <#=parameter.DataType.Name#>
    rti1516ev::ParameterHandle Get<#=parameter.Name#>ParameterHandle() const { return m<#=parameter.Name#>ParameterHandle; }
<#  } else { #>
    // parameter <#=parameter.Name#> : no data type
<#  
    } // if (parameter.DataType != null)
  } // foreach (var parameter in interactionClass.Parameters)
#>
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
<# if (interactionClass.BaseClass != null) { #>
    <#=interactionClass.BaseClass.Name#>InteractionClass* mBaseClass;
<# } #>
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
<# 
  foreach (var parameter in interactionClass.Parameters)
  {
    if (parameter.DataType != null)
    {
#>    // parameter <#=parameter.Name#> : <#=parameter.DataType.Name#>
    rti1516ev::ParameterHandle m<#=parameter.Name#>ParameterHandle;
<#  } else {
#>    // parameter <#=parameter.Name#> : no data type
<#  
    } // if (parameter.DataType != null)
  } // foreach (var parameter in interactionClass.Parameters)
#>
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
<#   if (interactionClass.Order == FOMParser.Order.Timestamp) { #>
    std::map<uint32_t, ReceiveCallbackWithTime> _receiveCallbacksWithTime;
    uint32_t _receiveCallbacksWithTimeNextKey = 0;
<#   } // if (interactionClass.Order == FOM.Order.Timestamp) #>
};


<# } // foreach (var interactionClass in FOM.InteractionClasses) #> 

class InteractionClassRegistry : public IInteractionClassRegistry
{
  public:
    InteractionClassRegistry();
    ~InteractionClassRegistry();
    void Initialize(rti1516ev::RTIambassador* rtiAmbassador);
    static InteractionClassRegistry* GetInstance() { return sClassRegistry; }

<# foreach (var interactionClass in FOM.InteractionClasses) { #>
    I<#=interactionClass.Name#>InteractionClass* Get<#=interactionClass.Name#>InteractionClass() const override { return m<#=interactionClass.Name#>InteractionClass.get(); }
<# } #>

    void ReceiveInteraction(rti1516ev::InteractionClassHandle theInteraction, const rti1516ev::ParameterHandleValueMap & parameters);

  private:
    static InteractionClassRegistry* sClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
<# foreach (var interactionClass in FOM.InteractionClasses) { #>
    std::unique_ptr<<#=interactionClass.Name#>InteractionClass> m<#=interactionClass.Name#>InteractionClass;
<# } #>
}; // class InteractionClassRegistry

<#
foreach (var namespacePart in FOM.Namespace)
{
#>
} // namespace <#=namespacePart#>
<#  } #>
