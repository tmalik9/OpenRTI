<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

// Code automatically generated by T4 template from <#=FOM.Filename#>, do not edit
#pragma once

#include <vector>
#include <functional>

<#=FOM.PredefinedTypeIncludes#>
#include "<#=EncodingHeaderFilename#>"

<#
foreach (var namespacePart in FOM.Namespace)
{
#>
namespace <#=namespacePart#> {
<# } #>

<# 
foreach (var interactionClass in FOM.InteractionClasses)
{
#>
class I<#=interactionClass.Name#>;
class I<#=interactionClass.Name#>InteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(<#=interactionClass.CppParameterList#>) = 0;
    using ReceiveCallback = std::function<void(<#=interactionClass.CppParameterList#>)>;
    using ReceiveCallbackWithTime = std::function<void(<#=interactionClass.CppParameterList#><# if (interactionClass.Parameters.Count > 0) {#>, <#}#>int64_t time)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

<# } // foreach (var interactionClass in FOM.InteractionClasses) #>

class IInteractionClassRegistry
{
  public:
<# foreach (var interactionClass in FOM.InteractionClasses) { #>
    virtual I<#=interactionClass.Name#>InteractionClass* get<#=interactionClass.Name#>InteractionClass() const = 0;
<# } #>
  protected:
    virtual ~IInteractionClassRegistry() {}
}; // class IInteractionClassRegistry

IInteractionClassRegistry* GetInteractionClassRegistry();

<#
foreach (var namespacePart in FOM.Namespace)
{
#>
} // namespace <#=namespacePart#>
<#  } #>
