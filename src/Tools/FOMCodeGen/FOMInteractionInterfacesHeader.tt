<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

// Code automatically generated by T4 template from <#=System.IO.Path.GetFileName(FOM.Filename)#>, do not edit
#pragma once

#include <vector>
#include <functional>

<#=FOM.GetPredefinedTypeIncludes(FOMParser.FileContext.kInteractionInterfaces)#>
#include "<#=DataTypesHeaderFilename#>"
#include "<#=ObjectInterfacesHeaderFilename#>"

<# foreach (var namespacePart in FOM.Namespace) { #>
namespace <#=namespacePart#> {
<# } #>

<# foreach (var interactionClass in FOM.InteractionClasses) { #>
class I<#=interactionClass.Name#>InteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(<#=interactionClass.CppParameterList#>) = 0;
    using ReceiveCallback = std::function<void(<#=interactionClass.CppParameterList#>)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
<#   if (interactionClass.Order == FOMParser.Order.Timestamp) { #>
    // send/receive with timestamps
    virtual void sendWithTime(<#=interactionClass.CppParameterList#><# if (interactionClass.Parameters.Count > 0) {#>, <#}#><#=FOM.NativeTimeType#> time) = 0;
    using ReceiveCallbackWithTime = std::function<void(<#=interactionClass.CppParameterList#><# if (interactionClass.Parameters.Count > 0) {#>, <#}#><#=FOM.NativeTimeType#> time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
<#   } else { #>
    // Order is Receive, send/receive w. timestamps omitted
<#   } // if (interactionClass.Order == FOM.Order.Timestamp) #>
};

<# } // foreach (var interactionClass in FOM.InteractionClasses) #>

class IInteractionClassRegistry
{
  public:
<# foreach (var interactionClass in FOM.InteractionClasses) { #>
    virtual I<#=interactionClass.Name#>InteractionClass* Get<#=interactionClass.Name#>InteractionClass() const = 0;
<# } #>
  protected:
    virtual ~IInteractionClassRegistry() {}
}; // class IInteractionClassRegistry

IInteractionClassRegistry* GetInteractionClassRegistry();

<# foreach (var namespacePart in FOM.Namespace) { #>
} // namespace <#=namespacePart#>
<# } #>
