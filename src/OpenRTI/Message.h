/* -*-c++-*- OpenRTI - Copyright (C) 2009-2013 Mathias Froehlich
 *
 *
 * This file is part of OpenRTI.
 *
 * OpenRTI is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * OpenRTI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OpenRTI.  If not, see <http://www.gnu.org/licenses/>.
 *
 * This file is autogenerated by messagegen.py. Do not edit!
 *
 */

#ifndef OpenRTI_Message_h
#define OpenRTI_Message_h

#include <map>
#include <set>
#include <vector>
#include "AbstractMessage.h"
#include "AbstractMessageDispatcher.h"
#include "Handle.h"
#include "VariableLengthData.h"

#ifndef __CPlusPlusStd
#error "must include OpenRTIConfig.h!"
#endif

namespace OpenRTI {

enum CallbackModel {
  HLA_IMMEDIATE,
  HLA_EVOKED
};

enum OrderType {
  RECEIVE,
  TIMESTAMP
};

enum TransportationType {
  RELIABLE,
  BEST_EFFORT
};

enum SubscriptionType {
  Unsubscribed,
  SubscribedPassive,
  SubscribedActive
};

enum PublicationType {
  Unpublished,
  Published
};

enum ResignAction {
  UNCONDITIONALLY_DIVEST_ATTRIBUTES,
  DELETE_OBJECTS,
  CANCEL_PENDING_OWNERSHIP_ACQUISITIONS,
  DELETE_OBJECTS_THEN_DIVEST,
  CANCEL_THEN_DELETE_THEN_DIVEST,
  NO_ACTION
};

enum RestoreFailureReason {
  RTI_UNABLE_TO_RESTORE,
  FEDERATE_REPORTED_FAILURE_DURING_RESTORE,
  FEDERATE_RESIGNED_DURING_RESTORE,
  RTI_DETECTED_FAILURE_DURING_RESTORE
};

enum RestoreStatus {
  NO_RESTORE_IN_PROGRESS,
  FEDERATE_RESTORE_REQUEST_PENDING,
  FEDERATE_WAITING_FOR_RESTORE_TO_BEGIN,
  FEDERATE_PREPARED_TO_RESTORE,
  FEDERATE_RESTORING,
  FEDERATE_WAITING_FOR_FEDERATION_TO_RESTORE
};

enum SaveFailureReason {
  RTI_UNABLE_TO_SAVE,
  FEDERATE_REPORTED_FAILURE_DURING_SAVE,
  FEDERATE_RESIGNED_DURING_SAVE,
  RTI_DETECTED_FAILURE_DURING_SAVE,
  SAVE_TIME_CANNOT_BE_HONORED
};

enum SaveStatus {
  NO_SAVE_IN_PROGRESS,
  FEDERATE_INSTRUCTED_TO_SAVE,
  FEDERATE_SAVING,
  FEDERATE_WAITING_FOR_FEDERATION_TO_SAVE
};

enum ServiceGroupIndicator {
  FEDERATION_MANAGEMENT,
  DECLARATION_MANAGEMENT,
  OBJECT_MANAGEMENT,
  OWNERSHIP_MANAGEMENT,
  TIME_MANAGEMENT,
  DATA_DISTRIBUTION_MANAGEMENT,
  SUPPORT_SERVICES
};

enum LowerBoundTimeStampCommitType {
  TimeAdvanceCommit = 1,
  NextMessageCommit = 2,
  TimeAdvanceAndNextMessageCommit = 3
};

enum SwitchesType {
  InteractionRelevanceAdvisorySwitchesType,
  ObjectClassRelevanceAdvisorySwitchesType,
  AttributeRelevanceAdvisorySwitchesType,
  AttributeScopeAdvisorySwitchesType,
  AutoProvideSwitchesType,
  ConveyRegionDesignatorSetsSwitchesType,
  ServiceReportingSwitchesType
};

enum ArrayDataTypeEncoding {
  FixedArrayDataTypeEncoding,
  VariableArrayDataTypeEncoding
};

enum Endianness {
  BigEndian,
  LittleEndian
};

typedef bool Bool;

typedef std::string String;

typedef uint32_t Unsigned;

typedef double Double;

typedef std::vector<AttributeHandle> AttributeHandleVector;

typedef std::vector<FederateHandle> FederateHandleVector;

typedef std::vector<ParameterHandle> ParameterHandleVector;

typedef std::vector<DimensionHandle> DimensionHandleVector;

typedef std::set<DimensionHandle> DimensionHandleSet;

typedef std::vector<ObjectInstanceHandle> ObjectInstanceHandleVector;

typedef std::vector<RegionHandle> RegionHandleVector;

typedef std::vector<ModuleHandle> ModuleHandleVector;

typedef std::vector<String> StringVector;

typedef std::set<String> StringSet;

typedef std::pair<FederateHandle, Bool> FederateHandleBoolPair;

typedef std::vector<FederateHandleBoolPair> FederateHandleBoolPairVector;

class RangeBoundsValue;
typedef std::pair<DimensionHandle, RangeBoundsValue> DimensionHandleRangeBoundsValuePair;

typedef std::vector<DimensionHandleRangeBoundsValuePair> RegionValue;

typedef std::vector<RegionValue> RegionValueList;

typedef std::pair<RegionHandle, DimensionHandleSet> RegionHandleDimensionHandleSetPair;

typedef std::vector<RegionHandleDimensionHandleSetPair> RegionHandleDimensionHandleSetPairVector;

typedef std::pair<RegionHandle, SpaceHandle> RegionHandleSpaceHandlePair;

typedef std::vector<RegionHandleSpaceHandlePair> RegionHandleSpaceHandlePairVector;

typedef std::pair<RegionHandle, RegionValue> RegionHandleRegionValuePair;

typedef std::vector<RegionHandleRegionValuePair> RegionHandleRegionValuePairVector;

typedef std::pair<InteractionClassHandle, RegionValueList> InteractionClassHandleRegionValueListPair;

typedef std::pair<AttributeHandle, RegionValueList> AttributeHandleRegionValueListPair;

class AttributeState;
typedef std::vector<AttributeState> AttributeStateVector;

class ParameterValue;
typedef std::vector<ParameterValue> ParameterValueVector;

class AttributeValue;
typedef std::vector<AttributeValue> AttributeValueVector;

typedef std::pair<FederateHandle, SaveStatus> FederateHandleSaveStatusPair;

typedef std::vector<FederateHandleSaveStatusPair> FederateHandleSaveStatusPairVector;

typedef std::pair<FederateHandle, RestoreStatus> FederateHandleRestoreStatusPair;

typedef std::vector<FederateHandleRestoreStatusPair> FederateHandleRestoreStatusPairVector;

class FederationExecutionInformation;
typedef std::vector<FederationExecutionInformation> FederationExecutionInformationVector;

typedef std::pair<ObjectInstanceHandle, String> ObjectInstanceHandleNamePair;

typedef std::vector<ObjectInstanceHandleNamePair> ObjectInstanceHandleNamePairVector;

enum CreateFederationExecutionResponseType {
  CreateFederationExecutionResponseSuccess,
  CreateFederationExecutionResponseFederationExecutionAlreadyExists,
  CreateFederationExecutionResponseCouldNotOpenFDD,
  CreateFederationExecutionResponseErrorReadingFDD,
  CreateFederationExecutionResponseCouldNotCreateLogicalTimeFactory,
  CreateFederationExecutionResponseInconsistentFDD,
  CreateFederationExecutionResponseRTIinternalError,
  CreateFederationExecutionResponseTimeout
};

enum DestroyFederationExecutionResponseType {
  DestroyFederationExecutionResponseSuccess,
  DestroyFederationExecutionResponseFederatesCurrentlyJoined,
  DestroyFederationExecutionResponseFederationExecutionDoesNotExist,
  DestroyFederationExecutionResponseRTIinternalError
};

enum JoinFederationExecutionResponseType {
  JoinFederationExecutionResponseSuccess,
  JoinFederationExecutionResponseFederateNameAlreadyInUse,
  JoinFederationExecutionResponseFederationExecutionDoesNotExist,
  JoinFederationExecutionResponseSaveInProgress,
  JoinFederationExecutionResponseRestoreInProgress,
  JoinFederationExecutionResponseInconsistentFDD,
  JoinFederationExecutionResponseTimeout
};

enum RegisterFederationSynchronizationPointResponseType {
  RegisterFederationSynchronizationPointResponseSuccess,
  RegisterFederationSynchronizationPointResponseLabelNotUnique,
  RegisterFederationSynchronizationPointResponseMemberNotJoined
};

typedef std::map<String, StringVector> ConfigurationParameterMap;

class FOMStringBasicDataType;
typedef std::vector<FOMStringBasicDataType> FOMStringBasicDataTypeList;

class FOMStringSimpleDataType;
typedef std::vector<FOMStringSimpleDataType> FOMStringSimpleDataTypeList;

class FOMStringEnumerator;
typedef std::vector<FOMStringEnumerator> FOMStringEnumeratorList;

class FOMStringEnumeratedDataType;
typedef std::vector<FOMStringEnumeratedDataType> FOMStringEnumeratedDataTypeList;

class FOMStringArrayDataType;
typedef std::vector<FOMStringArrayDataType> FOMStringArrayDataTypeList;

class FOMStringArrayDataType2;
typedef std::vector<FOMStringArrayDataType2> FOMStringArrayDataType2List;

class FOMStringFixedRecordField;
typedef std::vector<FOMStringFixedRecordField> FOMStringFixedRecordFieldList;

class FOMStringFixedRecordDataType;
typedef std::vector<FOMStringFixedRecordDataType> FOMStringFixedRecordDataTypeList;

class FOMStringFixedRecordField2;
typedef std::vector<FOMStringFixedRecordField2> FOMStringFixedRecordField2List;

class FOMStringFixedRecordDataType2;
typedef std::vector<FOMStringFixedRecordDataType2> FOMStringFixedRecordDataType2List;

class FOMStringVariantRecordAlternative;
typedef std::vector<FOMStringVariantRecordAlternative> FOMStringVariantRecordAlternativeList;

class FOMStringVariantRecordDataType;
typedef std::vector<FOMStringVariantRecordDataType> FOMStringVariantRecordDataTypeList;

class FOMStringVariantRecordAlternative2;
typedef std::vector<FOMStringVariantRecordAlternative2> FOMStringVariantRecordAlternative2List;

class FOMStringVariantRecordDataType2;
typedef std::vector<FOMStringVariantRecordDataType2> FOMStringVariantRecordDataType2List;

class FOMStringTransportationType;
typedef std::vector<FOMStringTransportationType> FOMStringTransportationTypeList;

class FOMStringDimension;
typedef std::vector<FOMStringDimension> FOMStringDimensionList;

class FOMStringRoutingSpace;
typedef std::vector<FOMStringRoutingSpace> FOMStringRoutingSpaceList;

class FOMStringParameter;
typedef std::vector<FOMStringParameter> FOMStringParameterList;

class FOMStringInteractionClass;
typedef std::vector<FOMStringInteractionClass> FOMStringInteractionClassList;

class FOMStringAttribute;
typedef std::vector<FOMStringAttribute> FOMStringAttributeList;

class FOMStringObjectClass;
typedef std::vector<FOMStringObjectClass> FOMStringObjectClassList;

class FOMStringUpdateRate;
typedef std::vector<FOMStringUpdateRate> FOMStringUpdateRateList;

class FOMStringSwitch;
typedef std::vector<FOMStringSwitch> FOMStringSwitchList;

class FOMStringModule;
typedef std::vector<FOMStringModule> FOMStringModuleList;

class FOMStringModule2;
typedef std::vector<FOMStringModule2> FOMStringModule2List;

class FOMTransportationType;
typedef std::vector<FOMTransportationType> FOMTransportationTypeList;

class FOMDimension;
typedef std::vector<FOMDimension> FOMDimensionList;

class FOMRoutingSpace;
typedef std::vector<FOMRoutingSpace> FOMRoutingSpaceList;

class FOMParameter;
typedef std::vector<FOMParameter> FOMParameterList;

class FOMInteractionClass;
typedef std::vector<FOMInteractionClass> FOMInteractionClassList;

class FOMAttribute;
typedef std::vector<FOMAttribute> FOMAttributeList;

class FOMObjectClass;
typedef std::vector<FOMObjectClass> FOMObjectClassList;

class FOMUpdateRate;
typedef std::vector<FOMUpdateRate> FOMUpdateRateList;

class FOMSwitch;
typedef std::vector<FOMSwitch> FOMSwitchList;

class FOMBasicDataType;
typedef std::vector<FOMBasicDataType> FOMBasicDataTypeList;

class FOMSimpleDataType;
typedef std::vector<FOMSimpleDataType> FOMSimpleDataTypeList;

class FOMEnumerator;
typedef std::vector<FOMEnumerator> FOMEnumeratorList;

class FOMEnumeratedDataType;
typedef std::vector<FOMEnumeratedDataType> FOMEnumeratedDataTypeList;

class FOMArrayDataType;
typedef std::vector<FOMArrayDataType> FOMArrayDataTypeList;

class FOMFixedRecordField;
typedef std::vector<FOMFixedRecordField> FOMFixedRecordFieldList;

class FOMFixedRecordDataType;
typedef std::vector<FOMFixedRecordDataType> FOMFixedRecordDataTypeList;

class FOMVariantRecordAlternative;
typedef std::vector<FOMVariantRecordAlternative> FOMVariantRecordAlternativeList;

class FOMVariantRecordDataType;
typedef std::vector<FOMVariantRecordDataType> FOMVariantRecordDataTypeList;

class FOMModule;
typedef std::vector<FOMModule> FOMModuleList;

class FOMModule2;
typedef std::vector<FOMModule2> FOMModule2List;

class ConnectionLostMessage;
class CreateFederationExecutionRequestMessage;
class CreateFederationExecutionRequest2Message;
class CreateFederationExecutionResponseMessage;
class DestroyFederationExecutionRequestMessage;
class DestroyFederationExecutionResponseMessage;
class EnumerateFederationExecutionsRequestMessage;
class EnumerateFederationExecutionsResponseMessage;
class InsertFederationExecutionMessage;
class ShutdownFederationExecutionMessage;
class EraseFederationExecutionMessage;
class ReleaseFederationHandleMessage;
class InsertModulesMessage;
class InsertModules2Message;
class JoinFederationExecutionRequestMessage;
class JoinFederationExecutionRequest2Message;
class JoinFederationExecutionResponseMessage;
class ResignFederationExecutionLeafRequestMessage;
class ResignFederationExecutionRequestMessage;
class JoinFederateNotifyMessage;
class ResignFederateNotifyMessage;
class ChangeAutomaticResignDirectiveMessage;
class RegisterFederationSynchronizationPointMessage;
class RegisterFederationSynchronizationPointResponseMessage;
class AnnounceSynchronizationPointMessage;
class SynchronizationPointAchievedMessage;
class FederationSynchronizedMessage;
class EnableTimeRegulationRequestMessage;
class EnableTimeRegulationResponseMessage;
class DisableTimeRegulationRequestMessage;
class EnableTimeConstrainedNotifyMessage;
class DisableTimeConstrainedNotifyMessage;
class CommitLowerBoundTimeStampMessage;
class CommitLowerBoundTimeStampResponseMessage;
class LockedByNextMessageRequestMessage;
class TimeConstrainedEnabledMessage;
class TimeRegulationEnabledMessage;
class TimeAdvanceGrantedMessage;
class InsertRegionMessage;
class CommitRegionMessage;
class EraseRegionMessage;
class ChangeInteractionClassPublicationMessage;
class ChangeObjectClassPublicationMessage;
class ChangeInteractionClassSubscriptionMessage;
class ChangeObjectClassSubscriptionMessage;
class ChangeObjectInstanceSubscriptionMessage;
class RegistrationForObjectClassMessage;
class AttributesInScopeMessage;
class TurnUpdatesOnForInstanceMessage;
class TurnInteractionsOnMessage;
class InteractionMessage;
class TimeStampedInteractionMessage;
class ObjectInstanceHandlesRequestMessage;
class ObjectInstanceHandlesResponseMessage;
class ReleaseMultipleObjectInstanceNameHandlePairsMessage;
class ReserveObjectInstanceNameRequestMessage;
class ReserveObjectInstanceNameResponseMessage;
class ReserveMultipleObjectInstanceNameRequestMessage;
class ReserveMultipleObjectInstanceNameResponseMessage;
class InsertObjectInstanceMessage;
class DeleteObjectInstanceMessage;
class TimeStampedDeleteObjectInstanceMessage;
class AttributeUpdateMessage;
class TimeStampedAttributeUpdateMessage;
class RequestAttributeUpdateMessage;
class RequestClassAttributeUpdateMessage;
class QueryAttributeOwnershipRequestMessage;
class QueryAttributeOwnershipResponseMessage;

typedef bool Bool;

typedef std::string String;

typedef uint32_t Unsigned;

typedef double Double;

typedef std::vector<AttributeHandle> AttributeHandleVector;

typedef std::vector<FederateHandle> FederateHandleVector;

typedef std::vector<ParameterHandle> ParameterHandleVector;

typedef std::vector<DimensionHandle> DimensionHandleVector;

typedef std::set<DimensionHandle> DimensionHandleSet;

typedef std::vector<ObjectInstanceHandle> ObjectInstanceHandleVector;

typedef std::vector<RegionHandle> RegionHandleVector;

typedef std::vector<ModuleHandle> ModuleHandleVector;

typedef std::vector<String> StringVector;

typedef std::set<String> StringSet;

typedef std::pair<FederateHandle, Bool> FederateHandleBoolPair;

typedef std::vector<FederateHandleBoolPair> FederateHandleBoolPairVector;

class OPENRTI_API RangeBoundsValue {
public:
  RangeBoundsValue() noexcept = default;
  RangeBoundsValue(
    Unsigned lowerBound,
    Unsigned upperBound) noexcept
      : _lowerBound(lowerBound)
      , _upperBound(upperBound)
    { }
  RangeBoundsValue(const RangeBoundsValue&) = default;
  RangeBoundsValue(RangeBoundsValue&&) = default;
  virtual ~RangeBoundsValue() noexcept = default;
  RangeBoundsValue& operator=(const RangeBoundsValue&) = default;
  RangeBoundsValue& operator=(RangeBoundsValue&&) = default;
  void setLowerBound(const Unsigned& value) noexcept
  { _lowerBound = value; }
  void setLowerBound(Unsigned&& value) noexcept
  { _lowerBound = std::move(value); }
  Unsigned& getLowerBound() noexcept
  { return _lowerBound; }
  const Unsigned& getLowerBound() const noexcept
  { return _lowerBound; }

  void setUpperBound(const Unsigned& value) noexcept
  { _upperBound = value; }
  void setUpperBound(Unsigned&& value) noexcept
  { _upperBound = std::move(value); }
  Unsigned& getUpperBound() noexcept
  { return _upperBound; }
  const Unsigned& getUpperBound() const noexcept
  { return _upperBound; }

  RangeBoundsValue& swap(RangeBoundsValue& rhs) noexcept
  {
    std::swap(_lowerBound, rhs._lowerBound);
    std::swap(_upperBound, rhs._upperBound);
    return *this;
  }
  bool operator==(const RangeBoundsValue& rhs) const noexcept
  {
    if (getLowerBound() != rhs.getLowerBound()) return false;
    if (getUpperBound() != rhs.getUpperBound()) return false;
    return true;
  }
  bool operator<(const RangeBoundsValue& rhs) const noexcept
  {
    if (getLowerBound() < rhs.getLowerBound()) return true;
    if (rhs.getLowerBound() < getLowerBound()) return false;
    if (getUpperBound() < rhs.getUpperBound()) return true;
    if (rhs.getUpperBound() < getUpperBound()) return false;
    return false;
  }
  bool operator>(const RangeBoundsValue& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const RangeBoundsValue& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const RangeBoundsValue& rhs) const noexcept
  { return !operator>(rhs); }
private:
  Unsigned _lowerBound = 0;
  Unsigned _upperBound = 0;
};

typedef std::pair<DimensionHandle, RangeBoundsValue> DimensionHandleRangeBoundsValuePair;

typedef std::vector<DimensionHandleRangeBoundsValuePair> RegionValue;

typedef std::vector<RegionValue> RegionValueList;

typedef std::pair<RegionHandle, DimensionHandleSet> RegionHandleDimensionHandleSetPair;

typedef std::vector<RegionHandleDimensionHandleSetPair> RegionHandleDimensionHandleSetPairVector;

typedef std::pair<RegionHandle, SpaceHandle> RegionHandleSpaceHandlePair;

typedef std::vector<RegionHandleSpaceHandlePair> RegionHandleSpaceHandlePairVector;

typedef std::pair<RegionHandle, RegionValue> RegionHandleRegionValuePair;

typedef std::vector<RegionHandleRegionValuePair> RegionHandleRegionValuePairVector;

typedef std::pair<InteractionClassHandle, RegionValueList> InteractionClassHandleRegionValueListPair;

typedef std::pair<AttributeHandle, RegionValueList> AttributeHandleRegionValueListPair;

class OPENRTI_API AttributeState {
public:
  AttributeState() noexcept = default;
  AttributeState(
    AttributeHandle attributeHandle,
    FederateHandle ownerFederate) noexcept
      : _attributeHandle(attributeHandle)
      , _ownerFederate(ownerFederate)
    { }
  AttributeState(const AttributeState&) = default;
  AttributeState(AttributeState&&) = default;
  virtual ~AttributeState() noexcept = default;
  AttributeState& operator=(const AttributeState&) = default;
  AttributeState& operator=(AttributeState&&) = default;
  void setAttributeHandle(const AttributeHandle& value) noexcept
  { _attributeHandle = value; }
  void setAttributeHandle(AttributeHandle&& value) noexcept
  { _attributeHandle = std::move(value); }
  AttributeHandle& getAttributeHandle() noexcept
  { return _attributeHandle; }
  const AttributeHandle& getAttributeHandle() const noexcept
  { return _attributeHandle; }

  void setOwnerFederate(const FederateHandle& value) noexcept
  { _ownerFederate = value; }
  void setOwnerFederate(FederateHandle&& value) noexcept
  { _ownerFederate = std::move(value); }
  FederateHandle& getOwnerFederate() noexcept
  { return _ownerFederate; }
  const FederateHandle& getOwnerFederate() const noexcept
  { return _ownerFederate; }

  AttributeState& swap(AttributeState& rhs) noexcept
  {
    std::swap(_attributeHandle, rhs._attributeHandle);
    std::swap(_ownerFederate, rhs._ownerFederate);
    return *this;
  }
  bool operator==(const AttributeState& rhs) const noexcept
  {
    if (getAttributeHandle() != rhs.getAttributeHandle()) return false;
    if (getOwnerFederate() != rhs.getOwnerFederate()) return false;
    return true;
  }
  bool operator<(const AttributeState& rhs) const noexcept
  {
    if (getAttributeHandle() < rhs.getAttributeHandle()) return true;
    if (rhs.getAttributeHandle() < getAttributeHandle()) return false;
    if (getOwnerFederate() < rhs.getOwnerFederate()) return true;
    if (rhs.getOwnerFederate() < getOwnerFederate()) return false;
    return false;
  }
  bool operator>(const AttributeState& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const AttributeState& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const AttributeState& rhs) const noexcept
  { return !operator>(rhs); }
private:
  AttributeHandle _attributeHandle;
  FederateHandle _ownerFederate;
};

typedef std::vector<AttributeState> AttributeStateVector;

class OPENRTI_API ParameterValue {
public:
  ParameterValue() noexcept = default;
  ParameterValue(
    ParameterHandle parameterHandle,
    VariableLengthData value) noexcept
      : _parameterHandle(parameterHandle)
      , _value(value)
    { }
  ParameterValue(const ParameterValue&) = default;
  ParameterValue(ParameterValue&&) = default;
  virtual ~ParameterValue() noexcept = default;
  ParameterValue& operator=(const ParameterValue&) = default;
  ParameterValue& operator=(ParameterValue&&) = default;
  void setParameterHandle(const ParameterHandle& value) noexcept
  { _parameterHandle = value; }
  void setParameterHandle(ParameterHandle&& value) noexcept
  { _parameterHandle = std::move(value); }
  ParameterHandle& getParameterHandle() noexcept
  { return _parameterHandle; }
  const ParameterHandle& getParameterHandle() const noexcept
  { return _parameterHandle; }

  void setValue(const VariableLengthData& value) noexcept
  { _value = value; }
  void setValue(VariableLengthData&& value) noexcept
  { _value = std::move(value); }
  VariableLengthData& getValue() noexcept
  { return _value; }
  const VariableLengthData& getValue() const noexcept
  { return _value; }

  ParameterValue& swap(ParameterValue& rhs) noexcept
  {
    std::swap(_parameterHandle, rhs._parameterHandle);
    _value.swap(rhs._value);
    return *this;
  }
  bool operator==(const ParameterValue& rhs) const noexcept
  {
    if (getParameterHandle() != rhs.getParameterHandle()) return false;
    if (getValue() != rhs.getValue()) return false;
    return true;
  }
  bool operator<(const ParameterValue& rhs) const noexcept
  {
    if (getParameterHandle() < rhs.getParameterHandle()) return true;
    if (rhs.getParameterHandle() < getParameterHandle()) return false;
    if (getValue() < rhs.getValue()) return true;
    if (rhs.getValue() < getValue()) return false;
    return false;
  }
  bool operator>(const ParameterValue& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ParameterValue& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ParameterValue& rhs) const noexcept
  { return !operator>(rhs); }
private:
  ParameterHandle _parameterHandle;
  VariableLengthData _value;
};

typedef std::vector<ParameterValue> ParameterValueVector;

class OPENRTI_API AttributeValue {
public:
  AttributeValue() noexcept = default;
  AttributeValue(
    AttributeHandle attributeHandle,
    VariableLengthData value) noexcept
      : _attributeHandle(attributeHandle)
      , _value(value)
    { }
  AttributeValue(const AttributeValue&) = default;
  AttributeValue(AttributeValue&&) = default;
  virtual ~AttributeValue() noexcept = default;
  AttributeValue& operator=(const AttributeValue&) = default;
  AttributeValue& operator=(AttributeValue&&) = default;
  void setAttributeHandle(const AttributeHandle& value) noexcept
  { _attributeHandle = value; }
  void setAttributeHandle(AttributeHandle&& value) noexcept
  { _attributeHandle = std::move(value); }
  AttributeHandle& getAttributeHandle() noexcept
  { return _attributeHandle; }
  const AttributeHandle& getAttributeHandle() const noexcept
  { return _attributeHandle; }

  void setValue(const VariableLengthData& value) noexcept
  { _value = value; }
  void setValue(VariableLengthData&& value) noexcept
  { _value = std::move(value); }
  VariableLengthData& getValue() noexcept
  { return _value; }
  const VariableLengthData& getValue() const noexcept
  { return _value; }

  AttributeValue& swap(AttributeValue& rhs) noexcept
  {
    std::swap(_attributeHandle, rhs._attributeHandle);
    _value.swap(rhs._value);
    return *this;
  }
  bool operator==(const AttributeValue& rhs) const noexcept
  {
    if (getAttributeHandle() != rhs.getAttributeHandle()) return false;
    if (getValue() != rhs.getValue()) return false;
    return true;
  }
  bool operator<(const AttributeValue& rhs) const noexcept
  {
    if (getAttributeHandle() < rhs.getAttributeHandle()) return true;
    if (rhs.getAttributeHandle() < getAttributeHandle()) return false;
    if (getValue() < rhs.getValue()) return true;
    if (rhs.getValue() < getValue()) return false;
    return false;
  }
  bool operator>(const AttributeValue& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const AttributeValue& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const AttributeValue& rhs) const noexcept
  { return !operator>(rhs); }
private:
  AttributeHandle _attributeHandle;
  VariableLengthData _value;
};

typedef std::vector<AttributeValue> AttributeValueVector;

typedef std::pair<FederateHandle, SaveStatus> FederateHandleSaveStatusPair;

typedef std::vector<FederateHandleSaveStatusPair> FederateHandleSaveStatusPairVector;

typedef std::pair<FederateHandle, RestoreStatus> FederateHandleRestoreStatusPair;

typedef std::vector<FederateHandleRestoreStatusPair> FederateHandleRestoreStatusPairVector;

class OPENRTI_API FederationExecutionInformation {
public:
  FederationExecutionInformation() noexcept = default;
  FederationExecutionInformation(
    String federationExecutionName,
    String logicalTimeFactoryName) noexcept
      : _federationExecutionName(federationExecutionName)
      , _logicalTimeFactoryName(logicalTimeFactoryName)
    { }
  FederationExecutionInformation(const FederationExecutionInformation&) = default;
  FederationExecutionInformation(FederationExecutionInformation&&) = default;
  virtual ~FederationExecutionInformation() noexcept = default;
  FederationExecutionInformation& operator=(const FederationExecutionInformation&) = default;
  FederationExecutionInformation& operator=(FederationExecutionInformation&&) = default;
  void setFederationExecutionName(const String& value) noexcept
  { _federationExecutionName = value; }
  void setFederationExecutionName(String&& value) noexcept
  { _federationExecutionName = std::move(value); }
  String& getFederationExecutionName() noexcept
  { return _federationExecutionName; }
  const String& getFederationExecutionName() const noexcept
  { return _federationExecutionName; }

  void setLogicalTimeFactoryName(const String& value) noexcept
  { _logicalTimeFactoryName = value; }
  void setLogicalTimeFactoryName(String&& value) noexcept
  { _logicalTimeFactoryName = std::move(value); }
  String& getLogicalTimeFactoryName() noexcept
  { return _logicalTimeFactoryName; }
  const String& getLogicalTimeFactoryName() const noexcept
  { return _logicalTimeFactoryName; }

  FederationExecutionInformation& swap(FederationExecutionInformation& rhs) noexcept
  {
    _federationExecutionName.swap(rhs._federationExecutionName);
    _logicalTimeFactoryName.swap(rhs._logicalTimeFactoryName);
    return *this;
  }
  bool operator==(const FederationExecutionInformation& rhs) const noexcept
  {
    if (getFederationExecutionName() != rhs.getFederationExecutionName()) return false;
    if (getLogicalTimeFactoryName() != rhs.getLogicalTimeFactoryName()) return false;
    return true;
  }
  bool operator<(const FederationExecutionInformation& rhs) const noexcept
  {
    if (getFederationExecutionName() < rhs.getFederationExecutionName()) return true;
    if (rhs.getFederationExecutionName() < getFederationExecutionName()) return false;
    if (getLogicalTimeFactoryName() < rhs.getLogicalTimeFactoryName()) return true;
    if (rhs.getLogicalTimeFactoryName() < getLogicalTimeFactoryName()) return false;
    return false;
  }
  bool operator>(const FederationExecutionInformation& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FederationExecutionInformation& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FederationExecutionInformation& rhs) const noexcept
  { return !operator>(rhs); }
private:
  String _federationExecutionName;
  String _logicalTimeFactoryName;
};

typedef std::vector<FederationExecutionInformation> FederationExecutionInformationVector;

typedef std::pair<ObjectInstanceHandle, String> ObjectInstanceHandleNamePair;

typedef std::vector<ObjectInstanceHandleNamePair> ObjectInstanceHandleNamePairVector;

typedef std::map<String, StringVector> ConfigurationParameterMap;

class OPENRTI_API FOMStringBasicDataType {
public:
  FOMStringBasicDataType() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringBasicDataType(const FOMStringBasicDataType&) = default;
  FOMStringBasicDataType(FOMStringBasicDataType&&) = default;
  virtual ~FOMStringBasicDataType() noexcept = default;
  FOMStringBasicDataType& operator=(const FOMStringBasicDataType&) = default;
  FOMStringBasicDataType& operator=(FOMStringBasicDataType&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setSize(const Unsigned& value) noexcept
  { getImpl()._size = value; }
  void setSize(Unsigned&& value) noexcept
  { getImpl()._size = std::move(value); }
  Unsigned& getSize() noexcept
  { return getImpl()._size; }
  const Unsigned& getSize() const noexcept
  { return getConstImpl()._size; }

  void setEndian(const Endianness& value) noexcept
  { getImpl()._endian = value; }
  void setEndian(Endianness&& value) noexcept
  { getImpl()._endian = std::move(value); }
  Endianness& getEndian() noexcept
  { return getImpl()._endian; }
  const Endianness& getEndian() const noexcept
  { return getConstImpl()._endian; }

  FOMStringBasicDataType& swap(FOMStringBasicDataType& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringBasicDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getSize() != rhs.getSize()) return false;
    if (getEndian() != rhs.getEndian()) return false;
    return true;
  }
  bool operator<(const FOMStringBasicDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getSize() < rhs.getSize()) return true;
    if (rhs.getSize() < getSize()) return false;
    if (getEndian() < rhs.getEndian()) return true;
    if (rhs.getEndian() < getEndian()) return false;
    return false;
  }
  bool operator>(const FOMStringBasicDataType& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringBasicDataType& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringBasicDataType& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _size(),
      _endian()
    { }
    String _name;
    Unsigned _size = 0;
    Endianness _endian = BigEndian;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringBasicDataType> FOMStringBasicDataTypeList;

class OPENRTI_API FOMStringSimpleDataType {
public:
  FOMStringSimpleDataType() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringSimpleDataType(const FOMStringSimpleDataType&) = default;
  FOMStringSimpleDataType(FOMStringSimpleDataType&&) = default;
  virtual ~FOMStringSimpleDataType() noexcept = default;
  FOMStringSimpleDataType& operator=(const FOMStringSimpleDataType&) = default;
  FOMStringSimpleDataType& operator=(FOMStringSimpleDataType&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setRepresentation(const String& value) noexcept
  { getImpl()._representation = value; }
  void setRepresentation(String&& value) noexcept
  { getImpl()._representation = std::move(value); }
  String& getRepresentation() noexcept
  { return getImpl()._representation; }
  const String& getRepresentation() const noexcept
  { return getConstImpl()._representation; }

  FOMStringSimpleDataType& swap(FOMStringSimpleDataType& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringSimpleDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getRepresentation() != rhs.getRepresentation()) return false;
    return true;
  }
  bool operator<(const FOMStringSimpleDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getRepresentation() < rhs.getRepresentation()) return true;
    if (rhs.getRepresentation() < getRepresentation()) return false;
    return false;
  }
  bool operator>(const FOMStringSimpleDataType& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringSimpleDataType& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringSimpleDataType& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _representation()
    { }
    String _name;
    String _representation;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringSimpleDataType> FOMStringSimpleDataTypeList;

class OPENRTI_API FOMStringEnumerator {
public:
  FOMStringEnumerator() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringEnumerator(const FOMStringEnumerator&) = default;
  FOMStringEnumerator(FOMStringEnumerator&&) = default;
  virtual ~FOMStringEnumerator() noexcept = default;
  FOMStringEnumerator& operator=(const FOMStringEnumerator&) = default;
  FOMStringEnumerator& operator=(FOMStringEnumerator&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setValue(const Unsigned& value) noexcept
  { getImpl()._value = value; }
  void setValue(Unsigned&& value) noexcept
  { getImpl()._value = std::move(value); }
  Unsigned& getValue() noexcept
  { return getImpl()._value; }
  const Unsigned& getValue() const noexcept
  { return getConstImpl()._value; }

  FOMStringEnumerator& swap(FOMStringEnumerator& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringEnumerator& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getValue() != rhs.getValue()) return false;
    return true;
  }
  bool operator<(const FOMStringEnumerator& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getValue() < rhs.getValue()) return true;
    if (rhs.getValue() < getValue()) return false;
    return false;
  }
  bool operator>(const FOMStringEnumerator& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringEnumerator& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringEnumerator& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _value()
    { }
    String _name;
    Unsigned _value = 0;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringEnumerator> FOMStringEnumeratorList;

class OPENRTI_API FOMStringEnumeratedDataType {
public:
  FOMStringEnumeratedDataType() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringEnumeratedDataType(const FOMStringEnumeratedDataType&) = default;
  FOMStringEnumeratedDataType(FOMStringEnumeratedDataType&&) = default;
  virtual ~FOMStringEnumeratedDataType() noexcept = default;
  FOMStringEnumeratedDataType& operator=(const FOMStringEnumeratedDataType&) = default;
  FOMStringEnumeratedDataType& operator=(FOMStringEnumeratedDataType&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setRepresentation(const String& value) noexcept
  { getImpl()._representation = value; }
  void setRepresentation(String&& value) noexcept
  { getImpl()._representation = std::move(value); }
  String& getRepresentation() noexcept
  { return getImpl()._representation; }
  const String& getRepresentation() const noexcept
  { return getConstImpl()._representation; }

  void setEnumerators(const FOMStringEnumeratorList& value) noexcept
  { getImpl()._enumerators = value; }
  void setEnumerators(FOMStringEnumeratorList&& value) noexcept
  { getImpl()._enumerators = std::move(value); }
  FOMStringEnumeratorList& getEnumerators() noexcept
  { return getImpl()._enumerators; }
  const FOMStringEnumeratorList& getEnumerators() const noexcept
  { return getConstImpl()._enumerators; }

  FOMStringEnumeratedDataType& swap(FOMStringEnumeratedDataType& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringEnumeratedDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getRepresentation() != rhs.getRepresentation()) return false;
    if (getEnumerators() != rhs.getEnumerators()) return false;
    return true;
  }
  bool operator<(const FOMStringEnumeratedDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getRepresentation() < rhs.getRepresentation()) return true;
    if (rhs.getRepresentation() < getRepresentation()) return false;
    if (getEnumerators() < rhs.getEnumerators()) return true;
    if (rhs.getEnumerators() < getEnumerators()) return false;
    return false;
  }
  bool operator>(const FOMStringEnumeratedDataType& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringEnumeratedDataType& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringEnumeratedDataType& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _representation(),
      _enumerators()
    { }
    String _name;
    String _representation;
    FOMStringEnumeratorList _enumerators;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringEnumeratedDataType> FOMStringEnumeratedDataTypeList;

class OPENRTI_API FOMStringArrayDataType {
public:
  FOMStringArrayDataType() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringArrayDataType(const FOMStringArrayDataType&) = default;
  FOMStringArrayDataType(FOMStringArrayDataType&&) = default;
  virtual ~FOMStringArrayDataType() noexcept = default;
  FOMStringArrayDataType& operator=(const FOMStringArrayDataType&) = default;
  FOMStringArrayDataType& operator=(FOMStringArrayDataType&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDataType(const String& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(String&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  String& getDataType() noexcept
  { return getImpl()._dataType; }
  const String& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  void setCardinality(const String& value) noexcept
  { getImpl()._cardinality = value; }
  void setCardinality(String&& value) noexcept
  { getImpl()._cardinality = std::move(value); }
  String& getCardinality() noexcept
  { return getImpl()._cardinality; }
  const String& getCardinality() const noexcept
  { return getConstImpl()._cardinality; }

  void setEncoding(const String& value) noexcept
  { getImpl()._encoding = value; }
  void setEncoding(String&& value) noexcept
  { getImpl()._encoding = std::move(value); }
  String& getEncoding() noexcept
  { return getImpl()._encoding; }
  const String& getEncoding() const noexcept
  { return getConstImpl()._encoding; }

  FOMStringArrayDataType& swap(FOMStringArrayDataType& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringArrayDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    if (getCardinality() != rhs.getCardinality()) return false;
    if (getEncoding() != rhs.getEncoding()) return false;
    return true;
  }
  bool operator<(const FOMStringArrayDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    if (getCardinality() < rhs.getCardinality()) return true;
    if (rhs.getCardinality() < getCardinality()) return false;
    if (getEncoding() < rhs.getEncoding()) return true;
    if (rhs.getEncoding() < getEncoding()) return false;
    return false;
  }
  bool operator>(const FOMStringArrayDataType& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringArrayDataType& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringArrayDataType& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _dataType(),
      _cardinality(),
      _encoding()
    { }
    String _name;
    String _dataType;
    String _cardinality;
    String _encoding;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringArrayDataType> FOMStringArrayDataTypeList;

class OPENRTI_API FOMStringArrayDataType2 {
public:
  FOMStringArrayDataType2() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringArrayDataType2(const FOMStringArrayDataType2&) = default;
  FOMStringArrayDataType2(FOMStringArrayDataType2&&) = default;
  virtual ~FOMStringArrayDataType2() noexcept = default;
  FOMStringArrayDataType2& operator=(const FOMStringArrayDataType2&) = default;
  FOMStringArrayDataType2& operator=(FOMStringArrayDataType2&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDataType(const String& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(String&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  String& getDataType() noexcept
  { return getImpl()._dataType; }
  const String& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  void setCardinality(const String& value) noexcept
  { getImpl()._cardinality = value; }
  void setCardinality(String&& value) noexcept
  { getImpl()._cardinality = std::move(value); }
  String& getCardinality() noexcept
  { return getImpl()._cardinality; }
  const String& getCardinality() const noexcept
  { return getConstImpl()._cardinality; }

  void setEncoding(const ArrayDataTypeEncoding& value) noexcept
  { getImpl()._encoding = value; }
  void setEncoding(ArrayDataTypeEncoding&& value) noexcept
  { getImpl()._encoding = std::move(value); }
  ArrayDataTypeEncoding& getEncoding() noexcept
  { return getImpl()._encoding; }
  const ArrayDataTypeEncoding& getEncoding() const noexcept
  { return getConstImpl()._encoding; }

  FOMStringArrayDataType2& swap(FOMStringArrayDataType2& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringArrayDataType2& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    if (getCardinality() != rhs.getCardinality()) return false;
    if (getEncoding() != rhs.getEncoding()) return false;
    return true;
  }
  bool operator<(const FOMStringArrayDataType2& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    if (getCardinality() < rhs.getCardinality()) return true;
    if (rhs.getCardinality() < getCardinality()) return false;
    if (getEncoding() < rhs.getEncoding()) return true;
    if (rhs.getEncoding() < getEncoding()) return false;
    return false;
  }
  bool operator>(const FOMStringArrayDataType2& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringArrayDataType2& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringArrayDataType2& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _dataType(),
      _cardinality(),
      _encoding()
    { }
    String _name;
    String _dataType;
    String _cardinality;
    ArrayDataTypeEncoding _encoding = FixedArrayDataTypeEncoding;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringArrayDataType2> FOMStringArrayDataType2List;

class OPENRTI_API FOMStringFixedRecordField {
public:
  FOMStringFixedRecordField() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringFixedRecordField(const FOMStringFixedRecordField&) = default;
  FOMStringFixedRecordField(FOMStringFixedRecordField&&) = default;
  virtual ~FOMStringFixedRecordField() noexcept = default;
  FOMStringFixedRecordField& operator=(const FOMStringFixedRecordField&) = default;
  FOMStringFixedRecordField& operator=(FOMStringFixedRecordField&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDataType(const Unsigned& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(Unsigned&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  Unsigned& getDataType() noexcept
  { return getImpl()._dataType; }
  const Unsigned& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  FOMStringFixedRecordField& swap(FOMStringFixedRecordField& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringFixedRecordField& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    return true;
  }
  bool operator<(const FOMStringFixedRecordField& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    return false;
  }
  bool operator>(const FOMStringFixedRecordField& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringFixedRecordField& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringFixedRecordField& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _dataType()
    { }
    String _name;
    Unsigned _dataType = 0;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringFixedRecordField> FOMStringFixedRecordFieldList;

class OPENRTI_API FOMStringFixedRecordDataType {
public:
  FOMStringFixedRecordDataType() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringFixedRecordDataType(const FOMStringFixedRecordDataType&) = default;
  FOMStringFixedRecordDataType(FOMStringFixedRecordDataType&&) = default;
  virtual ~FOMStringFixedRecordDataType() noexcept = default;
  FOMStringFixedRecordDataType& operator=(const FOMStringFixedRecordDataType&) = default;
  FOMStringFixedRecordDataType& operator=(FOMStringFixedRecordDataType&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setEncoding(const String& value) noexcept
  { getImpl()._encoding = value; }
  void setEncoding(String&& value) noexcept
  { getImpl()._encoding = std::move(value); }
  String& getEncoding() noexcept
  { return getImpl()._encoding; }
  const String& getEncoding() const noexcept
  { return getConstImpl()._encoding; }

  void setFields(const FOMStringFixedRecordFieldList& value) noexcept
  { getImpl()._fields = value; }
  void setFields(FOMStringFixedRecordFieldList&& value) noexcept
  { getImpl()._fields = std::move(value); }
  FOMStringFixedRecordFieldList& getFields() noexcept
  { return getImpl()._fields; }
  const FOMStringFixedRecordFieldList& getFields() const noexcept
  { return getConstImpl()._fields; }

  FOMStringFixedRecordDataType& swap(FOMStringFixedRecordDataType& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringFixedRecordDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getEncoding() != rhs.getEncoding()) return false;
    if (getFields() != rhs.getFields()) return false;
    return true;
  }
  bool operator<(const FOMStringFixedRecordDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getEncoding() < rhs.getEncoding()) return true;
    if (rhs.getEncoding() < getEncoding()) return false;
    if (getFields() < rhs.getFields()) return true;
    if (rhs.getFields() < getFields()) return false;
    return false;
  }
  bool operator>(const FOMStringFixedRecordDataType& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringFixedRecordDataType& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringFixedRecordDataType& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _encoding(),
      _fields()
    { }
    String _name;
    String _encoding;
    FOMStringFixedRecordFieldList _fields;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringFixedRecordDataType> FOMStringFixedRecordDataTypeList;

class OPENRTI_API FOMStringFixedRecordField2 {
public:
  FOMStringFixedRecordField2() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringFixedRecordField2(const FOMStringFixedRecordField2&) = default;
  FOMStringFixedRecordField2(FOMStringFixedRecordField2&&) = default;
  virtual ~FOMStringFixedRecordField2() noexcept = default;
  FOMStringFixedRecordField2& operator=(const FOMStringFixedRecordField2&) = default;
  FOMStringFixedRecordField2& operator=(FOMStringFixedRecordField2&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDataType(const String& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(String&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  String& getDataType() noexcept
  { return getImpl()._dataType; }
  const String& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  void setVersion(const Unsigned& value) noexcept
  { getImpl()._version = value; }
  void setVersion(Unsigned&& value) noexcept
  { getImpl()._version = std::move(value); }
  Unsigned& getVersion() noexcept
  { return getImpl()._version; }
  const Unsigned& getVersion() const noexcept
  { return getConstImpl()._version; }

  FOMStringFixedRecordField2& swap(FOMStringFixedRecordField2& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringFixedRecordField2& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    if (getVersion() != rhs.getVersion()) return false;
    return true;
  }
  bool operator<(const FOMStringFixedRecordField2& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    if (getVersion() < rhs.getVersion()) return true;
    if (rhs.getVersion() < getVersion()) return false;
    return false;
  }
  bool operator>(const FOMStringFixedRecordField2& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringFixedRecordField2& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringFixedRecordField2& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _dataType(),
      _version()
    { }
    String _name;
    String _dataType;
    Unsigned _version = 0;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringFixedRecordField2> FOMStringFixedRecordField2List;

class OPENRTI_API FOMStringFixedRecordDataType2 {
public:
  FOMStringFixedRecordDataType2() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringFixedRecordDataType2(const FOMStringFixedRecordDataType2&) = default;
  FOMStringFixedRecordDataType2(FOMStringFixedRecordDataType2&&) = default;
  virtual ~FOMStringFixedRecordDataType2() noexcept = default;
  FOMStringFixedRecordDataType2& operator=(const FOMStringFixedRecordDataType2&) = default;
  FOMStringFixedRecordDataType2& operator=(FOMStringFixedRecordDataType2&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setEncoding(const String& value) noexcept
  { getImpl()._encoding = value; }
  void setEncoding(String&& value) noexcept
  { getImpl()._encoding = std::move(value); }
  String& getEncoding() noexcept
  { return getImpl()._encoding; }
  const String& getEncoding() const noexcept
  { return getConstImpl()._encoding; }

  void setInclude(const String& value) noexcept
  { getImpl()._include = value; }
  void setInclude(String&& value) noexcept
  { getImpl()._include = std::move(value); }
  String& getInclude() noexcept
  { return getImpl()._include; }
  const String& getInclude() const noexcept
  { return getConstImpl()._include; }

  void setVersion(const Unsigned& value) noexcept
  { getImpl()._version = value; }
  void setVersion(Unsigned&& value) noexcept
  { getImpl()._version = std::move(value); }
  Unsigned& getVersion() noexcept
  { return getImpl()._version; }
  const Unsigned& getVersion() const noexcept
  { return getConstImpl()._version; }

  void setFields(const FOMStringFixedRecordField2List& value) noexcept
  { getImpl()._fields = value; }
  void setFields(FOMStringFixedRecordField2List&& value) noexcept
  { getImpl()._fields = std::move(value); }
  FOMStringFixedRecordField2List& getFields() noexcept
  { return getImpl()._fields; }
  const FOMStringFixedRecordField2List& getFields() const noexcept
  { return getConstImpl()._fields; }

  FOMStringFixedRecordDataType2& swap(FOMStringFixedRecordDataType2& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringFixedRecordDataType2& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getEncoding() != rhs.getEncoding()) return false;
    if (getInclude() != rhs.getInclude()) return false;
    if (getVersion() != rhs.getVersion()) return false;
    if (getFields() != rhs.getFields()) return false;
    return true;
  }
  bool operator<(const FOMStringFixedRecordDataType2& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getEncoding() < rhs.getEncoding()) return true;
    if (rhs.getEncoding() < getEncoding()) return false;
    if (getInclude() < rhs.getInclude()) return true;
    if (rhs.getInclude() < getInclude()) return false;
    if (getVersion() < rhs.getVersion()) return true;
    if (rhs.getVersion() < getVersion()) return false;
    if (getFields() < rhs.getFields()) return true;
    if (rhs.getFields() < getFields()) return false;
    return false;
  }
  bool operator>(const FOMStringFixedRecordDataType2& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringFixedRecordDataType2& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringFixedRecordDataType2& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _encoding(),
      _include(),
      _version(),
      _fields()
    { }
    String _name;
    String _encoding;
    String _include;
    Unsigned _version = 0;
    FOMStringFixedRecordField2List _fields;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringFixedRecordDataType2> FOMStringFixedRecordDataType2List;

class OPENRTI_API FOMStringVariantRecordAlternative {
public:
  FOMStringVariantRecordAlternative() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringVariantRecordAlternative(const FOMStringVariantRecordAlternative&) = default;
  FOMStringVariantRecordAlternative(FOMStringVariantRecordAlternative&&) = default;
  virtual ~FOMStringVariantRecordAlternative() noexcept = default;
  FOMStringVariantRecordAlternative& operator=(const FOMStringVariantRecordAlternative&) = default;
  FOMStringVariantRecordAlternative& operator=(FOMStringVariantRecordAlternative&&) = default;
  void setEnumerator(const String& value) noexcept
  { getImpl()._enumerator = value; }
  void setEnumerator(String&& value) noexcept
  { getImpl()._enumerator = std::move(value); }
  String& getEnumerator() noexcept
  { return getImpl()._enumerator; }
  const String& getEnumerator() const noexcept
  { return getConstImpl()._enumerator; }

  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDataType(const Unsigned& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(Unsigned&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  Unsigned& getDataType() noexcept
  { return getImpl()._dataType; }
  const Unsigned& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  FOMStringVariantRecordAlternative& swap(FOMStringVariantRecordAlternative& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringVariantRecordAlternative& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getEnumerator() != rhs.getEnumerator()) return false;
    if (getName() != rhs.getName()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    return true;
  }
  bool operator<(const FOMStringVariantRecordAlternative& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getEnumerator() < rhs.getEnumerator()) return true;
    if (rhs.getEnumerator() < getEnumerator()) return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    return false;
  }
  bool operator>(const FOMStringVariantRecordAlternative& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringVariantRecordAlternative& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringVariantRecordAlternative& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _enumerator(),
      _name(),
      _dataType()
    { }
    String _enumerator;
    String _name;
    Unsigned _dataType = 0;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringVariantRecordAlternative> FOMStringVariantRecordAlternativeList;

class OPENRTI_API FOMStringVariantRecordDataType {
public:
  FOMStringVariantRecordDataType() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringVariantRecordDataType(const FOMStringVariantRecordDataType&) = default;
  FOMStringVariantRecordDataType(FOMStringVariantRecordDataType&&) = default;
  virtual ~FOMStringVariantRecordDataType() noexcept = default;
  FOMStringVariantRecordDataType& operator=(const FOMStringVariantRecordDataType&) = default;
  FOMStringVariantRecordDataType& operator=(FOMStringVariantRecordDataType&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDiscriminant(const String& value) noexcept
  { getImpl()._discriminant = value; }
  void setDiscriminant(String&& value) noexcept
  { getImpl()._discriminant = std::move(value); }
  String& getDiscriminant() noexcept
  { return getImpl()._discriminant; }
  const String& getDiscriminant() const noexcept
  { return getConstImpl()._discriminant; }

  void setDataType(const String& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(String&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  String& getDataType() noexcept
  { return getImpl()._dataType; }
  const String& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  void setAlternatives(const FOMStringVariantRecordAlternativeList& value) noexcept
  { getImpl()._alternatives = value; }
  void setAlternatives(FOMStringVariantRecordAlternativeList&& value) noexcept
  { getImpl()._alternatives = std::move(value); }
  FOMStringVariantRecordAlternativeList& getAlternatives() noexcept
  { return getImpl()._alternatives; }
  const FOMStringVariantRecordAlternativeList& getAlternatives() const noexcept
  { return getConstImpl()._alternatives; }

  void setEncoding(const String& value) noexcept
  { getImpl()._encoding = value; }
  void setEncoding(String&& value) noexcept
  { getImpl()._encoding = std::move(value); }
  String& getEncoding() noexcept
  { return getImpl()._encoding; }
  const String& getEncoding() const noexcept
  { return getConstImpl()._encoding; }

  FOMStringVariantRecordDataType& swap(FOMStringVariantRecordDataType& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringVariantRecordDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDiscriminant() != rhs.getDiscriminant()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    if (getAlternatives() != rhs.getAlternatives()) return false;
    if (getEncoding() != rhs.getEncoding()) return false;
    return true;
  }
  bool operator<(const FOMStringVariantRecordDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDiscriminant() < rhs.getDiscriminant()) return true;
    if (rhs.getDiscriminant() < getDiscriminant()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    if (getAlternatives() < rhs.getAlternatives()) return true;
    if (rhs.getAlternatives() < getAlternatives()) return false;
    if (getEncoding() < rhs.getEncoding()) return true;
    if (rhs.getEncoding() < getEncoding()) return false;
    return false;
  }
  bool operator>(const FOMStringVariantRecordDataType& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringVariantRecordDataType& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringVariantRecordDataType& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _discriminant(),
      _dataType(),
      _alternatives(),
      _encoding()
    { }
    String _name;
    String _discriminant;
    String _dataType;
    FOMStringVariantRecordAlternativeList _alternatives;
    String _encoding;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringVariantRecordDataType> FOMStringVariantRecordDataTypeList;

class OPENRTI_API FOMStringVariantRecordAlternative2 {
public:
  FOMStringVariantRecordAlternative2() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringVariantRecordAlternative2(const FOMStringVariantRecordAlternative2&) = default;
  FOMStringVariantRecordAlternative2(FOMStringVariantRecordAlternative2&&) = default;
  virtual ~FOMStringVariantRecordAlternative2() noexcept = default;
  FOMStringVariantRecordAlternative2& operator=(const FOMStringVariantRecordAlternative2&) = default;
  FOMStringVariantRecordAlternative2& operator=(FOMStringVariantRecordAlternative2&&) = default;
  void setEnumerator(const String& value) noexcept
  { getImpl()._enumerator = value; }
  void setEnumerator(String&& value) noexcept
  { getImpl()._enumerator = std::move(value); }
  String& getEnumerator() noexcept
  { return getImpl()._enumerator; }
  const String& getEnumerator() const noexcept
  { return getConstImpl()._enumerator; }

  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDataType(const String& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(String&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  String& getDataType() noexcept
  { return getImpl()._dataType; }
  const String& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  FOMStringVariantRecordAlternative2& swap(FOMStringVariantRecordAlternative2& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringVariantRecordAlternative2& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getEnumerator() != rhs.getEnumerator()) return false;
    if (getName() != rhs.getName()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    return true;
  }
  bool operator<(const FOMStringVariantRecordAlternative2& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getEnumerator() < rhs.getEnumerator()) return true;
    if (rhs.getEnumerator() < getEnumerator()) return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    return false;
  }
  bool operator>(const FOMStringVariantRecordAlternative2& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringVariantRecordAlternative2& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringVariantRecordAlternative2& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _enumerator(),
      _name(),
      _dataType()
    { }
    String _enumerator;
    String _name;
    String _dataType;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringVariantRecordAlternative2> FOMStringVariantRecordAlternative2List;

class OPENRTI_API FOMStringVariantRecordDataType2 {
public:
  FOMStringVariantRecordDataType2() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringVariantRecordDataType2(const FOMStringVariantRecordDataType2&) = default;
  FOMStringVariantRecordDataType2(FOMStringVariantRecordDataType2&&) = default;
  virtual ~FOMStringVariantRecordDataType2() noexcept = default;
  FOMStringVariantRecordDataType2& operator=(const FOMStringVariantRecordDataType2&) = default;
  FOMStringVariantRecordDataType2& operator=(FOMStringVariantRecordDataType2&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDiscriminant(const String& value) noexcept
  { getImpl()._discriminant = value; }
  void setDiscriminant(String&& value) noexcept
  { getImpl()._discriminant = std::move(value); }
  String& getDiscriminant() noexcept
  { return getImpl()._discriminant; }
  const String& getDiscriminant() const noexcept
  { return getConstImpl()._discriminant; }

  void setDataType(const String& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(String&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  String& getDataType() noexcept
  { return getImpl()._dataType; }
  const String& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  void setAlternatives(const FOMStringVariantRecordAlternative2List& value) noexcept
  { getImpl()._alternatives = value; }
  void setAlternatives(FOMStringVariantRecordAlternative2List&& value) noexcept
  { getImpl()._alternatives = std::move(value); }
  FOMStringVariantRecordAlternative2List& getAlternatives() noexcept
  { return getImpl()._alternatives; }
  const FOMStringVariantRecordAlternative2List& getAlternatives() const noexcept
  { return getConstImpl()._alternatives; }

  void setEncoding(const String& value) noexcept
  { getImpl()._encoding = value; }
  void setEncoding(String&& value) noexcept
  { getImpl()._encoding = std::move(value); }
  String& getEncoding() noexcept
  { return getImpl()._encoding; }
  const String& getEncoding() const noexcept
  { return getConstImpl()._encoding; }

  FOMStringVariantRecordDataType2& swap(FOMStringVariantRecordDataType2& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringVariantRecordDataType2& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDiscriminant() != rhs.getDiscriminant()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    if (getAlternatives() != rhs.getAlternatives()) return false;
    if (getEncoding() != rhs.getEncoding()) return false;
    return true;
  }
  bool operator<(const FOMStringVariantRecordDataType2& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDiscriminant() < rhs.getDiscriminant()) return true;
    if (rhs.getDiscriminant() < getDiscriminant()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    if (getAlternatives() < rhs.getAlternatives()) return true;
    if (rhs.getAlternatives() < getAlternatives()) return false;
    if (getEncoding() < rhs.getEncoding()) return true;
    if (rhs.getEncoding() < getEncoding()) return false;
    return false;
  }
  bool operator>(const FOMStringVariantRecordDataType2& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringVariantRecordDataType2& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringVariantRecordDataType2& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _discriminant(),
      _dataType(),
      _alternatives(),
      _encoding()
    { }
    String _name;
    String _discriminant;
    String _dataType;
    FOMStringVariantRecordAlternative2List _alternatives;
    String _encoding;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringVariantRecordDataType2> FOMStringVariantRecordDataType2List;

class OPENRTI_API FOMStringTransportationType {
public:
  FOMStringTransportationType() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringTransportationType(const FOMStringTransportationType&) = default;
  FOMStringTransportationType(FOMStringTransportationType&&) = default;
  virtual ~FOMStringTransportationType() noexcept = default;
  FOMStringTransportationType& operator=(const FOMStringTransportationType&) = default;
  FOMStringTransportationType& operator=(FOMStringTransportationType&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  FOMStringTransportationType& swap(FOMStringTransportationType& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringTransportationType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    return true;
  }
  bool operator<(const FOMStringTransportationType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    return false;
  }
  bool operator>(const FOMStringTransportationType& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringTransportationType& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringTransportationType& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name()
    { }
    String _name;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringTransportationType> FOMStringTransportationTypeList;

class OPENRTI_API FOMStringDimension {
public:
  FOMStringDimension() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringDimension(const FOMStringDimension&) = default;
  FOMStringDimension(FOMStringDimension&&) = default;
  virtual ~FOMStringDimension() noexcept = default;
  FOMStringDimension& operator=(const FOMStringDimension&) = default;
  FOMStringDimension& operator=(FOMStringDimension&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setUpperBound(const Unsigned& value) noexcept
  { getImpl()._upperBound = value; }
  void setUpperBound(Unsigned&& value) noexcept
  { getImpl()._upperBound = std::move(value); }
  Unsigned& getUpperBound() noexcept
  { return getImpl()._upperBound; }
  const Unsigned& getUpperBound() const noexcept
  { return getConstImpl()._upperBound; }

  FOMStringDimension& swap(FOMStringDimension& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringDimension& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getUpperBound() != rhs.getUpperBound()) return false;
    return true;
  }
  bool operator<(const FOMStringDimension& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getUpperBound() < rhs.getUpperBound()) return true;
    if (rhs.getUpperBound() < getUpperBound()) return false;
    return false;
  }
  bool operator>(const FOMStringDimension& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringDimension& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringDimension& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _upperBound()
    { }
    String _name;
    Unsigned _upperBound = 0;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringDimension> FOMStringDimensionList;

class OPENRTI_API FOMStringRoutingSpace {
public:
  FOMStringRoutingSpace() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringRoutingSpace(const FOMStringRoutingSpace&) = default;
  FOMStringRoutingSpace(FOMStringRoutingSpace&&) = default;
  virtual ~FOMStringRoutingSpace() noexcept = default;
  FOMStringRoutingSpace& operator=(const FOMStringRoutingSpace&) = default;
  FOMStringRoutingSpace& operator=(FOMStringRoutingSpace&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDimensionSet(const StringSet& value) noexcept
  { getImpl()._dimensionSet = value; }
  void setDimensionSet(StringSet&& value) noexcept
  { getImpl()._dimensionSet = std::move(value); }
  StringSet& getDimensionSet() noexcept
  { return getImpl()._dimensionSet; }
  const StringSet& getDimensionSet() const noexcept
  { return getConstImpl()._dimensionSet; }

  FOMStringRoutingSpace& swap(FOMStringRoutingSpace& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringRoutingSpace& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDimensionSet() != rhs.getDimensionSet()) return false;
    return true;
  }
  bool operator<(const FOMStringRoutingSpace& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDimensionSet() < rhs.getDimensionSet()) return true;
    if (rhs.getDimensionSet() < getDimensionSet()) return false;
    return false;
  }
  bool operator>(const FOMStringRoutingSpace& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringRoutingSpace& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringRoutingSpace& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _dimensionSet()
    { }
    String _name;
    StringSet _dimensionSet;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringRoutingSpace> FOMStringRoutingSpaceList;

class OPENRTI_API FOMStringParameter {
public:
  FOMStringParameter() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringParameter(const FOMStringParameter&) = default;
  FOMStringParameter(FOMStringParameter&&) = default;
  virtual ~FOMStringParameter() noexcept = default;
  FOMStringParameter& operator=(const FOMStringParameter&) = default;
  FOMStringParameter& operator=(FOMStringParameter&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDataType(const String& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(String&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  String& getDataType() noexcept
  { return getImpl()._dataType; }
  const String& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  FOMStringParameter& swap(FOMStringParameter& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringParameter& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    return true;
  }
  bool operator<(const FOMStringParameter& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    return false;
  }
  bool operator>(const FOMStringParameter& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringParameter& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringParameter& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _dataType()
    { }
    String _name;
    String _dataType;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringParameter> FOMStringParameterList;

class OPENRTI_API FOMStringInteractionClass {
public:
  FOMStringInteractionClass() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringInteractionClass(const FOMStringInteractionClass&) = default;
  FOMStringInteractionClass(FOMStringInteractionClass&&) = default;
  virtual ~FOMStringInteractionClass() noexcept = default;
  FOMStringInteractionClass& operator=(const FOMStringInteractionClass&) = default;
  FOMStringInteractionClass& operator=(FOMStringInteractionClass&&) = default;
  void setName(const StringVector& value) noexcept
  { getImpl()._name = value; }
  void setName(StringVector&& value) noexcept
  { getImpl()._name = std::move(value); }
  StringVector& getName() noexcept
  { return getImpl()._name; }
  const StringVector& getName() const noexcept
  { return getConstImpl()._name; }

  void setOrderType(const String& value) noexcept
  { getImpl()._orderType = value; }
  void setOrderType(String&& value) noexcept
  { getImpl()._orderType = std::move(value); }
  String& getOrderType() noexcept
  { return getImpl()._orderType; }
  const String& getOrderType() const noexcept
  { return getConstImpl()._orderType; }

  void setTransportationType(const String& value) noexcept
  { getImpl()._transportationType = value; }
  void setTransportationType(String&& value) noexcept
  { getImpl()._transportationType = std::move(value); }
  String& getTransportationType() noexcept
  { return getImpl()._transportationType; }
  const String& getTransportationType() const noexcept
  { return getConstImpl()._transportationType; }

  void setRoutingSpace(const String& value) noexcept
  { getImpl()._routingSpace = value; }
  void setRoutingSpace(String&& value) noexcept
  { getImpl()._routingSpace = std::move(value); }
  String& getRoutingSpace() noexcept
  { return getImpl()._routingSpace; }
  const String& getRoutingSpace() const noexcept
  { return getConstImpl()._routingSpace; }

  void setDimensionSet(const StringSet& value) noexcept
  { getImpl()._dimensionSet = value; }
  void setDimensionSet(StringSet&& value) noexcept
  { getImpl()._dimensionSet = std::move(value); }
  StringSet& getDimensionSet() noexcept
  { return getImpl()._dimensionSet; }
  const StringSet& getDimensionSet() const noexcept
  { return getConstImpl()._dimensionSet; }

  void setParameterList(const FOMStringParameterList& value) noexcept
  { getImpl()._parameterList = value; }
  void setParameterList(FOMStringParameterList&& value) noexcept
  { getImpl()._parameterList = std::move(value); }
  FOMStringParameterList& getParameterList() noexcept
  { return getImpl()._parameterList; }
  const FOMStringParameterList& getParameterList() const noexcept
  { return getConstImpl()._parameterList; }

  FOMStringInteractionClass& swap(FOMStringInteractionClass& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringInteractionClass& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getOrderType() != rhs.getOrderType()) return false;
    if (getTransportationType() != rhs.getTransportationType()) return false;
    if (getRoutingSpace() != rhs.getRoutingSpace()) return false;
    if (getDimensionSet() != rhs.getDimensionSet()) return false;
    if (getParameterList() != rhs.getParameterList()) return false;
    return true;
  }
  bool operator<(const FOMStringInteractionClass& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getOrderType() < rhs.getOrderType()) return true;
    if (rhs.getOrderType() < getOrderType()) return false;
    if (getTransportationType() < rhs.getTransportationType()) return true;
    if (rhs.getTransportationType() < getTransportationType()) return false;
    if (getRoutingSpace() < rhs.getRoutingSpace()) return true;
    if (rhs.getRoutingSpace() < getRoutingSpace()) return false;
    if (getDimensionSet() < rhs.getDimensionSet()) return true;
    if (rhs.getDimensionSet() < getDimensionSet()) return false;
    if (getParameterList() < rhs.getParameterList()) return true;
    if (rhs.getParameterList() < getParameterList()) return false;
    return false;
  }
  bool operator>(const FOMStringInteractionClass& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringInteractionClass& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringInteractionClass& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _orderType(),
      _transportationType(),
      _routingSpace(),
      _dimensionSet(),
      _parameterList()
    { }
    StringVector _name;
    String _orderType;
    String _transportationType;
    String _routingSpace;
    StringSet _dimensionSet;
    FOMStringParameterList _parameterList;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringInteractionClass> FOMStringInteractionClassList;

class OPENRTI_API FOMStringAttribute {
public:
  FOMStringAttribute() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringAttribute(const FOMStringAttribute&) = default;
  FOMStringAttribute(FOMStringAttribute&&) = default;
  virtual ~FOMStringAttribute() noexcept = default;
  FOMStringAttribute& operator=(const FOMStringAttribute&) = default;
  FOMStringAttribute& operator=(FOMStringAttribute&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDataType(const String& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(String&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  String& getDataType() noexcept
  { return getImpl()._dataType; }
  const String& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  void setOrderType(const String& value) noexcept
  { getImpl()._orderType = value; }
  void setOrderType(String&& value) noexcept
  { getImpl()._orderType = std::move(value); }
  String& getOrderType() noexcept
  { return getImpl()._orderType; }
  const String& getOrderType() const noexcept
  { return getConstImpl()._orderType; }

  void setTransportationType(const String& value) noexcept
  { getImpl()._transportationType = value; }
  void setTransportationType(String&& value) noexcept
  { getImpl()._transportationType = std::move(value); }
  String& getTransportationType() noexcept
  { return getImpl()._transportationType; }
  const String& getTransportationType() const noexcept
  { return getConstImpl()._transportationType; }

  void setRoutingSpace(const String& value) noexcept
  { getImpl()._routingSpace = value; }
  void setRoutingSpace(String&& value) noexcept
  { getImpl()._routingSpace = std::move(value); }
  String& getRoutingSpace() noexcept
  { return getImpl()._routingSpace; }
  const String& getRoutingSpace() const noexcept
  { return getConstImpl()._routingSpace; }

  void setDimensionSet(const StringSet& value) noexcept
  { getImpl()._dimensionSet = value; }
  void setDimensionSet(StringSet&& value) noexcept
  { getImpl()._dimensionSet = std::move(value); }
  StringSet& getDimensionSet() noexcept
  { return getImpl()._dimensionSet; }
  const StringSet& getDimensionSet() const noexcept
  { return getConstImpl()._dimensionSet; }

  FOMStringAttribute& swap(FOMStringAttribute& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringAttribute& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    if (getOrderType() != rhs.getOrderType()) return false;
    if (getTransportationType() != rhs.getTransportationType()) return false;
    if (getRoutingSpace() != rhs.getRoutingSpace()) return false;
    if (getDimensionSet() != rhs.getDimensionSet()) return false;
    return true;
  }
  bool operator<(const FOMStringAttribute& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    if (getOrderType() < rhs.getOrderType()) return true;
    if (rhs.getOrderType() < getOrderType()) return false;
    if (getTransportationType() < rhs.getTransportationType()) return true;
    if (rhs.getTransportationType() < getTransportationType()) return false;
    if (getRoutingSpace() < rhs.getRoutingSpace()) return true;
    if (rhs.getRoutingSpace() < getRoutingSpace()) return false;
    if (getDimensionSet() < rhs.getDimensionSet()) return true;
    if (rhs.getDimensionSet() < getDimensionSet()) return false;
    return false;
  }
  bool operator>(const FOMStringAttribute& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringAttribute& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringAttribute& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _dataType(),
      _orderType(),
      _transportationType(),
      _routingSpace(),
      _dimensionSet()
    { }
    String _name;
    String _dataType;
    String _orderType;
    String _transportationType;
    String _routingSpace;
    StringSet _dimensionSet;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringAttribute> FOMStringAttributeList;

class OPENRTI_API FOMStringObjectClass {
public:
  FOMStringObjectClass() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringObjectClass(const FOMStringObjectClass&) = default;
  FOMStringObjectClass(FOMStringObjectClass&&) = default;
  virtual ~FOMStringObjectClass() noexcept = default;
  FOMStringObjectClass& operator=(const FOMStringObjectClass&) = default;
  FOMStringObjectClass& operator=(FOMStringObjectClass&&) = default;
  void setName(const StringVector& value) noexcept
  { getImpl()._name = value; }
  void setName(StringVector&& value) noexcept
  { getImpl()._name = std::move(value); }
  StringVector& getName() noexcept
  { return getImpl()._name; }
  const StringVector& getName() const noexcept
  { return getConstImpl()._name; }

  void setAttributeList(const FOMStringAttributeList& value) noexcept
  { getImpl()._attributeList = value; }
  void setAttributeList(FOMStringAttributeList&& value) noexcept
  { getImpl()._attributeList = std::move(value); }
  FOMStringAttributeList& getAttributeList() noexcept
  { return getImpl()._attributeList; }
  const FOMStringAttributeList& getAttributeList() const noexcept
  { return getConstImpl()._attributeList; }

  FOMStringObjectClass& swap(FOMStringObjectClass& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringObjectClass& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getAttributeList() != rhs.getAttributeList()) return false;
    return true;
  }
  bool operator<(const FOMStringObjectClass& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getAttributeList() < rhs.getAttributeList()) return true;
    if (rhs.getAttributeList() < getAttributeList()) return false;
    return false;
  }
  bool operator>(const FOMStringObjectClass& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringObjectClass& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringObjectClass& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _attributeList()
    { }
    StringVector _name;
    FOMStringAttributeList _attributeList;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringObjectClass> FOMStringObjectClassList;

class OPENRTI_API FOMStringUpdateRate {
public:
  FOMStringUpdateRate() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringUpdateRate(const FOMStringUpdateRate&) = default;
  FOMStringUpdateRate(FOMStringUpdateRate&&) = default;
  virtual ~FOMStringUpdateRate() noexcept = default;
  FOMStringUpdateRate& operator=(const FOMStringUpdateRate&) = default;
  FOMStringUpdateRate& operator=(FOMStringUpdateRate&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setRate(const Double& value) noexcept
  { getImpl()._rate = value; }
  void setRate(Double&& value) noexcept
  { getImpl()._rate = std::move(value); }
  Double& getRate() noexcept
  { return getImpl()._rate; }
  const Double& getRate() const noexcept
  { return getConstImpl()._rate; }

  FOMStringUpdateRate& swap(FOMStringUpdateRate& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringUpdateRate& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getRate() != rhs.getRate()) return false;
    return true;
  }
  bool operator<(const FOMStringUpdateRate& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getRate() < rhs.getRate()) return true;
    if (rhs.getRate() < getRate()) return false;
    return false;
  }
  bool operator>(const FOMStringUpdateRate& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringUpdateRate& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringUpdateRate& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _rate()
    { }
    String _name;
    Double _rate;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringUpdateRate> FOMStringUpdateRateList;

class OPENRTI_API FOMStringSwitch {
public:
  FOMStringSwitch() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringSwitch(const FOMStringSwitch&) = default;
  FOMStringSwitch(FOMStringSwitch&&) = default;
  virtual ~FOMStringSwitch() noexcept = default;
  FOMStringSwitch& operator=(const FOMStringSwitch&) = default;
  FOMStringSwitch& operator=(FOMStringSwitch&&) = default;
  void setSwitchesType(const SwitchesType& value) noexcept
  { getImpl()._switchesType = value; }
  void setSwitchesType(SwitchesType&& value) noexcept
  { getImpl()._switchesType = std::move(value); }
  SwitchesType& getSwitchesType() noexcept
  { return getImpl()._switchesType; }
  const SwitchesType& getSwitchesType() const noexcept
  { return getConstImpl()._switchesType; }

  void setEnabled(const Bool& value) noexcept
  { getImpl()._enabled = value; }
  void setEnabled(Bool&& value) noexcept
  { getImpl()._enabled = std::move(value); }
  Bool& getEnabled() noexcept
  { return getImpl()._enabled; }
  const Bool& getEnabled() const noexcept
  { return getConstImpl()._enabled; }

  FOMStringSwitch& swap(FOMStringSwitch& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringSwitch& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getSwitchesType() != rhs.getSwitchesType()) return false;
    if (getEnabled() != rhs.getEnabled()) return false;
    return true;
  }
  bool operator<(const FOMStringSwitch& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getSwitchesType() < rhs.getSwitchesType()) return true;
    if (rhs.getSwitchesType() < getSwitchesType()) return false;
    if (getEnabled() < rhs.getEnabled()) return true;
    if (rhs.getEnabled() < getEnabled()) return false;
    return false;
  }
  bool operator>(const FOMStringSwitch& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringSwitch& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringSwitch& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _switchesType(),
      _enabled()
    { }
    SwitchesType _switchesType = InteractionRelevanceAdvisorySwitchesType;
    Bool _enabled = false;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringSwitch> FOMStringSwitchList;

class OPENRTI_API FOMStringModule {
public:
  FOMStringModule() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringModule(const FOMStringModule&) = default;
  FOMStringModule(FOMStringModule&&) = default;
  virtual ~FOMStringModule() noexcept = default;
  FOMStringModule& operator=(const FOMStringModule&) = default;
  FOMStringModule& operator=(FOMStringModule&&) = default;
  void setDesignator(const String& value) noexcept
  { getImpl()._designator = value; }
  void setDesignator(String&& value) noexcept
  { getImpl()._designator = std::move(value); }
  String& getDesignator() noexcept
  { return getImpl()._designator; }
  const String& getDesignator() const noexcept
  { return getConstImpl()._designator; }

  void setTransportationTypeList(const FOMStringTransportationTypeList& value) noexcept
  { getImpl()._transportationTypeList = value; }
  void setTransportationTypeList(FOMStringTransportationTypeList&& value) noexcept
  { getImpl()._transportationTypeList = std::move(value); }
  FOMStringTransportationTypeList& getTransportationTypeList() noexcept
  { return getImpl()._transportationTypeList; }
  const FOMStringTransportationTypeList& getTransportationTypeList() const noexcept
  { return getConstImpl()._transportationTypeList; }

  void setDimensionList(const FOMStringDimensionList& value) noexcept
  { getImpl()._dimensionList = value; }
  void setDimensionList(FOMStringDimensionList&& value) noexcept
  { getImpl()._dimensionList = std::move(value); }
  FOMStringDimensionList& getDimensionList() noexcept
  { return getImpl()._dimensionList; }
  const FOMStringDimensionList& getDimensionList() const noexcept
  { return getConstImpl()._dimensionList; }

  void setRoutingSpaceList(const FOMStringRoutingSpaceList& value) noexcept
  { getImpl()._routingSpaceList = value; }
  void setRoutingSpaceList(FOMStringRoutingSpaceList&& value) noexcept
  { getImpl()._routingSpaceList = std::move(value); }
  FOMStringRoutingSpaceList& getRoutingSpaceList() noexcept
  { return getImpl()._routingSpaceList; }
  const FOMStringRoutingSpaceList& getRoutingSpaceList() const noexcept
  { return getConstImpl()._routingSpaceList; }

  void setInteractionClassList(const FOMStringInteractionClassList& value) noexcept
  { getImpl()._interactionClassList = value; }
  void setInteractionClassList(FOMStringInteractionClassList&& value) noexcept
  { getImpl()._interactionClassList = std::move(value); }
  FOMStringInteractionClassList& getInteractionClassList() noexcept
  { return getImpl()._interactionClassList; }
  const FOMStringInteractionClassList& getInteractionClassList() const noexcept
  { return getConstImpl()._interactionClassList; }

  void setObjectClassList(const FOMStringObjectClassList& value) noexcept
  { getImpl()._objectClassList = value; }
  void setObjectClassList(FOMStringObjectClassList&& value) noexcept
  { getImpl()._objectClassList = std::move(value); }
  FOMStringObjectClassList& getObjectClassList() noexcept
  { return getImpl()._objectClassList; }
  const FOMStringObjectClassList& getObjectClassList() const noexcept
  { return getConstImpl()._objectClassList; }

  void setUpdateRateList(const FOMStringUpdateRateList& value) noexcept
  { getImpl()._updateRateList = value; }
  void setUpdateRateList(FOMStringUpdateRateList&& value) noexcept
  { getImpl()._updateRateList = std::move(value); }
  FOMStringUpdateRateList& getUpdateRateList() noexcept
  { return getImpl()._updateRateList; }
  const FOMStringUpdateRateList& getUpdateRateList() const noexcept
  { return getConstImpl()._updateRateList; }

  void setSwitchList(const FOMStringSwitchList& value) noexcept
  { getImpl()._switchList = value; }
  void setSwitchList(FOMStringSwitchList&& value) noexcept
  { getImpl()._switchList = std::move(value); }
  FOMStringSwitchList& getSwitchList() noexcept
  { return getImpl()._switchList; }
  const FOMStringSwitchList& getSwitchList() const noexcept
  { return getConstImpl()._switchList; }

  void setSimpleDataTypeList(const FOMStringSimpleDataTypeList& value) noexcept
  { getImpl()._simpleDataTypeList = value; }
  void setSimpleDataTypeList(FOMStringSimpleDataTypeList&& value) noexcept
  { getImpl()._simpleDataTypeList = std::move(value); }
  FOMStringSimpleDataTypeList& getSimpleDataTypeList() noexcept
  { return getImpl()._simpleDataTypeList; }
  const FOMStringSimpleDataTypeList& getSimpleDataTypeList() const noexcept
  { return getConstImpl()._simpleDataTypeList; }

  void setEnumeratedDataTypeList(const FOMStringEnumeratedDataTypeList& value) noexcept
  { getImpl()._enumeratedDataTypeList = value; }
  void setEnumeratedDataTypeList(FOMStringEnumeratedDataTypeList&& value) noexcept
  { getImpl()._enumeratedDataTypeList = std::move(value); }
  FOMStringEnumeratedDataTypeList& getEnumeratedDataTypeList() noexcept
  { return getImpl()._enumeratedDataTypeList; }
  const FOMStringEnumeratedDataTypeList& getEnumeratedDataTypeList() const noexcept
  { return getConstImpl()._enumeratedDataTypeList; }

  void setArrayDataTypeList(const FOMStringArrayDataTypeList& value) noexcept
  { getImpl()._arrayDataTypeList = value; }
  void setArrayDataTypeList(FOMStringArrayDataTypeList&& value) noexcept
  { getImpl()._arrayDataTypeList = std::move(value); }
  FOMStringArrayDataTypeList& getArrayDataTypeList() noexcept
  { return getImpl()._arrayDataTypeList; }
  const FOMStringArrayDataTypeList& getArrayDataTypeList() const noexcept
  { return getConstImpl()._arrayDataTypeList; }

  void setFixedRecordDataTypeList(const FOMStringFixedRecordDataTypeList& value) noexcept
  { getImpl()._fixedRecordDataTypeList = value; }
  void setFixedRecordDataTypeList(FOMStringFixedRecordDataTypeList&& value) noexcept
  { getImpl()._fixedRecordDataTypeList = std::move(value); }
  FOMStringFixedRecordDataTypeList& getFixedRecordDataTypeList() noexcept
  { return getImpl()._fixedRecordDataTypeList; }
  const FOMStringFixedRecordDataTypeList& getFixedRecordDataTypeList() const noexcept
  { return getConstImpl()._fixedRecordDataTypeList; }

  void setVariantRecordDataTypeList(const FOMStringVariantRecordDataTypeList& value) noexcept
  { getImpl()._variantRecordDataTypeList = value; }
  void setVariantRecordDataTypeList(FOMStringVariantRecordDataTypeList&& value) noexcept
  { getImpl()._variantRecordDataTypeList = std::move(value); }
  FOMStringVariantRecordDataTypeList& getVariantRecordDataTypeList() noexcept
  { return getImpl()._variantRecordDataTypeList; }
  const FOMStringVariantRecordDataTypeList& getVariantRecordDataTypeList() const noexcept
  { return getConstImpl()._variantRecordDataTypeList; }

  void setArtificialInteractionRoot(const Bool& value) noexcept
  { getImpl()._artificialInteractionRoot = value; }
  void setArtificialInteractionRoot(Bool&& value) noexcept
  { getImpl()._artificialInteractionRoot = std::move(value); }
  Bool& getArtificialInteractionRoot() noexcept
  { return getImpl()._artificialInteractionRoot; }
  const Bool& getArtificialInteractionRoot() const noexcept
  { return getConstImpl()._artificialInteractionRoot; }

  void setArtificialObjectRoot(const Bool& value) noexcept
  { getImpl()._artificialObjectRoot = value; }
  void setArtificialObjectRoot(Bool&& value) noexcept
  { getImpl()._artificialObjectRoot = std::move(value); }
  Bool& getArtificialObjectRoot() noexcept
  { return getImpl()._artificialObjectRoot; }
  const Bool& getArtificialObjectRoot() const noexcept
  { return getConstImpl()._artificialObjectRoot; }

  FOMStringModule& swap(FOMStringModule& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringModule& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getDesignator() != rhs.getDesignator()) return false;
    if (getTransportationTypeList() != rhs.getTransportationTypeList()) return false;
    if (getDimensionList() != rhs.getDimensionList()) return false;
    if (getRoutingSpaceList() != rhs.getRoutingSpaceList()) return false;
    if (getInteractionClassList() != rhs.getInteractionClassList()) return false;
    if (getObjectClassList() != rhs.getObjectClassList()) return false;
    if (getUpdateRateList() != rhs.getUpdateRateList()) return false;
    if (getSwitchList() != rhs.getSwitchList()) return false;
    if (getSimpleDataTypeList() != rhs.getSimpleDataTypeList()) return false;
    if (getEnumeratedDataTypeList() != rhs.getEnumeratedDataTypeList()) return false;
    if (getArrayDataTypeList() != rhs.getArrayDataTypeList()) return false;
    if (getFixedRecordDataTypeList() != rhs.getFixedRecordDataTypeList()) return false;
    if (getVariantRecordDataTypeList() != rhs.getVariantRecordDataTypeList()) return false;
    if (getArtificialInteractionRoot() != rhs.getArtificialInteractionRoot()) return false;
    if (getArtificialObjectRoot() != rhs.getArtificialObjectRoot()) return false;
    return true;
  }
  bool operator<(const FOMStringModule& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getDesignator() < rhs.getDesignator()) return true;
    if (rhs.getDesignator() < getDesignator()) return false;
    if (getTransportationTypeList() < rhs.getTransportationTypeList()) return true;
    if (rhs.getTransportationTypeList() < getTransportationTypeList()) return false;
    if (getDimensionList() < rhs.getDimensionList()) return true;
    if (rhs.getDimensionList() < getDimensionList()) return false;
    if (getRoutingSpaceList() < rhs.getRoutingSpaceList()) return true;
    if (rhs.getRoutingSpaceList() < getRoutingSpaceList()) return false;
    if (getInteractionClassList() < rhs.getInteractionClassList()) return true;
    if (rhs.getInteractionClassList() < getInteractionClassList()) return false;
    if (getObjectClassList() < rhs.getObjectClassList()) return true;
    if (rhs.getObjectClassList() < getObjectClassList()) return false;
    if (getUpdateRateList() < rhs.getUpdateRateList()) return true;
    if (rhs.getUpdateRateList() < getUpdateRateList()) return false;
    if (getSwitchList() < rhs.getSwitchList()) return true;
    if (rhs.getSwitchList() < getSwitchList()) return false;
    if (getSimpleDataTypeList() < rhs.getSimpleDataTypeList()) return true;
    if (rhs.getSimpleDataTypeList() < getSimpleDataTypeList()) return false;
    if (getEnumeratedDataTypeList() < rhs.getEnumeratedDataTypeList()) return true;
    if (rhs.getEnumeratedDataTypeList() < getEnumeratedDataTypeList()) return false;
    if (getArrayDataTypeList() < rhs.getArrayDataTypeList()) return true;
    if (rhs.getArrayDataTypeList() < getArrayDataTypeList()) return false;
    if (getFixedRecordDataTypeList() < rhs.getFixedRecordDataTypeList()) return true;
    if (rhs.getFixedRecordDataTypeList() < getFixedRecordDataTypeList()) return false;
    if (getVariantRecordDataTypeList() < rhs.getVariantRecordDataTypeList()) return true;
    if (rhs.getVariantRecordDataTypeList() < getVariantRecordDataTypeList()) return false;
    if (getArtificialInteractionRoot() < rhs.getArtificialInteractionRoot()) return true;
    if (rhs.getArtificialInteractionRoot() < getArtificialInteractionRoot()) return false;
    if (getArtificialObjectRoot() < rhs.getArtificialObjectRoot()) return true;
    if (rhs.getArtificialObjectRoot() < getArtificialObjectRoot()) return false;
    return false;
  }
  bool operator>(const FOMStringModule& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringModule& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringModule& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _designator(),
      _transportationTypeList(),
      _dimensionList(),
      _routingSpaceList(),
      _interactionClassList(),
      _objectClassList(),
      _updateRateList(),
      _switchList(),
      _simpleDataTypeList(),
      _enumeratedDataTypeList(),
      _arrayDataTypeList(),
      _fixedRecordDataTypeList(),
      _variantRecordDataTypeList(),
      _artificialInteractionRoot(),
      _artificialObjectRoot()
    { }
    String _designator;
    FOMStringTransportationTypeList _transportationTypeList;
    FOMStringDimensionList _dimensionList;
    FOMStringRoutingSpaceList _routingSpaceList;
    FOMStringInteractionClassList _interactionClassList;
    FOMStringObjectClassList _objectClassList;
    FOMStringUpdateRateList _updateRateList;
    FOMStringSwitchList _switchList;
    FOMStringSimpleDataTypeList _simpleDataTypeList;
    FOMStringEnumeratedDataTypeList _enumeratedDataTypeList;
    FOMStringArrayDataTypeList _arrayDataTypeList;
    FOMStringFixedRecordDataTypeList _fixedRecordDataTypeList;
    FOMStringVariantRecordDataTypeList _variantRecordDataTypeList;
    Bool _artificialInteractionRoot = false;
    Bool _artificialObjectRoot = false;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringModule> FOMStringModuleList;

class OPENRTI_API FOMStringModule2 {
public:
  FOMStringModule2() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMStringModule2(const FOMStringModule2&) = default;
  FOMStringModule2(FOMStringModule2&&) = default;
  virtual ~FOMStringModule2() noexcept = default;
  FOMStringModule2& operator=(const FOMStringModule2&) = default;
  FOMStringModule2& operator=(FOMStringModule2&&) = default;
  void setDesignator(const String& value) noexcept
  { getImpl()._designator = value; }
  void setDesignator(String&& value) noexcept
  { getImpl()._designator = std::move(value); }
  String& getDesignator() noexcept
  { return getImpl()._designator; }
  const String& getDesignator() const noexcept
  { return getConstImpl()._designator; }

  void setTransportationTypeList(const FOMStringTransportationTypeList& value) noexcept
  { getImpl()._transportationTypeList = value; }
  void setTransportationTypeList(FOMStringTransportationTypeList&& value) noexcept
  { getImpl()._transportationTypeList = std::move(value); }
  FOMStringTransportationTypeList& getTransportationTypeList() noexcept
  { return getImpl()._transportationTypeList; }
  const FOMStringTransportationTypeList& getTransportationTypeList() const noexcept
  { return getConstImpl()._transportationTypeList; }

  void setDimensionList(const FOMStringDimensionList& value) noexcept
  { getImpl()._dimensionList = value; }
  void setDimensionList(FOMStringDimensionList&& value) noexcept
  { getImpl()._dimensionList = std::move(value); }
  FOMStringDimensionList& getDimensionList() noexcept
  { return getImpl()._dimensionList; }
  const FOMStringDimensionList& getDimensionList() const noexcept
  { return getConstImpl()._dimensionList; }

  void setRoutingSpaceList(const FOMStringRoutingSpaceList& value) noexcept
  { getImpl()._routingSpaceList = value; }
  void setRoutingSpaceList(FOMStringRoutingSpaceList&& value) noexcept
  { getImpl()._routingSpaceList = std::move(value); }
  FOMStringRoutingSpaceList& getRoutingSpaceList() noexcept
  { return getImpl()._routingSpaceList; }
  const FOMStringRoutingSpaceList& getRoutingSpaceList() const noexcept
  { return getConstImpl()._routingSpaceList; }

  void setInteractionClassList(const FOMStringInteractionClassList& value) noexcept
  { getImpl()._interactionClassList = value; }
  void setInteractionClassList(FOMStringInteractionClassList&& value) noexcept
  { getImpl()._interactionClassList = std::move(value); }
  FOMStringInteractionClassList& getInteractionClassList() noexcept
  { return getImpl()._interactionClassList; }
  const FOMStringInteractionClassList& getInteractionClassList() const noexcept
  { return getConstImpl()._interactionClassList; }

  void setObjectClassList(const FOMStringObjectClassList& value) noexcept
  { getImpl()._objectClassList = value; }
  void setObjectClassList(FOMStringObjectClassList&& value) noexcept
  { getImpl()._objectClassList = std::move(value); }
  FOMStringObjectClassList& getObjectClassList() noexcept
  { return getImpl()._objectClassList; }
  const FOMStringObjectClassList& getObjectClassList() const noexcept
  { return getConstImpl()._objectClassList; }

  void setUpdateRateList(const FOMStringUpdateRateList& value) noexcept
  { getImpl()._updateRateList = value; }
  void setUpdateRateList(FOMStringUpdateRateList&& value) noexcept
  { getImpl()._updateRateList = std::move(value); }
  FOMStringUpdateRateList& getUpdateRateList() noexcept
  { return getImpl()._updateRateList; }
  const FOMStringUpdateRateList& getUpdateRateList() const noexcept
  { return getConstImpl()._updateRateList; }

  void setSwitchList(const FOMStringSwitchList& value) noexcept
  { getImpl()._switchList = value; }
  void setSwitchList(FOMStringSwitchList&& value) noexcept
  { getImpl()._switchList = std::move(value); }
  FOMStringSwitchList& getSwitchList() noexcept
  { return getImpl()._switchList; }
  const FOMStringSwitchList& getSwitchList() const noexcept
  { return getConstImpl()._switchList; }

  void setBasicDataTypeList(const FOMStringBasicDataTypeList& value) noexcept
  { getImpl()._basicDataTypeList = value; }
  void setBasicDataTypeList(FOMStringBasicDataTypeList&& value) noexcept
  { getImpl()._basicDataTypeList = std::move(value); }
  FOMStringBasicDataTypeList& getBasicDataTypeList() noexcept
  { return getImpl()._basicDataTypeList; }
  const FOMStringBasicDataTypeList& getBasicDataTypeList() const noexcept
  { return getConstImpl()._basicDataTypeList; }

  void setSimpleDataTypeList(const FOMStringSimpleDataTypeList& value) noexcept
  { getImpl()._simpleDataTypeList = value; }
  void setSimpleDataTypeList(FOMStringSimpleDataTypeList&& value) noexcept
  { getImpl()._simpleDataTypeList = std::move(value); }
  FOMStringSimpleDataTypeList& getSimpleDataTypeList() noexcept
  { return getImpl()._simpleDataTypeList; }
  const FOMStringSimpleDataTypeList& getSimpleDataTypeList() const noexcept
  { return getConstImpl()._simpleDataTypeList; }

  void setEnumeratedDataTypeList(const FOMStringEnumeratedDataTypeList& value) noexcept
  { getImpl()._enumeratedDataTypeList = value; }
  void setEnumeratedDataTypeList(FOMStringEnumeratedDataTypeList&& value) noexcept
  { getImpl()._enumeratedDataTypeList = std::move(value); }
  FOMStringEnumeratedDataTypeList& getEnumeratedDataTypeList() noexcept
  { return getImpl()._enumeratedDataTypeList; }
  const FOMStringEnumeratedDataTypeList& getEnumeratedDataTypeList() const noexcept
  { return getConstImpl()._enumeratedDataTypeList; }

  void setArrayDataTypeList(const FOMStringArrayDataType2List& value) noexcept
  { getImpl()._arrayDataTypeList = value; }
  void setArrayDataTypeList(FOMStringArrayDataType2List&& value) noexcept
  { getImpl()._arrayDataTypeList = std::move(value); }
  FOMStringArrayDataType2List& getArrayDataTypeList() noexcept
  { return getImpl()._arrayDataTypeList; }
  const FOMStringArrayDataType2List& getArrayDataTypeList() const noexcept
  { return getConstImpl()._arrayDataTypeList; }

  void setFixedRecordDataTypeList(const FOMStringFixedRecordDataType2List& value) noexcept
  { getImpl()._fixedRecordDataTypeList = value; }
  void setFixedRecordDataTypeList(FOMStringFixedRecordDataType2List&& value) noexcept
  { getImpl()._fixedRecordDataTypeList = std::move(value); }
  FOMStringFixedRecordDataType2List& getFixedRecordDataTypeList() noexcept
  { return getImpl()._fixedRecordDataTypeList; }
  const FOMStringFixedRecordDataType2List& getFixedRecordDataTypeList() const noexcept
  { return getConstImpl()._fixedRecordDataTypeList; }

  void setVariantRecordDataTypeList(const FOMStringVariantRecordDataType2List& value) noexcept
  { getImpl()._variantRecordDataTypeList = value; }
  void setVariantRecordDataTypeList(FOMStringVariantRecordDataType2List&& value) noexcept
  { getImpl()._variantRecordDataTypeList = std::move(value); }
  FOMStringVariantRecordDataType2List& getVariantRecordDataTypeList() noexcept
  { return getImpl()._variantRecordDataTypeList; }
  const FOMStringVariantRecordDataType2List& getVariantRecordDataTypeList() const noexcept
  { return getConstImpl()._variantRecordDataTypeList; }

  void setArtificialInteractionRoot(const Bool& value) noexcept
  { getImpl()._artificialInteractionRoot = value; }
  void setArtificialInteractionRoot(Bool&& value) noexcept
  { getImpl()._artificialInteractionRoot = std::move(value); }
  Bool& getArtificialInteractionRoot() noexcept
  { return getImpl()._artificialInteractionRoot; }
  const Bool& getArtificialInteractionRoot() const noexcept
  { return getConstImpl()._artificialInteractionRoot; }

  void setArtificialObjectRoot(const Bool& value) noexcept
  { getImpl()._artificialObjectRoot = value; }
  void setArtificialObjectRoot(Bool&& value) noexcept
  { getImpl()._artificialObjectRoot = std::move(value); }
  Bool& getArtificialObjectRoot() noexcept
  { return getImpl()._artificialObjectRoot; }
  const Bool& getArtificialObjectRoot() const noexcept
  { return getConstImpl()._artificialObjectRoot; }

  FOMStringModule2& swap(FOMStringModule2& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMStringModule2& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getDesignator() != rhs.getDesignator()) return false;
    if (getTransportationTypeList() != rhs.getTransportationTypeList()) return false;
    if (getDimensionList() != rhs.getDimensionList()) return false;
    if (getRoutingSpaceList() != rhs.getRoutingSpaceList()) return false;
    if (getInteractionClassList() != rhs.getInteractionClassList()) return false;
    if (getObjectClassList() != rhs.getObjectClassList()) return false;
    if (getUpdateRateList() != rhs.getUpdateRateList()) return false;
    if (getSwitchList() != rhs.getSwitchList()) return false;
    if (getBasicDataTypeList() != rhs.getBasicDataTypeList()) return false;
    if (getSimpleDataTypeList() != rhs.getSimpleDataTypeList()) return false;
    if (getEnumeratedDataTypeList() != rhs.getEnumeratedDataTypeList()) return false;
    if (getArrayDataTypeList() != rhs.getArrayDataTypeList()) return false;
    if (getFixedRecordDataTypeList() != rhs.getFixedRecordDataTypeList()) return false;
    if (getVariantRecordDataTypeList() != rhs.getVariantRecordDataTypeList()) return false;
    if (getArtificialInteractionRoot() != rhs.getArtificialInteractionRoot()) return false;
    if (getArtificialObjectRoot() != rhs.getArtificialObjectRoot()) return false;
    return true;
  }
  bool operator<(const FOMStringModule2& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getDesignator() < rhs.getDesignator()) return true;
    if (rhs.getDesignator() < getDesignator()) return false;
    if (getTransportationTypeList() < rhs.getTransportationTypeList()) return true;
    if (rhs.getTransportationTypeList() < getTransportationTypeList()) return false;
    if (getDimensionList() < rhs.getDimensionList()) return true;
    if (rhs.getDimensionList() < getDimensionList()) return false;
    if (getRoutingSpaceList() < rhs.getRoutingSpaceList()) return true;
    if (rhs.getRoutingSpaceList() < getRoutingSpaceList()) return false;
    if (getInteractionClassList() < rhs.getInteractionClassList()) return true;
    if (rhs.getInteractionClassList() < getInteractionClassList()) return false;
    if (getObjectClassList() < rhs.getObjectClassList()) return true;
    if (rhs.getObjectClassList() < getObjectClassList()) return false;
    if (getUpdateRateList() < rhs.getUpdateRateList()) return true;
    if (rhs.getUpdateRateList() < getUpdateRateList()) return false;
    if (getSwitchList() < rhs.getSwitchList()) return true;
    if (rhs.getSwitchList() < getSwitchList()) return false;
    if (getBasicDataTypeList() < rhs.getBasicDataTypeList()) return true;
    if (rhs.getBasicDataTypeList() < getBasicDataTypeList()) return false;
    if (getSimpleDataTypeList() < rhs.getSimpleDataTypeList()) return true;
    if (rhs.getSimpleDataTypeList() < getSimpleDataTypeList()) return false;
    if (getEnumeratedDataTypeList() < rhs.getEnumeratedDataTypeList()) return true;
    if (rhs.getEnumeratedDataTypeList() < getEnumeratedDataTypeList()) return false;
    if (getArrayDataTypeList() < rhs.getArrayDataTypeList()) return true;
    if (rhs.getArrayDataTypeList() < getArrayDataTypeList()) return false;
    if (getFixedRecordDataTypeList() < rhs.getFixedRecordDataTypeList()) return true;
    if (rhs.getFixedRecordDataTypeList() < getFixedRecordDataTypeList()) return false;
    if (getVariantRecordDataTypeList() < rhs.getVariantRecordDataTypeList()) return true;
    if (rhs.getVariantRecordDataTypeList() < getVariantRecordDataTypeList()) return false;
    if (getArtificialInteractionRoot() < rhs.getArtificialInteractionRoot()) return true;
    if (rhs.getArtificialInteractionRoot() < getArtificialInteractionRoot()) return false;
    if (getArtificialObjectRoot() < rhs.getArtificialObjectRoot()) return true;
    if (rhs.getArtificialObjectRoot() < getArtificialObjectRoot()) return false;
    return false;
  }
  bool operator>(const FOMStringModule2& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMStringModule2& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMStringModule2& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _designator(),
      _transportationTypeList(),
      _dimensionList(),
      _routingSpaceList(),
      _interactionClassList(),
      _objectClassList(),
      _updateRateList(),
      _switchList(),
      _basicDataTypeList(),
      _simpleDataTypeList(),
      _enumeratedDataTypeList(),
      _arrayDataTypeList(),
      _fixedRecordDataTypeList(),
      _variantRecordDataTypeList(),
      _artificialInteractionRoot(),
      _artificialObjectRoot()
    { }
    String _designator;
    FOMStringTransportationTypeList _transportationTypeList;
    FOMStringDimensionList _dimensionList;
    FOMStringRoutingSpaceList _routingSpaceList;
    FOMStringInteractionClassList _interactionClassList;
    FOMStringObjectClassList _objectClassList;
    FOMStringUpdateRateList _updateRateList;
    FOMStringSwitchList _switchList;
    FOMStringBasicDataTypeList _basicDataTypeList;
    FOMStringSimpleDataTypeList _simpleDataTypeList;
    FOMStringEnumeratedDataTypeList _enumeratedDataTypeList;
    FOMStringArrayDataType2List _arrayDataTypeList;
    FOMStringFixedRecordDataType2List _fixedRecordDataTypeList;
    FOMStringVariantRecordDataType2List _variantRecordDataTypeList;
    Bool _artificialInteractionRoot = false;
    Bool _artificialObjectRoot = false;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMStringModule2> FOMStringModule2List;

class OPENRTI_API FOMTransportationType {
public:
  FOMTransportationType() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMTransportationType(const FOMTransportationType&) = default;
  FOMTransportationType(FOMTransportationType&&) = default;
  virtual ~FOMTransportationType() noexcept = default;
  FOMTransportationType& operator=(const FOMTransportationType&) = default;
  FOMTransportationType& operator=(FOMTransportationType&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setTransportationType(const TransportationType& value) noexcept
  { getImpl()._transportationType = value; }
  void setTransportationType(TransportationType&& value) noexcept
  { getImpl()._transportationType = std::move(value); }
  TransportationType& getTransportationType() noexcept
  { return getImpl()._transportationType; }
  const TransportationType& getTransportationType() const noexcept
  { return getConstImpl()._transportationType; }

  FOMTransportationType& swap(FOMTransportationType& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMTransportationType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getTransportationType() != rhs.getTransportationType()) return false;
    return true;
  }
  bool operator<(const FOMTransportationType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getTransportationType() < rhs.getTransportationType()) return true;
    if (rhs.getTransportationType() < getTransportationType()) return false;
    return false;
  }
  bool operator>(const FOMTransportationType& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMTransportationType& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMTransportationType& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _transportationType()
    { }
    String _name;
    TransportationType _transportationType = RELIABLE;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMTransportationType> FOMTransportationTypeList;

class OPENRTI_API FOMDimension {
public:
  FOMDimension() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMDimension(const FOMDimension&) = default;
  FOMDimension(FOMDimension&&) = default;
  virtual ~FOMDimension() noexcept = default;
  FOMDimension& operator=(const FOMDimension&) = default;
  FOMDimension& operator=(FOMDimension&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDimensionHandle(const DimensionHandle& value) noexcept
  { getImpl()._dimensionHandle = value; }
  void setDimensionHandle(DimensionHandle&& value) noexcept
  { getImpl()._dimensionHandle = std::move(value); }
  DimensionHandle& getDimensionHandle() noexcept
  { return getImpl()._dimensionHandle; }
  const DimensionHandle& getDimensionHandle() const noexcept
  { return getConstImpl()._dimensionHandle; }

  void setUpperBound(const Unsigned& value) noexcept
  { getImpl()._upperBound = value; }
  void setUpperBound(Unsigned&& value) noexcept
  { getImpl()._upperBound = std::move(value); }
  Unsigned& getUpperBound() noexcept
  { return getImpl()._upperBound; }
  const Unsigned& getUpperBound() const noexcept
  { return getConstImpl()._upperBound; }

  FOMDimension& swap(FOMDimension& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMDimension& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDimensionHandle() != rhs.getDimensionHandle()) return false;
    if (getUpperBound() != rhs.getUpperBound()) return false;
    return true;
  }
  bool operator<(const FOMDimension& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDimensionHandle() < rhs.getDimensionHandle()) return true;
    if (rhs.getDimensionHandle() < getDimensionHandle()) return false;
    if (getUpperBound() < rhs.getUpperBound()) return true;
    if (rhs.getUpperBound() < getUpperBound()) return false;
    return false;
  }
  bool operator>(const FOMDimension& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMDimension& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMDimension& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _dimensionHandle(),
      _upperBound()
    { }
    String _name;
    DimensionHandle _dimensionHandle;
    Unsigned _upperBound = 0;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMDimension> FOMDimensionList;

class OPENRTI_API FOMRoutingSpace {
public:
  FOMRoutingSpace() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMRoutingSpace(const FOMRoutingSpace&) = default;
  FOMRoutingSpace(FOMRoutingSpace&&) = default;
  virtual ~FOMRoutingSpace() noexcept = default;
  FOMRoutingSpace& operator=(const FOMRoutingSpace&) = default;
  FOMRoutingSpace& operator=(FOMRoutingSpace&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setSpaceHandle(const SpaceHandle& value) noexcept
  { getImpl()._spaceHandle = value; }
  void setSpaceHandle(SpaceHandle&& value) noexcept
  { getImpl()._spaceHandle = std::move(value); }
  SpaceHandle& getSpaceHandle() noexcept
  { return getImpl()._spaceHandle; }
  const SpaceHandle& getSpaceHandle() const noexcept
  { return getConstImpl()._spaceHandle; }

  void setDimensionHandleSet(const DimensionHandleSet& value) noexcept
  { getImpl()._dimensionHandleSet = value; }
  void setDimensionHandleSet(DimensionHandleSet&& value) noexcept
  { getImpl()._dimensionHandleSet = std::move(value); }
  DimensionHandleSet& getDimensionHandleSet() noexcept
  { return getImpl()._dimensionHandleSet; }
  const DimensionHandleSet& getDimensionHandleSet() const noexcept
  { return getConstImpl()._dimensionHandleSet; }

  FOMRoutingSpace& swap(FOMRoutingSpace& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMRoutingSpace& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getSpaceHandle() != rhs.getSpaceHandle()) return false;
    if (getDimensionHandleSet() != rhs.getDimensionHandleSet()) return false;
    return true;
  }
  bool operator<(const FOMRoutingSpace& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getSpaceHandle() < rhs.getSpaceHandle()) return true;
    if (rhs.getSpaceHandle() < getSpaceHandle()) return false;
    if (getDimensionHandleSet() < rhs.getDimensionHandleSet()) return true;
    if (rhs.getDimensionHandleSet() < getDimensionHandleSet()) return false;
    return false;
  }
  bool operator>(const FOMRoutingSpace& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMRoutingSpace& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMRoutingSpace& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _spaceHandle(),
      _dimensionHandleSet()
    { }
    String _name;
    SpaceHandle _spaceHandle;
    DimensionHandleSet _dimensionHandleSet;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMRoutingSpace> FOMRoutingSpaceList;

class OPENRTI_API FOMParameter {
public:
  FOMParameter() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMParameter(const FOMParameter&) = default;
  FOMParameter(FOMParameter&&) = default;
  virtual ~FOMParameter() noexcept = default;
  FOMParameter& operator=(const FOMParameter&) = default;
  FOMParameter& operator=(FOMParameter&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDataType(const String& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(String&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  String& getDataType() noexcept
  { return getImpl()._dataType; }
  const String& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  void setParameterHandle(const ParameterHandle& value) noexcept
  { getImpl()._parameterHandle = value; }
  void setParameterHandle(ParameterHandle&& value) noexcept
  { getImpl()._parameterHandle = std::move(value); }
  ParameterHandle& getParameterHandle() noexcept
  { return getImpl()._parameterHandle; }
  const ParameterHandle& getParameterHandle() const noexcept
  { return getConstImpl()._parameterHandle; }

  FOMParameter& swap(FOMParameter& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMParameter& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    if (getParameterHandle() != rhs.getParameterHandle()) return false;
    return true;
  }
  bool operator<(const FOMParameter& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    if (getParameterHandle() < rhs.getParameterHandle()) return true;
    if (rhs.getParameterHandle() < getParameterHandle()) return false;
    return false;
  }
  bool operator>(const FOMParameter& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMParameter& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMParameter& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _dataType(),
      _parameterHandle()
    { }
    String _name;
    String _dataType;
    ParameterHandle _parameterHandle;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMParameter> FOMParameterList;

class OPENRTI_API FOMInteractionClass {
public:
  FOMInteractionClass() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMInteractionClass(const FOMInteractionClass&) = default;
  FOMInteractionClass(FOMInteractionClass&&) = default;
  virtual ~FOMInteractionClass() noexcept = default;
  FOMInteractionClass& operator=(const FOMInteractionClass&) = default;
  FOMInteractionClass& operator=(FOMInteractionClass&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setInteractionClassHandle(const InteractionClassHandle& value) noexcept
  { getImpl()._interactionClassHandle = value; }
  void setInteractionClassHandle(InteractionClassHandle&& value) noexcept
  { getImpl()._interactionClassHandle = std::move(value); }
  InteractionClassHandle& getInteractionClassHandle() noexcept
  { return getImpl()._interactionClassHandle; }
  const InteractionClassHandle& getInteractionClassHandle() const noexcept
  { return getConstImpl()._interactionClassHandle; }

  void setParentInteractionClassHandle(const InteractionClassHandle& value) noexcept
  { getImpl()._parentInteractionClassHandle = value; }
  void setParentInteractionClassHandle(InteractionClassHandle&& value) noexcept
  { getImpl()._parentInteractionClassHandle = std::move(value); }
  InteractionClassHandle& getParentInteractionClassHandle() noexcept
  { return getImpl()._parentInteractionClassHandle; }
  const InteractionClassHandle& getParentInteractionClassHandle() const noexcept
  { return getConstImpl()._parentInteractionClassHandle; }

  void setOrderType(const OrderType& value) noexcept
  { getImpl()._orderType = value; }
  void setOrderType(OrderType&& value) noexcept
  { getImpl()._orderType = std::move(value); }
  OrderType& getOrderType() noexcept
  { return getImpl()._orderType; }
  const OrderType& getOrderType() const noexcept
  { return getConstImpl()._orderType; }

  void setTransportationType(const TransportationType& value) noexcept
  { getImpl()._transportationType = value; }
  void setTransportationType(TransportationType&& value) noexcept
  { getImpl()._transportationType = std::move(value); }
  TransportationType& getTransportationType() noexcept
  { return getImpl()._transportationType; }
  const TransportationType& getTransportationType() const noexcept
  { return getConstImpl()._transportationType; }

  void setDimensionHandleSet(const DimensionHandleSet& value) noexcept
  { getImpl()._dimensionHandleSet = value; }
  void setDimensionHandleSet(DimensionHandleSet&& value) noexcept
  { getImpl()._dimensionHandleSet = std::move(value); }
  DimensionHandleSet& getDimensionHandleSet() noexcept
  { return getImpl()._dimensionHandleSet; }
  const DimensionHandleSet& getDimensionHandleSet() const noexcept
  { return getConstImpl()._dimensionHandleSet; }

  void setParameterList(const FOMParameterList& value) noexcept
  { getImpl()._parameterList = value; }
  void setParameterList(FOMParameterList&& value) noexcept
  { getImpl()._parameterList = std::move(value); }
  FOMParameterList& getParameterList() noexcept
  { return getImpl()._parameterList; }
  const FOMParameterList& getParameterList() const noexcept
  { return getConstImpl()._parameterList; }

  FOMInteractionClass& swap(FOMInteractionClass& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMInteractionClass& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getInteractionClassHandle() != rhs.getInteractionClassHandle()) return false;
    if (getParentInteractionClassHandle() != rhs.getParentInteractionClassHandle()) return false;
    if (getOrderType() != rhs.getOrderType()) return false;
    if (getTransportationType() != rhs.getTransportationType()) return false;
    if (getDimensionHandleSet() != rhs.getDimensionHandleSet()) return false;
    if (getParameterList() != rhs.getParameterList()) return false;
    return true;
  }
  bool operator<(const FOMInteractionClass& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getInteractionClassHandle() < rhs.getInteractionClassHandle()) return true;
    if (rhs.getInteractionClassHandle() < getInteractionClassHandle()) return false;
    if (getParentInteractionClassHandle() < rhs.getParentInteractionClassHandle()) return true;
    if (rhs.getParentInteractionClassHandle() < getParentInteractionClassHandle()) return false;
    if (getOrderType() < rhs.getOrderType()) return true;
    if (rhs.getOrderType() < getOrderType()) return false;
    if (getTransportationType() < rhs.getTransportationType()) return true;
    if (rhs.getTransportationType() < getTransportationType()) return false;
    if (getDimensionHandleSet() < rhs.getDimensionHandleSet()) return true;
    if (rhs.getDimensionHandleSet() < getDimensionHandleSet()) return false;
    if (getParameterList() < rhs.getParameterList()) return true;
    if (rhs.getParameterList() < getParameterList()) return false;
    return false;
  }
  bool operator>(const FOMInteractionClass& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMInteractionClass& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMInteractionClass& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _interactionClassHandle(),
      _parentInteractionClassHandle(),
      _orderType(),
      _transportationType(),
      _dimensionHandleSet(),
      _parameterList()
    { }
    String _name;
    InteractionClassHandle _interactionClassHandle;
    InteractionClassHandle _parentInteractionClassHandle;
    OrderType _orderType = RECEIVE;
    TransportationType _transportationType = RELIABLE;
    DimensionHandleSet _dimensionHandleSet;
    FOMParameterList _parameterList;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMInteractionClass> FOMInteractionClassList;

class OPENRTI_API FOMAttribute {
public:
  FOMAttribute() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMAttribute(const FOMAttribute&) = default;
  FOMAttribute(FOMAttribute&&) = default;
  virtual ~FOMAttribute() noexcept = default;
  FOMAttribute& operator=(const FOMAttribute&) = default;
  FOMAttribute& operator=(FOMAttribute&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDataType(const String& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(String&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  String& getDataType() noexcept
  { return getImpl()._dataType; }
  const String& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  void setAttributeHandle(const AttributeHandle& value) noexcept
  { getImpl()._attributeHandle = value; }
  void setAttributeHandle(AttributeHandle&& value) noexcept
  { getImpl()._attributeHandle = std::move(value); }
  AttributeHandle& getAttributeHandle() noexcept
  { return getImpl()._attributeHandle; }
  const AttributeHandle& getAttributeHandle() const noexcept
  { return getConstImpl()._attributeHandle; }

  void setOrderType(const OrderType& value) noexcept
  { getImpl()._orderType = value; }
  void setOrderType(OrderType&& value) noexcept
  { getImpl()._orderType = std::move(value); }
  OrderType& getOrderType() noexcept
  { return getImpl()._orderType; }
  const OrderType& getOrderType() const noexcept
  { return getConstImpl()._orderType; }

  void setTransportationType(const TransportationType& value) noexcept
  { getImpl()._transportationType = value; }
  void setTransportationType(TransportationType&& value) noexcept
  { getImpl()._transportationType = std::move(value); }
  TransportationType& getTransportationType() noexcept
  { return getImpl()._transportationType; }
  const TransportationType& getTransportationType() const noexcept
  { return getConstImpl()._transportationType; }

  void setDimensionHandleSet(const DimensionHandleSet& value) noexcept
  { getImpl()._dimensionHandleSet = value; }
  void setDimensionHandleSet(DimensionHandleSet&& value) noexcept
  { getImpl()._dimensionHandleSet = std::move(value); }
  DimensionHandleSet& getDimensionHandleSet() noexcept
  { return getImpl()._dimensionHandleSet; }
  const DimensionHandleSet& getDimensionHandleSet() const noexcept
  { return getConstImpl()._dimensionHandleSet; }

  FOMAttribute& swap(FOMAttribute& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMAttribute& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    if (getAttributeHandle() != rhs.getAttributeHandle()) return false;
    if (getOrderType() != rhs.getOrderType()) return false;
    if (getTransportationType() != rhs.getTransportationType()) return false;
    if (getDimensionHandleSet() != rhs.getDimensionHandleSet()) return false;
    return true;
  }
  bool operator<(const FOMAttribute& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    if (getAttributeHandle() < rhs.getAttributeHandle()) return true;
    if (rhs.getAttributeHandle() < getAttributeHandle()) return false;
    if (getOrderType() < rhs.getOrderType()) return true;
    if (rhs.getOrderType() < getOrderType()) return false;
    if (getTransportationType() < rhs.getTransportationType()) return true;
    if (rhs.getTransportationType() < getTransportationType()) return false;
    if (getDimensionHandleSet() < rhs.getDimensionHandleSet()) return true;
    if (rhs.getDimensionHandleSet() < getDimensionHandleSet()) return false;
    return false;
  }
  bool operator>(const FOMAttribute& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMAttribute& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMAttribute& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _dataType(),
      _attributeHandle(),
      _orderType(),
      _transportationType(),
      _dimensionHandleSet()
    { }
    String _name;
    String _dataType;
    AttributeHandle _attributeHandle;
    OrderType _orderType = RECEIVE;
    TransportationType _transportationType = RELIABLE;
    DimensionHandleSet _dimensionHandleSet;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMAttribute> FOMAttributeList;

class OPENRTI_API FOMObjectClass {
public:
  FOMObjectClass() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMObjectClass(const FOMObjectClass&) = default;
  FOMObjectClass(FOMObjectClass&&) = default;
  virtual ~FOMObjectClass() noexcept = default;
  FOMObjectClass& operator=(const FOMObjectClass&) = default;
  FOMObjectClass& operator=(FOMObjectClass&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setObjectClassHandle(const ObjectClassHandle& value) noexcept
  { getImpl()._objectClassHandle = value; }
  void setObjectClassHandle(ObjectClassHandle&& value) noexcept
  { getImpl()._objectClassHandle = std::move(value); }
  ObjectClassHandle& getObjectClassHandle() noexcept
  { return getImpl()._objectClassHandle; }
  const ObjectClassHandle& getObjectClassHandle() const noexcept
  { return getConstImpl()._objectClassHandle; }

  void setParentObjectClassHandle(const ObjectClassHandle& value) noexcept
  { getImpl()._parentObjectClassHandle = value; }
  void setParentObjectClassHandle(ObjectClassHandle&& value) noexcept
  { getImpl()._parentObjectClassHandle = std::move(value); }
  ObjectClassHandle& getParentObjectClassHandle() noexcept
  { return getImpl()._parentObjectClassHandle; }
  const ObjectClassHandle& getParentObjectClassHandle() const noexcept
  { return getConstImpl()._parentObjectClassHandle; }

  void setAttributeList(const FOMAttributeList& value) noexcept
  { getImpl()._attributeList = value; }
  void setAttributeList(FOMAttributeList&& value) noexcept
  { getImpl()._attributeList = std::move(value); }
  FOMAttributeList& getAttributeList() noexcept
  { return getImpl()._attributeList; }
  const FOMAttributeList& getAttributeList() const noexcept
  { return getConstImpl()._attributeList; }

  FOMObjectClass& swap(FOMObjectClass& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMObjectClass& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
    if (getParentObjectClassHandle() != rhs.getParentObjectClassHandle()) return false;
    if (getAttributeList() != rhs.getAttributeList()) return false;
    return true;
  }
  bool operator<(const FOMObjectClass& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
    if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
    if (getParentObjectClassHandle() < rhs.getParentObjectClassHandle()) return true;
    if (rhs.getParentObjectClassHandle() < getParentObjectClassHandle()) return false;
    if (getAttributeList() < rhs.getAttributeList()) return true;
    if (rhs.getAttributeList() < getAttributeList()) return false;
    return false;
  }
  bool operator>(const FOMObjectClass& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMObjectClass& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMObjectClass& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _objectClassHandle(),
      _parentObjectClassHandle(),
      _attributeList()
    { }
    String _name;
    ObjectClassHandle _objectClassHandle;
    ObjectClassHandle _parentObjectClassHandle;
    FOMAttributeList _attributeList;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMObjectClass> FOMObjectClassList;

class OPENRTI_API FOMUpdateRate {
public:
  FOMUpdateRate() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMUpdateRate(const FOMUpdateRate&) = default;
  FOMUpdateRate(FOMUpdateRate&&) = default;
  virtual ~FOMUpdateRate() noexcept = default;
  FOMUpdateRate& operator=(const FOMUpdateRate&) = default;
  FOMUpdateRate& operator=(FOMUpdateRate&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setUpdateRateHandle(const UpdateRateHandle& value) noexcept
  { getImpl()._updateRateHandle = value; }
  void setUpdateRateHandle(UpdateRateHandle&& value) noexcept
  { getImpl()._updateRateHandle = std::move(value); }
  UpdateRateHandle& getUpdateRateHandle() noexcept
  { return getImpl()._updateRateHandle; }
  const UpdateRateHandle& getUpdateRateHandle() const noexcept
  { return getConstImpl()._updateRateHandle; }

  void setRate(const Double& value) noexcept
  { getImpl()._rate = value; }
  void setRate(Double&& value) noexcept
  { getImpl()._rate = std::move(value); }
  Double& getRate() noexcept
  { return getImpl()._rate; }
  const Double& getRate() const noexcept
  { return getConstImpl()._rate; }

  FOMUpdateRate& swap(FOMUpdateRate& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMUpdateRate& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getUpdateRateHandle() != rhs.getUpdateRateHandle()) return false;
    if (getRate() != rhs.getRate()) return false;
    return true;
  }
  bool operator<(const FOMUpdateRate& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getUpdateRateHandle() < rhs.getUpdateRateHandle()) return true;
    if (rhs.getUpdateRateHandle() < getUpdateRateHandle()) return false;
    if (getRate() < rhs.getRate()) return true;
    if (rhs.getRate() < getRate()) return false;
    return false;
  }
  bool operator>(const FOMUpdateRate& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMUpdateRate& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMUpdateRate& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _updateRateHandle(),
      _rate()
    { }
    String _name;
    UpdateRateHandle _updateRateHandle;
    Double _rate;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMUpdateRate> FOMUpdateRateList;

class OPENRTI_API FOMSwitch {
public:
  FOMSwitch() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMSwitch(const FOMSwitch&) = default;
  FOMSwitch(FOMSwitch&&) = default;
  virtual ~FOMSwitch() noexcept = default;
  FOMSwitch& operator=(const FOMSwitch&) = default;
  FOMSwitch& operator=(FOMSwitch&&) = default;
  void setSwitchesType(const SwitchesType& value) noexcept
  { getImpl()._switchesType = value; }
  void setSwitchesType(SwitchesType&& value) noexcept
  { getImpl()._switchesType = std::move(value); }
  SwitchesType& getSwitchesType() noexcept
  { return getImpl()._switchesType; }
  const SwitchesType& getSwitchesType() const noexcept
  { return getConstImpl()._switchesType; }

  void setEnabled(const Bool& value) noexcept
  { getImpl()._enabled = value; }
  void setEnabled(Bool&& value) noexcept
  { getImpl()._enabled = std::move(value); }
  Bool& getEnabled() noexcept
  { return getImpl()._enabled; }
  const Bool& getEnabled() const noexcept
  { return getConstImpl()._enabled; }

  FOMSwitch& swap(FOMSwitch& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMSwitch& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getSwitchesType() != rhs.getSwitchesType()) return false;
    if (getEnabled() != rhs.getEnabled()) return false;
    return true;
  }
  bool operator<(const FOMSwitch& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getSwitchesType() < rhs.getSwitchesType()) return true;
    if (rhs.getSwitchesType() < getSwitchesType()) return false;
    if (getEnabled() < rhs.getEnabled()) return true;
    if (rhs.getEnabled() < getEnabled()) return false;
    return false;
  }
  bool operator>(const FOMSwitch& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMSwitch& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMSwitch& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _switchesType(),
      _enabled()
    { }
    SwitchesType _switchesType = InteractionRelevanceAdvisorySwitchesType;
    Bool _enabled = false;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMSwitch> FOMSwitchList;

class OPENRTI_API FOMBasicDataType {
public:
  FOMBasicDataType() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMBasicDataType(const FOMBasicDataType&) = default;
  FOMBasicDataType(FOMBasicDataType&&) = default;
  virtual ~FOMBasicDataType() noexcept = default;
  FOMBasicDataType& operator=(const FOMBasicDataType&) = default;
  FOMBasicDataType& operator=(FOMBasicDataType&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setSize(const Unsigned& value) noexcept
  { getImpl()._size = value; }
  void setSize(Unsigned&& value) noexcept
  { getImpl()._size = std::move(value); }
  Unsigned& getSize() noexcept
  { return getImpl()._size; }
  const Unsigned& getSize() const noexcept
  { return getConstImpl()._size; }

  void setEndian(const Endianness& value) noexcept
  { getImpl()._endian = value; }
  void setEndian(Endianness&& value) noexcept
  { getImpl()._endian = std::move(value); }
  Endianness& getEndian() noexcept
  { return getImpl()._endian; }
  const Endianness& getEndian() const noexcept
  { return getConstImpl()._endian; }

  void setHandle(const BasicDataTypeHandle& value) noexcept
  { getImpl()._handle = value; }
  void setHandle(BasicDataTypeHandle&& value) noexcept
  { getImpl()._handle = std::move(value); }
  BasicDataTypeHandle& getHandle() noexcept
  { return getImpl()._handle; }
  const BasicDataTypeHandle& getHandle() const noexcept
  { return getConstImpl()._handle; }

  FOMBasicDataType& swap(FOMBasicDataType& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMBasicDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getSize() != rhs.getSize()) return false;
    if (getEndian() != rhs.getEndian()) return false;
    if (getHandle() != rhs.getHandle()) return false;
    return true;
  }
  bool operator<(const FOMBasicDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getSize() < rhs.getSize()) return true;
    if (rhs.getSize() < getSize()) return false;
    if (getEndian() < rhs.getEndian()) return true;
    if (rhs.getEndian() < getEndian()) return false;
    if (getHandle() < rhs.getHandle()) return true;
    if (rhs.getHandle() < getHandle()) return false;
    return false;
  }
  bool operator>(const FOMBasicDataType& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMBasicDataType& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMBasicDataType& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _size(),
      _endian(),
      _handle()
    { }
    String _name;
    Unsigned _size = 0;
    Endianness _endian = BigEndian;
    BasicDataTypeHandle _handle;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMBasicDataType> FOMBasicDataTypeList;

class OPENRTI_API FOMSimpleDataType {
public:
  FOMSimpleDataType() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMSimpleDataType(const FOMSimpleDataType&) = default;
  FOMSimpleDataType(FOMSimpleDataType&&) = default;
  virtual ~FOMSimpleDataType() noexcept = default;
  FOMSimpleDataType& operator=(const FOMSimpleDataType&) = default;
  FOMSimpleDataType& operator=(FOMSimpleDataType&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setRepresentation(const String& value) noexcept
  { getImpl()._representation = value; }
  void setRepresentation(String&& value) noexcept
  { getImpl()._representation = std::move(value); }
  String& getRepresentation() noexcept
  { return getImpl()._representation; }
  const String& getRepresentation() const noexcept
  { return getConstImpl()._representation; }

  void setHandle(const SimpleDataTypeHandle& value) noexcept
  { getImpl()._handle = value; }
  void setHandle(SimpleDataTypeHandle&& value) noexcept
  { getImpl()._handle = std::move(value); }
  SimpleDataTypeHandle& getHandle() noexcept
  { return getImpl()._handle; }
  const SimpleDataTypeHandle& getHandle() const noexcept
  { return getConstImpl()._handle; }

  FOMSimpleDataType& swap(FOMSimpleDataType& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMSimpleDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getRepresentation() != rhs.getRepresentation()) return false;
    if (getHandle() != rhs.getHandle()) return false;
    return true;
  }
  bool operator<(const FOMSimpleDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getRepresentation() < rhs.getRepresentation()) return true;
    if (rhs.getRepresentation() < getRepresentation()) return false;
    if (getHandle() < rhs.getHandle()) return true;
    if (rhs.getHandle() < getHandle()) return false;
    return false;
  }
  bool operator>(const FOMSimpleDataType& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMSimpleDataType& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMSimpleDataType& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _representation(),
      _handle()
    { }
    String _name;
    String _representation;
    SimpleDataTypeHandle _handle;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMSimpleDataType> FOMSimpleDataTypeList;

class OPENRTI_API FOMEnumerator {
public:
  FOMEnumerator() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMEnumerator(const FOMEnumerator&) = default;
  FOMEnumerator(FOMEnumerator&&) = default;
  virtual ~FOMEnumerator() noexcept = default;
  FOMEnumerator& operator=(const FOMEnumerator&) = default;
  FOMEnumerator& operator=(FOMEnumerator&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setValue(const Unsigned& value) noexcept
  { getImpl()._value = value; }
  void setValue(Unsigned&& value) noexcept
  { getImpl()._value = std::move(value); }
  Unsigned& getValue() noexcept
  { return getImpl()._value; }
  const Unsigned& getValue() const noexcept
  { return getConstImpl()._value; }

  FOMEnumerator& swap(FOMEnumerator& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMEnumerator& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getValue() != rhs.getValue()) return false;
    return true;
  }
  bool operator<(const FOMEnumerator& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getValue() < rhs.getValue()) return true;
    if (rhs.getValue() < getValue()) return false;
    return false;
  }
  bool operator>(const FOMEnumerator& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMEnumerator& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMEnumerator& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _value()
    { }
    String _name;
    Unsigned _value = 0;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMEnumerator> FOMEnumeratorList;

class OPENRTI_API FOMEnumeratedDataType {
public:
  FOMEnumeratedDataType() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMEnumeratedDataType(const FOMEnumeratedDataType&) = default;
  FOMEnumeratedDataType(FOMEnumeratedDataType&&) = default;
  virtual ~FOMEnumeratedDataType() noexcept = default;
  FOMEnumeratedDataType& operator=(const FOMEnumeratedDataType&) = default;
  FOMEnumeratedDataType& operator=(FOMEnumeratedDataType&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setRepresentation(const String& value) noexcept
  { getImpl()._representation = value; }
  void setRepresentation(String&& value) noexcept
  { getImpl()._representation = std::move(value); }
  String& getRepresentation() noexcept
  { return getImpl()._representation; }
  const String& getRepresentation() const noexcept
  { return getConstImpl()._representation; }

  void setEnumerators(const FOMEnumeratorList& value) noexcept
  { getImpl()._enumerators = value; }
  void setEnumerators(FOMEnumeratorList&& value) noexcept
  { getImpl()._enumerators = std::move(value); }
  FOMEnumeratorList& getEnumerators() noexcept
  { return getImpl()._enumerators; }
  const FOMEnumeratorList& getEnumerators() const noexcept
  { return getConstImpl()._enumerators; }

  void setHandle(const EnumeratedDataTypeHandle& value) noexcept
  { getImpl()._handle = value; }
  void setHandle(EnumeratedDataTypeHandle&& value) noexcept
  { getImpl()._handle = std::move(value); }
  EnumeratedDataTypeHandle& getHandle() noexcept
  { return getImpl()._handle; }
  const EnumeratedDataTypeHandle& getHandle() const noexcept
  { return getConstImpl()._handle; }

  FOMEnumeratedDataType& swap(FOMEnumeratedDataType& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMEnumeratedDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getRepresentation() != rhs.getRepresentation()) return false;
    if (getEnumerators() != rhs.getEnumerators()) return false;
    if (getHandle() != rhs.getHandle()) return false;
    return true;
  }
  bool operator<(const FOMEnumeratedDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getRepresentation() < rhs.getRepresentation()) return true;
    if (rhs.getRepresentation() < getRepresentation()) return false;
    if (getEnumerators() < rhs.getEnumerators()) return true;
    if (rhs.getEnumerators() < getEnumerators()) return false;
    if (getHandle() < rhs.getHandle()) return true;
    if (rhs.getHandle() < getHandle()) return false;
    return false;
  }
  bool operator>(const FOMEnumeratedDataType& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMEnumeratedDataType& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMEnumeratedDataType& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _representation(),
      _enumerators(),
      _handle()
    { }
    String _name;
    String _representation;
    FOMEnumeratorList _enumerators;
    EnumeratedDataTypeHandle _handle;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMEnumeratedDataType> FOMEnumeratedDataTypeList;

class OPENRTI_API FOMArrayDataType {
public:
  FOMArrayDataType() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMArrayDataType(const FOMArrayDataType&) = default;
  FOMArrayDataType(FOMArrayDataType&&) = default;
  virtual ~FOMArrayDataType() noexcept = default;
  FOMArrayDataType& operator=(const FOMArrayDataType&) = default;
  FOMArrayDataType& operator=(FOMArrayDataType&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDataType(const String& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(String&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  String& getDataType() noexcept
  { return getImpl()._dataType; }
  const String& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  void setCardinality(const String& value) noexcept
  { getImpl()._cardinality = value; }
  void setCardinality(String&& value) noexcept
  { getImpl()._cardinality = std::move(value); }
  String& getCardinality() noexcept
  { return getImpl()._cardinality; }
  const String& getCardinality() const noexcept
  { return getConstImpl()._cardinality; }

  void setEncoding(const ArrayDataTypeEncoding& value) noexcept
  { getImpl()._encoding = value; }
  void setEncoding(ArrayDataTypeEncoding&& value) noexcept
  { getImpl()._encoding = std::move(value); }
  ArrayDataTypeEncoding& getEncoding() noexcept
  { return getImpl()._encoding; }
  const ArrayDataTypeEncoding& getEncoding() const noexcept
  { return getConstImpl()._encoding; }

  void setHandle(const ArrayDataTypeHandle& value) noexcept
  { getImpl()._handle = value; }
  void setHandle(ArrayDataTypeHandle&& value) noexcept
  { getImpl()._handle = std::move(value); }
  ArrayDataTypeHandle& getHandle() noexcept
  { return getImpl()._handle; }
  const ArrayDataTypeHandle& getHandle() const noexcept
  { return getConstImpl()._handle; }

  FOMArrayDataType& swap(FOMArrayDataType& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMArrayDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    if (getCardinality() != rhs.getCardinality()) return false;
    if (getEncoding() != rhs.getEncoding()) return false;
    if (getHandle() != rhs.getHandle()) return false;
    return true;
  }
  bool operator<(const FOMArrayDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    if (getCardinality() < rhs.getCardinality()) return true;
    if (rhs.getCardinality() < getCardinality()) return false;
    if (getEncoding() < rhs.getEncoding()) return true;
    if (rhs.getEncoding() < getEncoding()) return false;
    if (getHandle() < rhs.getHandle()) return true;
    if (rhs.getHandle() < getHandle()) return false;
    return false;
  }
  bool operator>(const FOMArrayDataType& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMArrayDataType& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMArrayDataType& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _dataType(),
      _cardinality(),
      _encoding(),
      _handle()
    { }
    String _name;
    String _dataType;
    String _cardinality;
    ArrayDataTypeEncoding _encoding = FixedArrayDataTypeEncoding;
    ArrayDataTypeHandle _handle;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMArrayDataType> FOMArrayDataTypeList;

class OPENRTI_API FOMFixedRecordField {
public:
  FOMFixedRecordField() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMFixedRecordField(const FOMFixedRecordField&) = default;
  FOMFixedRecordField(FOMFixedRecordField&&) = default;
  virtual ~FOMFixedRecordField() noexcept = default;
  FOMFixedRecordField& operator=(const FOMFixedRecordField&) = default;
  FOMFixedRecordField& operator=(FOMFixedRecordField&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDataType(const String& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(String&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  String& getDataType() noexcept
  { return getImpl()._dataType; }
  const String& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  void setVersion(const Unsigned& value) noexcept
  { getImpl()._version = value; }
  void setVersion(Unsigned&& value) noexcept
  { getImpl()._version = std::move(value); }
  Unsigned& getVersion() noexcept
  { return getImpl()._version; }
  const Unsigned& getVersion() const noexcept
  { return getConstImpl()._version; }

  FOMFixedRecordField& swap(FOMFixedRecordField& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMFixedRecordField& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    if (getVersion() != rhs.getVersion()) return false;
    return true;
  }
  bool operator<(const FOMFixedRecordField& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    if (getVersion() < rhs.getVersion()) return true;
    if (rhs.getVersion() < getVersion()) return false;
    return false;
  }
  bool operator>(const FOMFixedRecordField& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMFixedRecordField& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMFixedRecordField& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _dataType(),
      _version()
    { }
    String _name;
    String _dataType;
    Unsigned _version = 0;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMFixedRecordField> FOMFixedRecordFieldList;

class OPENRTI_API FOMFixedRecordDataType {
public:
  FOMFixedRecordDataType() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMFixedRecordDataType(const FOMFixedRecordDataType&) = default;
  FOMFixedRecordDataType(FOMFixedRecordDataType&&) = default;
  virtual ~FOMFixedRecordDataType() noexcept = default;
  FOMFixedRecordDataType& operator=(const FOMFixedRecordDataType&) = default;
  FOMFixedRecordDataType& operator=(FOMFixedRecordDataType&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setEncoding(const String& value) noexcept
  { getImpl()._encoding = value; }
  void setEncoding(String&& value) noexcept
  { getImpl()._encoding = std::move(value); }
  String& getEncoding() noexcept
  { return getImpl()._encoding; }
  const String& getEncoding() const noexcept
  { return getConstImpl()._encoding; }

  void setInclude(const String& value) noexcept
  { getImpl()._include = value; }
  void setInclude(String&& value) noexcept
  { getImpl()._include = std::move(value); }
  String& getInclude() noexcept
  { return getImpl()._include; }
  const String& getInclude() const noexcept
  { return getConstImpl()._include; }

  void setVersion(const Unsigned& value) noexcept
  { getImpl()._version = value; }
  void setVersion(Unsigned&& value) noexcept
  { getImpl()._version = std::move(value); }
  Unsigned& getVersion() noexcept
  { return getImpl()._version; }
  const Unsigned& getVersion() const noexcept
  { return getConstImpl()._version; }

  void setFields(const FOMFixedRecordFieldList& value) noexcept
  { getImpl()._fields = value; }
  void setFields(FOMFixedRecordFieldList&& value) noexcept
  { getImpl()._fields = std::move(value); }
  FOMFixedRecordFieldList& getFields() noexcept
  { return getImpl()._fields; }
  const FOMFixedRecordFieldList& getFields() const noexcept
  { return getConstImpl()._fields; }

  void setHandle(const FixedRecordDataTypeHandle& value) noexcept
  { getImpl()._handle = value; }
  void setHandle(FixedRecordDataTypeHandle&& value) noexcept
  { getImpl()._handle = std::move(value); }
  FixedRecordDataTypeHandle& getHandle() noexcept
  { return getImpl()._handle; }
  const FixedRecordDataTypeHandle& getHandle() const noexcept
  { return getConstImpl()._handle; }

  FOMFixedRecordDataType& swap(FOMFixedRecordDataType& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMFixedRecordDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getEncoding() != rhs.getEncoding()) return false;
    if (getInclude() != rhs.getInclude()) return false;
    if (getVersion() != rhs.getVersion()) return false;
    if (getFields() != rhs.getFields()) return false;
    if (getHandle() != rhs.getHandle()) return false;
    return true;
  }
  bool operator<(const FOMFixedRecordDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getEncoding() < rhs.getEncoding()) return true;
    if (rhs.getEncoding() < getEncoding()) return false;
    if (getInclude() < rhs.getInclude()) return true;
    if (rhs.getInclude() < getInclude()) return false;
    if (getVersion() < rhs.getVersion()) return true;
    if (rhs.getVersion() < getVersion()) return false;
    if (getFields() < rhs.getFields()) return true;
    if (rhs.getFields() < getFields()) return false;
    if (getHandle() < rhs.getHandle()) return true;
    if (rhs.getHandle() < getHandle()) return false;
    return false;
  }
  bool operator>(const FOMFixedRecordDataType& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMFixedRecordDataType& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMFixedRecordDataType& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _encoding(),
      _include(),
      _version(),
      _fields(),
      _handle()
    { }
    String _name;
    String _encoding;
    String _include;
    Unsigned _version = 0;
    FOMFixedRecordFieldList _fields;
    FixedRecordDataTypeHandle _handle;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMFixedRecordDataType> FOMFixedRecordDataTypeList;

class OPENRTI_API FOMVariantRecordAlternative {
public:
  FOMVariantRecordAlternative() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMVariantRecordAlternative(const FOMVariantRecordAlternative&) = default;
  FOMVariantRecordAlternative(FOMVariantRecordAlternative&&) = default;
  virtual ~FOMVariantRecordAlternative() noexcept = default;
  FOMVariantRecordAlternative& operator=(const FOMVariantRecordAlternative&) = default;
  FOMVariantRecordAlternative& operator=(FOMVariantRecordAlternative&&) = default;
  void setEnumerator(const String& value) noexcept
  { getImpl()._enumerator = value; }
  void setEnumerator(String&& value) noexcept
  { getImpl()._enumerator = std::move(value); }
  String& getEnumerator() noexcept
  { return getImpl()._enumerator; }
  const String& getEnumerator() const noexcept
  { return getConstImpl()._enumerator; }

  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDataType(const String& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(String&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  String& getDataType() noexcept
  { return getImpl()._dataType; }
  const String& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  FOMVariantRecordAlternative& swap(FOMVariantRecordAlternative& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMVariantRecordAlternative& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getEnumerator() != rhs.getEnumerator()) return false;
    if (getName() != rhs.getName()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    return true;
  }
  bool operator<(const FOMVariantRecordAlternative& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getEnumerator() < rhs.getEnumerator()) return true;
    if (rhs.getEnumerator() < getEnumerator()) return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    return false;
  }
  bool operator>(const FOMVariantRecordAlternative& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMVariantRecordAlternative& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMVariantRecordAlternative& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _enumerator(),
      _name(),
      _dataType()
    { }
    String _enumerator;
    String _name;
    String _dataType;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMVariantRecordAlternative> FOMVariantRecordAlternativeList;

class OPENRTI_API FOMVariantRecordDataType {
public:
  FOMVariantRecordDataType() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMVariantRecordDataType(const FOMVariantRecordDataType&) = default;
  FOMVariantRecordDataType(FOMVariantRecordDataType&&) = default;
  virtual ~FOMVariantRecordDataType() noexcept = default;
  FOMVariantRecordDataType& operator=(const FOMVariantRecordDataType&) = default;
  FOMVariantRecordDataType& operator=(FOMVariantRecordDataType&&) = default;
  void setName(const String& value) noexcept
  { getImpl()._name = value; }
  void setName(String&& value) noexcept
  { getImpl()._name = std::move(value); }
  String& getName() noexcept
  { return getImpl()._name; }
  const String& getName() const noexcept
  { return getConstImpl()._name; }

  void setDiscriminant(const String& value) noexcept
  { getImpl()._discriminant = value; }
  void setDiscriminant(String&& value) noexcept
  { getImpl()._discriminant = std::move(value); }
  String& getDiscriminant() noexcept
  { return getImpl()._discriminant; }
  const String& getDiscriminant() const noexcept
  { return getConstImpl()._discriminant; }

  void setDataType(const String& value) noexcept
  { getImpl()._dataType = value; }
  void setDataType(String&& value) noexcept
  { getImpl()._dataType = std::move(value); }
  String& getDataType() noexcept
  { return getImpl()._dataType; }
  const String& getDataType() const noexcept
  { return getConstImpl()._dataType; }

  void setAlternatives(const FOMVariantRecordAlternativeList& value) noexcept
  { getImpl()._alternatives = value; }
  void setAlternatives(FOMVariantRecordAlternativeList&& value) noexcept
  { getImpl()._alternatives = std::move(value); }
  FOMVariantRecordAlternativeList& getAlternatives() noexcept
  { return getImpl()._alternatives; }
  const FOMVariantRecordAlternativeList& getAlternatives() const noexcept
  { return getConstImpl()._alternatives; }

  void setEncoding(const String& value) noexcept
  { getImpl()._encoding = value; }
  void setEncoding(String&& value) noexcept
  { getImpl()._encoding = std::move(value); }
  String& getEncoding() noexcept
  { return getImpl()._encoding; }
  const String& getEncoding() const noexcept
  { return getConstImpl()._encoding; }

  void setHandle(const VariantRecordDataTypeHandle& value) noexcept
  { getImpl()._handle = value; }
  void setHandle(VariantRecordDataTypeHandle&& value) noexcept
  { getImpl()._handle = std::move(value); }
  VariantRecordDataTypeHandle& getHandle() noexcept
  { return getImpl()._handle; }
  const VariantRecordDataTypeHandle& getHandle() const noexcept
  { return getConstImpl()._handle; }

  FOMVariantRecordDataType& swap(FOMVariantRecordDataType& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMVariantRecordDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getName() != rhs.getName()) return false;
    if (getDiscriminant() != rhs.getDiscriminant()) return false;
    if (getDataType() != rhs.getDataType()) return false;
    if (getAlternatives() != rhs.getAlternatives()) return false;
    if (getEncoding() != rhs.getEncoding()) return false;
    if (getHandle() != rhs.getHandle()) return false;
    return true;
  }
  bool operator<(const FOMVariantRecordDataType& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getName() < rhs.getName()) return true;
    if (rhs.getName() < getName()) return false;
    if (getDiscriminant() < rhs.getDiscriminant()) return true;
    if (rhs.getDiscriminant() < getDiscriminant()) return false;
    if (getDataType() < rhs.getDataType()) return true;
    if (rhs.getDataType() < getDataType()) return false;
    if (getAlternatives() < rhs.getAlternatives()) return true;
    if (rhs.getAlternatives() < getAlternatives()) return false;
    if (getEncoding() < rhs.getEncoding()) return true;
    if (rhs.getEncoding() < getEncoding()) return false;
    if (getHandle() < rhs.getHandle()) return true;
    if (rhs.getHandle() < getHandle()) return false;
    return false;
  }
  bool operator>(const FOMVariantRecordDataType& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMVariantRecordDataType& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMVariantRecordDataType& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _name(),
      _discriminant(),
      _dataType(),
      _alternatives(),
      _encoding(),
      _handle()
    { }
    String _name;
    String _discriminant;
    String _dataType;
    FOMVariantRecordAlternativeList _alternatives;
    String _encoding;
    VariantRecordDataTypeHandle _handle;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMVariantRecordDataType> FOMVariantRecordDataTypeList;

class OPENRTI_API FOMModule {
public:
  FOMModule() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMModule(const FOMModule&) = default;
  FOMModule(FOMModule&&) = default;
  virtual ~FOMModule() noexcept = default;
  FOMModule& operator=(const FOMModule&) = default;
  FOMModule& operator=(FOMModule&&) = default;
  void setModuleHandle(const ModuleHandle& value) noexcept
  { getImpl()._moduleHandle = value; }
  void setModuleHandle(ModuleHandle&& value) noexcept
  { getImpl()._moduleHandle = std::move(value); }
  ModuleHandle& getModuleHandle() noexcept
  { return getImpl()._moduleHandle; }
  const ModuleHandle& getModuleHandle() const noexcept
  { return getConstImpl()._moduleHandle; }

  void setTransportationTypeList(const FOMTransportationTypeList& value) noexcept
  { getImpl()._transportationTypeList = value; }
  void setTransportationTypeList(FOMTransportationTypeList&& value) noexcept
  { getImpl()._transportationTypeList = std::move(value); }
  FOMTransportationTypeList& getTransportationTypeList() noexcept
  { return getImpl()._transportationTypeList; }
  const FOMTransportationTypeList& getTransportationTypeList() const noexcept
  { return getConstImpl()._transportationTypeList; }

  void setDimensionList(const FOMDimensionList& value) noexcept
  { getImpl()._dimensionList = value; }
  void setDimensionList(FOMDimensionList&& value) noexcept
  { getImpl()._dimensionList = std::move(value); }
  FOMDimensionList& getDimensionList() noexcept
  { return getImpl()._dimensionList; }
  const FOMDimensionList& getDimensionList() const noexcept
  { return getConstImpl()._dimensionList; }

  void setRoutingSpaceList(const FOMRoutingSpaceList& value) noexcept
  { getImpl()._routingSpaceList = value; }
  void setRoutingSpaceList(FOMRoutingSpaceList&& value) noexcept
  { getImpl()._routingSpaceList = std::move(value); }
  FOMRoutingSpaceList& getRoutingSpaceList() noexcept
  { return getImpl()._routingSpaceList; }
  const FOMRoutingSpaceList& getRoutingSpaceList() const noexcept
  { return getConstImpl()._routingSpaceList; }

  void setInteractionClassList(const FOMInteractionClassList& value) noexcept
  { getImpl()._interactionClassList = value; }
  void setInteractionClassList(FOMInteractionClassList&& value) noexcept
  { getImpl()._interactionClassList = std::move(value); }
  FOMInteractionClassList& getInteractionClassList() noexcept
  { return getImpl()._interactionClassList; }
  const FOMInteractionClassList& getInteractionClassList() const noexcept
  { return getConstImpl()._interactionClassList; }

  void setObjectClassList(const FOMObjectClassList& value) noexcept
  { getImpl()._objectClassList = value; }
  void setObjectClassList(FOMObjectClassList&& value) noexcept
  { getImpl()._objectClassList = std::move(value); }
  FOMObjectClassList& getObjectClassList() noexcept
  { return getImpl()._objectClassList; }
  const FOMObjectClassList& getObjectClassList() const noexcept
  { return getConstImpl()._objectClassList; }

  void setUpdateRateList(const FOMUpdateRateList& value) noexcept
  { getImpl()._updateRateList = value; }
  void setUpdateRateList(FOMUpdateRateList&& value) noexcept
  { getImpl()._updateRateList = std::move(value); }
  FOMUpdateRateList& getUpdateRateList() noexcept
  { return getImpl()._updateRateList; }
  const FOMUpdateRateList& getUpdateRateList() const noexcept
  { return getConstImpl()._updateRateList; }

  void setSwitchList(const FOMSwitchList& value) noexcept
  { getImpl()._switchList = value; }
  void setSwitchList(FOMSwitchList&& value) noexcept
  { getImpl()._switchList = std::move(value); }
  FOMSwitchList& getSwitchList() noexcept
  { return getImpl()._switchList; }
  const FOMSwitchList& getSwitchList() const noexcept
  { return getConstImpl()._switchList; }

  void setArtificialInteractionRoot(const Bool& value) noexcept
  { getImpl()._artificialInteractionRoot = value; }
  void setArtificialInteractionRoot(Bool&& value) noexcept
  { getImpl()._artificialInteractionRoot = std::move(value); }
  Bool& getArtificialInteractionRoot() noexcept
  { return getImpl()._artificialInteractionRoot; }
  const Bool& getArtificialInteractionRoot() const noexcept
  { return getConstImpl()._artificialInteractionRoot; }

  void setArtificialObjectRoot(const Bool& value) noexcept
  { getImpl()._artificialObjectRoot = value; }
  void setArtificialObjectRoot(Bool&& value) noexcept
  { getImpl()._artificialObjectRoot = std::move(value); }
  Bool& getArtificialObjectRoot() noexcept
  { return getImpl()._artificialObjectRoot; }
  const Bool& getArtificialObjectRoot() const noexcept
  { return getConstImpl()._artificialObjectRoot; }

  void setDesignator(const String& value) noexcept
  { getImpl()._designator = value; }
  void setDesignator(String&& value) noexcept
  { getImpl()._designator = std::move(value); }
  String& getDesignator() noexcept
  { return getImpl()._designator; }
  const String& getDesignator() const noexcept
  { return getConstImpl()._designator; }

  FOMModule& swap(FOMModule& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMModule& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getModuleHandle() != rhs.getModuleHandle()) return false;
    if (getTransportationTypeList() != rhs.getTransportationTypeList()) return false;
    if (getDimensionList() != rhs.getDimensionList()) return false;
    if (getRoutingSpaceList() != rhs.getRoutingSpaceList()) return false;
    if (getInteractionClassList() != rhs.getInteractionClassList()) return false;
    if (getObjectClassList() != rhs.getObjectClassList()) return false;
    if (getUpdateRateList() != rhs.getUpdateRateList()) return false;
    if (getSwitchList() != rhs.getSwitchList()) return false;
    if (getArtificialInteractionRoot() != rhs.getArtificialInteractionRoot()) return false;
    if (getArtificialObjectRoot() != rhs.getArtificialObjectRoot()) return false;
    if (getDesignator() != rhs.getDesignator()) return false;
    return true;
  }
  bool operator<(const FOMModule& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getModuleHandle() < rhs.getModuleHandle()) return true;
    if (rhs.getModuleHandle() < getModuleHandle()) return false;
    if (getTransportationTypeList() < rhs.getTransportationTypeList()) return true;
    if (rhs.getTransportationTypeList() < getTransportationTypeList()) return false;
    if (getDimensionList() < rhs.getDimensionList()) return true;
    if (rhs.getDimensionList() < getDimensionList()) return false;
    if (getRoutingSpaceList() < rhs.getRoutingSpaceList()) return true;
    if (rhs.getRoutingSpaceList() < getRoutingSpaceList()) return false;
    if (getInteractionClassList() < rhs.getInteractionClassList()) return true;
    if (rhs.getInteractionClassList() < getInteractionClassList()) return false;
    if (getObjectClassList() < rhs.getObjectClassList()) return true;
    if (rhs.getObjectClassList() < getObjectClassList()) return false;
    if (getUpdateRateList() < rhs.getUpdateRateList()) return true;
    if (rhs.getUpdateRateList() < getUpdateRateList()) return false;
    if (getSwitchList() < rhs.getSwitchList()) return true;
    if (rhs.getSwitchList() < getSwitchList()) return false;
    if (getArtificialInteractionRoot() < rhs.getArtificialInteractionRoot()) return true;
    if (rhs.getArtificialInteractionRoot() < getArtificialInteractionRoot()) return false;
    if (getArtificialObjectRoot() < rhs.getArtificialObjectRoot()) return true;
    if (rhs.getArtificialObjectRoot() < getArtificialObjectRoot()) return false;
    if (getDesignator() < rhs.getDesignator()) return true;
    if (rhs.getDesignator() < getDesignator()) return false;
    return false;
  }
  bool operator>(const FOMModule& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMModule& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMModule& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _moduleHandle(),
      _transportationTypeList(),
      _dimensionList(),
      _routingSpaceList(),
      _interactionClassList(),
      _objectClassList(),
      _updateRateList(),
      _switchList(),
      _artificialInteractionRoot(),
      _artificialObjectRoot(),
      _designator()
    { }
    ModuleHandle _moduleHandle;
    FOMTransportationTypeList _transportationTypeList;
    FOMDimensionList _dimensionList;
    FOMRoutingSpaceList _routingSpaceList;
    FOMInteractionClassList _interactionClassList;
    FOMObjectClassList _objectClassList;
    FOMUpdateRateList _updateRateList;
    FOMSwitchList _switchList;
    Bool _artificialInteractionRoot = false;
    Bool _artificialObjectRoot = false;
    String _designator;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMModule> FOMModuleList;

class OPENRTI_API FOMModule2 : public FOMModule {
public:
  FOMModule2() noexcept
   : _impl(MakeShared<Implementation>())
  { }
  FOMModule2(const FOMModule2&) = default;
  FOMModule2(FOMModule2&&) = default;
  virtual ~FOMModule2() noexcept = default;
  FOMModule2& operator=(const FOMModule2&) = default;
  FOMModule2& operator=(FOMModule2&&) = default;
  void setBasicDataTypeList(const FOMBasicDataTypeList& value) noexcept
  { getImpl()._basicDataTypeList = value; }
  void setBasicDataTypeList(FOMBasicDataTypeList&& value) noexcept
  { getImpl()._basicDataTypeList = std::move(value); }
  FOMBasicDataTypeList& getBasicDataTypeList() noexcept
  { return getImpl()._basicDataTypeList; }
  const FOMBasicDataTypeList& getBasicDataTypeList() const noexcept
  { return getConstImpl()._basicDataTypeList; }

  void setSimpleDataTypeList(const FOMSimpleDataTypeList& value) noexcept
  { getImpl()._simpleDataTypeList = value; }
  void setSimpleDataTypeList(FOMSimpleDataTypeList&& value) noexcept
  { getImpl()._simpleDataTypeList = std::move(value); }
  FOMSimpleDataTypeList& getSimpleDataTypeList() noexcept
  { return getImpl()._simpleDataTypeList; }
  const FOMSimpleDataTypeList& getSimpleDataTypeList() const noexcept
  { return getConstImpl()._simpleDataTypeList; }

  void setEnumeratedDataTypeList(const FOMEnumeratedDataTypeList& value) noexcept
  { getImpl()._enumeratedDataTypeList = value; }
  void setEnumeratedDataTypeList(FOMEnumeratedDataTypeList&& value) noexcept
  { getImpl()._enumeratedDataTypeList = std::move(value); }
  FOMEnumeratedDataTypeList& getEnumeratedDataTypeList() noexcept
  { return getImpl()._enumeratedDataTypeList; }
  const FOMEnumeratedDataTypeList& getEnumeratedDataTypeList() const noexcept
  { return getConstImpl()._enumeratedDataTypeList; }

  void setArrayDataTypeList(const FOMArrayDataTypeList& value) noexcept
  { getImpl()._arrayDataTypeList = value; }
  void setArrayDataTypeList(FOMArrayDataTypeList&& value) noexcept
  { getImpl()._arrayDataTypeList = std::move(value); }
  FOMArrayDataTypeList& getArrayDataTypeList() noexcept
  { return getImpl()._arrayDataTypeList; }
  const FOMArrayDataTypeList& getArrayDataTypeList() const noexcept
  { return getConstImpl()._arrayDataTypeList; }

  void setFixedRecordDataTypeList(const FOMFixedRecordDataTypeList& value) noexcept
  { getImpl()._fixedRecordDataTypeList = value; }
  void setFixedRecordDataTypeList(FOMFixedRecordDataTypeList&& value) noexcept
  { getImpl()._fixedRecordDataTypeList = std::move(value); }
  FOMFixedRecordDataTypeList& getFixedRecordDataTypeList() noexcept
  { return getImpl()._fixedRecordDataTypeList; }
  const FOMFixedRecordDataTypeList& getFixedRecordDataTypeList() const noexcept
  { return getConstImpl()._fixedRecordDataTypeList; }

  void setVariantRecordDataTypeList(const FOMVariantRecordDataTypeList& value) noexcept
  { getImpl()._variantRecordDataTypeList = value; }
  void setVariantRecordDataTypeList(FOMVariantRecordDataTypeList&& value) noexcept
  { getImpl()._variantRecordDataTypeList = std::move(value); }
  FOMVariantRecordDataTypeList& getVariantRecordDataTypeList() noexcept
  { return getImpl()._variantRecordDataTypeList; }
  const FOMVariantRecordDataTypeList& getVariantRecordDataTypeList() const noexcept
  { return getConstImpl()._variantRecordDataTypeList; }

  FOMModule2& swap(FOMModule2& rhs) noexcept
  {
    _impl.swap(rhs._impl);
    return *this;
  }
  bool operator==(const FOMModule2& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return true;
    if (getBasicDataTypeList() != rhs.getBasicDataTypeList()) return false;
    if (getSimpleDataTypeList() != rhs.getSimpleDataTypeList()) return false;
    if (getEnumeratedDataTypeList() != rhs.getEnumeratedDataTypeList()) return false;
    if (getArrayDataTypeList() != rhs.getArrayDataTypeList()) return false;
    if (getFixedRecordDataTypeList() != rhs.getFixedRecordDataTypeList()) return false;
    if (getVariantRecordDataTypeList() != rhs.getVariantRecordDataTypeList()) return false;
    return true;
  }
  bool operator<(const FOMModule2& rhs) const noexcept
  {
    if (_impl.get() == rhs._impl.get())
      return false;
    if (getBasicDataTypeList() < rhs.getBasicDataTypeList()) return true;
    if (rhs.getBasicDataTypeList() < getBasicDataTypeList()) return false;
    if (getSimpleDataTypeList() < rhs.getSimpleDataTypeList()) return true;
    if (rhs.getSimpleDataTypeList() < getSimpleDataTypeList()) return false;
    if (getEnumeratedDataTypeList() < rhs.getEnumeratedDataTypeList()) return true;
    if (rhs.getEnumeratedDataTypeList() < getEnumeratedDataTypeList()) return false;
    if (getArrayDataTypeList() < rhs.getArrayDataTypeList()) return true;
    if (rhs.getArrayDataTypeList() < getArrayDataTypeList()) return false;
    if (getFixedRecordDataTypeList() < rhs.getFixedRecordDataTypeList()) return true;
    if (rhs.getFixedRecordDataTypeList() < getFixedRecordDataTypeList()) return false;
    if (getVariantRecordDataTypeList() < rhs.getVariantRecordDataTypeList()) return true;
    if (rhs.getVariantRecordDataTypeList() < getVariantRecordDataTypeList()) return false;
    return false;
  }
  bool operator>(const FOMModule2& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FOMModule2& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FOMModule2& rhs) const noexcept
  { return !operator>(rhs); }
private:
  struct OPENRTI_API Implementation final : public Referenced {
    Implementation() noexcept :
      _basicDataTypeList(),
      _simpleDataTypeList(),
      _enumeratedDataTypeList(),
      _arrayDataTypeList(),
      _fixedRecordDataTypeList(),
      _variantRecordDataTypeList()
    { }
    FOMBasicDataTypeList _basicDataTypeList;
    FOMSimpleDataTypeList _simpleDataTypeList;
    FOMEnumeratedDataTypeList _enumeratedDataTypeList;
    FOMArrayDataTypeList _arrayDataTypeList;
    FOMFixedRecordDataTypeList _fixedRecordDataTypeList;
    FOMVariantRecordDataTypeList _variantRecordDataTypeList;
  };

  const Implementation& getConstImpl() const
  {
    return *_impl;
  }

  Implementation& getImpl()
  {
    if (1 < Referenced::count(_impl.get()))
      _impl = MakeShared<Implementation>(*_impl);
    return *_impl;
  }

  SharedPtr<Implementation> _impl;
};

typedef std::vector<FOMModule2> FOMModule2List;

class OPENRTI_API ConnectionLostMessage final : public AbstractMessage {
public:
  ConnectionLostMessage() noexcept {};
  ConnectionLostMessage(const ConnectionLostMessage&) = default;
  ConnectionLostMessage(ConnectionLostMessage&&) noexcept = default;
  virtual ~ConnectionLostMessage() noexcept = default;
  ConnectionLostMessage& operator=(const ConnectionLostMessage&) = default;
  ConnectionLostMessage& operator=(ConnectionLostMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 1;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ConnectionLostMessage& rhs) const noexcept;
  bool operator<(const ConnectionLostMessage& rhs) const noexcept;
  bool operator!=(const ConnectionLostMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ConnectionLostMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ConnectionLostMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ConnectionLostMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFaultDescription(const String& value) noexcept
  { _faultDescription = value; }
  void setFaultDescription(String&& value) noexcept
  { _faultDescription = std::move(value); }
  String& getFaultDescription() noexcept
  { return _faultDescription; }
  const String& getFaultDescription() const noexcept
  { return _faultDescription; }

private:
  String _faultDescription;
};

class OPENRTI_API CreateFederationExecutionRequestMessage final : public AbstractMessage {
public:
  CreateFederationExecutionRequestMessage() noexcept {};
  CreateFederationExecutionRequestMessage(const CreateFederationExecutionRequestMessage&) = default;
  CreateFederationExecutionRequestMessage(CreateFederationExecutionRequestMessage&&) noexcept = default;
  virtual ~CreateFederationExecutionRequestMessage() noexcept = default;
  CreateFederationExecutionRequestMessage& operator=(const CreateFederationExecutionRequestMessage&) = default;
  CreateFederationExecutionRequestMessage& operator=(CreateFederationExecutionRequestMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 2;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const CreateFederationExecutionRequestMessage& rhs) const noexcept;
  bool operator<(const CreateFederationExecutionRequestMessage& rhs) const noexcept;
  bool operator!=(const CreateFederationExecutionRequestMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const CreateFederationExecutionRequestMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const CreateFederationExecutionRequestMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const CreateFederationExecutionRequestMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationExecution(const String& value) noexcept
  { _federationExecution = value; }
  void setFederationExecution(String&& value) noexcept
  { _federationExecution = std::move(value); }
  String& getFederationExecution() noexcept
  { return _federationExecution; }
  const String& getFederationExecution() const noexcept
  { return _federationExecution; }

  void setLogicalTimeFactoryName(const String& value) noexcept
  { _logicalTimeFactoryName = value; }
  void setLogicalTimeFactoryName(String&& value) noexcept
  { _logicalTimeFactoryName = std::move(value); }
  String& getLogicalTimeFactoryName() noexcept
  { return _logicalTimeFactoryName; }
  const String& getLogicalTimeFactoryName() const noexcept
  { return _logicalTimeFactoryName; }

  void setFOMStringModuleList(const FOMStringModuleList& value) noexcept
  { _fOMStringModuleList = value; }
  void setFOMStringModuleList(FOMStringModuleList&& value) noexcept
  { _fOMStringModuleList = std::move(value); }
  FOMStringModuleList& getFOMStringModuleList() noexcept
  { return _fOMStringModuleList; }
  const FOMStringModuleList& getFOMStringModuleList() const noexcept
  { return _fOMStringModuleList; }

private:
  String _federationExecution;
  String _logicalTimeFactoryName;
  FOMStringModuleList _fOMStringModuleList;
};

class OPENRTI_API CreateFederationExecutionRequest2Message final : public AbstractMessage {
public:
  CreateFederationExecutionRequest2Message() noexcept {};
  CreateFederationExecutionRequest2Message(const CreateFederationExecutionRequest2Message&) = default;
  CreateFederationExecutionRequest2Message(CreateFederationExecutionRequest2Message&&) noexcept = default;
  virtual ~CreateFederationExecutionRequest2Message() noexcept = default;
  CreateFederationExecutionRequest2Message& operator=(const CreateFederationExecutionRequest2Message&) = default;
  CreateFederationExecutionRequest2Message& operator=(CreateFederationExecutionRequest2Message&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 104;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const CreateFederationExecutionRequest2Message& rhs) const noexcept;
  bool operator<(const CreateFederationExecutionRequest2Message& rhs) const noexcept;
  bool operator!=(const CreateFederationExecutionRequest2Message& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const CreateFederationExecutionRequest2Message& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const CreateFederationExecutionRequest2Message& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const CreateFederationExecutionRequest2Message& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationExecution(const String& value) noexcept
  { _federationExecution = value; }
  void setFederationExecution(String&& value) noexcept
  { _federationExecution = std::move(value); }
  String& getFederationExecution() noexcept
  { return _federationExecution; }
  const String& getFederationExecution() const noexcept
  { return _federationExecution; }

  void setLogicalTimeFactoryName(const String& value) noexcept
  { _logicalTimeFactoryName = value; }
  void setLogicalTimeFactoryName(String&& value) noexcept
  { _logicalTimeFactoryName = std::move(value); }
  String& getLogicalTimeFactoryName() noexcept
  { return _logicalTimeFactoryName; }
  const String& getLogicalTimeFactoryName() const noexcept
  { return _logicalTimeFactoryName; }

  void setFOMStringModuleList(const FOMStringModule2List& value) noexcept
  { _fOMStringModuleList = value; }
  void setFOMStringModuleList(FOMStringModule2List&& value) noexcept
  { _fOMStringModuleList = std::move(value); }
  FOMStringModule2List& getFOMStringModuleList() noexcept
  { return _fOMStringModuleList; }
  const FOMStringModule2List& getFOMStringModuleList() const noexcept
  { return _fOMStringModuleList; }

private:
  String _federationExecution;
  String _logicalTimeFactoryName;
  FOMStringModule2List _fOMStringModuleList;
};

class OPENRTI_API CreateFederationExecutionResponseMessage final : public AbstractMessage {
public:
  CreateFederationExecutionResponseMessage() noexcept {};
  CreateFederationExecutionResponseMessage(const CreateFederationExecutionResponseMessage&) = default;
  CreateFederationExecutionResponseMessage(CreateFederationExecutionResponseMessage&&) noexcept = default;
  virtual ~CreateFederationExecutionResponseMessage() noexcept = default;
  CreateFederationExecutionResponseMessage& operator=(const CreateFederationExecutionResponseMessage&) = default;
  CreateFederationExecutionResponseMessage& operator=(CreateFederationExecutionResponseMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 3;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const CreateFederationExecutionResponseMessage& rhs) const noexcept;
  bool operator<(const CreateFederationExecutionResponseMessage& rhs) const noexcept;
  bool operator!=(const CreateFederationExecutionResponseMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const CreateFederationExecutionResponseMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const CreateFederationExecutionResponseMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const CreateFederationExecutionResponseMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setCreateFederationExecutionResponseType(const CreateFederationExecutionResponseType& value) noexcept
  { _createFederationExecutionResponseType = value; }
  void setCreateFederationExecutionResponseType(CreateFederationExecutionResponseType&& value) noexcept
  { _createFederationExecutionResponseType = std::move(value); }
  CreateFederationExecutionResponseType& getCreateFederationExecutionResponseType() noexcept
  { return _createFederationExecutionResponseType; }
  const CreateFederationExecutionResponseType& getCreateFederationExecutionResponseType() const noexcept
  { return _createFederationExecutionResponseType; }

  void setExceptionString(const String& value) noexcept
  { _exceptionString = value; }
  void setExceptionString(String&& value) noexcept
  { _exceptionString = std::move(value); }
  String& getExceptionString() noexcept
  { return _exceptionString; }
  const String& getExceptionString() const noexcept
  { return _exceptionString; }

private:
  CreateFederationExecutionResponseType _createFederationExecutionResponseType = CreateFederationExecutionResponseSuccess;
  String _exceptionString;
};

class OPENRTI_API DestroyFederationExecutionRequestMessage final : public AbstractMessage {
public:
  DestroyFederationExecutionRequestMessage() noexcept {};
  DestroyFederationExecutionRequestMessage(const DestroyFederationExecutionRequestMessage&) = default;
  DestroyFederationExecutionRequestMessage(DestroyFederationExecutionRequestMessage&&) noexcept = default;
  virtual ~DestroyFederationExecutionRequestMessage() noexcept = default;
  DestroyFederationExecutionRequestMessage& operator=(const DestroyFederationExecutionRequestMessage&) = default;
  DestroyFederationExecutionRequestMessage& operator=(DestroyFederationExecutionRequestMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 4;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const DestroyFederationExecutionRequestMessage& rhs) const noexcept;
  bool operator<(const DestroyFederationExecutionRequestMessage& rhs) const noexcept;
  bool operator!=(const DestroyFederationExecutionRequestMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const DestroyFederationExecutionRequestMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const DestroyFederationExecutionRequestMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const DestroyFederationExecutionRequestMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationExecution(const String& value) noexcept
  { _federationExecution = value; }
  void setFederationExecution(String&& value) noexcept
  { _federationExecution = std::move(value); }
  String& getFederationExecution() noexcept
  { return _federationExecution; }
  const String& getFederationExecution() const noexcept
  { return _federationExecution; }

private:
  String _federationExecution;
};

class OPENRTI_API DestroyFederationExecutionResponseMessage final : public AbstractMessage {
public:
  DestroyFederationExecutionResponseMessage() noexcept {};
  DestroyFederationExecutionResponseMessage(const DestroyFederationExecutionResponseMessage&) = default;
  DestroyFederationExecutionResponseMessage(DestroyFederationExecutionResponseMessage&&) noexcept = default;
  virtual ~DestroyFederationExecutionResponseMessage() noexcept = default;
  DestroyFederationExecutionResponseMessage& operator=(const DestroyFederationExecutionResponseMessage&) = default;
  DestroyFederationExecutionResponseMessage& operator=(DestroyFederationExecutionResponseMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 5;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const DestroyFederationExecutionResponseMessage& rhs) const noexcept;
  bool operator<(const DestroyFederationExecutionResponseMessage& rhs) const noexcept;
  bool operator!=(const DestroyFederationExecutionResponseMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const DestroyFederationExecutionResponseMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const DestroyFederationExecutionResponseMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const DestroyFederationExecutionResponseMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setDestroyFederationExecutionResponseType(const DestroyFederationExecutionResponseType& value) noexcept
  { _destroyFederationExecutionResponseType = value; }
  void setDestroyFederationExecutionResponseType(DestroyFederationExecutionResponseType&& value) noexcept
  { _destroyFederationExecutionResponseType = std::move(value); }
  DestroyFederationExecutionResponseType& getDestroyFederationExecutionResponseType() noexcept
  { return _destroyFederationExecutionResponseType; }
  const DestroyFederationExecutionResponseType& getDestroyFederationExecutionResponseType() const noexcept
  { return _destroyFederationExecutionResponseType; }

private:
  DestroyFederationExecutionResponseType _destroyFederationExecutionResponseType = DestroyFederationExecutionResponseSuccess;
};

class OPENRTI_API EnumerateFederationExecutionsRequestMessage final : public AbstractMessage {
public:
  EnumerateFederationExecutionsRequestMessage() noexcept {};
  EnumerateFederationExecutionsRequestMessage(const EnumerateFederationExecutionsRequestMessage&) = default;
  EnumerateFederationExecutionsRequestMessage(EnumerateFederationExecutionsRequestMessage&&) noexcept = default;
  virtual ~EnumerateFederationExecutionsRequestMessage() noexcept = default;
  EnumerateFederationExecutionsRequestMessage& operator=(const EnumerateFederationExecutionsRequestMessage&) = default;
  EnumerateFederationExecutionsRequestMessage& operator=(EnumerateFederationExecutionsRequestMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 6;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const EnumerateFederationExecutionsRequestMessage& rhs) const noexcept;
  bool operator<(const EnumerateFederationExecutionsRequestMessage& rhs) const noexcept;
  bool operator!=(const EnumerateFederationExecutionsRequestMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const EnumerateFederationExecutionsRequestMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const EnumerateFederationExecutionsRequestMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const EnumerateFederationExecutionsRequestMessage& rhs) const noexcept
  { return !operator>(rhs); }

private:
};

class OPENRTI_API EnumerateFederationExecutionsResponseMessage final : public AbstractMessage {
public:
  EnumerateFederationExecutionsResponseMessage() noexcept {};
  EnumerateFederationExecutionsResponseMessage(const EnumerateFederationExecutionsResponseMessage&) = default;
  EnumerateFederationExecutionsResponseMessage(EnumerateFederationExecutionsResponseMessage&&) noexcept = default;
  virtual ~EnumerateFederationExecutionsResponseMessage() noexcept = default;
  EnumerateFederationExecutionsResponseMessage& operator=(const EnumerateFederationExecutionsResponseMessage&) = default;
  EnumerateFederationExecutionsResponseMessage& operator=(EnumerateFederationExecutionsResponseMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 7;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const EnumerateFederationExecutionsResponseMessage& rhs) const noexcept;
  bool operator<(const EnumerateFederationExecutionsResponseMessage& rhs) const noexcept;
  bool operator!=(const EnumerateFederationExecutionsResponseMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const EnumerateFederationExecutionsResponseMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const EnumerateFederationExecutionsResponseMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const EnumerateFederationExecutionsResponseMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationExecutionInformationVector(const FederationExecutionInformationVector& value) noexcept
  { _federationExecutionInformationVector = value; }
  void setFederationExecutionInformationVector(FederationExecutionInformationVector&& value) noexcept
  { _federationExecutionInformationVector = std::move(value); }
  FederationExecutionInformationVector& getFederationExecutionInformationVector() noexcept
  { return _federationExecutionInformationVector; }
  const FederationExecutionInformationVector& getFederationExecutionInformationVector() const noexcept
  { return _federationExecutionInformationVector; }

private:
  FederationExecutionInformationVector _federationExecutionInformationVector;
};

class OPENRTI_API InsertFederationExecutionMessage final : public AbstractMessage {
public:
  InsertFederationExecutionMessage() noexcept {};
  InsertFederationExecutionMessage(const InsertFederationExecutionMessage&) = default;
  InsertFederationExecutionMessage(InsertFederationExecutionMessage&&) noexcept = default;
  virtual ~InsertFederationExecutionMessage() noexcept = default;
  InsertFederationExecutionMessage& operator=(const InsertFederationExecutionMessage&) = default;
  InsertFederationExecutionMessage& operator=(InsertFederationExecutionMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 8;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const InsertFederationExecutionMessage& rhs) const noexcept;
  bool operator<(const InsertFederationExecutionMessage& rhs) const noexcept;
  bool operator!=(const InsertFederationExecutionMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const InsertFederationExecutionMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const InsertFederationExecutionMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const InsertFederationExecutionMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederationName(const String& value) noexcept
  { _federationName = value; }
  void setFederationName(String&& value) noexcept
  { _federationName = std::move(value); }
  String& getFederationName() noexcept
  { return _federationName; }
  const String& getFederationName() const noexcept
  { return _federationName; }

  void setLogicalTimeFactoryName(const String& value) noexcept
  { _logicalTimeFactoryName = value; }
  void setLogicalTimeFactoryName(String&& value) noexcept
  { _logicalTimeFactoryName = std::move(value); }
  String& getLogicalTimeFactoryName() noexcept
  { return _logicalTimeFactoryName; }
  const String& getLogicalTimeFactoryName() const noexcept
  { return _logicalTimeFactoryName; }

  void setConfigurationParameterMap(const ConfigurationParameterMap& value) noexcept
  { _configurationParameterMap = value; }
  void setConfigurationParameterMap(ConfigurationParameterMap&& value) noexcept
  { _configurationParameterMap = std::move(value); }
  ConfigurationParameterMap& getConfigurationParameterMap() noexcept
  { return _configurationParameterMap; }
  const ConfigurationParameterMap& getConfigurationParameterMap() const noexcept
  { return _configurationParameterMap; }

private:
  FederationHandle _federationHandle;
  String _federationName;
  String _logicalTimeFactoryName;
  ConfigurationParameterMap _configurationParameterMap;
};

class OPENRTI_API ShutdownFederationExecutionMessage final : public AbstractMessage {
public:
  ShutdownFederationExecutionMessage() noexcept {};
  ShutdownFederationExecutionMessage(const ShutdownFederationExecutionMessage&) = default;
  ShutdownFederationExecutionMessage(ShutdownFederationExecutionMessage&&) noexcept = default;
  virtual ~ShutdownFederationExecutionMessage() noexcept = default;
  ShutdownFederationExecutionMessage& operator=(const ShutdownFederationExecutionMessage&) = default;
  ShutdownFederationExecutionMessage& operator=(ShutdownFederationExecutionMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 9;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ShutdownFederationExecutionMessage& rhs) const noexcept;
  bool operator<(const ShutdownFederationExecutionMessage& rhs) const noexcept;
  bool operator!=(const ShutdownFederationExecutionMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ShutdownFederationExecutionMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ShutdownFederationExecutionMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ShutdownFederationExecutionMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

private:
  FederationHandle _federationHandle;
};

class OPENRTI_API EraseFederationExecutionMessage final : public AbstractMessage {
public:
  EraseFederationExecutionMessage() noexcept {};
  EraseFederationExecutionMessage(const EraseFederationExecutionMessage&) = default;
  EraseFederationExecutionMessage(EraseFederationExecutionMessage&&) noexcept = default;
  virtual ~EraseFederationExecutionMessage() noexcept = default;
  EraseFederationExecutionMessage& operator=(const EraseFederationExecutionMessage&) = default;
  EraseFederationExecutionMessage& operator=(EraseFederationExecutionMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 10;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const EraseFederationExecutionMessage& rhs) const noexcept;
  bool operator<(const EraseFederationExecutionMessage& rhs) const noexcept;
  bool operator!=(const EraseFederationExecutionMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const EraseFederationExecutionMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const EraseFederationExecutionMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const EraseFederationExecutionMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

private:
  FederationHandle _federationHandle;
};

class OPENRTI_API ReleaseFederationHandleMessage final : public AbstractMessage {
public:
  ReleaseFederationHandleMessage() noexcept {};
  ReleaseFederationHandleMessage(const ReleaseFederationHandleMessage&) = default;
  ReleaseFederationHandleMessage(ReleaseFederationHandleMessage&&) noexcept = default;
  virtual ~ReleaseFederationHandleMessage() noexcept = default;
  ReleaseFederationHandleMessage& operator=(const ReleaseFederationHandleMessage&) = default;
  ReleaseFederationHandleMessage& operator=(ReleaseFederationHandleMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 11;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ReleaseFederationHandleMessage& rhs) const noexcept;
  bool operator<(const ReleaseFederationHandleMessage& rhs) const noexcept;
  bool operator!=(const ReleaseFederationHandleMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ReleaseFederationHandleMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ReleaseFederationHandleMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ReleaseFederationHandleMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

private:
  FederationHandle _federationHandle;
};

class OPENRTI_API InsertModulesMessage final : public AbstractMessage {
public:
  InsertModulesMessage() noexcept {};
  InsertModulesMessage(const InsertModulesMessage&) = default;
  InsertModulesMessage(InsertModulesMessage&&) noexcept = default;
  virtual ~InsertModulesMessage() noexcept = default;
  InsertModulesMessage& operator=(const InsertModulesMessage&) = default;
  InsertModulesMessage& operator=(InsertModulesMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 12;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const InsertModulesMessage& rhs) const noexcept;
  bool operator<(const InsertModulesMessage& rhs) const noexcept;
  bool operator!=(const InsertModulesMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const InsertModulesMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const InsertModulesMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const InsertModulesMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFOMModuleList(const FOMModuleList& value) noexcept
  { _fOMModuleList = value; }
  void setFOMModuleList(FOMModuleList&& value) noexcept
  { _fOMModuleList = std::move(value); }
  FOMModuleList& getFOMModuleList() noexcept
  { return _fOMModuleList; }
  const FOMModuleList& getFOMModuleList() const noexcept
  { return _fOMModuleList; }

private:
  FederationHandle _federationHandle;
  FOMModuleList _fOMModuleList;
};

class OPENRTI_API InsertModules2Message final : public AbstractMessage {
public:
  InsertModules2Message() noexcept {};
  InsertModules2Message(const InsertModules2Message&) = default;
  InsertModules2Message(InsertModules2Message&&) noexcept = default;
  virtual ~InsertModules2Message() noexcept = default;
  InsertModules2Message& operator=(const InsertModules2Message&) = default;
  InsertModules2Message& operator=(InsertModules2Message&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 106;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const InsertModules2Message& rhs) const noexcept;
  bool operator<(const InsertModules2Message& rhs) const noexcept;
  bool operator!=(const InsertModules2Message& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const InsertModules2Message& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const InsertModules2Message& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const InsertModules2Message& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFOMModule2List(const FOMModule2List& value) noexcept
  { _fOMModule2List = value; }
  void setFOMModule2List(FOMModule2List&& value) noexcept
  { _fOMModule2List = std::move(value); }
  FOMModule2List& getFOMModule2List() noexcept
  { return _fOMModule2List; }
  const FOMModule2List& getFOMModule2List() const noexcept
  { return _fOMModule2List; }

private:
  FederationHandle _federationHandle;
  FOMModule2List _fOMModule2List;
};

class OPENRTI_API JoinFederationExecutionRequestMessage final : public AbstractMessage {
public:
  JoinFederationExecutionRequestMessage() noexcept {};
  JoinFederationExecutionRequestMessage(const JoinFederationExecutionRequestMessage&) = default;
  JoinFederationExecutionRequestMessage(JoinFederationExecutionRequestMessage&&) noexcept = default;
  virtual ~JoinFederationExecutionRequestMessage() noexcept = default;
  JoinFederationExecutionRequestMessage& operator=(const JoinFederationExecutionRequestMessage&) = default;
  JoinFederationExecutionRequestMessage& operator=(JoinFederationExecutionRequestMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 13;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const JoinFederationExecutionRequestMessage& rhs) const noexcept;
  bool operator<(const JoinFederationExecutionRequestMessage& rhs) const noexcept;
  bool operator!=(const JoinFederationExecutionRequestMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const JoinFederationExecutionRequestMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const JoinFederationExecutionRequestMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const JoinFederationExecutionRequestMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationExecution(const String& value) noexcept
  { _federationExecution = value; }
  void setFederationExecution(String&& value) noexcept
  { _federationExecution = std::move(value); }
  String& getFederationExecution() noexcept
  { return _federationExecution; }
  const String& getFederationExecution() const noexcept
  { return _federationExecution; }

  void setFederateType(const String& value) noexcept
  { _federateType = value; }
  void setFederateType(String&& value) noexcept
  { _federateType = std::move(value); }
  String& getFederateType() noexcept
  { return _federateType; }
  const String& getFederateType() const noexcept
  { return _federateType; }

  void setFederateName(const String& value) noexcept
  { _federateName = value; }
  void setFederateName(String&& value) noexcept
  { _federateName = std::move(value); }
  String& getFederateName() noexcept
  { return _federateName; }
  const String& getFederateName() const noexcept
  { return _federateName; }

  void setFOMStringModuleList(const FOMStringModuleList& value) noexcept
  { _fOMStringModuleList = value; }
  void setFOMStringModuleList(FOMStringModuleList&& value) noexcept
  { _fOMStringModuleList = std::move(value); }
  FOMStringModuleList& getFOMStringModuleList() noexcept
  { return _fOMStringModuleList; }
  const FOMStringModuleList& getFOMStringModuleList() const noexcept
  { return _fOMStringModuleList; }

  void setConfigurationParameterMap(const ConfigurationParameterMap& value) noexcept
  { _configurationParameterMap = value; }
  void setConfigurationParameterMap(ConfigurationParameterMap&& value) noexcept
  { _configurationParameterMap = std::move(value); }
  ConfigurationParameterMap& getConfigurationParameterMap() noexcept
  { return _configurationParameterMap; }
  const ConfigurationParameterMap& getConfigurationParameterMap() const noexcept
  { return _configurationParameterMap; }

  void setIsInternal(const Bool& value) noexcept
  { _isInternal = value; }
  void setIsInternal(Bool&& value) noexcept
  { _isInternal = std::move(value); }
  Bool& getIsInternal() noexcept
  { return _isInternal; }
  const Bool& getIsInternal() const noexcept
  { return _isInternal; }

private:
  String _federationExecution;
  String _federateType;
  String _federateName;
  FOMStringModuleList _fOMStringModuleList;
  ConfigurationParameterMap _configurationParameterMap;
  Bool _isInternal = false;
};

class OPENRTI_API JoinFederationExecutionRequest2Message final : public AbstractMessage {
public:
  JoinFederationExecutionRequest2Message() noexcept {};
  JoinFederationExecutionRequest2Message(const JoinFederationExecutionRequest2Message&) = default;
  JoinFederationExecutionRequest2Message(JoinFederationExecutionRequest2Message&&) noexcept = default;
  virtual ~JoinFederationExecutionRequest2Message() noexcept = default;
  JoinFederationExecutionRequest2Message& operator=(const JoinFederationExecutionRequest2Message&) = default;
  JoinFederationExecutionRequest2Message& operator=(JoinFederationExecutionRequest2Message&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 105;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const JoinFederationExecutionRequest2Message& rhs) const noexcept;
  bool operator<(const JoinFederationExecutionRequest2Message& rhs) const noexcept;
  bool operator!=(const JoinFederationExecutionRequest2Message& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const JoinFederationExecutionRequest2Message& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const JoinFederationExecutionRequest2Message& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const JoinFederationExecutionRequest2Message& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationExecution(const String& value) noexcept
  { _federationExecution = value; }
  void setFederationExecution(String&& value) noexcept
  { _federationExecution = std::move(value); }
  String& getFederationExecution() noexcept
  { return _federationExecution; }
  const String& getFederationExecution() const noexcept
  { return _federationExecution; }

  void setFederateType(const String& value) noexcept
  { _federateType = value; }
  void setFederateType(String&& value) noexcept
  { _federateType = std::move(value); }
  String& getFederateType() noexcept
  { return _federateType; }
  const String& getFederateType() const noexcept
  { return _federateType; }

  void setFederateName(const String& value) noexcept
  { _federateName = value; }
  void setFederateName(String&& value) noexcept
  { _federateName = std::move(value); }
  String& getFederateName() noexcept
  { return _federateName; }
  const String& getFederateName() const noexcept
  { return _federateName; }

  void setFOMStringModuleList(const FOMStringModule2List& value) noexcept
  { _fOMStringModuleList = value; }
  void setFOMStringModuleList(FOMStringModule2List&& value) noexcept
  { _fOMStringModuleList = std::move(value); }
  FOMStringModule2List& getFOMStringModuleList() noexcept
  { return _fOMStringModuleList; }
  const FOMStringModule2List& getFOMStringModuleList() const noexcept
  { return _fOMStringModuleList; }

  void setConfigurationParameterMap(const ConfigurationParameterMap& value) noexcept
  { _configurationParameterMap = value; }
  void setConfigurationParameterMap(ConfigurationParameterMap&& value) noexcept
  { _configurationParameterMap = std::move(value); }
  ConfigurationParameterMap& getConfigurationParameterMap() noexcept
  { return _configurationParameterMap; }
  const ConfigurationParameterMap& getConfigurationParameterMap() const noexcept
  { return _configurationParameterMap; }

  void setIsInternal(const Bool& value) noexcept
  { _isInternal = value; }
  void setIsInternal(Bool&& value) noexcept
  { _isInternal = std::move(value); }
  Bool& getIsInternal() noexcept
  { return _isInternal; }
  const Bool& getIsInternal() const noexcept
  { return _isInternal; }

private:
  String _federationExecution;
  String _federateType;
  String _federateName;
  FOMStringModule2List _fOMStringModuleList;
  ConfigurationParameterMap _configurationParameterMap;
  Bool _isInternal = false;
};

class OPENRTI_API JoinFederationExecutionResponseMessage final : public AbstractMessage {
public:
  JoinFederationExecutionResponseMessage() noexcept {};
  JoinFederationExecutionResponseMessage(const JoinFederationExecutionResponseMessage&) = default;
  JoinFederationExecutionResponseMessage(JoinFederationExecutionResponseMessage&&) noexcept = default;
  virtual ~JoinFederationExecutionResponseMessage() noexcept = default;
  JoinFederationExecutionResponseMessage& operator=(const JoinFederationExecutionResponseMessage&) = default;
  JoinFederationExecutionResponseMessage& operator=(JoinFederationExecutionResponseMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 14;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const JoinFederationExecutionResponseMessage& rhs) const noexcept;
  bool operator<(const JoinFederationExecutionResponseMessage& rhs) const noexcept;
  bool operator!=(const JoinFederationExecutionResponseMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const JoinFederationExecutionResponseMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const JoinFederationExecutionResponseMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const JoinFederationExecutionResponseMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setJoinFederationExecutionResponseType(const JoinFederationExecutionResponseType& value) noexcept
  { _joinFederationExecutionResponseType = value; }
  void setJoinFederationExecutionResponseType(JoinFederationExecutionResponseType&& value) noexcept
  { _joinFederationExecutionResponseType = std::move(value); }
  JoinFederationExecutionResponseType& getJoinFederationExecutionResponseType() noexcept
  { return _joinFederationExecutionResponseType; }
  const JoinFederationExecutionResponseType& getJoinFederationExecutionResponseType() const noexcept
  { return _joinFederationExecutionResponseType; }

  void setExceptionString(const String& value) noexcept
  { _exceptionString = value; }
  void setExceptionString(String&& value) noexcept
  { _exceptionString = std::move(value); }
  String& getExceptionString() noexcept
  { return _exceptionString; }
  const String& getExceptionString() const noexcept
  { return _exceptionString; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setFederateType(const String& value) noexcept
  { _federateType = value; }
  void setFederateType(String&& value) noexcept
  { _federateType = std::move(value); }
  String& getFederateType() noexcept
  { return _federateType; }
  const String& getFederateType() const noexcept
  { return _federateType; }

  void setFederateName(const String& value) noexcept
  { _federateName = value; }
  void setFederateName(String&& value) noexcept
  { _federateName = std::move(value); }
  String& getFederateName() noexcept
  { return _federateName; }
  const String& getFederateName() const noexcept
  { return _federateName; }

private:
  FederationHandle _federationHandle;
  JoinFederationExecutionResponseType _joinFederationExecutionResponseType = JoinFederationExecutionResponseSuccess;
  String _exceptionString;
  FederateHandle _federateHandle;
  String _federateType;
  String _federateName;
};

class OPENRTI_API ResignFederationExecutionLeafRequestMessage final : public AbstractMessage {
public:
  ResignFederationExecutionLeafRequestMessage() noexcept {};
  ResignFederationExecutionLeafRequestMessage(const ResignFederationExecutionLeafRequestMessage&) = default;
  ResignFederationExecutionLeafRequestMessage(ResignFederationExecutionLeafRequestMessage&&) noexcept = default;
  virtual ~ResignFederationExecutionLeafRequestMessage() noexcept = default;
  ResignFederationExecutionLeafRequestMessage& operator=(const ResignFederationExecutionLeafRequestMessage&) = default;
  ResignFederationExecutionLeafRequestMessage& operator=(ResignFederationExecutionLeafRequestMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ResignFederationExecutionLeafRequestMessage& rhs) const noexcept;
  bool operator<(const ResignFederationExecutionLeafRequestMessage& rhs) const noexcept;
  bool operator!=(const ResignFederationExecutionLeafRequestMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ResignFederationExecutionLeafRequestMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ResignFederationExecutionLeafRequestMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ResignFederationExecutionLeafRequestMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setResignAction(const ResignAction& value) noexcept
  { _resignAction = value; }
  void setResignAction(ResignAction&& value) noexcept
  { _resignAction = std::move(value); }
  ResignAction& getResignAction() noexcept
  { return _resignAction; }
  const ResignAction& getResignAction() const noexcept
  { return _resignAction; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  ResignAction _resignAction = UNCONDITIONALLY_DIVEST_ATTRIBUTES;
};

class OPENRTI_API ResignFederationExecutionRequestMessage final : public AbstractMessage {
public:
  ResignFederationExecutionRequestMessage() noexcept {};
  ResignFederationExecutionRequestMessage(const ResignFederationExecutionRequestMessage&) = default;
  ResignFederationExecutionRequestMessage(ResignFederationExecutionRequestMessage&&) noexcept = default;
  virtual ~ResignFederationExecutionRequestMessage() noexcept = default;
  ResignFederationExecutionRequestMessage& operator=(const ResignFederationExecutionRequestMessage&) = default;
  ResignFederationExecutionRequestMessage& operator=(ResignFederationExecutionRequestMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 15;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ResignFederationExecutionRequestMessage& rhs) const noexcept;
  bool operator<(const ResignFederationExecutionRequestMessage& rhs) const noexcept;
  bool operator!=(const ResignFederationExecutionRequestMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ResignFederationExecutionRequestMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ResignFederationExecutionRequestMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ResignFederationExecutionRequestMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
};

class OPENRTI_API JoinFederateNotifyMessage final : public AbstractMessage {
public:
  JoinFederateNotifyMessage() noexcept {};
  JoinFederateNotifyMessage(const JoinFederateNotifyMessage&) = default;
  JoinFederateNotifyMessage(JoinFederateNotifyMessage&&) noexcept = default;
  virtual ~JoinFederateNotifyMessage() noexcept = default;
  JoinFederateNotifyMessage& operator=(const JoinFederateNotifyMessage&) = default;
  JoinFederateNotifyMessage& operator=(JoinFederateNotifyMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 16;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const JoinFederateNotifyMessage& rhs) const noexcept;
  bool operator<(const JoinFederateNotifyMessage& rhs) const noexcept;
  bool operator!=(const JoinFederateNotifyMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const JoinFederateNotifyMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const JoinFederateNotifyMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const JoinFederateNotifyMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setFederateType(const String& value) noexcept
  { _federateType = value; }
  void setFederateType(String&& value) noexcept
  { _federateType = std::move(value); }
  String& getFederateType() noexcept
  { return _federateType; }
  const String& getFederateType() const noexcept
  { return _federateType; }

  void setFederateName(const String& value) noexcept
  { _federateName = value; }
  void setFederateName(String&& value) noexcept
  { _federateName = std::move(value); }
  String& getFederateName() noexcept
  { return _federateName; }
  const String& getFederateName() const noexcept
  { return _federateName; }

  void setIsInternal(const Bool& value) noexcept
  { _isInternal = value; }
  void setIsInternal(Bool&& value) noexcept
  { _isInternal = std::move(value); }
  Bool& getIsInternal() noexcept
  { return _isInternal; }
  const Bool& getIsInternal() const noexcept
  { return _isInternal; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  String _federateType;
  String _federateName;
  Bool _isInternal = false;
};

class OPENRTI_API ResignFederateNotifyMessage final : public AbstractMessage {
public:
  ResignFederateNotifyMessage() noexcept {};
  ResignFederateNotifyMessage(const ResignFederateNotifyMessage&) = default;
  ResignFederateNotifyMessage(ResignFederateNotifyMessage&&) noexcept = default;
  virtual ~ResignFederateNotifyMessage() noexcept = default;
  ResignFederateNotifyMessage& operator=(const ResignFederateNotifyMessage&) = default;
  ResignFederateNotifyMessage& operator=(ResignFederateNotifyMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 17;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ResignFederateNotifyMessage& rhs) const noexcept;
  bool operator<(const ResignFederateNotifyMessage& rhs) const noexcept;
  bool operator!=(const ResignFederateNotifyMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ResignFederateNotifyMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ResignFederateNotifyMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ResignFederateNotifyMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
};

class OPENRTI_API ChangeAutomaticResignDirectiveMessage final : public AbstractMessage {
public:
  ChangeAutomaticResignDirectiveMessage() noexcept {};
  ChangeAutomaticResignDirectiveMessage(const ChangeAutomaticResignDirectiveMessage&) = default;
  ChangeAutomaticResignDirectiveMessage(ChangeAutomaticResignDirectiveMessage&&) noexcept = default;
  virtual ~ChangeAutomaticResignDirectiveMessage() noexcept = default;
  ChangeAutomaticResignDirectiveMessage& operator=(const ChangeAutomaticResignDirectiveMessage&) = default;
  ChangeAutomaticResignDirectiveMessage& operator=(ChangeAutomaticResignDirectiveMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 18;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ChangeAutomaticResignDirectiveMessage& rhs) const noexcept;
  bool operator<(const ChangeAutomaticResignDirectiveMessage& rhs) const noexcept;
  bool operator!=(const ChangeAutomaticResignDirectiveMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ChangeAutomaticResignDirectiveMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ChangeAutomaticResignDirectiveMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ChangeAutomaticResignDirectiveMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setResignAction(const ResignAction& value) noexcept
  { _resignAction = value; }
  void setResignAction(ResignAction&& value) noexcept
  { _resignAction = std::move(value); }
  ResignAction& getResignAction() noexcept
  { return _resignAction; }
  const ResignAction& getResignAction() const noexcept
  { return _resignAction; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  ResignAction _resignAction = UNCONDITIONALLY_DIVEST_ATTRIBUTES;
};

class OPENRTI_API RegisterFederationSynchronizationPointMessage final : public AbstractMessage {
public:
  RegisterFederationSynchronizationPointMessage() noexcept {};
  RegisterFederationSynchronizationPointMessage(const RegisterFederationSynchronizationPointMessage&) = default;
  RegisterFederationSynchronizationPointMessage(RegisterFederationSynchronizationPointMessage&&) noexcept = default;
  virtual ~RegisterFederationSynchronizationPointMessage() noexcept = default;
  RegisterFederationSynchronizationPointMessage& operator=(const RegisterFederationSynchronizationPointMessage&) = default;
  RegisterFederationSynchronizationPointMessage& operator=(RegisterFederationSynchronizationPointMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 30;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const RegisterFederationSynchronizationPointMessage& rhs) const noexcept;
  bool operator<(const RegisterFederationSynchronizationPointMessage& rhs) const noexcept;
  bool operator!=(const RegisterFederationSynchronizationPointMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const RegisterFederationSynchronizationPointMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const RegisterFederationSynchronizationPointMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const RegisterFederationSynchronizationPointMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setLabel(const String& value) noexcept
  { _label = value; }
  void setLabel(String&& value) noexcept
  { _label = std::move(value); }
  String& getLabel() noexcept
  { return _label; }
  const String& getLabel() const noexcept
  { return _label; }

  void setTag(const VariableLengthData& value) noexcept
  { _tag = value; }
  void setTag(VariableLengthData&& value) noexcept
  { _tag = std::move(value); }
  VariableLengthData& getTag() noexcept
  { return _tag; }
  const VariableLengthData& getTag() const noexcept
  { return _tag; }

  void setFederateHandleVector(const FederateHandleVector& value) noexcept
  { _federateHandleVector = value; }
  void setFederateHandleVector(FederateHandleVector&& value) noexcept
  { _federateHandleVector = std::move(value); }
  FederateHandleVector& getFederateHandleVector() noexcept
  { return _federateHandleVector; }
  const FederateHandleVector& getFederateHandleVector() const noexcept
  { return _federateHandleVector; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  String _label;
  VariableLengthData _tag;
  FederateHandleVector _federateHandleVector;
};

class OPENRTI_API RegisterFederationSynchronizationPointResponseMessage final : public AbstractMessage {
public:
  RegisterFederationSynchronizationPointResponseMessage() noexcept {};
  RegisterFederationSynchronizationPointResponseMessage(const RegisterFederationSynchronizationPointResponseMessage&) = default;
  RegisterFederationSynchronizationPointResponseMessage(RegisterFederationSynchronizationPointResponseMessage&&) noexcept = default;
  virtual ~RegisterFederationSynchronizationPointResponseMessage() noexcept = default;
  RegisterFederationSynchronizationPointResponseMessage& operator=(const RegisterFederationSynchronizationPointResponseMessage&) = default;
  RegisterFederationSynchronizationPointResponseMessage& operator=(RegisterFederationSynchronizationPointResponseMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 31;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const RegisterFederationSynchronizationPointResponseMessage& rhs) const noexcept;
  bool operator<(const RegisterFederationSynchronizationPointResponseMessage& rhs) const noexcept;
  bool operator!=(const RegisterFederationSynchronizationPointResponseMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const RegisterFederationSynchronizationPointResponseMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const RegisterFederationSynchronizationPointResponseMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const RegisterFederationSynchronizationPointResponseMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setLabel(const String& value) noexcept
  { _label = value; }
  void setLabel(String&& value) noexcept
  { _label = std::move(value); }
  String& getLabel() noexcept
  { return _label; }
  const String& getLabel() const noexcept
  { return _label; }

  void setRegisterFederationSynchronizationPointResponseType(const RegisterFederationSynchronizationPointResponseType& value) noexcept
  { _registerFederationSynchronizationPointResponseType = value; }
  void setRegisterFederationSynchronizationPointResponseType(RegisterFederationSynchronizationPointResponseType&& value) noexcept
  { _registerFederationSynchronizationPointResponseType = std::move(value); }
  RegisterFederationSynchronizationPointResponseType& getRegisterFederationSynchronizationPointResponseType() noexcept
  { return _registerFederationSynchronizationPointResponseType; }
  const RegisterFederationSynchronizationPointResponseType& getRegisterFederationSynchronizationPointResponseType() const noexcept
  { return _registerFederationSynchronizationPointResponseType; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  String _label;
  RegisterFederationSynchronizationPointResponseType _registerFederationSynchronizationPointResponseType = RegisterFederationSynchronizationPointResponseSuccess;
};

class OPENRTI_API AnnounceSynchronizationPointMessage final : public AbstractMessage {
public:
  AnnounceSynchronizationPointMessage() noexcept {};
  AnnounceSynchronizationPointMessage(const AnnounceSynchronizationPointMessage&) = default;
  AnnounceSynchronizationPointMessage(AnnounceSynchronizationPointMessage&&) noexcept = default;
  virtual ~AnnounceSynchronizationPointMessage() noexcept = default;
  AnnounceSynchronizationPointMessage& operator=(const AnnounceSynchronizationPointMessage&) = default;
  AnnounceSynchronizationPointMessage& operator=(AnnounceSynchronizationPointMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 32;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const AnnounceSynchronizationPointMessage& rhs) const noexcept;
  bool operator<(const AnnounceSynchronizationPointMessage& rhs) const noexcept;
  bool operator!=(const AnnounceSynchronizationPointMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const AnnounceSynchronizationPointMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const AnnounceSynchronizationPointMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const AnnounceSynchronizationPointMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setLabel(const String& value) noexcept
  { _label = value; }
  void setLabel(String&& value) noexcept
  { _label = std::move(value); }
  String& getLabel() noexcept
  { return _label; }
  const String& getLabel() const noexcept
  { return _label; }

  void setTag(const VariableLengthData& value) noexcept
  { _tag = value; }
  void setTag(VariableLengthData&& value) noexcept
  { _tag = std::move(value); }
  VariableLengthData& getTag() noexcept
  { return _tag; }
  const VariableLengthData& getTag() const noexcept
  { return _tag; }

  void setAddJoiningFederates(const Bool& value) noexcept
  { _addJoiningFederates = value; }
  void setAddJoiningFederates(Bool&& value) noexcept
  { _addJoiningFederates = std::move(value); }
  Bool& getAddJoiningFederates() noexcept
  { return _addJoiningFederates; }
  const Bool& getAddJoiningFederates() const noexcept
  { return _addJoiningFederates; }

  void setFederateHandleVector(const FederateHandleVector& value) noexcept
  { _federateHandleVector = value; }
  void setFederateHandleVector(FederateHandleVector&& value) noexcept
  { _federateHandleVector = std::move(value); }
  FederateHandleVector& getFederateHandleVector() noexcept
  { return _federateHandleVector; }
  const FederateHandleVector& getFederateHandleVector() const noexcept
  { return _federateHandleVector; }

private:
  FederationHandle _federationHandle;
  String _label;
  VariableLengthData _tag;
  Bool _addJoiningFederates = false;
  FederateHandleVector _federateHandleVector;
};

class OPENRTI_API SynchronizationPointAchievedMessage final : public AbstractMessage {
public:
  SynchronizationPointAchievedMessage() noexcept {};
  SynchronizationPointAchievedMessage(const SynchronizationPointAchievedMessage&) = default;
  SynchronizationPointAchievedMessage(SynchronizationPointAchievedMessage&&) noexcept = default;
  virtual ~SynchronizationPointAchievedMessage() noexcept = default;
  SynchronizationPointAchievedMessage& operator=(const SynchronizationPointAchievedMessage&) = default;
  SynchronizationPointAchievedMessage& operator=(SynchronizationPointAchievedMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 33;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const SynchronizationPointAchievedMessage& rhs) const noexcept;
  bool operator<(const SynchronizationPointAchievedMessage& rhs) const noexcept;
  bool operator!=(const SynchronizationPointAchievedMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const SynchronizationPointAchievedMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const SynchronizationPointAchievedMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const SynchronizationPointAchievedMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setLabel(const String& value) noexcept
  { _label = value; }
  void setLabel(String&& value) noexcept
  { _label = std::move(value); }
  String& getLabel() noexcept
  { return _label; }
  const String& getLabel() const noexcept
  { return _label; }

  void setFederateHandleBoolPairVector(const FederateHandleBoolPairVector& value) noexcept
  { _federateHandleBoolPairVector = value; }
  void setFederateHandleBoolPairVector(FederateHandleBoolPairVector&& value) noexcept
  { _federateHandleBoolPairVector = std::move(value); }
  FederateHandleBoolPairVector& getFederateHandleBoolPairVector() noexcept
  { return _federateHandleBoolPairVector; }
  const FederateHandleBoolPairVector& getFederateHandleBoolPairVector() const noexcept
  { return _federateHandleBoolPairVector; }

private:
  FederationHandle _federationHandle;
  String _label;
  FederateHandleBoolPairVector _federateHandleBoolPairVector;
};

class OPENRTI_API FederationSynchronizedMessage final : public AbstractMessage {
public:
  FederationSynchronizedMessage() noexcept {};
  FederationSynchronizedMessage(const FederationSynchronizedMessage&) = default;
  FederationSynchronizedMessage(FederationSynchronizedMessage&&) noexcept = default;
  virtual ~FederationSynchronizedMessage() noexcept = default;
  FederationSynchronizedMessage& operator=(const FederationSynchronizedMessage&) = default;
  FederationSynchronizedMessage& operator=(FederationSynchronizedMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 34;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const FederationSynchronizedMessage& rhs) const noexcept;
  bool operator<(const FederationSynchronizedMessage& rhs) const noexcept;
  bool operator!=(const FederationSynchronizedMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const FederationSynchronizedMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const FederationSynchronizedMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const FederationSynchronizedMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setLabel(const String& value) noexcept
  { _label = value; }
  void setLabel(String&& value) noexcept
  { _label = std::move(value); }
  String& getLabel() noexcept
  { return _label; }
  const String& getLabel() const noexcept
  { return _label; }

  void setFederateHandleBoolPairVector(const FederateHandleBoolPairVector& value) noexcept
  { _federateHandleBoolPairVector = value; }
  void setFederateHandleBoolPairVector(FederateHandleBoolPairVector&& value) noexcept
  { _federateHandleBoolPairVector = std::move(value); }
  FederateHandleBoolPairVector& getFederateHandleBoolPairVector() noexcept
  { return _federateHandleBoolPairVector; }
  const FederateHandleBoolPairVector& getFederateHandleBoolPairVector() const noexcept
  { return _federateHandleBoolPairVector; }

private:
  FederationHandle _federationHandle;
  String _label;
  FederateHandleBoolPairVector _federateHandleBoolPairVector;
};

class OPENRTI_API EnableTimeRegulationRequestMessage final : public AbstractMessage {
public:
  EnableTimeRegulationRequestMessage() noexcept {};
  EnableTimeRegulationRequestMessage(const EnableTimeRegulationRequestMessage&) = default;
  EnableTimeRegulationRequestMessage(EnableTimeRegulationRequestMessage&&) noexcept = default;
  virtual ~EnableTimeRegulationRequestMessage() noexcept = default;
  EnableTimeRegulationRequestMessage& operator=(const EnableTimeRegulationRequestMessage&) = default;
  EnableTimeRegulationRequestMessage& operator=(EnableTimeRegulationRequestMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 40;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const EnableTimeRegulationRequestMessage& rhs) const noexcept;
  bool operator<(const EnableTimeRegulationRequestMessage& rhs) const noexcept;
  bool operator!=(const EnableTimeRegulationRequestMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const EnableTimeRegulationRequestMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const EnableTimeRegulationRequestMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const EnableTimeRegulationRequestMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setTimeStamp(const VariableLengthData& value) noexcept
  { _timeStamp = value; }
  void setTimeStamp(VariableLengthData&& value) noexcept
  { _timeStamp = std::move(value); }
  VariableLengthData& getTimeStamp() noexcept
  { return _timeStamp; }
  const VariableLengthData& getTimeStamp() const noexcept
  { return _timeStamp; }

  void setCommitId(const Unsigned& value) noexcept
  { _commitId = value; }
  void setCommitId(Unsigned&& value) noexcept
  { _commitId = std::move(value); }
  Unsigned& getCommitId() noexcept
  { return _commitId; }
  const Unsigned& getCommitId() const noexcept
  { return _commitId; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  VariableLengthData _timeStamp;
  Unsigned _commitId = 0;
};

class OPENRTI_API EnableTimeRegulationResponseMessage final : public AbstractMessage {
public:
  EnableTimeRegulationResponseMessage() noexcept {};
  EnableTimeRegulationResponseMessage(const EnableTimeRegulationResponseMessage&) = default;
  EnableTimeRegulationResponseMessage(EnableTimeRegulationResponseMessage&&) noexcept = default;
  virtual ~EnableTimeRegulationResponseMessage() noexcept = default;
  EnableTimeRegulationResponseMessage& operator=(const EnableTimeRegulationResponseMessage&) = default;
  EnableTimeRegulationResponseMessage& operator=(EnableTimeRegulationResponseMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 41;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const EnableTimeRegulationResponseMessage& rhs) const noexcept;
  bool operator<(const EnableTimeRegulationResponseMessage& rhs) const noexcept;
  bool operator!=(const EnableTimeRegulationResponseMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const EnableTimeRegulationResponseMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const EnableTimeRegulationResponseMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const EnableTimeRegulationResponseMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setRespondingFederateHandle(const FederateHandle& value) noexcept
  { _respondingFederateHandle = value; }
  void setRespondingFederateHandle(FederateHandle&& value) noexcept
  { _respondingFederateHandle = std::move(value); }
  FederateHandle& getRespondingFederateHandle() noexcept
  { return _respondingFederateHandle; }
  const FederateHandle& getRespondingFederateHandle() const noexcept
  { return _respondingFederateHandle; }

  void setTimeStampValid(const Bool& value) noexcept
  { _timeStampValid = value; }
  void setTimeStampValid(Bool&& value) noexcept
  { _timeStampValid = std::move(value); }
  Bool& getTimeStampValid() noexcept
  { return _timeStampValid; }
  const Bool& getTimeStampValid() const noexcept
  { return _timeStampValid; }

  void setTimeStamp(const VariableLengthData& value) noexcept
  { _timeStamp = value; }
  void setTimeStamp(VariableLengthData&& value) noexcept
  { _timeStamp = std::move(value); }
  VariableLengthData& getTimeStamp() noexcept
  { return _timeStamp; }
  const VariableLengthData& getTimeStamp() const noexcept
  { return _timeStamp; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  FederateHandle _respondingFederateHandle;
  Bool _timeStampValid = false;
  VariableLengthData _timeStamp;
};

class OPENRTI_API DisableTimeRegulationRequestMessage final : public AbstractMessage {
public:
  DisableTimeRegulationRequestMessage() noexcept {};
  DisableTimeRegulationRequestMessage(const DisableTimeRegulationRequestMessage&) = default;
  DisableTimeRegulationRequestMessage(DisableTimeRegulationRequestMessage&&) noexcept = default;
  virtual ~DisableTimeRegulationRequestMessage() noexcept = default;
  DisableTimeRegulationRequestMessage& operator=(const DisableTimeRegulationRequestMessage&) = default;
  DisableTimeRegulationRequestMessage& operator=(DisableTimeRegulationRequestMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 42;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const DisableTimeRegulationRequestMessage& rhs) const noexcept;
  bool operator<(const DisableTimeRegulationRequestMessage& rhs) const noexcept;
  bool operator!=(const DisableTimeRegulationRequestMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const DisableTimeRegulationRequestMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const DisableTimeRegulationRequestMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const DisableTimeRegulationRequestMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
};

class OPENRTI_API EnableTimeConstrainedNotifyMessage final : public AbstractMessage {
public:
  EnableTimeConstrainedNotifyMessage() noexcept {};
  EnableTimeConstrainedNotifyMessage(const EnableTimeConstrainedNotifyMessage&) = default;
  EnableTimeConstrainedNotifyMessage(EnableTimeConstrainedNotifyMessage&&) noexcept = default;
  virtual ~EnableTimeConstrainedNotifyMessage() noexcept = default;
  EnableTimeConstrainedNotifyMessage& operator=(const EnableTimeConstrainedNotifyMessage&) = default;
  EnableTimeConstrainedNotifyMessage& operator=(EnableTimeConstrainedNotifyMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 100;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const EnableTimeConstrainedNotifyMessage& rhs) const noexcept;
  bool operator<(const EnableTimeConstrainedNotifyMessage& rhs) const noexcept;
  bool operator!=(const EnableTimeConstrainedNotifyMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const EnableTimeConstrainedNotifyMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const EnableTimeConstrainedNotifyMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const EnableTimeConstrainedNotifyMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
};

class OPENRTI_API DisableTimeConstrainedNotifyMessage final : public AbstractMessage {
public:
  DisableTimeConstrainedNotifyMessage() noexcept {};
  DisableTimeConstrainedNotifyMessage(const DisableTimeConstrainedNotifyMessage&) = default;
  DisableTimeConstrainedNotifyMessage(DisableTimeConstrainedNotifyMessage&&) noexcept = default;
  virtual ~DisableTimeConstrainedNotifyMessage() noexcept = default;
  DisableTimeConstrainedNotifyMessage& operator=(const DisableTimeConstrainedNotifyMessage&) = default;
  DisableTimeConstrainedNotifyMessage& operator=(DisableTimeConstrainedNotifyMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 101;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const DisableTimeConstrainedNotifyMessage& rhs) const noexcept;
  bool operator<(const DisableTimeConstrainedNotifyMessage& rhs) const noexcept;
  bool operator!=(const DisableTimeConstrainedNotifyMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const DisableTimeConstrainedNotifyMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const DisableTimeConstrainedNotifyMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const DisableTimeConstrainedNotifyMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
};

class OPENRTI_API CommitLowerBoundTimeStampMessage final : public AbstractMessage {
public:
  CommitLowerBoundTimeStampMessage() noexcept {};
  CommitLowerBoundTimeStampMessage(const CommitLowerBoundTimeStampMessage&) = default;
  CommitLowerBoundTimeStampMessage(CommitLowerBoundTimeStampMessage&&) noexcept = default;
  virtual ~CommitLowerBoundTimeStampMessage() noexcept = default;
  CommitLowerBoundTimeStampMessage& operator=(const CommitLowerBoundTimeStampMessage&) = default;
  CommitLowerBoundTimeStampMessage& operator=(CommitLowerBoundTimeStampMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 43;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const CommitLowerBoundTimeStampMessage& rhs) const noexcept;
  bool operator<(const CommitLowerBoundTimeStampMessage& rhs) const noexcept;
  bool operator!=(const CommitLowerBoundTimeStampMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const CommitLowerBoundTimeStampMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const CommitLowerBoundTimeStampMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const CommitLowerBoundTimeStampMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setTimeStamp(const VariableLengthData& value) noexcept
  { _timeStamp = value; }
  void setTimeStamp(VariableLengthData&& value) noexcept
  { _timeStamp = std::move(value); }
  VariableLengthData& getTimeStamp() noexcept
  { return _timeStamp; }
  const VariableLengthData& getTimeStamp() const noexcept
  { return _timeStamp; }

  void setCommitType(const LowerBoundTimeStampCommitType& value) noexcept
  { _commitType = value; }
  void setCommitType(LowerBoundTimeStampCommitType&& value) noexcept
  { _commitType = std::move(value); }
  LowerBoundTimeStampCommitType& getCommitType() noexcept
  { return _commitType; }
  const LowerBoundTimeStampCommitType& getCommitType() const noexcept
  { return _commitType; }

  void setCommitId(const Unsigned& value) noexcept
  { _commitId = value; }
  void setCommitId(Unsigned&& value) noexcept
  { _commitId = std::move(value); }
  Unsigned& getCommitId() noexcept
  { return _commitId; }
  const Unsigned& getCommitId() const noexcept
  { return _commitId; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  VariableLengthData _timeStamp;
  LowerBoundTimeStampCommitType _commitType = TimeAdvanceCommit;
  Unsigned _commitId = 0;
};

class OPENRTI_API CommitLowerBoundTimeStampResponseMessage final : public AbstractMessage {
public:
  CommitLowerBoundTimeStampResponseMessage() noexcept {};
  CommitLowerBoundTimeStampResponseMessage(const CommitLowerBoundTimeStampResponseMessage&) = default;
  CommitLowerBoundTimeStampResponseMessage(CommitLowerBoundTimeStampResponseMessage&&) noexcept = default;
  virtual ~CommitLowerBoundTimeStampResponseMessage() noexcept = default;
  CommitLowerBoundTimeStampResponseMessage& operator=(const CommitLowerBoundTimeStampResponseMessage&) = default;
  CommitLowerBoundTimeStampResponseMessage& operator=(CommitLowerBoundTimeStampResponseMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 44;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const CommitLowerBoundTimeStampResponseMessage& rhs) const noexcept;
  bool operator<(const CommitLowerBoundTimeStampResponseMessage& rhs) const noexcept;
  bool operator!=(const CommitLowerBoundTimeStampResponseMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const CommitLowerBoundTimeStampResponseMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const CommitLowerBoundTimeStampResponseMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const CommitLowerBoundTimeStampResponseMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setSendingFederateHandle(const FederateHandle& value) noexcept
  { _sendingFederateHandle = value; }
  void setSendingFederateHandle(FederateHandle&& value) noexcept
  { _sendingFederateHandle = std::move(value); }
  FederateHandle& getSendingFederateHandle() noexcept
  { return _sendingFederateHandle; }
  const FederateHandle& getSendingFederateHandle() const noexcept
  { return _sendingFederateHandle; }

  void setCommitId(const Unsigned& value) noexcept
  { _commitId = value; }
  void setCommitId(Unsigned&& value) noexcept
  { _commitId = std::move(value); }
  Unsigned& getCommitId() noexcept
  { return _commitId; }
  const Unsigned& getCommitId() const noexcept
  { return _commitId; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  FederateHandle _sendingFederateHandle;
  Unsigned _commitId = 0;
};

class OPENRTI_API LockedByNextMessageRequestMessage final : public AbstractMessage {
public:
  LockedByNextMessageRequestMessage() noexcept {};
  LockedByNextMessageRequestMessage(const LockedByNextMessageRequestMessage&) = default;
  LockedByNextMessageRequestMessage(LockedByNextMessageRequestMessage&&) noexcept = default;
  virtual ~LockedByNextMessageRequestMessage() noexcept = default;
  LockedByNextMessageRequestMessage& operator=(const LockedByNextMessageRequestMessage&) = default;
  LockedByNextMessageRequestMessage& operator=(LockedByNextMessageRequestMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 45;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const LockedByNextMessageRequestMessage& rhs) const noexcept;
  bool operator<(const LockedByNextMessageRequestMessage& rhs) const noexcept;
  bool operator!=(const LockedByNextMessageRequestMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const LockedByNextMessageRequestMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const LockedByNextMessageRequestMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const LockedByNextMessageRequestMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setSendingFederateHandle(const FederateHandle& value) noexcept
  { _sendingFederateHandle = value; }
  void setSendingFederateHandle(FederateHandle&& value) noexcept
  { _sendingFederateHandle = std::move(value); }
  FederateHandle& getSendingFederateHandle() noexcept
  { return _sendingFederateHandle; }
  const FederateHandle& getSendingFederateHandle() const noexcept
  { return _sendingFederateHandle; }

  void setLockedByNextMessage(const Bool& value) noexcept
  { _lockedByNextMessage = value; }
  void setLockedByNextMessage(Bool&& value) noexcept
  { _lockedByNextMessage = std::move(value); }
  Bool& getLockedByNextMessage() noexcept
  { return _lockedByNextMessage; }
  const Bool& getLockedByNextMessage() const noexcept
  { return _lockedByNextMessage; }

private:
  FederationHandle _federationHandle;
  FederateHandle _sendingFederateHandle;
  Bool _lockedByNextMessage = false;
};

class OPENRTI_API TimeConstrainedEnabledMessage final : public AbstractMessage {
public:
  TimeConstrainedEnabledMessage() noexcept {};
  TimeConstrainedEnabledMessage(const TimeConstrainedEnabledMessage&) = default;
  TimeConstrainedEnabledMessage(TimeConstrainedEnabledMessage&&) noexcept = default;
  virtual ~TimeConstrainedEnabledMessage() noexcept = default;
  TimeConstrainedEnabledMessage& operator=(const TimeConstrainedEnabledMessage&) = default;
  TimeConstrainedEnabledMessage& operator=(TimeConstrainedEnabledMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const TimeConstrainedEnabledMessage& rhs) const noexcept;
  bool operator<(const TimeConstrainedEnabledMessage& rhs) const noexcept;
  bool operator!=(const TimeConstrainedEnabledMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const TimeConstrainedEnabledMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const TimeConstrainedEnabledMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const TimeConstrainedEnabledMessage& rhs) const noexcept
  { return !operator>(rhs); }

private:
};

class OPENRTI_API TimeRegulationEnabledMessage final : public AbstractMessage {
public:
  TimeRegulationEnabledMessage() noexcept {};
  TimeRegulationEnabledMessage(const TimeRegulationEnabledMessage&) = default;
  TimeRegulationEnabledMessage(TimeRegulationEnabledMessage&&) noexcept = default;
  virtual ~TimeRegulationEnabledMessage() noexcept = default;
  TimeRegulationEnabledMessage& operator=(const TimeRegulationEnabledMessage&) = default;
  TimeRegulationEnabledMessage& operator=(TimeRegulationEnabledMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const TimeRegulationEnabledMessage& rhs) const noexcept;
  bool operator<(const TimeRegulationEnabledMessage& rhs) const noexcept;
  bool operator!=(const TimeRegulationEnabledMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const TimeRegulationEnabledMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const TimeRegulationEnabledMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const TimeRegulationEnabledMessage& rhs) const noexcept
  { return !operator>(rhs); }

private:
};

class OPENRTI_API TimeAdvanceGrantedMessage final : public AbstractMessage {
public:
  TimeAdvanceGrantedMessage() noexcept {};
  TimeAdvanceGrantedMessage(const TimeAdvanceGrantedMessage&) = default;
  TimeAdvanceGrantedMessage(TimeAdvanceGrantedMessage&&) noexcept = default;
  virtual ~TimeAdvanceGrantedMessage() noexcept = default;
  TimeAdvanceGrantedMessage& operator=(const TimeAdvanceGrantedMessage&) = default;
  TimeAdvanceGrantedMessage& operator=(TimeAdvanceGrantedMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const TimeAdvanceGrantedMessage& rhs) const noexcept;
  bool operator<(const TimeAdvanceGrantedMessage& rhs) const noexcept;
  bool operator!=(const TimeAdvanceGrantedMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const TimeAdvanceGrantedMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const TimeAdvanceGrantedMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const TimeAdvanceGrantedMessage& rhs) const noexcept
  { return !operator>(rhs); }

private:
};

class OPENRTI_API InsertRegionMessage final : public AbstractMessage {
public:
  InsertRegionMessage() noexcept {};
  InsertRegionMessage(const InsertRegionMessage&) = default;
  InsertRegionMessage(InsertRegionMessage&&) noexcept = default;
  virtual ~InsertRegionMessage() noexcept = default;
  InsertRegionMessage& operator=(const InsertRegionMessage&) = default;
  InsertRegionMessage& operator=(InsertRegionMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 46;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const InsertRegionMessage& rhs) const noexcept;
  bool operator<(const InsertRegionMessage& rhs) const noexcept;
  bool operator!=(const InsertRegionMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const InsertRegionMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const InsertRegionMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const InsertRegionMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setRegionHandleDimensionHandleSetPairVector(const RegionHandleDimensionHandleSetPairVector& value) noexcept
  { _regionHandleDimensionHandleSetPairVector = value; }
  void setRegionHandleDimensionHandleSetPairVector(RegionHandleDimensionHandleSetPairVector&& value) noexcept
  { _regionHandleDimensionHandleSetPairVector = std::move(value); }
  RegionHandleDimensionHandleSetPairVector& getRegionHandleDimensionHandleSetPairVector() noexcept
  { return _regionHandleDimensionHandleSetPairVector; }
  const RegionHandleDimensionHandleSetPairVector& getRegionHandleDimensionHandleSetPairVector() const noexcept
  { return _regionHandleDimensionHandleSetPairVector; }

private:
  FederationHandle _federationHandle;
  RegionHandleDimensionHandleSetPairVector _regionHandleDimensionHandleSetPairVector;
};

class OPENRTI_API CommitRegionMessage final : public AbstractMessage {
public:
  CommitRegionMessage() noexcept {};
  CommitRegionMessage(const CommitRegionMessage&) = default;
  CommitRegionMessage(CommitRegionMessage&&) noexcept = default;
  virtual ~CommitRegionMessage() noexcept = default;
  CommitRegionMessage& operator=(const CommitRegionMessage&) = default;
  CommitRegionMessage& operator=(CommitRegionMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 47;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const CommitRegionMessage& rhs) const noexcept;
  bool operator<(const CommitRegionMessage& rhs) const noexcept;
  bool operator!=(const CommitRegionMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const CommitRegionMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const CommitRegionMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const CommitRegionMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setRegionHandleRegionValuePairVector(const RegionHandleRegionValuePairVector& value) noexcept
  { _regionHandleRegionValuePairVector = value; }
  void setRegionHandleRegionValuePairVector(RegionHandleRegionValuePairVector&& value) noexcept
  { _regionHandleRegionValuePairVector = std::move(value); }
  RegionHandleRegionValuePairVector& getRegionHandleRegionValuePairVector() noexcept
  { return _regionHandleRegionValuePairVector; }
  const RegionHandleRegionValuePairVector& getRegionHandleRegionValuePairVector() const noexcept
  { return _regionHandleRegionValuePairVector; }

private:
  FederationHandle _federationHandle;
  RegionHandleRegionValuePairVector _regionHandleRegionValuePairVector;
};

class OPENRTI_API EraseRegionMessage final : public AbstractMessage {
public:
  EraseRegionMessage() noexcept {};
  EraseRegionMessage(const EraseRegionMessage&) = default;
  EraseRegionMessage(EraseRegionMessage&&) noexcept = default;
  virtual ~EraseRegionMessage() noexcept = default;
  EraseRegionMessage& operator=(const EraseRegionMessage&) = default;
  EraseRegionMessage& operator=(EraseRegionMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 48;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const EraseRegionMessage& rhs) const noexcept;
  bool operator<(const EraseRegionMessage& rhs) const noexcept;
  bool operator!=(const EraseRegionMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const EraseRegionMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const EraseRegionMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const EraseRegionMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setRegionHandleVector(const RegionHandleVector& value) noexcept
  { _regionHandleVector = value; }
  void setRegionHandleVector(RegionHandleVector&& value) noexcept
  { _regionHandleVector = std::move(value); }
  RegionHandleVector& getRegionHandleVector() noexcept
  { return _regionHandleVector; }
  const RegionHandleVector& getRegionHandleVector() const noexcept
  { return _regionHandleVector; }

private:
  FederationHandle _federationHandle;
  RegionHandleVector _regionHandleVector;
};

class OPENRTI_API ChangeInteractionClassPublicationMessage final : public AbstractMessage {
public:
  ChangeInteractionClassPublicationMessage() noexcept {};
  ChangeInteractionClassPublicationMessage(const ChangeInteractionClassPublicationMessage&) = default;
  ChangeInteractionClassPublicationMessage(ChangeInteractionClassPublicationMessage&&) noexcept = default;
  virtual ~ChangeInteractionClassPublicationMessage() noexcept = default;
  ChangeInteractionClassPublicationMessage& operator=(const ChangeInteractionClassPublicationMessage&) = default;
  ChangeInteractionClassPublicationMessage& operator=(ChangeInteractionClassPublicationMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 50;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ChangeInteractionClassPublicationMessage& rhs) const noexcept;
  bool operator<(const ChangeInteractionClassPublicationMessage& rhs) const noexcept;
  bool operator!=(const ChangeInteractionClassPublicationMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ChangeInteractionClassPublicationMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ChangeInteractionClassPublicationMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ChangeInteractionClassPublicationMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setPublicationType(const PublicationType& value) noexcept
  { _publicationType = value; }
  void setPublicationType(PublicationType&& value) noexcept
  { _publicationType = std::move(value); }
  PublicationType& getPublicationType() noexcept
  { return _publicationType; }
  const PublicationType& getPublicationType() const noexcept
  { return _publicationType; }

  void setInteractionClassHandle(const InteractionClassHandle& value) noexcept
  { _interactionClassHandle = value; }
  void setInteractionClassHandle(InteractionClassHandle&& value) noexcept
  { _interactionClassHandle = std::move(value); }
  InteractionClassHandle& getInteractionClassHandle() noexcept
  { return _interactionClassHandle; }
  const InteractionClassHandle& getInteractionClassHandle() const noexcept
  { return _interactionClassHandle; }

private:
  FederationHandle _federationHandle;
  PublicationType _publicationType = Unpublished;
  InteractionClassHandle _interactionClassHandle;
};

class OPENRTI_API ChangeObjectClassPublicationMessage final : public AbstractMessage {
public:
  ChangeObjectClassPublicationMessage() noexcept {};
  ChangeObjectClassPublicationMessage(const ChangeObjectClassPublicationMessage&) = default;
  ChangeObjectClassPublicationMessage(ChangeObjectClassPublicationMessage&&) noexcept = default;
  virtual ~ChangeObjectClassPublicationMessage() noexcept = default;
  ChangeObjectClassPublicationMessage& operator=(const ChangeObjectClassPublicationMessage&) = default;
  ChangeObjectClassPublicationMessage& operator=(ChangeObjectClassPublicationMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 51;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ChangeObjectClassPublicationMessage& rhs) const noexcept;
  bool operator<(const ChangeObjectClassPublicationMessage& rhs) const noexcept;
  bool operator!=(const ChangeObjectClassPublicationMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ChangeObjectClassPublicationMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ChangeObjectClassPublicationMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ChangeObjectClassPublicationMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setPublicationType(const PublicationType& value) noexcept
  { _publicationType = value; }
  void setPublicationType(PublicationType&& value) noexcept
  { _publicationType = std::move(value); }
  PublicationType& getPublicationType() noexcept
  { return _publicationType; }
  const PublicationType& getPublicationType() const noexcept
  { return _publicationType; }

  void setObjectClassHandle(const ObjectClassHandle& value) noexcept
  { _objectClassHandle = value; }
  void setObjectClassHandle(ObjectClassHandle&& value) noexcept
  { _objectClassHandle = std::move(value); }
  ObjectClassHandle& getObjectClassHandle() noexcept
  { return _objectClassHandle; }
  const ObjectClassHandle& getObjectClassHandle() const noexcept
  { return _objectClassHandle; }

  void setAttributeHandles(const AttributeHandleVector& value) noexcept
  { _attributeHandles = value; }
  void setAttributeHandles(AttributeHandleVector&& value) noexcept
  { _attributeHandles = std::move(value); }
  AttributeHandleVector& getAttributeHandles() noexcept
  { return _attributeHandles; }
  const AttributeHandleVector& getAttributeHandles() const noexcept
  { return _attributeHandles; }

private:
  FederationHandle _federationHandle;
  PublicationType _publicationType = Unpublished;
  ObjectClassHandle _objectClassHandle;
  AttributeHandleVector _attributeHandles;
};

class OPENRTI_API ChangeInteractionClassSubscriptionMessage final : public AbstractMessage {
public:
  ChangeInteractionClassSubscriptionMessage() noexcept {};
  ChangeInteractionClassSubscriptionMessage(const ChangeInteractionClassSubscriptionMessage&) = default;
  ChangeInteractionClassSubscriptionMessage(ChangeInteractionClassSubscriptionMessage&&) noexcept = default;
  virtual ~ChangeInteractionClassSubscriptionMessage() noexcept = default;
  ChangeInteractionClassSubscriptionMessage& operator=(const ChangeInteractionClassSubscriptionMessage&) = default;
  ChangeInteractionClassSubscriptionMessage& operator=(ChangeInteractionClassSubscriptionMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 52;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ChangeInteractionClassSubscriptionMessage& rhs) const noexcept;
  bool operator<(const ChangeInteractionClassSubscriptionMessage& rhs) const noexcept;
  bool operator!=(const ChangeInteractionClassSubscriptionMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ChangeInteractionClassSubscriptionMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ChangeInteractionClassSubscriptionMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ChangeInteractionClassSubscriptionMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setSubscriptionType(const SubscriptionType& value) noexcept
  { _subscriptionType = value; }
  void setSubscriptionType(SubscriptionType&& value) noexcept
  { _subscriptionType = std::move(value); }
  SubscriptionType& getSubscriptionType() noexcept
  { return _subscriptionType; }
  const SubscriptionType& getSubscriptionType() const noexcept
  { return _subscriptionType; }

  void setInteractionClassHandle(const InteractionClassHandle& value) noexcept
  { _interactionClassHandle = value; }
  void setInteractionClassHandle(InteractionClassHandle&& value) noexcept
  { _interactionClassHandle = std::move(value); }
  InteractionClassHandle& getInteractionClassHandle() noexcept
  { return _interactionClassHandle; }
  const InteractionClassHandle& getInteractionClassHandle() const noexcept
  { return _interactionClassHandle; }

  void setParameterFilterValues(const ParameterValueVector& value) noexcept
  { _parameterFilterValues = value; }
  void setParameterFilterValues(ParameterValueVector&& value) noexcept
  { _parameterFilterValues = std::move(value); }
  ParameterValueVector& getParameterFilterValues() noexcept
  { return _parameterFilterValues; }
  const ParameterValueVector& getParameterFilterValues() const noexcept
  { return _parameterFilterValues; }

private:
  FederationHandle _federationHandle;
  SubscriptionType _subscriptionType = Unsubscribed;
  InteractionClassHandle _interactionClassHandle;
  ParameterValueVector _parameterFilterValues;
};

class OPENRTI_API ChangeObjectClassSubscriptionMessage final : public AbstractMessage {
public:
  ChangeObjectClassSubscriptionMessage() noexcept {};
  ChangeObjectClassSubscriptionMessage(const ChangeObjectClassSubscriptionMessage&) = default;
  ChangeObjectClassSubscriptionMessage(ChangeObjectClassSubscriptionMessage&&) noexcept = default;
  virtual ~ChangeObjectClassSubscriptionMessage() noexcept = default;
  ChangeObjectClassSubscriptionMessage& operator=(const ChangeObjectClassSubscriptionMessage&) = default;
  ChangeObjectClassSubscriptionMessage& operator=(ChangeObjectClassSubscriptionMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 53;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ChangeObjectClassSubscriptionMessage& rhs) const noexcept;
  bool operator<(const ChangeObjectClassSubscriptionMessage& rhs) const noexcept;
  bool operator!=(const ChangeObjectClassSubscriptionMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ChangeObjectClassSubscriptionMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ChangeObjectClassSubscriptionMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ChangeObjectClassSubscriptionMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setSubscriptionType(const SubscriptionType& value) noexcept
  { _subscriptionType = value; }
  void setSubscriptionType(SubscriptionType&& value) noexcept
  { _subscriptionType = std::move(value); }
  SubscriptionType& getSubscriptionType() noexcept
  { return _subscriptionType; }
  const SubscriptionType& getSubscriptionType() const noexcept
  { return _subscriptionType; }

  void setObjectClassHandle(const ObjectClassHandle& value) noexcept
  { _objectClassHandle = value; }
  void setObjectClassHandle(ObjectClassHandle&& value) noexcept
  { _objectClassHandle = std::move(value); }
  ObjectClassHandle& getObjectClassHandle() noexcept
  { return _objectClassHandle; }
  const ObjectClassHandle& getObjectClassHandle() const noexcept
  { return _objectClassHandle; }

  void setAttributeHandles(const AttributeHandleVector& value) noexcept
  { _attributeHandles = value; }
  void setAttributeHandles(AttributeHandleVector&& value) noexcept
  { _attributeHandles = std::move(value); }
  AttributeHandleVector& getAttributeHandles() noexcept
  { return _attributeHandles; }
  const AttributeHandleVector& getAttributeHandles() const noexcept
  { return _attributeHandles; }

private:
  FederationHandle _federationHandle;
  SubscriptionType _subscriptionType = Unsubscribed;
  ObjectClassHandle _objectClassHandle;
  AttributeHandleVector _attributeHandles;
};

class OPENRTI_API ChangeObjectInstanceSubscriptionMessage final : public AbstractMessage {
public:
  ChangeObjectInstanceSubscriptionMessage() noexcept {};
  ChangeObjectInstanceSubscriptionMessage(const ChangeObjectInstanceSubscriptionMessage&) = default;
  ChangeObjectInstanceSubscriptionMessage(ChangeObjectInstanceSubscriptionMessage&&) noexcept = default;
  virtual ~ChangeObjectInstanceSubscriptionMessage() noexcept = default;
  ChangeObjectInstanceSubscriptionMessage& operator=(const ChangeObjectInstanceSubscriptionMessage&) = default;
  ChangeObjectInstanceSubscriptionMessage& operator=(ChangeObjectInstanceSubscriptionMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 99;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ChangeObjectInstanceSubscriptionMessage& rhs) const noexcept;
  bool operator<(const ChangeObjectInstanceSubscriptionMessage& rhs) const noexcept;
  bool operator!=(const ChangeObjectInstanceSubscriptionMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ChangeObjectInstanceSubscriptionMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ChangeObjectInstanceSubscriptionMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ChangeObjectInstanceSubscriptionMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setSubscriptionType(const SubscriptionType& value) noexcept
  { _subscriptionType = value; }
  void setSubscriptionType(SubscriptionType&& value) noexcept
  { _subscriptionType = std::move(value); }
  SubscriptionType& getSubscriptionType() noexcept
  { return _subscriptionType; }
  const SubscriptionType& getSubscriptionType() const noexcept
  { return _subscriptionType; }

  void setObjectClassHandle(const ObjectClassHandle& value) noexcept
  { _objectClassHandle = value; }
  void setObjectClassHandle(ObjectClassHandle&& value) noexcept
  { _objectClassHandle = std::move(value); }
  ObjectClassHandle& getObjectClassHandle() noexcept
  { return _objectClassHandle; }
  const ObjectClassHandle& getObjectClassHandle() const noexcept
  { return _objectClassHandle; }

  void setObjectInstanceHandle(const ObjectInstanceHandle& value) noexcept
  { _objectInstanceHandle = value; }
  void setObjectInstanceHandle(ObjectInstanceHandle&& value) noexcept
  { _objectInstanceHandle = std::move(value); }
  ObjectInstanceHandle& getObjectInstanceHandle() noexcept
  { return _objectInstanceHandle; }
  const ObjectInstanceHandle& getObjectInstanceHandle() const noexcept
  { return _objectInstanceHandle; }

private:
  FederationHandle _federationHandle;
  SubscriptionType _subscriptionType = Unsubscribed;
  ObjectClassHandle _objectClassHandle;
  ObjectInstanceHandle _objectInstanceHandle;
};

class OPENRTI_API RegistrationForObjectClassMessage final : public AbstractMessage {
public:
  RegistrationForObjectClassMessage() noexcept {};
  RegistrationForObjectClassMessage(const RegistrationForObjectClassMessage&) = default;
  RegistrationForObjectClassMessage(RegistrationForObjectClassMessage&&) noexcept = default;
  virtual ~RegistrationForObjectClassMessage() noexcept = default;
  RegistrationForObjectClassMessage& operator=(const RegistrationForObjectClassMessage&) = default;
  RegistrationForObjectClassMessage& operator=(RegistrationForObjectClassMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const RegistrationForObjectClassMessage& rhs) const noexcept;
  bool operator<(const RegistrationForObjectClassMessage& rhs) const noexcept;
  bool operator!=(const RegistrationForObjectClassMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const RegistrationForObjectClassMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const RegistrationForObjectClassMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const RegistrationForObjectClassMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setObjectClassHandle(const ObjectClassHandle& value) noexcept
  { _objectClassHandle = value; }
  void setObjectClassHandle(ObjectClassHandle&& value) noexcept
  { _objectClassHandle = std::move(value); }
  ObjectClassHandle& getObjectClassHandle() noexcept
  { return _objectClassHandle; }
  const ObjectClassHandle& getObjectClassHandle() const noexcept
  { return _objectClassHandle; }

  void setStart(const Bool& value) noexcept
  { _start = value; }
  void setStart(Bool&& value) noexcept
  { _start = std::move(value); }
  Bool& getStart() noexcept
  { return _start; }
  const Bool& getStart() const noexcept
  { return _start; }

private:
  ObjectClassHandle _objectClassHandle;
  Bool _start = false;
};

class OPENRTI_API AttributesInScopeMessage final : public AbstractMessage {
public:
  AttributesInScopeMessage() noexcept {};
  AttributesInScopeMessage(const AttributesInScopeMessage&) = default;
  AttributesInScopeMessage(AttributesInScopeMessage&&) noexcept = default;
  virtual ~AttributesInScopeMessage() noexcept = default;
  AttributesInScopeMessage& operator=(const AttributesInScopeMessage&) = default;
  AttributesInScopeMessage& operator=(AttributesInScopeMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const AttributesInScopeMessage& rhs) const noexcept;
  bool operator<(const AttributesInScopeMessage& rhs) const noexcept;
  bool operator!=(const AttributesInScopeMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const AttributesInScopeMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const AttributesInScopeMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const AttributesInScopeMessage& rhs) const noexcept
  { return !operator>(rhs); }

  virtual ObjectInstanceHandle getObjectInstanceHandleForMessage() const noexcept override;

  void setObjectInstanceHandle(const ObjectInstanceHandle& value) noexcept
  { _objectInstanceHandle = value; }
  void setObjectInstanceHandle(ObjectInstanceHandle&& value) noexcept
  { _objectInstanceHandle = std::move(value); }
  ObjectInstanceHandle& getObjectInstanceHandle() noexcept
  { return _objectInstanceHandle; }
  const ObjectInstanceHandle& getObjectInstanceHandle() const noexcept
  { return _objectInstanceHandle; }

  void setAttributeHandles(const AttributeHandleVector& value) noexcept
  { _attributeHandles = value; }
  void setAttributeHandles(AttributeHandleVector&& value) noexcept
  { _attributeHandles = std::move(value); }
  AttributeHandleVector& getAttributeHandles() noexcept
  { return _attributeHandles; }
  const AttributeHandleVector& getAttributeHandles() const noexcept
  { return _attributeHandles; }

  void setInScope(const Bool& value) noexcept
  { _inScope = value; }
  void setInScope(Bool&& value) noexcept
  { _inScope = std::move(value); }
  Bool& getInScope() noexcept
  { return _inScope; }
  const Bool& getInScope() const noexcept
  { return _inScope; }

private:
  ObjectInstanceHandle _objectInstanceHandle;
  AttributeHandleVector _attributeHandles;
  Bool _inScope = false;
};

class OPENRTI_API TurnUpdatesOnForInstanceMessage final : public AbstractMessage {
public:
  TurnUpdatesOnForInstanceMessage() noexcept {};
  TurnUpdatesOnForInstanceMessage(const TurnUpdatesOnForInstanceMessage&) = default;
  TurnUpdatesOnForInstanceMessage(TurnUpdatesOnForInstanceMessage&&) noexcept = default;
  virtual ~TurnUpdatesOnForInstanceMessage() noexcept = default;
  TurnUpdatesOnForInstanceMessage& operator=(const TurnUpdatesOnForInstanceMessage&) = default;
  TurnUpdatesOnForInstanceMessage& operator=(TurnUpdatesOnForInstanceMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const TurnUpdatesOnForInstanceMessage& rhs) const noexcept;
  bool operator<(const TurnUpdatesOnForInstanceMessage& rhs) const noexcept;
  bool operator!=(const TurnUpdatesOnForInstanceMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const TurnUpdatesOnForInstanceMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const TurnUpdatesOnForInstanceMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const TurnUpdatesOnForInstanceMessage& rhs) const noexcept
  { return !operator>(rhs); }

  virtual ObjectInstanceHandle getObjectInstanceHandleForMessage() const noexcept override;

  void setObjectInstanceHandle(const ObjectInstanceHandle& value) noexcept
  { _objectInstanceHandle = value; }
  void setObjectInstanceHandle(ObjectInstanceHandle&& value) noexcept
  { _objectInstanceHandle = std::move(value); }
  ObjectInstanceHandle& getObjectInstanceHandle() noexcept
  { return _objectInstanceHandle; }
  const ObjectInstanceHandle& getObjectInstanceHandle() const noexcept
  { return _objectInstanceHandle; }

  void setAttributeHandles(const AttributeHandleVector& value) noexcept
  { _attributeHandles = value; }
  void setAttributeHandles(AttributeHandleVector&& value) noexcept
  { _attributeHandles = std::move(value); }
  AttributeHandleVector& getAttributeHandles() noexcept
  { return _attributeHandles; }
  const AttributeHandleVector& getAttributeHandles() const noexcept
  { return _attributeHandles; }

  void setUpdateRate(const String& value) noexcept
  { _updateRate = value; }
  void setUpdateRate(String&& value) noexcept
  { _updateRate = std::move(value); }
  String& getUpdateRate() noexcept
  { return _updateRate; }
  const String& getUpdateRate() const noexcept
  { return _updateRate; }

  void setOn(const Bool& value) noexcept
  { _on = value; }
  void setOn(Bool&& value) noexcept
  { _on = std::move(value); }
  Bool& getOn() noexcept
  { return _on; }
  const Bool& getOn() const noexcept
  { return _on; }

private:
  ObjectInstanceHandle _objectInstanceHandle;
  AttributeHandleVector _attributeHandles;
  String _updateRate;
  Bool _on = false;
};

class OPENRTI_API TurnInteractionsOnMessage final : public AbstractMessage {
public:
  TurnInteractionsOnMessage() noexcept {};
  TurnInteractionsOnMessage(const TurnInteractionsOnMessage&) = default;
  TurnInteractionsOnMessage(TurnInteractionsOnMessage&&) noexcept = default;
  virtual ~TurnInteractionsOnMessage() noexcept = default;
  TurnInteractionsOnMessage& operator=(const TurnInteractionsOnMessage&) = default;
  TurnInteractionsOnMessage& operator=(TurnInteractionsOnMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const TurnInteractionsOnMessage& rhs) const noexcept;
  bool operator<(const TurnInteractionsOnMessage& rhs) const noexcept;
  bool operator!=(const TurnInteractionsOnMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const TurnInteractionsOnMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const TurnInteractionsOnMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const TurnInteractionsOnMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setInteractionClassHandle(const InteractionClassHandle& value) noexcept
  { _interactionClassHandle = value; }
  void setInteractionClassHandle(InteractionClassHandle&& value) noexcept
  { _interactionClassHandle = std::move(value); }
  InteractionClassHandle& getInteractionClassHandle() noexcept
  { return _interactionClassHandle; }
  const InteractionClassHandle& getInteractionClassHandle() const noexcept
  { return _interactionClassHandle; }

  void setOn(const Bool& value) noexcept
  { _on = value; }
  void setOn(Bool&& value) noexcept
  { _on = std::move(value); }
  Bool& getOn() noexcept
  { return _on; }
  const Bool& getOn() const noexcept
  { return _on; }

private:
  InteractionClassHandle _interactionClassHandle;
  Bool _on = false;
};

class OPENRTI_API InteractionMessage final : public AbstractMessage {
public:
  InteractionMessage() noexcept {};
  InteractionMessage(const InteractionMessage&) = default;
  InteractionMessage(InteractionMessage&&) noexcept = default;
  virtual ~InteractionMessage() noexcept = default;
  InteractionMessage& operator=(const InteractionMessage&) = default;
  InteractionMessage& operator=(InteractionMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 80;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const InteractionMessage& rhs) const noexcept;
  bool operator<(const InteractionMessage& rhs) const noexcept;
  bool operator!=(const InteractionMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const InteractionMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const InteractionMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const InteractionMessage& rhs) const noexcept
  { return !operator>(rhs); }

  bool getReliable() const noexcept override;

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setInteractionClassHandle(const InteractionClassHandle& value) noexcept
  { _interactionClassHandle = value; }
  void setInteractionClassHandle(InteractionClassHandle&& value) noexcept
  { _interactionClassHandle = std::move(value); }
  InteractionClassHandle& getInteractionClassHandle() noexcept
  { return _interactionClassHandle; }
  const InteractionClassHandle& getInteractionClassHandle() const noexcept
  { return _interactionClassHandle; }

  void setTransportationType(const TransportationType& value) noexcept
  { _transportationType = value; }
  void setTransportationType(TransportationType&& value) noexcept
  { _transportationType = std::move(value); }
  TransportationType& getTransportationType() noexcept
  { return _transportationType; }
  const TransportationType& getTransportationType() const noexcept
  { return _transportationType; }

  void setTag(const VariableLengthData& value) noexcept
  { _tag = value; }
  void setTag(VariableLengthData&& value) noexcept
  { _tag = std::move(value); }
  VariableLengthData& getTag() noexcept
  { return _tag; }
  const VariableLengthData& getTag() const noexcept
  { return _tag; }

  void setParameterValues(const ParameterValueVector& value) noexcept
  { _parameterValues = value; }
  void setParameterValues(ParameterValueVector&& value) noexcept
  { _parameterValues = std::move(value); }
  ParameterValueVector& getParameterValues() noexcept
  { return _parameterValues; }
  const ParameterValueVector& getParameterValues() const noexcept
  { return _parameterValues; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  InteractionClassHandle _interactionClassHandle;
  TransportationType _transportationType = RELIABLE;
  VariableLengthData _tag;
  ParameterValueVector _parameterValues;
};

class OPENRTI_API TimeStampedInteractionMessage final : public AbstractMessage {
public:
  TimeStampedInteractionMessage() noexcept {};
  TimeStampedInteractionMessage(const TimeStampedInteractionMessage&) = default;
  TimeStampedInteractionMessage(TimeStampedInteractionMessage&&) noexcept = default;
  virtual ~TimeStampedInteractionMessage() noexcept = default;
  TimeStampedInteractionMessage& operator=(const TimeStampedInteractionMessage&) = default;
  TimeStampedInteractionMessage& operator=(TimeStampedInteractionMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 81;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const TimeStampedInteractionMessage& rhs) const noexcept;
  bool operator<(const TimeStampedInteractionMessage& rhs) const noexcept;
  bool operator!=(const TimeStampedInteractionMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const TimeStampedInteractionMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const TimeStampedInteractionMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const TimeStampedInteractionMessage& rhs) const noexcept
  { return !operator>(rhs); }

  bool getReliable() const noexcept override;

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setInteractionClassHandle(const InteractionClassHandle& value) noexcept
  { _interactionClassHandle = value; }
  void setInteractionClassHandle(InteractionClassHandle&& value) noexcept
  { _interactionClassHandle = std::move(value); }
  InteractionClassHandle& getInteractionClassHandle() noexcept
  { return _interactionClassHandle; }
  const InteractionClassHandle& getInteractionClassHandle() const noexcept
  { return _interactionClassHandle; }

  void setOrderType(const OrderType& value) noexcept
  { _orderType = value; }
  void setOrderType(OrderType&& value) noexcept
  { _orderType = std::move(value); }
  OrderType& getOrderType() noexcept
  { return _orderType; }
  const OrderType& getOrderType() const noexcept
  { return _orderType; }

  void setTransportationType(const TransportationType& value) noexcept
  { _transportationType = value; }
  void setTransportationType(TransportationType&& value) noexcept
  { _transportationType = std::move(value); }
  TransportationType& getTransportationType() noexcept
  { return _transportationType; }
  const TransportationType& getTransportationType() const noexcept
  { return _transportationType; }

  void setTag(const VariableLengthData& value) noexcept
  { _tag = value; }
  void setTag(VariableLengthData&& value) noexcept
  { _tag = std::move(value); }
  VariableLengthData& getTag() noexcept
  { return _tag; }
  const VariableLengthData& getTag() const noexcept
  { return _tag; }

  void setTimeStamp(const VariableLengthData& value) noexcept
  { _timeStamp = value; }
  void setTimeStamp(VariableLengthData&& value) noexcept
  { _timeStamp = std::move(value); }
  VariableLengthData& getTimeStamp() noexcept
  { return _timeStamp; }
  const VariableLengthData& getTimeStamp() const noexcept
  { return _timeStamp; }

  void setMessageRetractionHandle(const MessageRetractionHandle& value) noexcept
  { _messageRetractionHandle = value; }
  void setMessageRetractionHandle(MessageRetractionHandle&& value) noexcept
  { _messageRetractionHandle = std::move(value); }
  MessageRetractionHandle& getMessageRetractionHandle() noexcept
  { return _messageRetractionHandle; }
  const MessageRetractionHandle& getMessageRetractionHandle() const noexcept
  { return _messageRetractionHandle; }

  void setParameterValues(const ParameterValueVector& value) noexcept
  { _parameterValues = value; }
  void setParameterValues(ParameterValueVector&& value) noexcept
  { _parameterValues = std::move(value); }
  ParameterValueVector& getParameterValues() noexcept
  { return _parameterValues; }
  const ParameterValueVector& getParameterValues() const noexcept
  { return _parameterValues; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  InteractionClassHandle _interactionClassHandle;
  OrderType _orderType = RECEIVE;
  TransportationType _transportationType = RELIABLE;
  VariableLengthData _tag;
  VariableLengthData _timeStamp;
  MessageRetractionHandle _messageRetractionHandle;
  ParameterValueVector _parameterValues;
};

class OPENRTI_API ObjectInstanceHandlesRequestMessage final : public AbstractMessage {
public:
  ObjectInstanceHandlesRequestMessage() noexcept {};
  ObjectInstanceHandlesRequestMessage(const ObjectInstanceHandlesRequestMessage&) = default;
  ObjectInstanceHandlesRequestMessage(ObjectInstanceHandlesRequestMessage&&) noexcept = default;
  virtual ~ObjectInstanceHandlesRequestMessage() noexcept = default;
  ObjectInstanceHandlesRequestMessage& operator=(const ObjectInstanceHandlesRequestMessage&) = default;
  ObjectInstanceHandlesRequestMessage& operator=(ObjectInstanceHandlesRequestMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 60;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ObjectInstanceHandlesRequestMessage& rhs) const noexcept;
  bool operator<(const ObjectInstanceHandlesRequestMessage& rhs) const noexcept;
  bool operator!=(const ObjectInstanceHandlesRequestMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ObjectInstanceHandlesRequestMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ObjectInstanceHandlesRequestMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ObjectInstanceHandlesRequestMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setCount(const Unsigned& value) noexcept
  { _count = value; }
  void setCount(Unsigned&& value) noexcept
  { _count = std::move(value); }
  Unsigned& getCount() noexcept
  { return _count; }
  const Unsigned& getCount() const noexcept
  { return _count; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  Unsigned _count = 0;
};

class OPENRTI_API ObjectInstanceHandlesResponseMessage final : public AbstractMessage {
public:
  ObjectInstanceHandlesResponseMessage() noexcept {};
  ObjectInstanceHandlesResponseMessage(const ObjectInstanceHandlesResponseMessage&) = default;
  ObjectInstanceHandlesResponseMessage(ObjectInstanceHandlesResponseMessage&&) noexcept = default;
  virtual ~ObjectInstanceHandlesResponseMessage() noexcept = default;
  ObjectInstanceHandlesResponseMessage& operator=(const ObjectInstanceHandlesResponseMessage&) = default;
  ObjectInstanceHandlesResponseMessage& operator=(ObjectInstanceHandlesResponseMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 61;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ObjectInstanceHandlesResponseMessage& rhs) const noexcept;
  bool operator<(const ObjectInstanceHandlesResponseMessage& rhs) const noexcept;
  bool operator!=(const ObjectInstanceHandlesResponseMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ObjectInstanceHandlesResponseMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ObjectInstanceHandlesResponseMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ObjectInstanceHandlesResponseMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setObjectInstanceHandleNamePairVector(const ObjectInstanceHandleNamePairVector& value) noexcept
  { _objectInstanceHandleNamePairVector = value; }
  void setObjectInstanceHandleNamePairVector(ObjectInstanceHandleNamePairVector&& value) noexcept
  { _objectInstanceHandleNamePairVector = std::move(value); }
  ObjectInstanceHandleNamePairVector& getObjectInstanceHandleNamePairVector() noexcept
  { return _objectInstanceHandleNamePairVector; }
  const ObjectInstanceHandleNamePairVector& getObjectInstanceHandleNamePairVector() const noexcept
  { return _objectInstanceHandleNamePairVector; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  ObjectInstanceHandleNamePairVector _objectInstanceHandleNamePairVector;
};

class OPENRTI_API ReleaseMultipleObjectInstanceNameHandlePairsMessage final : public AbstractMessage {
public:
  ReleaseMultipleObjectInstanceNameHandlePairsMessage() noexcept {};
  ReleaseMultipleObjectInstanceNameHandlePairsMessage(const ReleaseMultipleObjectInstanceNameHandlePairsMessage&) = default;
  ReleaseMultipleObjectInstanceNameHandlePairsMessage(ReleaseMultipleObjectInstanceNameHandlePairsMessage&&) noexcept = default;
  virtual ~ReleaseMultipleObjectInstanceNameHandlePairsMessage() noexcept = default;
  ReleaseMultipleObjectInstanceNameHandlePairsMessage& operator=(const ReleaseMultipleObjectInstanceNameHandlePairsMessage&) = default;
  ReleaseMultipleObjectInstanceNameHandlePairsMessage& operator=(ReleaseMultipleObjectInstanceNameHandlePairsMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 62;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ReleaseMultipleObjectInstanceNameHandlePairsMessage& rhs) const noexcept;
  bool operator<(const ReleaseMultipleObjectInstanceNameHandlePairsMessage& rhs) const noexcept;
  bool operator!=(const ReleaseMultipleObjectInstanceNameHandlePairsMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ReleaseMultipleObjectInstanceNameHandlePairsMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ReleaseMultipleObjectInstanceNameHandlePairsMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ReleaseMultipleObjectInstanceNameHandlePairsMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setObjectInstanceHandleVector(const ObjectInstanceHandleVector& value) noexcept
  { _objectInstanceHandleVector = value; }
  void setObjectInstanceHandleVector(ObjectInstanceHandleVector&& value) noexcept
  { _objectInstanceHandleVector = std::move(value); }
  ObjectInstanceHandleVector& getObjectInstanceHandleVector() noexcept
  { return _objectInstanceHandleVector; }
  const ObjectInstanceHandleVector& getObjectInstanceHandleVector() const noexcept
  { return _objectInstanceHandleVector; }

private:
  FederationHandle _federationHandle;
  ObjectInstanceHandleVector _objectInstanceHandleVector;
};

class OPENRTI_API ReserveObjectInstanceNameRequestMessage final : public AbstractMessage {
public:
  ReserveObjectInstanceNameRequestMessage() noexcept {};
  ReserveObjectInstanceNameRequestMessage(const ReserveObjectInstanceNameRequestMessage&) = default;
  ReserveObjectInstanceNameRequestMessage(ReserveObjectInstanceNameRequestMessage&&) noexcept = default;
  virtual ~ReserveObjectInstanceNameRequestMessage() noexcept = default;
  ReserveObjectInstanceNameRequestMessage& operator=(const ReserveObjectInstanceNameRequestMessage&) = default;
  ReserveObjectInstanceNameRequestMessage& operator=(ReserveObjectInstanceNameRequestMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 63;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ReserveObjectInstanceNameRequestMessage& rhs) const noexcept;
  bool operator<(const ReserveObjectInstanceNameRequestMessage& rhs) const noexcept;
  bool operator!=(const ReserveObjectInstanceNameRequestMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ReserveObjectInstanceNameRequestMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ReserveObjectInstanceNameRequestMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ReserveObjectInstanceNameRequestMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setName(const String& value) noexcept
  { _name = value; }
  void setName(String&& value) noexcept
  { _name = std::move(value); }
  String& getName() noexcept
  { return _name; }
  const String& getName() const noexcept
  { return _name; }

  void setIsInternal(const Bool& value) noexcept
  { _isInternal = value; }
  void setIsInternal(Bool&& value) noexcept
  { _isInternal = std::move(value); }
  Bool& getIsInternal() noexcept
  { return _isInternal; }
  const Bool& getIsInternal() const noexcept
  { return _isInternal; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  String _name;
  Bool _isInternal = false;
};

class OPENRTI_API ReserveObjectInstanceNameResponseMessage final : public AbstractMessage {
public:
  ReserveObjectInstanceNameResponseMessage() noexcept {};
  ReserveObjectInstanceNameResponseMessage(const ReserveObjectInstanceNameResponseMessage&) = default;
  ReserveObjectInstanceNameResponseMessage(ReserveObjectInstanceNameResponseMessage&&) noexcept = default;
  virtual ~ReserveObjectInstanceNameResponseMessage() noexcept = default;
  ReserveObjectInstanceNameResponseMessage& operator=(const ReserveObjectInstanceNameResponseMessage&) = default;
  ReserveObjectInstanceNameResponseMessage& operator=(ReserveObjectInstanceNameResponseMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 64;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ReserveObjectInstanceNameResponseMessage& rhs) const noexcept;
  bool operator<(const ReserveObjectInstanceNameResponseMessage& rhs) const noexcept;
  bool operator!=(const ReserveObjectInstanceNameResponseMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ReserveObjectInstanceNameResponseMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ReserveObjectInstanceNameResponseMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ReserveObjectInstanceNameResponseMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setObjectInstanceHandleNamePair(const ObjectInstanceHandleNamePair& value) noexcept
  { _objectInstanceHandleNamePair = value; }
  void setObjectInstanceHandleNamePair(ObjectInstanceHandleNamePair&& value) noexcept
  { _objectInstanceHandleNamePair = std::move(value); }
  ObjectInstanceHandleNamePair& getObjectInstanceHandleNamePair() noexcept
  { return _objectInstanceHandleNamePair; }
  const ObjectInstanceHandleNamePair& getObjectInstanceHandleNamePair() const noexcept
  { return _objectInstanceHandleNamePair; }

  void setSuccess(const Bool& value) noexcept
  { _success = value; }
  void setSuccess(Bool&& value) noexcept
  { _success = std::move(value); }
  Bool& getSuccess() noexcept
  { return _success; }
  const Bool& getSuccess() const noexcept
  { return _success; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  ObjectInstanceHandleNamePair _objectInstanceHandleNamePair;
  Bool _success = false;
};

class OPENRTI_API ReserveMultipleObjectInstanceNameRequestMessage final : public AbstractMessage {
public:
  ReserveMultipleObjectInstanceNameRequestMessage() noexcept {};
  ReserveMultipleObjectInstanceNameRequestMessage(const ReserveMultipleObjectInstanceNameRequestMessage&) = default;
  ReserveMultipleObjectInstanceNameRequestMessage(ReserveMultipleObjectInstanceNameRequestMessage&&) noexcept = default;
  virtual ~ReserveMultipleObjectInstanceNameRequestMessage() noexcept = default;
  ReserveMultipleObjectInstanceNameRequestMessage& operator=(const ReserveMultipleObjectInstanceNameRequestMessage&) = default;
  ReserveMultipleObjectInstanceNameRequestMessage& operator=(ReserveMultipleObjectInstanceNameRequestMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 65;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ReserveMultipleObjectInstanceNameRequestMessage& rhs) const noexcept;
  bool operator<(const ReserveMultipleObjectInstanceNameRequestMessage& rhs) const noexcept;
  bool operator!=(const ReserveMultipleObjectInstanceNameRequestMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ReserveMultipleObjectInstanceNameRequestMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ReserveMultipleObjectInstanceNameRequestMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ReserveMultipleObjectInstanceNameRequestMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setNameList(const StringVector& value) noexcept
  { _nameList = value; }
  void setNameList(StringVector&& value) noexcept
  { _nameList = std::move(value); }
  StringVector& getNameList() noexcept
  { return _nameList; }
  const StringVector& getNameList() const noexcept
  { return _nameList; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  StringVector _nameList;
};

class OPENRTI_API ReserveMultipleObjectInstanceNameResponseMessage final : public AbstractMessage {
public:
  ReserveMultipleObjectInstanceNameResponseMessage() noexcept {};
  ReserveMultipleObjectInstanceNameResponseMessage(const ReserveMultipleObjectInstanceNameResponseMessage&) = default;
  ReserveMultipleObjectInstanceNameResponseMessage(ReserveMultipleObjectInstanceNameResponseMessage&&) noexcept = default;
  virtual ~ReserveMultipleObjectInstanceNameResponseMessage() noexcept = default;
  ReserveMultipleObjectInstanceNameResponseMessage& operator=(const ReserveMultipleObjectInstanceNameResponseMessage&) = default;
  ReserveMultipleObjectInstanceNameResponseMessage& operator=(ReserveMultipleObjectInstanceNameResponseMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 66;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const ReserveMultipleObjectInstanceNameResponseMessage& rhs) const noexcept;
  bool operator<(const ReserveMultipleObjectInstanceNameResponseMessage& rhs) const noexcept;
  bool operator!=(const ReserveMultipleObjectInstanceNameResponseMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const ReserveMultipleObjectInstanceNameResponseMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const ReserveMultipleObjectInstanceNameResponseMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const ReserveMultipleObjectInstanceNameResponseMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setObjectInstanceHandleNamePairVector(const ObjectInstanceHandleNamePairVector& value) noexcept
  { _objectInstanceHandleNamePairVector = value; }
  void setObjectInstanceHandleNamePairVector(ObjectInstanceHandleNamePairVector&& value) noexcept
  { _objectInstanceHandleNamePairVector = std::move(value); }
  ObjectInstanceHandleNamePairVector& getObjectInstanceHandleNamePairVector() noexcept
  { return _objectInstanceHandleNamePairVector; }
  const ObjectInstanceHandleNamePairVector& getObjectInstanceHandleNamePairVector() const noexcept
  { return _objectInstanceHandleNamePairVector; }

  void setSuccess(const Bool& value) noexcept
  { _success = value; }
  void setSuccess(Bool&& value) noexcept
  { _success = std::move(value); }
  Bool& getSuccess() noexcept
  { return _success; }
  const Bool& getSuccess() const noexcept
  { return _success; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  ObjectInstanceHandleNamePairVector _objectInstanceHandleNamePairVector;
  Bool _success = false;
};

class OPENRTI_API InsertObjectInstanceMessage final : public AbstractMessage {
public:
  InsertObjectInstanceMessage() noexcept {};
  InsertObjectInstanceMessage(const InsertObjectInstanceMessage&) = default;
  InsertObjectInstanceMessage(InsertObjectInstanceMessage&&) noexcept = default;
  virtual ~InsertObjectInstanceMessage() noexcept = default;
  InsertObjectInstanceMessage& operator=(const InsertObjectInstanceMessage&) = default;
  InsertObjectInstanceMessage& operator=(InsertObjectInstanceMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 90;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const InsertObjectInstanceMessage& rhs) const noexcept;
  bool operator<(const InsertObjectInstanceMessage& rhs) const noexcept;
  bool operator!=(const InsertObjectInstanceMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const InsertObjectInstanceMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const InsertObjectInstanceMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const InsertObjectInstanceMessage& rhs) const noexcept
  { return !operator>(rhs); }

  virtual ObjectInstanceHandle getObjectInstanceHandleForMessage() const noexcept override;

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setObjectClassHandle(const ObjectClassHandle& value) noexcept
  { _objectClassHandle = value; }
  void setObjectClassHandle(ObjectClassHandle&& value) noexcept
  { _objectClassHandle = std::move(value); }
  ObjectClassHandle& getObjectClassHandle() noexcept
  { return _objectClassHandle; }
  const ObjectClassHandle& getObjectClassHandle() const noexcept
  { return _objectClassHandle; }

  void setObjectInstanceHandle(const ObjectInstanceHandle& value) noexcept
  { _objectInstanceHandle = value; }
  void setObjectInstanceHandle(ObjectInstanceHandle&& value) noexcept
  { _objectInstanceHandle = std::move(value); }
  ObjectInstanceHandle& getObjectInstanceHandle() noexcept
  { return _objectInstanceHandle; }
  const ObjectInstanceHandle& getObjectInstanceHandle() const noexcept
  { return _objectInstanceHandle; }

  void setName(const String& value) noexcept
  { _name = value; }
  void setName(String&& value) noexcept
  { _name = std::move(value); }
  String& getName() noexcept
  { return _name; }
  const String& getName() const noexcept
  { return _name; }

  void setAttributeStateVector(const AttributeStateVector& value) noexcept
  { _attributeStateVector = value; }
  void setAttributeStateVector(AttributeStateVector&& value) noexcept
  { _attributeStateVector = std::move(value); }
  AttributeStateVector& getAttributeStateVector() noexcept
  { return _attributeStateVector; }
  const AttributeStateVector& getAttributeStateVector() const noexcept
  { return _attributeStateVector; }

private:
  FederationHandle _federationHandle;
  ObjectClassHandle _objectClassHandle;
  ObjectInstanceHandle _objectInstanceHandle;
  String _name;
  AttributeStateVector _attributeStateVector;
};

class OPENRTI_API DeleteObjectInstanceMessage final : public AbstractMessage {
public:
  DeleteObjectInstanceMessage() noexcept {};
  DeleteObjectInstanceMessage(const DeleteObjectInstanceMessage&) = default;
  DeleteObjectInstanceMessage(DeleteObjectInstanceMessage&&) noexcept = default;
  virtual ~DeleteObjectInstanceMessage() noexcept = default;
  DeleteObjectInstanceMessage& operator=(const DeleteObjectInstanceMessage&) = default;
  DeleteObjectInstanceMessage& operator=(DeleteObjectInstanceMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 91;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const DeleteObjectInstanceMessage& rhs) const noexcept;
  bool operator<(const DeleteObjectInstanceMessage& rhs) const noexcept;
  bool operator!=(const DeleteObjectInstanceMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const DeleteObjectInstanceMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const DeleteObjectInstanceMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const DeleteObjectInstanceMessage& rhs) const noexcept
  { return !operator>(rhs); }

  virtual ObjectInstanceHandle getObjectInstanceHandleForMessage() const noexcept override;

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setObjectInstanceHandle(const ObjectInstanceHandle& value) noexcept
  { _objectInstanceHandle = value; }
  void setObjectInstanceHandle(ObjectInstanceHandle&& value) noexcept
  { _objectInstanceHandle = std::move(value); }
  ObjectInstanceHandle& getObjectInstanceHandle() noexcept
  { return _objectInstanceHandle; }
  const ObjectInstanceHandle& getObjectInstanceHandle() const noexcept
  { return _objectInstanceHandle; }

  void setTag(const VariableLengthData& value) noexcept
  { _tag = value; }
  void setTag(VariableLengthData&& value) noexcept
  { _tag = std::move(value); }
  VariableLengthData& getTag() noexcept
  { return _tag; }
  const VariableLengthData& getTag() const noexcept
  { return _tag; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  ObjectInstanceHandle _objectInstanceHandle;
  VariableLengthData _tag;
};

class OPENRTI_API TimeStampedDeleteObjectInstanceMessage final : public AbstractMessage {
public:
  TimeStampedDeleteObjectInstanceMessage() noexcept {};
  TimeStampedDeleteObjectInstanceMessage(const TimeStampedDeleteObjectInstanceMessage&) = default;
  TimeStampedDeleteObjectInstanceMessage(TimeStampedDeleteObjectInstanceMessage&&) noexcept = default;
  virtual ~TimeStampedDeleteObjectInstanceMessage() noexcept = default;
  TimeStampedDeleteObjectInstanceMessage& operator=(const TimeStampedDeleteObjectInstanceMessage&) = default;
  TimeStampedDeleteObjectInstanceMessage& operator=(TimeStampedDeleteObjectInstanceMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 92;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const TimeStampedDeleteObjectInstanceMessage& rhs) const noexcept;
  bool operator<(const TimeStampedDeleteObjectInstanceMessage& rhs) const noexcept;
  bool operator!=(const TimeStampedDeleteObjectInstanceMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const TimeStampedDeleteObjectInstanceMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const TimeStampedDeleteObjectInstanceMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const TimeStampedDeleteObjectInstanceMessage& rhs) const noexcept
  { return !operator>(rhs); }

  virtual ObjectInstanceHandle getObjectInstanceHandleForMessage() const noexcept override;

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setObjectInstanceHandle(const ObjectInstanceHandle& value) noexcept
  { _objectInstanceHandle = value; }
  void setObjectInstanceHandle(ObjectInstanceHandle&& value) noexcept
  { _objectInstanceHandle = std::move(value); }
  ObjectInstanceHandle& getObjectInstanceHandle() noexcept
  { return _objectInstanceHandle; }
  const ObjectInstanceHandle& getObjectInstanceHandle() const noexcept
  { return _objectInstanceHandle; }

  void setOrderType(const OrderType& value) noexcept
  { _orderType = value; }
  void setOrderType(OrderType&& value) noexcept
  { _orderType = std::move(value); }
  OrderType& getOrderType() noexcept
  { return _orderType; }
  const OrderType& getOrderType() const noexcept
  { return _orderType; }

  void setTag(const VariableLengthData& value) noexcept
  { _tag = value; }
  void setTag(VariableLengthData&& value) noexcept
  { _tag = std::move(value); }
  VariableLengthData& getTag() noexcept
  { return _tag; }
  const VariableLengthData& getTag() const noexcept
  { return _tag; }

  void setTimeStamp(const VariableLengthData& value) noexcept
  { _timeStamp = value; }
  void setTimeStamp(VariableLengthData&& value) noexcept
  { _timeStamp = std::move(value); }
  VariableLengthData& getTimeStamp() noexcept
  { return _timeStamp; }
  const VariableLengthData& getTimeStamp() const noexcept
  { return _timeStamp; }

  void setMessageRetractionHandle(const MessageRetractionHandle& value) noexcept
  { _messageRetractionHandle = value; }
  void setMessageRetractionHandle(MessageRetractionHandle&& value) noexcept
  { _messageRetractionHandle = std::move(value); }
  MessageRetractionHandle& getMessageRetractionHandle() noexcept
  { return _messageRetractionHandle; }
  const MessageRetractionHandle& getMessageRetractionHandle() const noexcept
  { return _messageRetractionHandle; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  ObjectInstanceHandle _objectInstanceHandle;
  OrderType _orderType = RECEIVE;
  VariableLengthData _tag;
  VariableLengthData _timeStamp;
  MessageRetractionHandle _messageRetractionHandle;
};

class OPENRTI_API AttributeUpdateMessage final : public AbstractMessage {
public:
  AttributeUpdateMessage() noexcept {};
  AttributeUpdateMessage(const AttributeUpdateMessage&) = default;
  AttributeUpdateMessage(AttributeUpdateMessage&&) noexcept = default;
  virtual ~AttributeUpdateMessage() noexcept = default;
  AttributeUpdateMessage& operator=(const AttributeUpdateMessage&) = default;
  AttributeUpdateMessage& operator=(AttributeUpdateMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 94;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const AttributeUpdateMessage& rhs) const noexcept;
  bool operator<(const AttributeUpdateMessage& rhs) const noexcept;
  bool operator!=(const AttributeUpdateMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const AttributeUpdateMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const AttributeUpdateMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const AttributeUpdateMessage& rhs) const noexcept
  { return !operator>(rhs); }

  bool getReliable() const noexcept override;

  virtual ObjectInstanceHandle getObjectInstanceHandleForMessage() const noexcept override;

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setObjectInstanceHandle(const ObjectInstanceHandle& value) noexcept
  { _objectInstanceHandle = value; }
  void setObjectInstanceHandle(ObjectInstanceHandle&& value) noexcept
  { _objectInstanceHandle = std::move(value); }
  ObjectInstanceHandle& getObjectInstanceHandle() noexcept
  { return _objectInstanceHandle; }
  const ObjectInstanceHandle& getObjectInstanceHandle() const noexcept
  { return _objectInstanceHandle; }

  void setTag(const VariableLengthData& value) noexcept
  { _tag = value; }
  void setTag(VariableLengthData&& value) noexcept
  { _tag = std::move(value); }
  VariableLengthData& getTag() noexcept
  { return _tag; }
  const VariableLengthData& getTag() const noexcept
  { return _tag; }

  void setTransportationType(const TransportationType& value) noexcept
  { _transportationType = value; }
  void setTransportationType(TransportationType&& value) noexcept
  { _transportationType = std::move(value); }
  TransportationType& getTransportationType() noexcept
  { return _transportationType; }
  const TransportationType& getTransportationType() const noexcept
  { return _transportationType; }

  void setAttributeValues(const AttributeValueVector& value) noexcept
  { _attributeValues = value; }
  void setAttributeValues(AttributeValueVector&& value) noexcept
  { _attributeValues = std::move(value); }
  AttributeValueVector& getAttributeValues() noexcept
  { return _attributeValues; }
  const AttributeValueVector& getAttributeValues() const noexcept
  { return _attributeValues; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  ObjectInstanceHandle _objectInstanceHandle;
  VariableLengthData _tag;
  TransportationType _transportationType = RELIABLE;
  AttributeValueVector _attributeValues;
};

class OPENRTI_API TimeStampedAttributeUpdateMessage final : public AbstractMessage {
public:
  TimeStampedAttributeUpdateMessage() noexcept {};
  TimeStampedAttributeUpdateMessage(const TimeStampedAttributeUpdateMessage&) = default;
  TimeStampedAttributeUpdateMessage(TimeStampedAttributeUpdateMessage&&) noexcept = default;
  virtual ~TimeStampedAttributeUpdateMessage() noexcept = default;
  TimeStampedAttributeUpdateMessage& operator=(const TimeStampedAttributeUpdateMessage&) = default;
  TimeStampedAttributeUpdateMessage& operator=(TimeStampedAttributeUpdateMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 96;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const TimeStampedAttributeUpdateMessage& rhs) const noexcept;
  bool operator<(const TimeStampedAttributeUpdateMessage& rhs) const noexcept;
  bool operator!=(const TimeStampedAttributeUpdateMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const TimeStampedAttributeUpdateMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const TimeStampedAttributeUpdateMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const TimeStampedAttributeUpdateMessage& rhs) const noexcept
  { return !operator>(rhs); }

  bool getReliable() const noexcept override;

  virtual ObjectInstanceHandle getObjectInstanceHandleForMessage() const noexcept override;

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setFederateHandle(const FederateHandle& value) noexcept
  { _federateHandle = value; }
  void setFederateHandle(FederateHandle&& value) noexcept
  { _federateHandle = std::move(value); }
  FederateHandle& getFederateHandle() noexcept
  { return _federateHandle; }
  const FederateHandle& getFederateHandle() const noexcept
  { return _federateHandle; }

  void setObjectInstanceHandle(const ObjectInstanceHandle& value) noexcept
  { _objectInstanceHandle = value; }
  void setObjectInstanceHandle(ObjectInstanceHandle&& value) noexcept
  { _objectInstanceHandle = std::move(value); }
  ObjectInstanceHandle& getObjectInstanceHandle() noexcept
  { return _objectInstanceHandle; }
  const ObjectInstanceHandle& getObjectInstanceHandle() const noexcept
  { return _objectInstanceHandle; }

  void setTag(const VariableLengthData& value) noexcept
  { _tag = value; }
  void setTag(VariableLengthData&& value) noexcept
  { _tag = std::move(value); }
  VariableLengthData& getTag() noexcept
  { return _tag; }
  const VariableLengthData& getTag() const noexcept
  { return _tag; }

  void setTimeStamp(const VariableLengthData& value) noexcept
  { _timeStamp = value; }
  void setTimeStamp(VariableLengthData&& value) noexcept
  { _timeStamp = std::move(value); }
  VariableLengthData& getTimeStamp() noexcept
  { return _timeStamp; }
  const VariableLengthData& getTimeStamp() const noexcept
  { return _timeStamp; }

  void setMessageRetractionHandle(const MessageRetractionHandle& value) noexcept
  { _messageRetractionHandle = value; }
  void setMessageRetractionHandle(MessageRetractionHandle&& value) noexcept
  { _messageRetractionHandle = std::move(value); }
  MessageRetractionHandle& getMessageRetractionHandle() noexcept
  { return _messageRetractionHandle; }
  const MessageRetractionHandle& getMessageRetractionHandle() const noexcept
  { return _messageRetractionHandle; }

  void setOrderType(const OrderType& value) noexcept
  { _orderType = value; }
  void setOrderType(OrderType&& value) noexcept
  { _orderType = std::move(value); }
  OrderType& getOrderType() noexcept
  { return _orderType; }
  const OrderType& getOrderType() const noexcept
  { return _orderType; }

  void setTransportationType(const TransportationType& value) noexcept
  { _transportationType = value; }
  void setTransportationType(TransportationType&& value) noexcept
  { _transportationType = std::move(value); }
  TransportationType& getTransportationType() noexcept
  { return _transportationType; }
  const TransportationType& getTransportationType() const noexcept
  { return _transportationType; }

  void setAttributeValues(const AttributeValueVector& value) noexcept
  { _attributeValues = value; }
  void setAttributeValues(AttributeValueVector&& value) noexcept
  { _attributeValues = std::move(value); }
  AttributeValueVector& getAttributeValues() noexcept
  { return _attributeValues; }
  const AttributeValueVector& getAttributeValues() const noexcept
  { return _attributeValues; }

private:
  FederationHandle _federationHandle;
  FederateHandle _federateHandle;
  ObjectInstanceHandle _objectInstanceHandle;
  VariableLengthData _tag;
  VariableLengthData _timeStamp;
  MessageRetractionHandle _messageRetractionHandle;
  OrderType _orderType = RECEIVE;
  TransportationType _transportationType = RELIABLE;
  AttributeValueVector _attributeValues;
};

class OPENRTI_API RequestAttributeUpdateMessage final : public AbstractMessage {
public:
  RequestAttributeUpdateMessage() noexcept {};
  RequestAttributeUpdateMessage(const RequestAttributeUpdateMessage&) = default;
  RequestAttributeUpdateMessage(RequestAttributeUpdateMessage&&) noexcept = default;
  virtual ~RequestAttributeUpdateMessage() noexcept = default;
  RequestAttributeUpdateMessage& operator=(const RequestAttributeUpdateMessage&) = default;
  RequestAttributeUpdateMessage& operator=(RequestAttributeUpdateMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 97;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const RequestAttributeUpdateMessage& rhs) const noexcept;
  bool operator<(const RequestAttributeUpdateMessage& rhs) const noexcept;
  bool operator!=(const RequestAttributeUpdateMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const RequestAttributeUpdateMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const RequestAttributeUpdateMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const RequestAttributeUpdateMessage& rhs) const noexcept
  { return !operator>(rhs); }

  virtual ObjectInstanceHandle getObjectInstanceHandleForMessage() const noexcept override;

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setObjectInstanceHandle(const ObjectInstanceHandle& value) noexcept
  { _objectInstanceHandle = value; }
  void setObjectInstanceHandle(ObjectInstanceHandle&& value) noexcept
  { _objectInstanceHandle = std::move(value); }
  ObjectInstanceHandle& getObjectInstanceHandle() noexcept
  { return _objectInstanceHandle; }
  const ObjectInstanceHandle& getObjectInstanceHandle() const noexcept
  { return _objectInstanceHandle; }

  void setAttributeHandles(const AttributeHandleVector& value) noexcept
  { _attributeHandles = value; }
  void setAttributeHandles(AttributeHandleVector&& value) noexcept
  { _attributeHandles = std::move(value); }
  AttributeHandleVector& getAttributeHandles() noexcept
  { return _attributeHandles; }
  const AttributeHandleVector& getAttributeHandles() const noexcept
  { return _attributeHandles; }

  void setTag(const VariableLengthData& value) noexcept
  { _tag = value; }
  void setTag(VariableLengthData&& value) noexcept
  { _tag = std::move(value); }
  VariableLengthData& getTag() noexcept
  { return _tag; }
  const VariableLengthData& getTag() const noexcept
  { return _tag; }

private:
  FederationHandle _federationHandle;
  ObjectInstanceHandle _objectInstanceHandle;
  AttributeHandleVector _attributeHandles;
  VariableLengthData _tag;
};

class OPENRTI_API RequestClassAttributeUpdateMessage final : public AbstractMessage {
public:
  RequestClassAttributeUpdateMessage() noexcept {};
  RequestClassAttributeUpdateMessage(const RequestClassAttributeUpdateMessage&) = default;
  RequestClassAttributeUpdateMessage(RequestClassAttributeUpdateMessage&&) noexcept = default;
  virtual ~RequestClassAttributeUpdateMessage() noexcept = default;
  RequestClassAttributeUpdateMessage& operator=(const RequestClassAttributeUpdateMessage&) = default;
  RequestClassAttributeUpdateMessage& operator=(RequestClassAttributeUpdateMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 98;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const RequestClassAttributeUpdateMessage& rhs) const noexcept;
  bool operator<(const RequestClassAttributeUpdateMessage& rhs) const noexcept;
  bool operator!=(const RequestClassAttributeUpdateMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const RequestClassAttributeUpdateMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const RequestClassAttributeUpdateMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const RequestClassAttributeUpdateMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setObjectClassHandle(const ObjectClassHandle& value) noexcept
  { _objectClassHandle = value; }
  void setObjectClassHandle(ObjectClassHandle&& value) noexcept
  { _objectClassHandle = std::move(value); }
  ObjectClassHandle& getObjectClassHandle() noexcept
  { return _objectClassHandle; }
  const ObjectClassHandle& getObjectClassHandle() const noexcept
  { return _objectClassHandle; }

  void setAttributeHandles(const AttributeHandleVector& value) noexcept
  { _attributeHandles = value; }
  void setAttributeHandles(AttributeHandleVector&& value) noexcept
  { _attributeHandles = std::move(value); }
  AttributeHandleVector& getAttributeHandles() noexcept
  { return _attributeHandles; }
  const AttributeHandleVector& getAttributeHandles() const noexcept
  { return _attributeHandles; }

  void setTag(const VariableLengthData& value) noexcept
  { _tag = value; }
  void setTag(VariableLengthData&& value) noexcept
  { _tag = std::move(value); }
  VariableLengthData& getTag() noexcept
  { return _tag; }
  const VariableLengthData& getTag() const noexcept
  { return _tag; }

private:
  FederationHandle _federationHandle;
  ObjectClassHandle _objectClassHandle;
  AttributeHandleVector _attributeHandles;
  VariableLengthData _tag;
};

class OPENRTI_API QueryAttributeOwnershipRequestMessage final : public AbstractMessage {
public:
  QueryAttributeOwnershipRequestMessage() noexcept {};
  QueryAttributeOwnershipRequestMessage(const QueryAttributeOwnershipRequestMessage&) = default;
  QueryAttributeOwnershipRequestMessage(QueryAttributeOwnershipRequestMessage&&) noexcept = default;
  virtual ~QueryAttributeOwnershipRequestMessage() noexcept = default;
  QueryAttributeOwnershipRequestMessage& operator=(const QueryAttributeOwnershipRequestMessage&) = default;
  QueryAttributeOwnershipRequestMessage& operator=(QueryAttributeOwnershipRequestMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 102;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const QueryAttributeOwnershipRequestMessage& rhs) const noexcept;
  bool operator<(const QueryAttributeOwnershipRequestMessage& rhs) const noexcept;
  bool operator!=(const QueryAttributeOwnershipRequestMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const QueryAttributeOwnershipRequestMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const QueryAttributeOwnershipRequestMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const QueryAttributeOwnershipRequestMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setObjectInstanceHandle(const ObjectInstanceHandle& value) noexcept
  { _objectInstanceHandle = value; }
  void setObjectInstanceHandle(ObjectInstanceHandle&& value) noexcept
  { _objectInstanceHandle = std::move(value); }
  ObjectInstanceHandle& getObjectInstanceHandle() noexcept
  { return _objectInstanceHandle; }
  const ObjectInstanceHandle& getObjectInstanceHandle() const noexcept
  { return _objectInstanceHandle; }

  void setAttributeHandle(const AttributeHandle& value) noexcept
  { _attributeHandle = value; }
  void setAttributeHandle(AttributeHandle&& value) noexcept
  { _attributeHandle = std::move(value); }
  AttributeHandle& getAttributeHandle() noexcept
  { return _attributeHandle; }
  const AttributeHandle& getAttributeHandle() const noexcept
  { return _attributeHandle; }

private:
  FederationHandle _federationHandle;
  ObjectInstanceHandle _objectInstanceHandle;
  AttributeHandle _attributeHandle;
};

class OPENRTI_API QueryAttributeOwnershipResponseMessage final : public AbstractMessage {
public:
  QueryAttributeOwnershipResponseMessage() noexcept {};
  QueryAttributeOwnershipResponseMessage(const QueryAttributeOwnershipResponseMessage&) = default;
  QueryAttributeOwnershipResponseMessage(QueryAttributeOwnershipResponseMessage&&) noexcept = default;
  virtual ~QueryAttributeOwnershipResponseMessage() noexcept = default;
  QueryAttributeOwnershipResponseMessage& operator=(const QueryAttributeOwnershipResponseMessage&) = default;
  QueryAttributeOwnershipResponseMessage& operator=(QueryAttributeOwnershipResponseMessage&&) noexcept = default;

  virtual const char* getTypeName() const noexcept override;
  static const int OpCode = 103;
  virtual void out(std::ostream& os) const override;
  virtual void out(std::ostream& os, ServerModel::Federation* federation) const override;
  virtual void dispatch(const AbstractMessageDispatcher& dispatcher) const override;
  virtual size_t messageSize() const noexcept override;

  bool operator==(const AbstractMessage& rhs) const noexcept override;
  bool operator==(const QueryAttributeOwnershipResponseMessage& rhs) const noexcept;
  bool operator<(const QueryAttributeOwnershipResponseMessage& rhs) const noexcept;
  bool operator!=(const QueryAttributeOwnershipResponseMessage& rhs) const noexcept
  { return !operator==(rhs); }
  bool operator>(const QueryAttributeOwnershipResponseMessage& rhs) const noexcept
  { return rhs.operator<(*this); }
  bool operator>=(const QueryAttributeOwnershipResponseMessage& rhs) const noexcept
  { return !operator<(rhs); }
  bool operator<=(const QueryAttributeOwnershipResponseMessage& rhs) const noexcept
  { return !operator>(rhs); }

  void setFederationHandle(const FederationHandle& value) noexcept
  { _federationHandle = value; }
  void setFederationHandle(FederationHandle&& value) noexcept
  { _federationHandle = std::move(value); }
  FederationHandle& getFederationHandle() noexcept
  { return _federationHandle; }
  const FederationHandle& getFederationHandle() const noexcept
  { return _federationHandle; }

  void setObjectInstanceHandle(const ObjectInstanceHandle& value) noexcept
  { _objectInstanceHandle = value; }
  void setObjectInstanceHandle(ObjectInstanceHandle&& value) noexcept
  { _objectInstanceHandle = std::move(value); }
  ObjectInstanceHandle& getObjectInstanceHandle() noexcept
  { return _objectInstanceHandle; }
  const ObjectInstanceHandle& getObjectInstanceHandle() const noexcept
  { return _objectInstanceHandle; }

  void setAttributeHandle(const AttributeHandle& value) noexcept
  { _attributeHandle = value; }
  void setAttributeHandle(AttributeHandle&& value) noexcept
  { _attributeHandle = std::move(value); }
  AttributeHandle& getAttributeHandle() noexcept
  { return _attributeHandle; }
  const AttributeHandle& getAttributeHandle() const noexcept
  { return _attributeHandle; }

  void setOwner(const FederateHandle& value) noexcept
  { _owner = value; }
  void setOwner(FederateHandle&& value) noexcept
  { _owner = std::move(value); }
  FederateHandle& getOwner() noexcept
  { return _owner; }
  const FederateHandle& getOwner() const noexcept
  { return _owner; }

private:
  FederationHandle _federationHandle;
  ObjectInstanceHandle _objectInstanceHandle;
  AttributeHandle _attributeHandle;
  FederateHandle _owner;
};


std::ostream& operator<<(std::ostream& os, const CallbackModel& value);
std::ostream& operator<<(std::ostream& os, const OrderType& value);
std::ostream& operator<<(std::ostream& os, const TransportationType& value);
std::ostream& operator<<(std::ostream& os, const SubscriptionType& value);
std::ostream& operator<<(std::ostream& os, const PublicationType& value);
std::ostream& operator<<(std::ostream& os, const ResignAction& value);
std::ostream& operator<<(std::ostream& os, const RestoreFailureReason& value);
std::ostream& operator<<(std::ostream& os, const RestoreStatus& value);
std::ostream& operator<<(std::ostream& os, const SaveFailureReason& value);
std::ostream& operator<<(std::ostream& os, const SaveStatus& value);
std::ostream& operator<<(std::ostream& os, const ServiceGroupIndicator& value);
std::ostream& operator<<(std::ostream& os, const LowerBoundTimeStampCommitType& value);
std::ostream& operator<<(std::ostream& os, const SwitchesType& value);
std::ostream& operator<<(std::ostream& os, const ArrayDataTypeEncoding& value);
std::ostream& operator<<(std::ostream& os, const Endianness& value);
std::ostream& operator<<(std::ostream& os, const AttributeHandleVector& value);
std::ostream& operator<<(std::ostream& os, const FederateHandleVector& value);
std::ostream& operator<<(std::ostream& os, const ParameterHandleVector& value);
std::ostream& operator<<(std::ostream& os, const DimensionHandleVector& value);
std::ostream& operator<<(std::ostream& os, const DimensionHandleSet& value);
std::ostream& operator<<(std::ostream& os, const ObjectInstanceHandleVector& value);
std::ostream& operator<<(std::ostream& os, const RegionHandleVector& value);
std::ostream& operator<<(std::ostream& os, const ModuleHandleVector& value);
std::ostream& operator<<(std::ostream& os, const StringVector& value);
std::ostream& operator<<(std::ostream& os, const StringSet& value);
std::ostream& operator<<(std::ostream& os, const FederateHandleBoolPair& value);
std::ostream& operator<<(std::ostream& os, const FederateHandleBoolPairVector& value);
std::ostream& operator<<(std::ostream& os, const RangeBoundsValue& value);
std::ostream& operator<<(std::ostream& os, const DimensionHandleRangeBoundsValuePair& value);
std::ostream& operator<<(std::ostream& os, const RegionValue& value);
std::ostream& operator<<(std::ostream& os, const RegionValueList& value);
std::ostream& operator<<(std::ostream& os, const RegionHandleDimensionHandleSetPair& value);
std::ostream& operator<<(std::ostream& os, const RegionHandleDimensionHandleSetPairVector& value);
std::ostream& operator<<(std::ostream& os, const RegionHandleSpaceHandlePair& value);
std::ostream& operator<<(std::ostream& os, const RegionHandleSpaceHandlePairVector& value);
std::ostream& operator<<(std::ostream& os, const RegionHandleRegionValuePair& value);
std::ostream& operator<<(std::ostream& os, const RegionHandleRegionValuePairVector& value);
std::ostream& operator<<(std::ostream& os, const InteractionClassHandleRegionValueListPair& value);
std::ostream& operator<<(std::ostream& os, const AttributeHandleRegionValueListPair& value);
std::ostream& operator<<(std::ostream& os, const AttributeState& value);
std::ostream& operator<<(std::ostream& os, const AttributeStateVector& value);
std::ostream& operator<<(std::ostream& os, const ParameterValue& value);
std::ostream& operator<<(std::ostream& os, const ParameterValueVector& value);
std::ostream& operator<<(std::ostream& os, const AttributeValue& value);
std::ostream& operator<<(std::ostream& os, const AttributeValueVector& value);
std::ostream& operator<<(std::ostream& os, const FederateHandleSaveStatusPair& value);
std::ostream& operator<<(std::ostream& os, const FederateHandleSaveStatusPairVector& value);
std::ostream& operator<<(std::ostream& os, const FederateHandleRestoreStatusPair& value);
std::ostream& operator<<(std::ostream& os, const FederateHandleRestoreStatusPairVector& value);
std::ostream& operator<<(std::ostream& os, const FederationExecutionInformation& value);
std::ostream& operator<<(std::ostream& os, const FederationExecutionInformationVector& value);
std::ostream& operator<<(std::ostream& os, const ObjectInstanceHandleNamePair& value);
std::ostream& operator<<(std::ostream& os, const ObjectInstanceHandleNamePairVector& value);
std::ostream& operator<<(std::ostream& os, const CreateFederationExecutionResponseType& value);
std::ostream& operator<<(std::ostream& os, const DestroyFederationExecutionResponseType& value);
std::ostream& operator<<(std::ostream& os, const JoinFederationExecutionResponseType& value);
std::ostream& operator<<(std::ostream& os, const RegisterFederationSynchronizationPointResponseType& value);
std::ostream& operator<<(std::ostream& os, const ConfigurationParameterMap& value);
std::ostream& operator<<(std::ostream& os, const FOMStringBasicDataType& value);
std::ostream& operator<<(std::ostream& os, const FOMStringBasicDataTypeList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringSimpleDataType& value);
std::ostream& operator<<(std::ostream& os, const FOMStringSimpleDataTypeList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringEnumerator& value);
std::ostream& operator<<(std::ostream& os, const FOMStringEnumeratorList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringEnumeratedDataType& value);
std::ostream& operator<<(std::ostream& os, const FOMStringEnumeratedDataTypeList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringArrayDataType& value);
std::ostream& operator<<(std::ostream& os, const FOMStringArrayDataTypeList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringArrayDataType2& value);
std::ostream& operator<<(std::ostream& os, const FOMStringArrayDataType2List& value);
std::ostream& operator<<(std::ostream& os, const FOMStringFixedRecordField& value);
std::ostream& operator<<(std::ostream& os, const FOMStringFixedRecordFieldList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringFixedRecordDataType& value);
std::ostream& operator<<(std::ostream& os, const FOMStringFixedRecordDataTypeList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringFixedRecordField2& value);
std::ostream& operator<<(std::ostream& os, const FOMStringFixedRecordField2List& value);
std::ostream& operator<<(std::ostream& os, const FOMStringFixedRecordDataType2& value);
std::ostream& operator<<(std::ostream& os, const FOMStringFixedRecordDataType2List& value);
std::ostream& operator<<(std::ostream& os, const FOMStringVariantRecordAlternative& value);
std::ostream& operator<<(std::ostream& os, const FOMStringVariantRecordAlternativeList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringVariantRecordDataType& value);
std::ostream& operator<<(std::ostream& os, const FOMStringVariantRecordDataTypeList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringVariantRecordAlternative2& value);
std::ostream& operator<<(std::ostream& os, const FOMStringVariantRecordAlternative2List& value);
std::ostream& operator<<(std::ostream& os, const FOMStringVariantRecordDataType2& value);
std::ostream& operator<<(std::ostream& os, const FOMStringVariantRecordDataType2List& value);
std::ostream& operator<<(std::ostream& os, const FOMStringTransportationType& value);
std::ostream& operator<<(std::ostream& os, const FOMStringTransportationTypeList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringDimension& value);
std::ostream& operator<<(std::ostream& os, const FOMStringDimensionList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringRoutingSpace& value);
std::ostream& operator<<(std::ostream& os, const FOMStringRoutingSpaceList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringParameter& value);
std::ostream& operator<<(std::ostream& os, const FOMStringParameterList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringInteractionClass& value);
std::ostream& operator<<(std::ostream& os, const FOMStringInteractionClassList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringAttribute& value);
std::ostream& operator<<(std::ostream& os, const FOMStringAttributeList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringObjectClass& value);
std::ostream& operator<<(std::ostream& os, const FOMStringObjectClassList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringUpdateRate& value);
std::ostream& operator<<(std::ostream& os, const FOMStringUpdateRateList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringSwitch& value);
std::ostream& operator<<(std::ostream& os, const FOMStringSwitchList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringModule& value);
std::ostream& operator<<(std::ostream& os, const FOMStringModuleList& value);
std::ostream& operator<<(std::ostream& os, const FOMStringModule2& value);
std::ostream& operator<<(std::ostream& os, const FOMStringModule2List& value);
std::ostream& operator<<(std::ostream& os, const FOMTransportationType& value);
std::ostream& operator<<(std::ostream& os, const FOMTransportationTypeList& value);
std::ostream& operator<<(std::ostream& os, const FOMDimension& value);
std::ostream& operator<<(std::ostream& os, const FOMDimensionList& value);
std::ostream& operator<<(std::ostream& os, const FOMRoutingSpace& value);
std::ostream& operator<<(std::ostream& os, const FOMRoutingSpaceList& value);
std::ostream& operator<<(std::ostream& os, const FOMParameter& value);
std::ostream& operator<<(std::ostream& os, const FOMParameterList& value);
std::ostream& operator<<(std::ostream& os, const FOMInteractionClass& value);
std::ostream& operator<<(std::ostream& os, const FOMInteractionClassList& value);
std::ostream& operator<<(std::ostream& os, const FOMAttribute& value);
std::ostream& operator<<(std::ostream& os, const FOMAttributeList& value);
std::ostream& operator<<(std::ostream& os, const FOMObjectClass& value);
std::ostream& operator<<(std::ostream& os, const FOMObjectClassList& value);
std::ostream& operator<<(std::ostream& os, const FOMUpdateRate& value);
std::ostream& operator<<(std::ostream& os, const FOMUpdateRateList& value);
std::ostream& operator<<(std::ostream& os, const FOMSwitch& value);
std::ostream& operator<<(std::ostream& os, const FOMSwitchList& value);
std::ostream& operator<<(std::ostream& os, const FOMBasicDataType& value);
std::ostream& operator<<(std::ostream& os, const FOMBasicDataTypeList& value);
std::ostream& operator<<(std::ostream& os, const FOMSimpleDataType& value);
std::ostream& operator<<(std::ostream& os, const FOMSimpleDataTypeList& value);
std::ostream& operator<<(std::ostream& os, const FOMEnumerator& value);
std::ostream& operator<<(std::ostream& os, const FOMEnumeratorList& value);
std::ostream& operator<<(std::ostream& os, const FOMEnumeratedDataType& value);
std::ostream& operator<<(std::ostream& os, const FOMEnumeratedDataTypeList& value);
std::ostream& operator<<(std::ostream& os, const FOMArrayDataType& value);
std::ostream& operator<<(std::ostream& os, const FOMArrayDataTypeList& value);
std::ostream& operator<<(std::ostream& os, const FOMFixedRecordField& value);
std::ostream& operator<<(std::ostream& os, const FOMFixedRecordFieldList& value);
std::ostream& operator<<(std::ostream& os, const FOMFixedRecordDataType& value);
std::ostream& operator<<(std::ostream& os, const FOMFixedRecordDataTypeList& value);
std::ostream& operator<<(std::ostream& os, const FOMVariantRecordAlternative& value);
std::ostream& operator<<(std::ostream& os, const FOMVariantRecordAlternativeList& value);
std::ostream& operator<<(std::ostream& os, const FOMVariantRecordDataType& value);
std::ostream& operator<<(std::ostream& os, const FOMVariantRecordDataTypeList& value);
std::ostream& operator<<(std::ostream& os, const FOMModule& value);
std::ostream& operator<<(std::ostream& os, const FOMModuleList& value);
std::ostream& operator<<(std::ostream& os, const FOMModule2& value);
std::ostream& operator<<(std::ostream& os, const FOMModule2List& value);
std::ostream& operator<<(std::ostream& os, const ConnectionLostMessage& value);
std::ostream& operator<<(std::ostream& os, const CreateFederationExecutionRequestMessage& value);
std::ostream& operator<<(std::ostream& os, const CreateFederationExecutionRequest2Message& value);
std::ostream& operator<<(std::ostream& os, const CreateFederationExecutionResponseMessage& value);
std::ostream& operator<<(std::ostream& os, const DestroyFederationExecutionRequestMessage& value);
std::ostream& operator<<(std::ostream& os, const DestroyFederationExecutionResponseMessage& value);
std::ostream& operator<<(std::ostream& os, const EnumerateFederationExecutionsRequestMessage& value);
std::ostream& operator<<(std::ostream& os, const EnumerateFederationExecutionsResponseMessage& value);
std::ostream& operator<<(std::ostream& os, const InsertFederationExecutionMessage& value);
std::ostream& operator<<(std::ostream& os, const ShutdownFederationExecutionMessage& value);
std::ostream& operator<<(std::ostream& os, const EraseFederationExecutionMessage& value);
std::ostream& operator<<(std::ostream& os, const ReleaseFederationHandleMessage& value);
std::ostream& operator<<(std::ostream& os, const InsertModulesMessage& value);
std::ostream& operator<<(std::ostream& os, const InsertModules2Message& value);
std::ostream& operator<<(std::ostream& os, const JoinFederationExecutionRequestMessage& value);
std::ostream& operator<<(std::ostream& os, const JoinFederationExecutionRequest2Message& value);
std::ostream& operator<<(std::ostream& os, const JoinFederationExecutionResponseMessage& value);
std::ostream& operator<<(std::ostream& os, const ResignFederationExecutionLeafRequestMessage& value);
std::ostream& operator<<(std::ostream& os, const ResignFederationExecutionRequestMessage& value);
std::ostream& operator<<(std::ostream& os, const JoinFederateNotifyMessage& value);
std::ostream& operator<<(std::ostream& os, const ResignFederateNotifyMessage& value);
std::ostream& operator<<(std::ostream& os, const ChangeAutomaticResignDirectiveMessage& value);
std::ostream& operator<<(std::ostream& os, const RegisterFederationSynchronizationPointMessage& value);
std::ostream& operator<<(std::ostream& os, const RegisterFederationSynchronizationPointResponseMessage& value);
std::ostream& operator<<(std::ostream& os, const AnnounceSynchronizationPointMessage& value);
std::ostream& operator<<(std::ostream& os, const SynchronizationPointAchievedMessage& value);
std::ostream& operator<<(std::ostream& os, const FederationSynchronizedMessage& value);
std::ostream& operator<<(std::ostream& os, const EnableTimeRegulationRequestMessage& value);
std::ostream& operator<<(std::ostream& os, const EnableTimeRegulationResponseMessage& value);
std::ostream& operator<<(std::ostream& os, const DisableTimeRegulationRequestMessage& value);
std::ostream& operator<<(std::ostream& os, const EnableTimeConstrainedNotifyMessage& value);
std::ostream& operator<<(std::ostream& os, const DisableTimeConstrainedNotifyMessage& value);
std::ostream& operator<<(std::ostream& os, const CommitLowerBoundTimeStampMessage& value);
std::ostream& operator<<(std::ostream& os, const CommitLowerBoundTimeStampResponseMessage& value);
std::ostream& operator<<(std::ostream& os, const LockedByNextMessageRequestMessage& value);
std::ostream& operator<<(std::ostream& os, const TimeConstrainedEnabledMessage& value);
std::ostream& operator<<(std::ostream& os, const TimeRegulationEnabledMessage& value);
std::ostream& operator<<(std::ostream& os, const TimeAdvanceGrantedMessage& value);
std::ostream& operator<<(std::ostream& os, const InsertRegionMessage& value);
std::ostream& operator<<(std::ostream& os, const CommitRegionMessage& value);
std::ostream& operator<<(std::ostream& os, const EraseRegionMessage& value);
std::ostream& operator<<(std::ostream& os, const ChangeInteractionClassPublicationMessage& value);
std::ostream& operator<<(std::ostream& os, const ChangeObjectClassPublicationMessage& value);
std::ostream& operator<<(std::ostream& os, const ChangeInteractionClassSubscriptionMessage& value);
std::ostream& operator<<(std::ostream& os, const ChangeObjectClassSubscriptionMessage& value);
std::ostream& operator<<(std::ostream& os, const ChangeObjectInstanceSubscriptionMessage& value);
std::ostream& operator<<(std::ostream& os, const RegistrationForObjectClassMessage& value);
std::ostream& operator<<(std::ostream& os, const AttributesInScopeMessage& value);
std::ostream& operator<<(std::ostream& os, const TurnUpdatesOnForInstanceMessage& value);
std::ostream& operator<<(std::ostream& os, const TurnInteractionsOnMessage& value);
std::ostream& operator<<(std::ostream& os, const InteractionMessage& value);
std::ostream& operator<<(std::ostream& os, const TimeStampedInteractionMessage& value);
std::ostream& operator<<(std::ostream& os, const ObjectInstanceHandlesRequestMessage& value);
std::ostream& operator<<(std::ostream& os, const ObjectInstanceHandlesResponseMessage& value);
std::ostream& operator<<(std::ostream& os, const ReleaseMultipleObjectInstanceNameHandlePairsMessage& value);
std::ostream& operator<<(std::ostream& os, const ReserveObjectInstanceNameRequestMessage& value);
std::ostream& operator<<(std::ostream& os, const ReserveObjectInstanceNameResponseMessage& value);
std::ostream& operator<<(std::ostream& os, const ReserveMultipleObjectInstanceNameRequestMessage& value);
std::ostream& operator<<(std::ostream& os, const ReserveMultipleObjectInstanceNameResponseMessage& value);
std::ostream& operator<<(std::ostream& os, const InsertObjectInstanceMessage& value);
std::ostream& operator<<(std::ostream& os, const DeleteObjectInstanceMessage& value);
std::ostream& operator<<(std::ostream& os, const TimeStampedDeleteObjectInstanceMessage& value);
std::ostream& operator<<(std::ostream& os, const AttributeUpdateMessage& value);
std::ostream& operator<<(std::ostream& os, const TimeStampedAttributeUpdateMessage& value);
std::ostream& operator<<(std::ostream& os, const RequestAttributeUpdateMessage& value);
std::ostream& operator<<(std::ostream& os, const RequestClassAttributeUpdateMessage& value);
std::ostream& operator<<(std::ostream& os, const QueryAttributeOwnershipRequestMessage& value);
std::ostream& operator<<(std::ostream& os, const QueryAttributeOwnershipResponseMessage& value);

template<typename T, typename ParentObjectClass>
std::ostream&
prettyprint(std::ostream& os, const T& value, ParentObjectClass*)
{
  os << value;
  return os;
}

std::ostream& prettyprint(std::ostream& os, const CallbackModel& value);
std::ostream& prettyprint(std::ostream& os, const OrderType& value);
std::ostream& prettyprint(std::ostream& os, const TransportationType& value);
std::ostream& prettyprint(std::ostream& os, const SubscriptionType& value);
std::ostream& prettyprint(std::ostream& os, const PublicationType& value);
std::ostream& prettyprint(std::ostream& os, const ResignAction& value);
std::ostream& prettyprint(std::ostream& os, const RestoreFailureReason& value);
std::ostream& prettyprint(std::ostream& os, const RestoreStatus& value);
std::ostream& prettyprint(std::ostream& os, const SaveFailureReason& value);
std::ostream& prettyprint(std::ostream& os, const SaveStatus& value);
std::ostream& prettyprint(std::ostream& os, const ServiceGroupIndicator& value);
std::ostream& prettyprint(std::ostream& os, const LowerBoundTimeStampCommitType& value);
std::ostream& prettyprint(std::ostream& os, const SwitchesType& value);
std::ostream& prettyprint(std::ostream& os, const ArrayDataTypeEncoding& value);
std::ostream& prettyprint(std::ostream& os, const Endianness& value);
std::ostream& prettyprint(std::ostream& os, const AttributeHandleVector& value);
std::ostream& prettyprint(std::ostream& os, const FederateHandleVector& value);
std::ostream& prettyprint(std::ostream& os, const ParameterHandleVector& value, ServerModel::InteractionClass* interactionClass);
std::ostream& prettyprint(std::ostream& os, const DimensionHandleVector& value);
std::ostream& prettyprint(std::ostream& os, const DimensionHandleSet& value);
std::ostream& prettyprint(std::ostream& os, const ObjectInstanceHandleVector& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const RegionHandleVector& value);
std::ostream& prettyprint(std::ostream& os, const ModuleHandleVector& value);
std::ostream& prettyprint(std::ostream& os, const StringVector& value);
std::ostream& prettyprint(std::ostream& os, const StringSet& value);
std::ostream& prettyprint(std::ostream& os, const FederateHandleBoolPair& value);
std::ostream& prettyprint(std::ostream& os, const FederateHandleBoolPairVector& value);
std::ostream& prettyprint(std::ostream& os, const RangeBoundsValue& value);
std::ostream& prettyprint(std::ostream& os, const DimensionHandleRangeBoundsValuePair& value);
std::ostream& prettyprint(std::ostream& os, const RegionValue& value);
std::ostream& prettyprint(std::ostream& os, const RegionValueList& value);
std::ostream& prettyprint(std::ostream& os, const RegionHandleDimensionHandleSetPair& value);
std::ostream& prettyprint(std::ostream& os, const RegionHandleDimensionHandleSetPairVector& value);
std::ostream& prettyprint(std::ostream& os, const RegionHandleSpaceHandlePair& value);
std::ostream& prettyprint(std::ostream& os, const RegionHandleSpaceHandlePairVector& value);
std::ostream& prettyprint(std::ostream& os, const RegionHandleRegionValuePair& value);
std::ostream& prettyprint(std::ostream& os, const RegionHandleRegionValuePairVector& value);
std::ostream& prettyprint(std::ostream& os, const InteractionClassHandleRegionValueListPair& value);
std::ostream& prettyprint(std::ostream& os, const AttributeHandleRegionValueListPair& value);
std::ostream& prettyprint(std::ostream& os, const AttributeState& value);
std::ostream& prettyprint(std::ostream& os, const AttributeStateVector& value);
std::ostream& prettyprint(std::ostream& os, const ParameterValue& value, ServerModel::InteractionClass* interactionClass);
std::ostream& prettyprint(std::ostream& os, const ParameterValueVector& value, ServerModel::InteractionClass* interactionClass);
std::ostream& prettyprint(std::ostream& os, const AttributeValue& value);
std::ostream& prettyprint(std::ostream& os, const AttributeValueVector& value);
std::ostream& prettyprint(std::ostream& os, const FederateHandleSaveStatusPair& value);
std::ostream& prettyprint(std::ostream& os, const FederateHandleSaveStatusPairVector& value);
std::ostream& prettyprint(std::ostream& os, const FederateHandleRestoreStatusPair& value);
std::ostream& prettyprint(std::ostream& os, const FederateHandleRestoreStatusPairVector& value);
std::ostream& prettyprint(std::ostream& os, const FederationExecutionInformation& value);
std::ostream& prettyprint(std::ostream& os, const FederationExecutionInformationVector& value);
std::ostream& prettyprint(std::ostream& os, const ObjectInstanceHandleNamePair& value);
std::ostream& prettyprint(std::ostream& os, const ObjectInstanceHandleNamePairVector& value);
std::ostream& prettyprint(std::ostream& os, const CreateFederationExecutionResponseType& value);
std::ostream& prettyprint(std::ostream& os, const DestroyFederationExecutionResponseType& value);
std::ostream& prettyprint(std::ostream& os, const JoinFederationExecutionResponseType& value);
std::ostream& prettyprint(std::ostream& os, const RegisterFederationSynchronizationPointResponseType& value);
std::ostream& prettyprint(std::ostream& os, const ConfigurationParameterMap& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringBasicDataType& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringBasicDataTypeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringSimpleDataType& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringSimpleDataTypeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringEnumerator& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringEnumeratorList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringEnumeratedDataType& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringEnumeratedDataTypeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringArrayDataType& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringArrayDataTypeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringArrayDataType2& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringArrayDataType2List& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringFixedRecordField& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringFixedRecordFieldList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringFixedRecordDataType& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringFixedRecordDataTypeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringFixedRecordField2& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringFixedRecordField2List& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringFixedRecordDataType2& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringFixedRecordDataType2List& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringVariantRecordAlternative& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringVariantRecordAlternativeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringVariantRecordDataType& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringVariantRecordDataTypeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringVariantRecordAlternative2& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringVariantRecordAlternative2List& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringVariantRecordDataType2& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringVariantRecordDataType2List& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringTransportationType& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringTransportationTypeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringDimension& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringDimensionList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringRoutingSpace& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringRoutingSpaceList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringParameter& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringParameterList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringInteractionClass& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringInteractionClassList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringAttribute& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringAttributeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringObjectClass& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringObjectClassList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringUpdateRate& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringUpdateRateList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringSwitch& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringSwitchList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringModule& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringModuleList& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringModule2& value);
std::ostream& prettyprint(std::ostream& os, const FOMStringModule2List& value);
std::ostream& prettyprint(std::ostream& os, const FOMTransportationType& value);
std::ostream& prettyprint(std::ostream& os, const FOMTransportationTypeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMDimension& value);
std::ostream& prettyprint(std::ostream& os, const FOMDimensionList& value);
std::ostream& prettyprint(std::ostream& os, const FOMRoutingSpace& value);
std::ostream& prettyprint(std::ostream& os, const FOMRoutingSpaceList& value);
std::ostream& prettyprint(std::ostream& os, const FOMParameter& value);
std::ostream& prettyprint(std::ostream& os, const FOMParameterList& value);
std::ostream& prettyprint(std::ostream& os, const FOMInteractionClass& value);
std::ostream& prettyprint(std::ostream& os, const FOMInteractionClassList& value);
std::ostream& prettyprint(std::ostream& os, const FOMAttribute& value);
std::ostream& prettyprint(std::ostream& os, const FOMAttributeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMObjectClass& value);
std::ostream& prettyprint(std::ostream& os, const FOMObjectClassList& value);
std::ostream& prettyprint(std::ostream& os, const FOMUpdateRate& value);
std::ostream& prettyprint(std::ostream& os, const FOMUpdateRateList& value);
std::ostream& prettyprint(std::ostream& os, const FOMSwitch& value);
std::ostream& prettyprint(std::ostream& os, const FOMSwitchList& value);
std::ostream& prettyprint(std::ostream& os, const FOMBasicDataType& value);
std::ostream& prettyprint(std::ostream& os, const FOMBasicDataTypeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMSimpleDataType& value);
std::ostream& prettyprint(std::ostream& os, const FOMSimpleDataTypeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMEnumerator& value);
std::ostream& prettyprint(std::ostream& os, const FOMEnumeratorList& value);
std::ostream& prettyprint(std::ostream& os, const FOMEnumeratedDataType& value);
std::ostream& prettyprint(std::ostream& os, const FOMEnumeratedDataTypeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMArrayDataType& value);
std::ostream& prettyprint(std::ostream& os, const FOMArrayDataTypeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMFixedRecordField& value);
std::ostream& prettyprint(std::ostream& os, const FOMFixedRecordFieldList& value);
std::ostream& prettyprint(std::ostream& os, const FOMFixedRecordDataType& value);
std::ostream& prettyprint(std::ostream& os, const FOMFixedRecordDataTypeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMVariantRecordAlternative& value);
std::ostream& prettyprint(std::ostream& os, const FOMVariantRecordAlternativeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMVariantRecordDataType& value);
std::ostream& prettyprint(std::ostream& os, const FOMVariantRecordDataTypeList& value);
std::ostream& prettyprint(std::ostream& os, const FOMModule& value);
std::ostream& prettyprint(std::ostream& os, const FOMModuleList& value);
std::ostream& prettyprint(std::ostream& os, const FOMModule2& value);
std::ostream& prettyprint(std::ostream& os, const FOMModule2List& value);
std::ostream& prettyprint(std::ostream& os, const ConnectionLostMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const CreateFederationExecutionRequestMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const CreateFederationExecutionRequest2Message& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const CreateFederationExecutionResponseMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const DestroyFederationExecutionRequestMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const DestroyFederationExecutionResponseMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const EnumerateFederationExecutionsRequestMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const EnumerateFederationExecutionsResponseMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const InsertFederationExecutionMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ShutdownFederationExecutionMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const EraseFederationExecutionMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ReleaseFederationHandleMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const InsertModulesMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const InsertModules2Message& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const JoinFederationExecutionRequestMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const JoinFederationExecutionRequest2Message& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const JoinFederationExecutionResponseMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ResignFederationExecutionLeafRequestMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ResignFederationExecutionRequestMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const JoinFederateNotifyMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ResignFederateNotifyMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ChangeAutomaticResignDirectiveMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const RegisterFederationSynchronizationPointMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const RegisterFederationSynchronizationPointResponseMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const AnnounceSynchronizationPointMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const SynchronizationPointAchievedMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const FederationSynchronizedMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const EnableTimeRegulationRequestMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const EnableTimeRegulationResponseMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const DisableTimeRegulationRequestMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const EnableTimeConstrainedNotifyMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const DisableTimeConstrainedNotifyMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const CommitLowerBoundTimeStampMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const CommitLowerBoundTimeStampResponseMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const LockedByNextMessageRequestMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const TimeConstrainedEnabledMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const TimeRegulationEnabledMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const TimeAdvanceGrantedMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const InsertRegionMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const CommitRegionMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const EraseRegionMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ChangeInteractionClassPublicationMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ChangeObjectClassPublicationMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ChangeInteractionClassSubscriptionMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ChangeObjectClassSubscriptionMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ChangeObjectInstanceSubscriptionMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const RegistrationForObjectClassMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const AttributesInScopeMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const TurnUpdatesOnForInstanceMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const TurnInteractionsOnMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const InteractionMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const TimeStampedInteractionMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ObjectInstanceHandlesRequestMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ObjectInstanceHandlesResponseMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ReleaseMultipleObjectInstanceNameHandlePairsMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ReserveObjectInstanceNameRequestMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ReserveObjectInstanceNameResponseMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ReserveMultipleObjectInstanceNameRequestMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const ReserveMultipleObjectInstanceNameResponseMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const InsertObjectInstanceMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const DeleteObjectInstanceMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const TimeStampedDeleteObjectInstanceMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const AttributeUpdateMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const TimeStampedAttributeUpdateMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const RequestAttributeUpdateMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const RequestClassAttributeUpdateMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const QueryAttributeOwnershipRequestMessage& value, ServerModel::Federation* federation);
std::ostream& prettyprint(std::ostream& os, const QueryAttributeOwnershipResponseMessage& value, ServerModel::Federation* federation);

// StructDataType RangeBoundsValue
inline std::string to_string(const RangeBoundsValue& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType AttributeState
inline std::string to_string(const AttributeState& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType ParameterValue
inline std::string to_string(const ParameterValue& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType AttributeValue
inline std::string to_string(const AttributeValue& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FederationExecutionInformation
inline std::string to_string(const FederationExecutionInformation& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringBasicDataType
inline std::string to_string(const FOMStringBasicDataType& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringSimpleDataType
inline std::string to_string(const FOMStringSimpleDataType& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringEnumerator
inline std::string to_string(const FOMStringEnumerator& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringEnumeratedDataType
inline std::string to_string(const FOMStringEnumeratedDataType& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringArrayDataType
inline std::string to_string(const FOMStringArrayDataType& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringArrayDataType2
inline std::string to_string(const FOMStringArrayDataType2& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringFixedRecordField
inline std::string to_string(const FOMStringFixedRecordField& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringFixedRecordDataType
inline std::string to_string(const FOMStringFixedRecordDataType& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringFixedRecordField2
inline std::string to_string(const FOMStringFixedRecordField2& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringFixedRecordDataType2
inline std::string to_string(const FOMStringFixedRecordDataType2& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringVariantRecordAlternative
inline std::string to_string(const FOMStringVariantRecordAlternative& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringVariantRecordDataType
inline std::string to_string(const FOMStringVariantRecordDataType& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringVariantRecordAlternative2
inline std::string to_string(const FOMStringVariantRecordAlternative2& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringVariantRecordDataType2
inline std::string to_string(const FOMStringVariantRecordDataType2& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringTransportationType
inline std::string to_string(const FOMStringTransportationType& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringDimension
inline std::string to_string(const FOMStringDimension& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringRoutingSpace
inline std::string to_string(const FOMStringRoutingSpace& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringParameter
inline std::string to_string(const FOMStringParameter& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringInteractionClass
inline std::string to_string(const FOMStringInteractionClass& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringAttribute
inline std::string to_string(const FOMStringAttribute& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringObjectClass
inline std::string to_string(const FOMStringObjectClass& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringUpdateRate
inline std::string to_string(const FOMStringUpdateRate& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringSwitch
inline std::string to_string(const FOMStringSwitch& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringModule
inline std::string to_string(const FOMStringModule& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMStringModule2
inline std::string to_string(const FOMStringModule2& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMTransportationType
inline std::string to_string(const FOMTransportationType& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMDimension
inline std::string to_string(const FOMDimension& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMRoutingSpace
inline std::string to_string(const FOMRoutingSpace& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMParameter
inline std::string to_string(const FOMParameter& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMInteractionClass
inline std::string to_string(const FOMInteractionClass& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMAttribute
inline std::string to_string(const FOMAttribute& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMObjectClass
inline std::string to_string(const FOMObjectClass& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMUpdateRate
inline std::string to_string(const FOMUpdateRate& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMSwitch
inline std::string to_string(const FOMSwitch& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMBasicDataType
inline std::string to_string(const FOMBasicDataType& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMSimpleDataType
inline std::string to_string(const FOMSimpleDataType& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMEnumerator
inline std::string to_string(const FOMEnumerator& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMEnumeratedDataType
inline std::string to_string(const FOMEnumeratedDataType& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMArrayDataType
inline std::string to_string(const FOMArrayDataType& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMFixedRecordField
inline std::string to_string(const FOMFixedRecordField& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMFixedRecordDataType
inline std::string to_string(const FOMFixedRecordDataType& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMVariantRecordAlternative
inline std::string to_string(const FOMVariantRecordAlternative& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMVariantRecordDataType
inline std::string to_string(const FOMVariantRecordDataType& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMModule
inline std::string to_string(const FOMModule& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}

// StructDataType FOMModule2
inline std::string to_string(const FOMModule2& value)
{
    std::ostringstream out;
    out << value;
    return out.str();
}


inline constexpr size_t byteSize(const CallbackModel& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const OrderType& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const TransportationType& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const SubscriptionType& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const PublicationType& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const ResignAction& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const RestoreFailureReason& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const RestoreStatus& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const SaveFailureReason& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const SaveStatus& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const ServiceGroupIndicator& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const LowerBoundTimeStampCommitType& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const SwitchesType& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const ArrayDataTypeEncoding& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const Endianness& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline size_t byteSize(const AttributeHandleVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FederateHandleVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const ParameterHandleVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const DimensionHandleVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const DimensionHandleSet& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const ObjectInstanceHandleVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const RegionHandleVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const ModuleHandleVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const StringVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const StringSet& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FederateHandleBoolPair& value) noexcept
{
  return byteSize(value.first) + byteSize(value.second);
}

inline size_t byteSize(const FederateHandleBoolPairVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const RangeBoundsValue& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getLowerBound());
  result += byteSize(value.getUpperBound());
  return result;
}

inline size_t byteSize(const DimensionHandleRangeBoundsValuePair& value) noexcept
{
  return byteSize(value.first) + byteSize(value.second);
}

inline size_t byteSize(const RegionValue& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const RegionValueList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const RegionHandleDimensionHandleSetPair& value) noexcept
{
  return byteSize(value.first) + byteSize(value.second);
}

inline size_t byteSize(const RegionHandleDimensionHandleSetPairVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const RegionHandleSpaceHandlePair& value) noexcept
{
  return byteSize(value.first) + byteSize(value.second);
}

inline size_t byteSize(const RegionHandleSpaceHandlePairVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const RegionHandleRegionValuePair& value) noexcept
{
  return byteSize(value.first) + byteSize(value.second);
}

inline size_t byteSize(const RegionHandleRegionValuePairVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const InteractionClassHandleRegionValueListPair& value) noexcept
{
  return byteSize(value.first) + byteSize(value.second);
}

inline size_t byteSize(const AttributeHandleRegionValueListPair& value) noexcept
{
  return byteSize(value.first) + byteSize(value.second);
}

inline size_t byteSize(const AttributeState& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getAttributeHandle());
  result += byteSize(value.getOwnerFederate());
  return result;
}

inline size_t byteSize(const AttributeStateVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const ParameterValue& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getParameterHandle());
  result += byteSize(value.getValue());
  return result;
}

inline size_t byteSize(const ParameterValueVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const AttributeValue& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getAttributeHandle());
  result += byteSize(value.getValue());
  return result;
}

inline size_t byteSize(const AttributeValueVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FederateHandleSaveStatusPair& value) noexcept
{
  return byteSize(value.first) + byteSize(value.second);
}

inline size_t byteSize(const FederateHandleSaveStatusPairVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FederateHandleRestoreStatusPair& value) noexcept
{
  return byteSize(value.first) + byteSize(value.second);
}

inline size_t byteSize(const FederateHandleRestoreStatusPairVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FederationExecutionInformation& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getFederationExecutionName());
  result += byteSize(value.getLogicalTimeFactoryName());
  return result;
}

inline size_t byteSize(const FederationExecutionInformationVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const ObjectInstanceHandleNamePair& value) noexcept
{
  return byteSize(value.first) + byteSize(value.second);
}

inline size_t byteSize(const ObjectInstanceHandleNamePairVector& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline constexpr size_t byteSize(const CreateFederationExecutionResponseType& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const DestroyFederationExecutionResponseType& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const JoinFederationExecutionResponseType& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline constexpr size_t byteSize(const RegisterFederationSynchronizationPointResponseType& value) noexcept
{
 return sizeof(value); // sizeof()
}

inline size_t byteSize(const ConfigurationParameterMap& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item.first);
    result += byteSize(item.second);
  }
  return result;
}

inline size_t byteSize(const FOMStringBasicDataType& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getSize());
  result += byteSize(value.getEndian());
  return result;
}

inline size_t byteSize(const FOMStringBasicDataTypeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringSimpleDataType& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getRepresentation());
  return result;
}

inline size_t byteSize(const FOMStringSimpleDataTypeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringEnumerator& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getValue());
  return result;
}

inline size_t byteSize(const FOMStringEnumeratorList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringEnumeratedDataType& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getRepresentation());
  result += byteSize(value.getEnumerators());
  return result;
}

inline size_t byteSize(const FOMStringEnumeratedDataTypeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringArrayDataType& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDataType());
  result += byteSize(value.getCardinality());
  result += byteSize(value.getEncoding());
  return result;
}

inline size_t byteSize(const FOMStringArrayDataTypeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringArrayDataType2& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDataType());
  result += byteSize(value.getCardinality());
  result += byteSize(value.getEncoding());
  return result;
}

inline size_t byteSize(const FOMStringArrayDataType2List& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringFixedRecordField& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDataType());
  return result;
}

inline size_t byteSize(const FOMStringFixedRecordFieldList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringFixedRecordDataType& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getEncoding());
  result += byteSize(value.getFields());
  return result;
}

inline size_t byteSize(const FOMStringFixedRecordDataTypeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringFixedRecordField2& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDataType());
  result += byteSize(value.getVersion());
  return result;
}

inline size_t byteSize(const FOMStringFixedRecordField2List& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringFixedRecordDataType2& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getEncoding());
  result += byteSize(value.getInclude());
  result += byteSize(value.getVersion());
  result += byteSize(value.getFields());
  return result;
}

inline size_t byteSize(const FOMStringFixedRecordDataType2List& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringVariantRecordAlternative& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getEnumerator());
  result += byteSize(value.getName());
  result += byteSize(value.getDataType());
  return result;
}

inline size_t byteSize(const FOMStringVariantRecordAlternativeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringVariantRecordDataType& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDiscriminant());
  result += byteSize(value.getDataType());
  result += byteSize(value.getAlternatives());
  result += byteSize(value.getEncoding());
  return result;
}

inline size_t byteSize(const FOMStringVariantRecordDataTypeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringVariantRecordAlternative2& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getEnumerator());
  result += byteSize(value.getName());
  result += byteSize(value.getDataType());
  return result;
}

inline size_t byteSize(const FOMStringVariantRecordAlternative2List& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringVariantRecordDataType2& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDiscriminant());
  result += byteSize(value.getDataType());
  result += byteSize(value.getAlternatives());
  result += byteSize(value.getEncoding());
  return result;
}

inline size_t byteSize(const FOMStringVariantRecordDataType2List& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringTransportationType& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  return result;
}

inline size_t byteSize(const FOMStringTransportationTypeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringDimension& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getUpperBound());
  return result;
}

inline size_t byteSize(const FOMStringDimensionList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringRoutingSpace& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDimensionSet());
  return result;
}

inline size_t byteSize(const FOMStringRoutingSpaceList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringParameter& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDataType());
  return result;
}

inline size_t byteSize(const FOMStringParameterList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringInteractionClass& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getOrderType());
  result += byteSize(value.getTransportationType());
  result += byteSize(value.getRoutingSpace());
  result += byteSize(value.getDimensionSet());
  result += byteSize(value.getParameterList());
  return result;
}

inline size_t byteSize(const FOMStringInteractionClassList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringAttribute& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDataType());
  result += byteSize(value.getOrderType());
  result += byteSize(value.getTransportationType());
  result += byteSize(value.getRoutingSpace());
  result += byteSize(value.getDimensionSet());
  return result;
}

inline size_t byteSize(const FOMStringAttributeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringObjectClass& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getAttributeList());
  return result;
}

inline size_t byteSize(const FOMStringObjectClassList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringUpdateRate& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getRate());
  return result;
}

inline size_t byteSize(const FOMStringUpdateRateList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringSwitch& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getSwitchesType());
  result += byteSize(value.getEnabled());
  return result;
}

inline size_t byteSize(const FOMStringSwitchList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringModule& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getDesignator());
  result += byteSize(value.getTransportationTypeList());
  result += byteSize(value.getDimensionList());
  result += byteSize(value.getRoutingSpaceList());
  result += byteSize(value.getInteractionClassList());
  result += byteSize(value.getObjectClassList());
  result += byteSize(value.getUpdateRateList());
  result += byteSize(value.getSwitchList());
  result += byteSize(value.getSimpleDataTypeList());
  result += byteSize(value.getEnumeratedDataTypeList());
  result += byteSize(value.getArrayDataTypeList());
  result += byteSize(value.getFixedRecordDataTypeList());
  result += byteSize(value.getVariantRecordDataTypeList());
  result += byteSize(value.getArtificialInteractionRoot());
  result += byteSize(value.getArtificialObjectRoot());
  return result;
}

inline size_t byteSize(const FOMStringModuleList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMStringModule2& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getDesignator());
  result += byteSize(value.getTransportationTypeList());
  result += byteSize(value.getDimensionList());
  result += byteSize(value.getRoutingSpaceList());
  result += byteSize(value.getInteractionClassList());
  result += byteSize(value.getObjectClassList());
  result += byteSize(value.getUpdateRateList());
  result += byteSize(value.getSwitchList());
  result += byteSize(value.getBasicDataTypeList());
  result += byteSize(value.getSimpleDataTypeList());
  result += byteSize(value.getEnumeratedDataTypeList());
  result += byteSize(value.getArrayDataTypeList());
  result += byteSize(value.getFixedRecordDataTypeList());
  result += byteSize(value.getVariantRecordDataTypeList());
  result += byteSize(value.getArtificialInteractionRoot());
  result += byteSize(value.getArtificialObjectRoot());
  return result;
}

inline size_t byteSize(const FOMStringModule2List& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMTransportationType& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getTransportationType());
  return result;
}

inline size_t byteSize(const FOMTransportationTypeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMDimension& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDimensionHandle());
  result += byteSize(value.getUpperBound());
  return result;
}

inline size_t byteSize(const FOMDimensionList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMRoutingSpace& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getSpaceHandle());
  result += byteSize(value.getDimensionHandleSet());
  return result;
}

inline size_t byteSize(const FOMRoutingSpaceList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMParameter& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDataType());
  result += byteSize(value.getParameterHandle());
  return result;
}

inline size_t byteSize(const FOMParameterList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMInteractionClass& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getInteractionClassHandle());
  result += byteSize(value.getParentInteractionClassHandle());
  result += byteSize(value.getOrderType());
  result += byteSize(value.getTransportationType());
  result += byteSize(value.getDimensionHandleSet());
  result += byteSize(value.getParameterList());
  return result;
}

inline size_t byteSize(const FOMInteractionClassList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMAttribute& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDataType());
  result += byteSize(value.getAttributeHandle());
  result += byteSize(value.getOrderType());
  result += byteSize(value.getTransportationType());
  result += byteSize(value.getDimensionHandleSet());
  return result;
}

inline size_t byteSize(const FOMAttributeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMObjectClass& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getObjectClassHandle());
  result += byteSize(value.getParentObjectClassHandle());
  result += byteSize(value.getAttributeList());
  return result;
}

inline size_t byteSize(const FOMObjectClassList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMUpdateRate& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getUpdateRateHandle());
  result += byteSize(value.getRate());
  return result;
}

inline size_t byteSize(const FOMUpdateRateList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMSwitch& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getSwitchesType());
  result += byteSize(value.getEnabled());
  return result;
}

inline size_t byteSize(const FOMSwitchList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMBasicDataType& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getSize());
  result += byteSize(value.getEndian());
  result += byteSize(value.getHandle());
  return result;
}

inline size_t byteSize(const FOMBasicDataTypeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMSimpleDataType& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getRepresentation());
  result += byteSize(value.getHandle());
  return result;
}

inline size_t byteSize(const FOMSimpleDataTypeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMEnumerator& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getValue());
  return result;
}

inline size_t byteSize(const FOMEnumeratorList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMEnumeratedDataType& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getRepresentation());
  result += byteSize(value.getEnumerators());
  result += byteSize(value.getHandle());
  return result;
}

inline size_t byteSize(const FOMEnumeratedDataTypeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMArrayDataType& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDataType());
  result += byteSize(value.getCardinality());
  result += byteSize(value.getEncoding());
  result += byteSize(value.getHandle());
  return result;
}

inline size_t byteSize(const FOMArrayDataTypeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMFixedRecordField& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDataType());
  result += byteSize(value.getVersion());
  return result;
}

inline size_t byteSize(const FOMFixedRecordFieldList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMFixedRecordDataType& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getEncoding());
  result += byteSize(value.getInclude());
  result += byteSize(value.getVersion());
  result += byteSize(value.getFields());
  result += byteSize(value.getHandle());
  return result;
}

inline size_t byteSize(const FOMFixedRecordDataTypeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMVariantRecordAlternative& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getEnumerator());
  result += byteSize(value.getName());
  result += byteSize(value.getDataType());
  return result;
}

inline size_t byteSize(const FOMVariantRecordAlternativeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMVariantRecordDataType& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getName());
  result += byteSize(value.getDiscriminant());
  result += byteSize(value.getDataType());
  result += byteSize(value.getAlternatives());
  result += byteSize(value.getEncoding());
  result += byteSize(value.getHandle());
  return result;
}

inline size_t byteSize(const FOMVariantRecordDataTypeList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMModule& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getModuleHandle());
  result += byteSize(value.getTransportationTypeList());
  result += byteSize(value.getDimensionList());
  result += byteSize(value.getRoutingSpaceList());
  result += byteSize(value.getInteractionClassList());
  result += byteSize(value.getObjectClassList());
  result += byteSize(value.getUpdateRateList());
  result += byteSize(value.getSwitchList());
  result += byteSize(value.getArtificialInteractionRoot());
  result += byteSize(value.getArtificialObjectRoot());
  result += byteSize(value.getDesignator());
  return result;
}

inline size_t byteSize(const FOMModuleList& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const FOMModule2& value) noexcept
{
  size_t result = 0;
  result += byteSize(value.getBasicDataTypeList());
  result += byteSize(value.getSimpleDataTypeList());
  result += byteSize(value.getEnumeratedDataTypeList());
  result += byteSize(value.getArrayDataTypeList());
  result += byteSize(value.getFixedRecordDataTypeList());
  result += byteSize(value.getVariantRecordDataTypeList());
  return result;
}

inline size_t byteSize(const FOMModule2List& value) noexcept
{
  size_t result = 0;
  for (auto& item : value)
  {
    result += byteSize(item);
  }
  return result;
}

inline size_t byteSize(const ConnectionLostMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFaultDescription());
  return result;
}

inline size_t byteSize(const CreateFederationExecutionRequestMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationExecution());
  result += byteSize(value.getLogicalTimeFactoryName());
  result += byteSize(value.getFOMStringModuleList());
  return result;
}

inline size_t byteSize(const CreateFederationExecutionRequest2Message& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationExecution());
  result += byteSize(value.getLogicalTimeFactoryName());
  result += byteSize(value.getFOMStringModuleList());
  return result;
}

inline size_t byteSize(const CreateFederationExecutionResponseMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getCreateFederationExecutionResponseType());
  result += byteSize(value.getExceptionString());
  return result;
}

inline size_t byteSize(const DestroyFederationExecutionRequestMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationExecution());
  return result;
}

inline size_t byteSize(const DestroyFederationExecutionResponseMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getDestroyFederationExecutionResponseType());
  return result;
}

inline size_t byteSize(const EnumerateFederationExecutionsRequestMessage&) noexcept
{
  size_t result = sizeof(AbstractMessage);
  return result;
}

inline size_t byteSize(const EnumerateFederationExecutionsResponseMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationExecutionInformationVector());
  return result;
}

inline size_t byteSize(const InsertFederationExecutionMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederationName());
  result += byteSize(value.getLogicalTimeFactoryName());
  result += byteSize(value.getConfigurationParameterMap());
  return result;
}

inline size_t byteSize(const ShutdownFederationExecutionMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  return result;
}

inline size_t byteSize(const EraseFederationExecutionMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  return result;
}

inline size_t byteSize(const ReleaseFederationHandleMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  return result;
}

inline size_t byteSize(const InsertModulesMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFOMModuleList());
  return result;
}

inline size_t byteSize(const InsertModules2Message& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFOMModule2List());
  return result;
}

inline size_t byteSize(const JoinFederationExecutionRequestMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationExecution());
  result += byteSize(value.getFederateType());
  result += byteSize(value.getFederateName());
  result += byteSize(value.getFOMStringModuleList());
  result += byteSize(value.getConfigurationParameterMap());
  result += byteSize(value.getIsInternal());
  return result;
}

inline size_t byteSize(const JoinFederationExecutionRequest2Message& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationExecution());
  result += byteSize(value.getFederateType());
  result += byteSize(value.getFederateName());
  result += byteSize(value.getFOMStringModuleList());
  result += byteSize(value.getConfigurationParameterMap());
  result += byteSize(value.getIsInternal());
  return result;
}

inline size_t byteSize(const JoinFederationExecutionResponseMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getJoinFederationExecutionResponseType());
  result += byteSize(value.getExceptionString());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getFederateType());
  result += byteSize(value.getFederateName());
  return result;
}

inline size_t byteSize(const ResignFederationExecutionLeafRequestMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getResignAction());
  return result;
}

inline size_t byteSize(const ResignFederationExecutionRequestMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  return result;
}

inline size_t byteSize(const JoinFederateNotifyMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getFederateType());
  result += byteSize(value.getFederateName());
  result += byteSize(value.getIsInternal());
  return result;
}

inline size_t byteSize(const ResignFederateNotifyMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  return result;
}

inline size_t byteSize(const ChangeAutomaticResignDirectiveMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getResignAction());
  return result;
}

inline size_t byteSize(const RegisterFederationSynchronizationPointMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getLabel());
  result += byteSize(value.getTag());
  result += byteSize(value.getFederateHandleVector());
  return result;
}

inline size_t byteSize(const RegisterFederationSynchronizationPointResponseMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getLabel());
  result += byteSize(value.getRegisterFederationSynchronizationPointResponseType());
  return result;
}

inline size_t byteSize(const AnnounceSynchronizationPointMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getLabel());
  result += byteSize(value.getTag());
  result += byteSize(value.getAddJoiningFederates());
  result += byteSize(value.getFederateHandleVector());
  return result;
}

inline size_t byteSize(const SynchronizationPointAchievedMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getLabel());
  result += byteSize(value.getFederateHandleBoolPairVector());
  return result;
}

inline size_t byteSize(const FederationSynchronizedMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getLabel());
  result += byteSize(value.getFederateHandleBoolPairVector());
  return result;
}

inline size_t byteSize(const EnableTimeRegulationRequestMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getTimeStamp());
  result += byteSize(value.getCommitId());
  return result;
}

inline size_t byteSize(const EnableTimeRegulationResponseMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getRespondingFederateHandle());
  result += byteSize(value.getTimeStampValid());
  result += byteSize(value.getTimeStamp());
  return result;
}

inline size_t byteSize(const DisableTimeRegulationRequestMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  return result;
}

inline size_t byteSize(const EnableTimeConstrainedNotifyMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  return result;
}

inline size_t byteSize(const DisableTimeConstrainedNotifyMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  return result;
}

inline size_t byteSize(const CommitLowerBoundTimeStampMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getTimeStamp());
  result += byteSize(value.getCommitType());
  result += byteSize(value.getCommitId());
  return result;
}

inline size_t byteSize(const CommitLowerBoundTimeStampResponseMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getSendingFederateHandle());
  result += byteSize(value.getCommitId());
  return result;
}

inline size_t byteSize(const LockedByNextMessageRequestMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getSendingFederateHandle());
  result += byteSize(value.getLockedByNextMessage());
  return result;
}

inline size_t byteSize(const TimeConstrainedEnabledMessage&) noexcept
{
  size_t result = sizeof(AbstractMessage);
  return result;
}

inline size_t byteSize(const TimeRegulationEnabledMessage&) noexcept
{
  size_t result = sizeof(AbstractMessage);
  return result;
}

inline size_t byteSize(const TimeAdvanceGrantedMessage&) noexcept
{
  size_t result = sizeof(AbstractMessage);
  return result;
}

inline size_t byteSize(const InsertRegionMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getRegionHandleDimensionHandleSetPairVector());
  return result;
}

inline size_t byteSize(const CommitRegionMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getRegionHandleRegionValuePairVector());
  return result;
}

inline size_t byteSize(const EraseRegionMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getRegionHandleVector());
  return result;
}

inline size_t byteSize(const ChangeInteractionClassPublicationMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getPublicationType());
  result += byteSize(value.getInteractionClassHandle());
  return result;
}

inline size_t byteSize(const ChangeObjectClassPublicationMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getPublicationType());
  result += byteSize(value.getObjectClassHandle());
  result += byteSize(value.getAttributeHandles());
  return result;
}

inline size_t byteSize(const ChangeInteractionClassSubscriptionMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getSubscriptionType());
  result += byteSize(value.getInteractionClassHandle());
  result += byteSize(value.getParameterFilterValues());
  return result;
}

inline size_t byteSize(const ChangeObjectClassSubscriptionMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getSubscriptionType());
  result += byteSize(value.getObjectClassHandle());
  result += byteSize(value.getAttributeHandles());
  return result;
}

inline size_t byteSize(const ChangeObjectInstanceSubscriptionMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getSubscriptionType());
  result += byteSize(value.getObjectClassHandle());
  result += byteSize(value.getObjectInstanceHandle());
  return result;
}

inline size_t byteSize(const RegistrationForObjectClassMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getObjectClassHandle());
  result += byteSize(value.getStart());
  return result;
}

inline size_t byteSize(const AttributesInScopeMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getObjectInstanceHandle());
  result += byteSize(value.getAttributeHandles());
  result += byteSize(value.getInScope());
  return result;
}

inline size_t byteSize(const TurnUpdatesOnForInstanceMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getObjectInstanceHandle());
  result += byteSize(value.getAttributeHandles());
  result += byteSize(value.getUpdateRate());
  result += byteSize(value.getOn());
  return result;
}

inline size_t byteSize(const TurnInteractionsOnMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getInteractionClassHandle());
  result += byteSize(value.getOn());
  return result;
}

inline size_t byteSize(const InteractionMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getInteractionClassHandle());
  result += byteSize(value.getTransportationType());
  result += byteSize(value.getTag());
  result += byteSize(value.getParameterValues());
  return result;
}

inline size_t byteSize(const TimeStampedInteractionMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getInteractionClassHandle());
  result += byteSize(value.getOrderType());
  result += byteSize(value.getTransportationType());
  result += byteSize(value.getTag());
  result += byteSize(value.getTimeStamp());
  result += byteSize(value.getMessageRetractionHandle());
  result += byteSize(value.getParameterValues());
  return result;
}

inline size_t byteSize(const ObjectInstanceHandlesRequestMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getCount());
  return result;
}

inline size_t byteSize(const ObjectInstanceHandlesResponseMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getObjectInstanceHandleNamePairVector());
  return result;
}

inline size_t byteSize(const ReleaseMultipleObjectInstanceNameHandlePairsMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getObjectInstanceHandleVector());
  return result;
}

inline size_t byteSize(const ReserveObjectInstanceNameRequestMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getName());
  result += byteSize(value.getIsInternal());
  return result;
}

inline size_t byteSize(const ReserveObjectInstanceNameResponseMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getObjectInstanceHandleNamePair());
  result += byteSize(value.getSuccess());
  return result;
}

inline size_t byteSize(const ReserveMultipleObjectInstanceNameRequestMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getNameList());
  return result;
}

inline size_t byteSize(const ReserveMultipleObjectInstanceNameResponseMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getObjectInstanceHandleNamePairVector());
  result += byteSize(value.getSuccess());
  return result;
}

inline size_t byteSize(const InsertObjectInstanceMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getObjectClassHandle());
  result += byteSize(value.getObjectInstanceHandle());
  result += byteSize(value.getName());
  result += byteSize(value.getAttributeStateVector());
  return result;
}

inline size_t byteSize(const DeleteObjectInstanceMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getObjectInstanceHandle());
  result += byteSize(value.getTag());
  return result;
}

inline size_t byteSize(const TimeStampedDeleteObjectInstanceMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getObjectInstanceHandle());
  result += byteSize(value.getOrderType());
  result += byteSize(value.getTag());
  result += byteSize(value.getTimeStamp());
  result += byteSize(value.getMessageRetractionHandle());
  return result;
}

inline size_t byteSize(const AttributeUpdateMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getObjectInstanceHandle());
  result += byteSize(value.getTag());
  result += byteSize(value.getTransportationType());
  result += byteSize(value.getAttributeValues());
  return result;
}

inline size_t byteSize(const TimeStampedAttributeUpdateMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getFederateHandle());
  result += byteSize(value.getObjectInstanceHandle());
  result += byteSize(value.getTag());
  result += byteSize(value.getTimeStamp());
  result += byteSize(value.getMessageRetractionHandle());
  result += byteSize(value.getOrderType());
  result += byteSize(value.getTransportationType());
  result += byteSize(value.getAttributeValues());
  return result;
}

inline size_t byteSize(const RequestAttributeUpdateMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getObjectInstanceHandle());
  result += byteSize(value.getAttributeHandles());
  result += byteSize(value.getTag());
  return result;
}

inline size_t byteSize(const RequestClassAttributeUpdateMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getObjectClassHandle());
  result += byteSize(value.getAttributeHandles());
  result += byteSize(value.getTag());
  return result;
}

inline size_t byteSize(const QueryAttributeOwnershipRequestMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getObjectInstanceHandle());
  result += byteSize(value.getAttributeHandle());
  return result;
}

inline size_t byteSize(const QueryAttributeOwnershipResponseMessage& value) noexcept
{
  size_t result = sizeof(AbstractMessage);
  result += byteSize(value.getFederationHandle());
  result += byteSize(value.getObjectInstanceHandle());
  result += byteSize(value.getAttributeHandle());
  result += byteSize(value.getOwner());
  return result;
}

} // namespace OpenRTI

#endif
