/* -*-c++-*- OpenRTI - Copyright (C) 2009-2013 Mathias Froehlich
 *
 *
 * This file is part of OpenRTI.
 *
 * OpenRTI is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * OpenRTI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OpenRTI.  If not, see <http://www.gnu.org/licenses/>.
 *
 * This file is autogenerated by messagegen.py. Do not edit!
 *
 */


#include "DebugNew.h"
#include "Message.h"

#include <ostream>
#include "AbstractMessage.h"
#include "AbstractMessageDispatcher.h"
#include "StringUtils.h"
#include "ServerModel.h"

namespace OpenRTI {

const char*
ConnectionLostMessage::getTypeName() const noexcept
{
  return "ConnectionLostMessage";
}

void
ConnectionLostMessage::out(std::ostream& os) const
{
  os << "ConnectionLostMessage { ";
  os << "faultDescription: " << getFaultDescription();
  os << " }";
}

void
ConnectionLostMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ConnectionLostMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ConnectionLostMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFaultDescription());
  return result;
}

bool
ConnectionLostMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ConnectionLostMessage* message = dynamic_cast<const ConnectionLostMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ConnectionLostMessage::operator==(const ConnectionLostMessage& rhs) const noexcept
{
  if (getFaultDescription() != rhs.getFaultDescription()) return false;
  return true;
}

bool
ConnectionLostMessage::operator<(const ConnectionLostMessage& rhs) const noexcept
{
  if (getFaultDescription() < rhs.getFaultDescription()) return true;
  if (rhs.getFaultDescription() < getFaultDescription()) return false;
  return false;
}

const char*
CreateFederationExecutionRequestMessage::getTypeName() const noexcept
{
  return "CreateFederationExecutionRequestMessage";
}

void
CreateFederationExecutionRequestMessage::out(std::ostream& os) const
{
  os << "CreateFederationExecutionRequestMessage { ";
  os << "federationExecution: " << getFederationExecution();
  os << ", ";
  os << "logicalTimeFactoryName: " << getLogicalTimeFactoryName();
  os << ", ";
  os << "fOMStringModuleList: " << getFOMStringModuleList();
  os << " }";
}

void
CreateFederationExecutionRequestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
CreateFederationExecutionRequestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
CreateFederationExecutionRequestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationExecution());
  result += byteSize(getLogicalTimeFactoryName());
  result += byteSize(getFOMStringModuleList());
  return result;
}

bool
CreateFederationExecutionRequestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const CreateFederationExecutionRequestMessage* message = dynamic_cast<const CreateFederationExecutionRequestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
CreateFederationExecutionRequestMessage::operator==(const CreateFederationExecutionRequestMessage& rhs) const noexcept
{
  if (getFederationExecution() != rhs.getFederationExecution()) return false;
  if (getLogicalTimeFactoryName() != rhs.getLogicalTimeFactoryName()) return false;
  if (getFOMStringModuleList() != rhs.getFOMStringModuleList()) return false;
  return true;
}

bool
CreateFederationExecutionRequestMessage::operator<(const CreateFederationExecutionRequestMessage& rhs) const noexcept
{
  if (getFederationExecution() < rhs.getFederationExecution()) return true;
  if (rhs.getFederationExecution() < getFederationExecution()) return false;
  if (getLogicalTimeFactoryName() < rhs.getLogicalTimeFactoryName()) return true;
  if (rhs.getLogicalTimeFactoryName() < getLogicalTimeFactoryName()) return false;
  if (getFOMStringModuleList() < rhs.getFOMStringModuleList()) return true;
  if (rhs.getFOMStringModuleList() < getFOMStringModuleList()) return false;
  return false;
}

const char*
CreateFederationExecutionRequest2Message::getTypeName() const noexcept
{
  return "CreateFederationExecutionRequest2Message";
}

void
CreateFederationExecutionRequest2Message::out(std::ostream& os) const
{
  os << "CreateFederationExecutionRequest2Message { ";
  os << "federationExecution: " << getFederationExecution();
  os << ", ";
  os << "logicalTimeFactoryName: " << getLogicalTimeFactoryName();
  os << ", ";
  os << "fOMStringModuleList: " << getFOMStringModuleList();
  os << " }";
}

void
CreateFederationExecutionRequest2Message::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
CreateFederationExecutionRequest2Message::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
CreateFederationExecutionRequest2Message::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationExecution());
  result += byteSize(getLogicalTimeFactoryName());
  result += byteSize(getFOMStringModuleList());
  return result;
}

bool
CreateFederationExecutionRequest2Message::operator==(const AbstractMessage& rhs) const noexcept
{
  const CreateFederationExecutionRequest2Message* message = dynamic_cast<const CreateFederationExecutionRequest2Message*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
CreateFederationExecutionRequest2Message::operator==(const CreateFederationExecutionRequest2Message& rhs) const noexcept
{
  if (getFederationExecution() != rhs.getFederationExecution()) return false;
  if (getLogicalTimeFactoryName() != rhs.getLogicalTimeFactoryName()) return false;
  if (getFOMStringModuleList() != rhs.getFOMStringModuleList()) return false;
  return true;
}

bool
CreateFederationExecutionRequest2Message::operator<(const CreateFederationExecutionRequest2Message& rhs) const noexcept
{
  if (getFederationExecution() < rhs.getFederationExecution()) return true;
  if (rhs.getFederationExecution() < getFederationExecution()) return false;
  if (getLogicalTimeFactoryName() < rhs.getLogicalTimeFactoryName()) return true;
  if (rhs.getLogicalTimeFactoryName() < getLogicalTimeFactoryName()) return false;
  if (getFOMStringModuleList() < rhs.getFOMStringModuleList()) return true;
  if (rhs.getFOMStringModuleList() < getFOMStringModuleList()) return false;
  return false;
}

const char*
CreateFederationExecutionResponseMessage::getTypeName() const noexcept
{
  return "CreateFederationExecutionResponseMessage";
}

void
CreateFederationExecutionResponseMessage::out(std::ostream& os) const
{
  os << "CreateFederationExecutionResponseMessage { ";
  os << "createFederationExecutionResponseType: " << getCreateFederationExecutionResponseType();
  os << ", ";
  os << "exceptionString: " << getExceptionString();
  os << " }";
}

void
CreateFederationExecutionResponseMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
CreateFederationExecutionResponseMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
CreateFederationExecutionResponseMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getCreateFederationExecutionResponseType());
  result += byteSize(getExceptionString());
  return result;
}

bool
CreateFederationExecutionResponseMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const CreateFederationExecutionResponseMessage* message = dynamic_cast<const CreateFederationExecutionResponseMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
CreateFederationExecutionResponseMessage::operator==(const CreateFederationExecutionResponseMessage& rhs) const noexcept
{
  if (getCreateFederationExecutionResponseType() != rhs.getCreateFederationExecutionResponseType()) return false;
  if (getExceptionString() != rhs.getExceptionString()) return false;
  return true;
}

bool
CreateFederationExecutionResponseMessage::operator<(const CreateFederationExecutionResponseMessage& rhs) const noexcept
{
  if (getCreateFederationExecutionResponseType() < rhs.getCreateFederationExecutionResponseType()) return true;
  if (rhs.getCreateFederationExecutionResponseType() < getCreateFederationExecutionResponseType()) return false;
  if (getExceptionString() < rhs.getExceptionString()) return true;
  if (rhs.getExceptionString() < getExceptionString()) return false;
  return false;
}

const char*
DestroyFederationExecutionRequestMessage::getTypeName() const noexcept
{
  return "DestroyFederationExecutionRequestMessage";
}

void
DestroyFederationExecutionRequestMessage::out(std::ostream& os) const
{
  os << "DestroyFederationExecutionRequestMessage { ";
  os << "federationExecution: " << getFederationExecution();
  os << " }";
}

void
DestroyFederationExecutionRequestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
DestroyFederationExecutionRequestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
DestroyFederationExecutionRequestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationExecution());
  return result;
}

bool
DestroyFederationExecutionRequestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const DestroyFederationExecutionRequestMessage* message = dynamic_cast<const DestroyFederationExecutionRequestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
DestroyFederationExecutionRequestMessage::operator==(const DestroyFederationExecutionRequestMessage& rhs) const noexcept
{
  if (getFederationExecution() != rhs.getFederationExecution()) return false;
  return true;
}

bool
DestroyFederationExecutionRequestMessage::operator<(const DestroyFederationExecutionRequestMessage& rhs) const noexcept
{
  if (getFederationExecution() < rhs.getFederationExecution()) return true;
  if (rhs.getFederationExecution() < getFederationExecution()) return false;
  return false;
}

const char*
DestroyFederationExecutionResponseMessage::getTypeName() const noexcept
{
  return "DestroyFederationExecutionResponseMessage";
}

void
DestroyFederationExecutionResponseMessage::out(std::ostream& os) const
{
  os << "DestroyFederationExecutionResponseMessage { ";
  os << "destroyFederationExecutionResponseType: " << getDestroyFederationExecutionResponseType();
  os << " }";
}

void
DestroyFederationExecutionResponseMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
DestroyFederationExecutionResponseMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
DestroyFederationExecutionResponseMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getDestroyFederationExecutionResponseType());
  return result;
}

bool
DestroyFederationExecutionResponseMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const DestroyFederationExecutionResponseMessage* message = dynamic_cast<const DestroyFederationExecutionResponseMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
DestroyFederationExecutionResponseMessage::operator==(const DestroyFederationExecutionResponseMessage& rhs) const noexcept
{
  if (getDestroyFederationExecutionResponseType() != rhs.getDestroyFederationExecutionResponseType()) return false;
  return true;
}

bool
DestroyFederationExecutionResponseMessage::operator<(const DestroyFederationExecutionResponseMessage& rhs) const noexcept
{
  if (getDestroyFederationExecutionResponseType() < rhs.getDestroyFederationExecutionResponseType()) return true;
  if (rhs.getDestroyFederationExecutionResponseType() < getDestroyFederationExecutionResponseType()) return false;
  return false;
}

const char*
EnumerateFederationExecutionsRequestMessage::getTypeName() const noexcept
{
  return "EnumerateFederationExecutionsRequestMessage";
}

void
EnumerateFederationExecutionsRequestMessage::out(std::ostream& os) const
{
  os << "EnumerateFederationExecutionsRequestMessage { ";
  os << " }";
}

void
EnumerateFederationExecutionsRequestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
EnumerateFederationExecutionsRequestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
EnumerateFederationExecutionsRequestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  return result;
}

bool
EnumerateFederationExecutionsRequestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const EnumerateFederationExecutionsRequestMessage* message = dynamic_cast<const EnumerateFederationExecutionsRequestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
EnumerateFederationExecutionsRequestMessage::operator==(const EnumerateFederationExecutionsRequestMessage&) const noexcept
{
  return true;
}

bool
EnumerateFederationExecutionsRequestMessage::operator<(const EnumerateFederationExecutionsRequestMessage&) const noexcept
{
  return false;
}

const char*
EnumerateFederationExecutionsResponseMessage::getTypeName() const noexcept
{
  return "EnumerateFederationExecutionsResponseMessage";
}

void
EnumerateFederationExecutionsResponseMessage::out(std::ostream& os) const
{
  os << "EnumerateFederationExecutionsResponseMessage { ";
  os << "federationExecutionInformationVector: " << getFederationExecutionInformationVector();
  os << " }";
}

void
EnumerateFederationExecutionsResponseMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
EnumerateFederationExecutionsResponseMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
EnumerateFederationExecutionsResponseMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationExecutionInformationVector());
  return result;
}

bool
EnumerateFederationExecutionsResponseMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const EnumerateFederationExecutionsResponseMessage* message = dynamic_cast<const EnumerateFederationExecutionsResponseMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
EnumerateFederationExecutionsResponseMessage::operator==(const EnumerateFederationExecutionsResponseMessage& rhs) const noexcept
{
  if (getFederationExecutionInformationVector() != rhs.getFederationExecutionInformationVector()) return false;
  return true;
}

bool
EnumerateFederationExecutionsResponseMessage::operator<(const EnumerateFederationExecutionsResponseMessage& rhs) const noexcept
{
  if (getFederationExecutionInformationVector() < rhs.getFederationExecutionInformationVector()) return true;
  if (rhs.getFederationExecutionInformationVector() < getFederationExecutionInformationVector()) return false;
  return false;
}

const char*
InsertFederationExecutionMessage::getTypeName() const noexcept
{
  return "InsertFederationExecutionMessage";
}

void
InsertFederationExecutionMessage::out(std::ostream& os) const
{
  os << "InsertFederationExecutionMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "federationName: " << getFederationName();
  os << ", ";
  os << "logicalTimeFactoryName: " << getLogicalTimeFactoryName();
  os << ", ";
  os << "configurationParameterMap: " << getConfigurationParameterMap();
  os << " }";
}

void
InsertFederationExecutionMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
InsertFederationExecutionMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
InsertFederationExecutionMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederationName());
  result += byteSize(getLogicalTimeFactoryName());
  result += byteSize(getConfigurationParameterMap());
  return result;
}

bool
InsertFederationExecutionMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const InsertFederationExecutionMessage* message = dynamic_cast<const InsertFederationExecutionMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
InsertFederationExecutionMessage::operator==(const InsertFederationExecutionMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederationName() != rhs.getFederationName()) return false;
  if (getLogicalTimeFactoryName() != rhs.getLogicalTimeFactoryName()) return false;
  if (getConfigurationParameterMap() != rhs.getConfigurationParameterMap()) return false;
  return true;
}

bool
InsertFederationExecutionMessage::operator<(const InsertFederationExecutionMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederationName() < rhs.getFederationName()) return true;
  if (rhs.getFederationName() < getFederationName()) return false;
  if (getLogicalTimeFactoryName() < rhs.getLogicalTimeFactoryName()) return true;
  if (rhs.getLogicalTimeFactoryName() < getLogicalTimeFactoryName()) return false;
  if (getConfigurationParameterMap() < rhs.getConfigurationParameterMap()) return true;
  if (rhs.getConfigurationParameterMap() < getConfigurationParameterMap()) return false;
  return false;
}

const char*
ShutdownFederationExecutionMessage::getTypeName() const noexcept
{
  return "ShutdownFederationExecutionMessage";
}

void
ShutdownFederationExecutionMessage::out(std::ostream& os) const
{
  os << "ShutdownFederationExecutionMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << " }";
}

void
ShutdownFederationExecutionMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ShutdownFederationExecutionMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ShutdownFederationExecutionMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  return result;
}

bool
ShutdownFederationExecutionMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ShutdownFederationExecutionMessage* message = dynamic_cast<const ShutdownFederationExecutionMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ShutdownFederationExecutionMessage::operator==(const ShutdownFederationExecutionMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  return true;
}

bool
ShutdownFederationExecutionMessage::operator<(const ShutdownFederationExecutionMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  return false;
}

const char*
EraseFederationExecutionMessage::getTypeName() const noexcept
{
  return "EraseFederationExecutionMessage";
}

void
EraseFederationExecutionMessage::out(std::ostream& os) const
{
  os << "EraseFederationExecutionMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << " }";
}

void
EraseFederationExecutionMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
EraseFederationExecutionMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
EraseFederationExecutionMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  return result;
}

bool
EraseFederationExecutionMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const EraseFederationExecutionMessage* message = dynamic_cast<const EraseFederationExecutionMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
EraseFederationExecutionMessage::operator==(const EraseFederationExecutionMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  return true;
}

bool
EraseFederationExecutionMessage::operator<(const EraseFederationExecutionMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  return false;
}

const char*
ReleaseFederationHandleMessage::getTypeName() const noexcept
{
  return "ReleaseFederationHandleMessage";
}

void
ReleaseFederationHandleMessage::out(std::ostream& os) const
{
  os << "ReleaseFederationHandleMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << " }";
}

void
ReleaseFederationHandleMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ReleaseFederationHandleMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ReleaseFederationHandleMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  return result;
}

bool
ReleaseFederationHandleMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ReleaseFederationHandleMessage* message = dynamic_cast<const ReleaseFederationHandleMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ReleaseFederationHandleMessage::operator==(const ReleaseFederationHandleMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  return true;
}

bool
ReleaseFederationHandleMessage::operator<(const ReleaseFederationHandleMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  return false;
}

const char*
InsertModulesMessage::getTypeName() const noexcept
{
  return "InsertModulesMessage";
}

void
InsertModulesMessage::out(std::ostream& os) const
{
  os << "InsertModulesMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  // StructField fOMModuleList (hidden)
  //os << "fOMModuleList: " << getFOMModuleList();
  os << " }";
}

void
InsertModulesMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
InsertModulesMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
InsertModulesMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFOMModuleList());
  return result;
}

bool
InsertModulesMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const InsertModulesMessage* message = dynamic_cast<const InsertModulesMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
InsertModulesMessage::operator==(const InsertModulesMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFOMModuleList() != rhs.getFOMModuleList()) return false;
  return true;
}

bool
InsertModulesMessage::operator<(const InsertModulesMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFOMModuleList() < rhs.getFOMModuleList()) return true;
  if (rhs.getFOMModuleList() < getFOMModuleList()) return false;
  return false;
}

const char*
InsertModules2Message::getTypeName() const noexcept
{
  return "InsertModules2Message";
}

void
InsertModules2Message::out(std::ostream& os) const
{
  os << "InsertModules2Message { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  // StructField fOMModule2List (hidden)
  //os << "fOMModule2List: " << getFOMModule2List();
  os << " }";
}

void
InsertModules2Message::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
InsertModules2Message::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
InsertModules2Message::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFOMModule2List());
  return result;
}

bool
InsertModules2Message::operator==(const AbstractMessage& rhs) const noexcept
{
  const InsertModules2Message* message = dynamic_cast<const InsertModules2Message*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
InsertModules2Message::operator==(const InsertModules2Message& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFOMModule2List() != rhs.getFOMModule2List()) return false;
  return true;
}

bool
InsertModules2Message::operator<(const InsertModules2Message& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFOMModule2List() < rhs.getFOMModule2List()) return true;
  if (rhs.getFOMModule2List() < getFOMModule2List()) return false;
  return false;
}

const char*
JoinFederationExecutionRequestMessage::getTypeName() const noexcept
{
  return "JoinFederationExecutionRequestMessage";
}

void
JoinFederationExecutionRequestMessage::out(std::ostream& os) const
{
  os << "JoinFederationExecutionRequestMessage { ";
  os << "federationExecution: " << getFederationExecution();
  os << ", ";
  os << "federateType: " << getFederateType();
  os << ", ";
  os << "federateName: " << getFederateName();
  os << ", ";
  os << "fOMStringModuleList: " << getFOMStringModuleList();
  os << ", ";
  os << "configurationParameterMap: " << getConfigurationParameterMap();
  os << ", ";
  os << "isInternal: " << getIsInternal();
  os << " }";
}

void
JoinFederationExecutionRequestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
JoinFederationExecutionRequestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
JoinFederationExecutionRequestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationExecution());
  result += byteSize(getFederateType());
  result += byteSize(getFederateName());
  result += byteSize(getFOMStringModuleList());
  result += byteSize(getConfigurationParameterMap());
  result += byteSize(getIsInternal());
  return result;
}

bool
JoinFederationExecutionRequestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const JoinFederationExecutionRequestMessage* message = dynamic_cast<const JoinFederationExecutionRequestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
JoinFederationExecutionRequestMessage::operator==(const JoinFederationExecutionRequestMessage& rhs) const noexcept
{
  if (getFederationExecution() != rhs.getFederationExecution()) return false;
  if (getFederateType() != rhs.getFederateType()) return false;
  if (getFederateName() != rhs.getFederateName()) return false;
  if (getFOMStringModuleList() != rhs.getFOMStringModuleList()) return false;
  if (getConfigurationParameterMap() != rhs.getConfigurationParameterMap()) return false;
  if (getIsInternal() != rhs.getIsInternal()) return false;
  return true;
}

bool
JoinFederationExecutionRequestMessage::operator<(const JoinFederationExecutionRequestMessage& rhs) const noexcept
{
  if (getFederationExecution() < rhs.getFederationExecution()) return true;
  if (rhs.getFederationExecution() < getFederationExecution()) return false;
  if (getFederateType() < rhs.getFederateType()) return true;
  if (rhs.getFederateType() < getFederateType()) return false;
  if (getFederateName() < rhs.getFederateName()) return true;
  if (rhs.getFederateName() < getFederateName()) return false;
  if (getFOMStringModuleList() < rhs.getFOMStringModuleList()) return true;
  if (rhs.getFOMStringModuleList() < getFOMStringModuleList()) return false;
  if (getConfigurationParameterMap() < rhs.getConfigurationParameterMap()) return true;
  if (rhs.getConfigurationParameterMap() < getConfigurationParameterMap()) return false;
  if (getIsInternal() < rhs.getIsInternal()) return true;
  if (rhs.getIsInternal() < getIsInternal()) return false;
  return false;
}

const char*
JoinFederationExecutionRequest2Message::getTypeName() const noexcept
{
  return "JoinFederationExecutionRequest2Message";
}

void
JoinFederationExecutionRequest2Message::out(std::ostream& os) const
{
  os << "JoinFederationExecutionRequest2Message { ";
  os << "federationExecution: " << getFederationExecution();
  os << ", ";
  os << "federateType: " << getFederateType();
  os << ", ";
  os << "federateName: " << getFederateName();
  os << ", ";
  os << "fOMStringModuleList: " << getFOMStringModuleList();
  os << ", ";
  os << "configurationParameterMap: " << getConfigurationParameterMap();
  os << ", ";
  os << "isInternal: " << getIsInternal();
  os << " }";
}

void
JoinFederationExecutionRequest2Message::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
JoinFederationExecutionRequest2Message::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
JoinFederationExecutionRequest2Message::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationExecution());
  result += byteSize(getFederateType());
  result += byteSize(getFederateName());
  result += byteSize(getFOMStringModuleList());
  result += byteSize(getConfigurationParameterMap());
  result += byteSize(getIsInternal());
  return result;
}

bool
JoinFederationExecutionRequest2Message::operator==(const AbstractMessage& rhs) const noexcept
{
  const JoinFederationExecutionRequest2Message* message = dynamic_cast<const JoinFederationExecutionRequest2Message*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
JoinFederationExecutionRequest2Message::operator==(const JoinFederationExecutionRequest2Message& rhs) const noexcept
{
  if (getFederationExecution() != rhs.getFederationExecution()) return false;
  if (getFederateType() != rhs.getFederateType()) return false;
  if (getFederateName() != rhs.getFederateName()) return false;
  if (getFOMStringModuleList() != rhs.getFOMStringModuleList()) return false;
  if (getConfigurationParameterMap() != rhs.getConfigurationParameterMap()) return false;
  if (getIsInternal() != rhs.getIsInternal()) return false;
  return true;
}

bool
JoinFederationExecutionRequest2Message::operator<(const JoinFederationExecutionRequest2Message& rhs) const noexcept
{
  if (getFederationExecution() < rhs.getFederationExecution()) return true;
  if (rhs.getFederationExecution() < getFederationExecution()) return false;
  if (getFederateType() < rhs.getFederateType()) return true;
  if (rhs.getFederateType() < getFederateType()) return false;
  if (getFederateName() < rhs.getFederateName()) return true;
  if (rhs.getFederateName() < getFederateName()) return false;
  if (getFOMStringModuleList() < rhs.getFOMStringModuleList()) return true;
  if (rhs.getFOMStringModuleList() < getFOMStringModuleList()) return false;
  if (getConfigurationParameterMap() < rhs.getConfigurationParameterMap()) return true;
  if (rhs.getConfigurationParameterMap() < getConfigurationParameterMap()) return false;
  if (getIsInternal() < rhs.getIsInternal()) return true;
  if (rhs.getIsInternal() < getIsInternal()) return false;
  return false;
}

const char*
JoinFederationExecutionResponseMessage::getTypeName() const noexcept
{
  return "JoinFederationExecutionResponseMessage";
}

void
JoinFederationExecutionResponseMessage::out(std::ostream& os) const
{
  os << "JoinFederationExecutionResponseMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "joinFederationExecutionResponseType: " << getJoinFederationExecutionResponseType();
  os << ", ";
  os << "exceptionString: " << getExceptionString();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "federateType: " << getFederateType();
  os << ", ";
  os << "federateName: " << getFederateName();
  os << " }";
}

void
JoinFederationExecutionResponseMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
JoinFederationExecutionResponseMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
JoinFederationExecutionResponseMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getJoinFederationExecutionResponseType());
  result += byteSize(getExceptionString());
  result += byteSize(getFederateHandle());
  result += byteSize(getFederateType());
  result += byteSize(getFederateName());
  return result;
}

bool
JoinFederationExecutionResponseMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const JoinFederationExecutionResponseMessage* message = dynamic_cast<const JoinFederationExecutionResponseMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
JoinFederationExecutionResponseMessage::operator==(const JoinFederationExecutionResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getJoinFederationExecutionResponseType() != rhs.getJoinFederationExecutionResponseType()) return false;
  if (getExceptionString() != rhs.getExceptionString()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getFederateType() != rhs.getFederateType()) return false;
  if (getFederateName() != rhs.getFederateName()) return false;
  return true;
}

bool
JoinFederationExecutionResponseMessage::operator<(const JoinFederationExecutionResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getJoinFederationExecutionResponseType() < rhs.getJoinFederationExecutionResponseType()) return true;
  if (rhs.getJoinFederationExecutionResponseType() < getJoinFederationExecutionResponseType()) return false;
  if (getExceptionString() < rhs.getExceptionString()) return true;
  if (rhs.getExceptionString() < getExceptionString()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getFederateType() < rhs.getFederateType()) return true;
  if (rhs.getFederateType() < getFederateType()) return false;
  if (getFederateName() < rhs.getFederateName()) return true;
  if (rhs.getFederateName() < getFederateName()) return false;
  return false;
}

const char*
ResignFederationExecutionLeafRequestMessage::getTypeName() const noexcept
{
  return "ResignFederationExecutionLeafRequestMessage";
}

void
ResignFederationExecutionLeafRequestMessage::out(std::ostream& os) const
{
  os << "ResignFederationExecutionLeafRequestMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "resignAction: " << getResignAction();
  os << " }";
}

void
ResignFederationExecutionLeafRequestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ResignFederationExecutionLeafRequestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ResignFederationExecutionLeafRequestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getResignAction());
  return result;
}

bool
ResignFederationExecutionLeafRequestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ResignFederationExecutionLeafRequestMessage* message = dynamic_cast<const ResignFederationExecutionLeafRequestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ResignFederationExecutionLeafRequestMessage::operator==(const ResignFederationExecutionLeafRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getResignAction() != rhs.getResignAction()) return false;
  return true;
}

bool
ResignFederationExecutionLeafRequestMessage::operator<(const ResignFederationExecutionLeafRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getResignAction() < rhs.getResignAction()) return true;
  if (rhs.getResignAction() < getResignAction()) return false;
  return false;
}

const char*
ResignFederationExecutionRequestMessage::getTypeName() const noexcept
{
  return "ResignFederationExecutionRequestMessage";
}

void
ResignFederationExecutionRequestMessage::out(std::ostream& os) const
{
  os << "ResignFederationExecutionRequestMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << " }";
}

void
ResignFederationExecutionRequestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ResignFederationExecutionRequestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ResignFederationExecutionRequestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  return result;
}

bool
ResignFederationExecutionRequestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ResignFederationExecutionRequestMessage* message = dynamic_cast<const ResignFederationExecutionRequestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ResignFederationExecutionRequestMessage::operator==(const ResignFederationExecutionRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  return true;
}

bool
ResignFederationExecutionRequestMessage::operator<(const ResignFederationExecutionRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  return false;
}

const char*
JoinFederateNotifyMessage::getTypeName() const noexcept
{
  return "JoinFederateNotifyMessage";
}

void
JoinFederateNotifyMessage::out(std::ostream& os) const
{
  os << "JoinFederateNotifyMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "federateType: " << getFederateType();
  os << ", ";
  os << "federateName: " << getFederateName();
  os << ", ";
  os << "isInternal: " << getIsInternal();
  os << " }";
}

void
JoinFederateNotifyMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
JoinFederateNotifyMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
JoinFederateNotifyMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getFederateType());
  result += byteSize(getFederateName());
  result += byteSize(getIsInternal());
  return result;
}

bool
JoinFederateNotifyMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const JoinFederateNotifyMessage* message = dynamic_cast<const JoinFederateNotifyMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
JoinFederateNotifyMessage::operator==(const JoinFederateNotifyMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getFederateType() != rhs.getFederateType()) return false;
  if (getFederateName() != rhs.getFederateName()) return false;
  if (getIsInternal() != rhs.getIsInternal()) return false;
  return true;
}

bool
JoinFederateNotifyMessage::operator<(const JoinFederateNotifyMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getFederateType() < rhs.getFederateType()) return true;
  if (rhs.getFederateType() < getFederateType()) return false;
  if (getFederateName() < rhs.getFederateName()) return true;
  if (rhs.getFederateName() < getFederateName()) return false;
  if (getIsInternal() < rhs.getIsInternal()) return true;
  if (rhs.getIsInternal() < getIsInternal()) return false;
  return false;
}

const char*
ResignFederateNotifyMessage::getTypeName() const noexcept
{
  return "ResignFederateNotifyMessage";
}

void
ResignFederateNotifyMessage::out(std::ostream& os) const
{
  os << "ResignFederateNotifyMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << " }";
}

void
ResignFederateNotifyMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ResignFederateNotifyMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ResignFederateNotifyMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  return result;
}

bool
ResignFederateNotifyMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ResignFederateNotifyMessage* message = dynamic_cast<const ResignFederateNotifyMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ResignFederateNotifyMessage::operator==(const ResignFederateNotifyMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  return true;
}

bool
ResignFederateNotifyMessage::operator<(const ResignFederateNotifyMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  return false;
}

const char*
ChangeAutomaticResignDirectiveMessage::getTypeName() const noexcept
{
  return "ChangeAutomaticResignDirectiveMessage";
}

void
ChangeAutomaticResignDirectiveMessage::out(std::ostream& os) const
{
  os << "ChangeAutomaticResignDirectiveMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "resignAction: " << getResignAction();
  os << " }";
}

void
ChangeAutomaticResignDirectiveMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ChangeAutomaticResignDirectiveMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ChangeAutomaticResignDirectiveMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getResignAction());
  return result;
}

bool
ChangeAutomaticResignDirectiveMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ChangeAutomaticResignDirectiveMessage* message = dynamic_cast<const ChangeAutomaticResignDirectiveMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ChangeAutomaticResignDirectiveMessage::operator==(const ChangeAutomaticResignDirectiveMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getResignAction() != rhs.getResignAction()) return false;
  return true;
}

bool
ChangeAutomaticResignDirectiveMessage::operator<(const ChangeAutomaticResignDirectiveMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getResignAction() < rhs.getResignAction()) return true;
  if (rhs.getResignAction() < getResignAction()) return false;
  return false;
}

const char*
RegisterFederationSynchronizationPointMessage::getTypeName() const noexcept
{
  return "RegisterFederationSynchronizationPointMessage";
}

void
RegisterFederationSynchronizationPointMessage::out(std::ostream& os) const
{
  os << "RegisterFederationSynchronizationPointMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "label: " << getLabel();
  os << ", ";
  os << "tag: " << getTag();
  os << ", ";
  os << "federateHandleVector: " << getFederateHandleVector();
  os << " }";
}

void
RegisterFederationSynchronizationPointMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
RegisterFederationSynchronizationPointMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
RegisterFederationSynchronizationPointMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getLabel());
  result += byteSize(getTag());
  result += byteSize(getFederateHandleVector());
  return result;
}

bool
RegisterFederationSynchronizationPointMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const RegisterFederationSynchronizationPointMessage* message = dynamic_cast<const RegisterFederationSynchronizationPointMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
RegisterFederationSynchronizationPointMessage::operator==(const RegisterFederationSynchronizationPointMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getLabel() != rhs.getLabel()) return false;
  if (getTag() != rhs.getTag()) return false;
  if (getFederateHandleVector() != rhs.getFederateHandleVector()) return false;
  return true;
}

bool
RegisterFederationSynchronizationPointMessage::operator<(const RegisterFederationSynchronizationPointMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getLabel() < rhs.getLabel()) return true;
  if (rhs.getLabel() < getLabel()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  if (getFederateHandleVector() < rhs.getFederateHandleVector()) return true;
  if (rhs.getFederateHandleVector() < getFederateHandleVector()) return false;
  return false;
}

const char*
RegisterFederationSynchronizationPointResponseMessage::getTypeName() const noexcept
{
  return "RegisterFederationSynchronizationPointResponseMessage";
}

void
RegisterFederationSynchronizationPointResponseMessage::out(std::ostream& os) const
{
  os << "RegisterFederationSynchronizationPointResponseMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "label: " << getLabel();
  os << ", ";
  os << "registerFederationSynchronizationPointResponseType: " << getRegisterFederationSynchronizationPointResponseType();
  os << " }";
}

void
RegisterFederationSynchronizationPointResponseMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
RegisterFederationSynchronizationPointResponseMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
RegisterFederationSynchronizationPointResponseMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getLabel());
  result += byteSize(getRegisterFederationSynchronizationPointResponseType());
  return result;
}

bool
RegisterFederationSynchronizationPointResponseMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const RegisterFederationSynchronizationPointResponseMessage* message = dynamic_cast<const RegisterFederationSynchronizationPointResponseMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
RegisterFederationSynchronizationPointResponseMessage::operator==(const RegisterFederationSynchronizationPointResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getLabel() != rhs.getLabel()) return false;
  if (getRegisterFederationSynchronizationPointResponseType() != rhs.getRegisterFederationSynchronizationPointResponseType()) return false;
  return true;
}

bool
RegisterFederationSynchronizationPointResponseMessage::operator<(const RegisterFederationSynchronizationPointResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getLabel() < rhs.getLabel()) return true;
  if (rhs.getLabel() < getLabel()) return false;
  if (getRegisterFederationSynchronizationPointResponseType() < rhs.getRegisterFederationSynchronizationPointResponseType()) return true;
  if (rhs.getRegisterFederationSynchronizationPointResponseType() < getRegisterFederationSynchronizationPointResponseType()) return false;
  return false;
}

const char*
AnnounceSynchronizationPointMessage::getTypeName() const noexcept
{
  return "AnnounceSynchronizationPointMessage";
}

void
AnnounceSynchronizationPointMessage::out(std::ostream& os) const
{
  os << "AnnounceSynchronizationPointMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "label: " << getLabel();
  os << ", ";
  os << "tag: " << getTag();
  os << ", ";
  os << "addJoiningFederates: " << getAddJoiningFederates();
  os << ", ";
  os << "federateHandleVector: " << getFederateHandleVector();
  os << " }";
}

void
AnnounceSynchronizationPointMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
AnnounceSynchronizationPointMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
AnnounceSynchronizationPointMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getLabel());
  result += byteSize(getTag());
  result += byteSize(getAddJoiningFederates());
  result += byteSize(getFederateHandleVector());
  return result;
}

bool
AnnounceSynchronizationPointMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const AnnounceSynchronizationPointMessage* message = dynamic_cast<const AnnounceSynchronizationPointMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
AnnounceSynchronizationPointMessage::operator==(const AnnounceSynchronizationPointMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getLabel() != rhs.getLabel()) return false;
  if (getTag() != rhs.getTag()) return false;
  if (getAddJoiningFederates() != rhs.getAddJoiningFederates()) return false;
  if (getFederateHandleVector() != rhs.getFederateHandleVector()) return false;
  return true;
}

bool
AnnounceSynchronizationPointMessage::operator<(const AnnounceSynchronizationPointMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getLabel() < rhs.getLabel()) return true;
  if (rhs.getLabel() < getLabel()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  if (getAddJoiningFederates() < rhs.getAddJoiningFederates()) return true;
  if (rhs.getAddJoiningFederates() < getAddJoiningFederates()) return false;
  if (getFederateHandleVector() < rhs.getFederateHandleVector()) return true;
  if (rhs.getFederateHandleVector() < getFederateHandleVector()) return false;
  return false;
}

const char*
SynchronizationPointAchievedMessage::getTypeName() const noexcept
{
  return "SynchronizationPointAchievedMessage";
}

void
SynchronizationPointAchievedMessage::out(std::ostream& os) const
{
  os << "SynchronizationPointAchievedMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "label: " << getLabel();
  os << ", ";
  os << "federateHandleBoolPairVector: " << getFederateHandleBoolPairVector();
  os << " }";
}

void
SynchronizationPointAchievedMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
SynchronizationPointAchievedMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
SynchronizationPointAchievedMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getLabel());
  result += byteSize(getFederateHandleBoolPairVector());
  return result;
}

bool
SynchronizationPointAchievedMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const SynchronizationPointAchievedMessage* message = dynamic_cast<const SynchronizationPointAchievedMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
SynchronizationPointAchievedMessage::operator==(const SynchronizationPointAchievedMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getLabel() != rhs.getLabel()) return false;
  if (getFederateHandleBoolPairVector() != rhs.getFederateHandleBoolPairVector()) return false;
  return true;
}

bool
SynchronizationPointAchievedMessage::operator<(const SynchronizationPointAchievedMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getLabel() < rhs.getLabel()) return true;
  if (rhs.getLabel() < getLabel()) return false;
  if (getFederateHandleBoolPairVector() < rhs.getFederateHandleBoolPairVector()) return true;
  if (rhs.getFederateHandleBoolPairVector() < getFederateHandleBoolPairVector()) return false;
  return false;
}

const char*
FederationSynchronizedMessage::getTypeName() const noexcept
{
  return "FederationSynchronizedMessage";
}

void
FederationSynchronizedMessage::out(std::ostream& os) const
{
  os << "FederationSynchronizedMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "label: " << getLabel();
  os << ", ";
  os << "federateHandleBoolPairVector: " << getFederateHandleBoolPairVector();
  os << " }";
}

void
FederationSynchronizedMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
FederationSynchronizedMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
FederationSynchronizedMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getLabel());
  result += byteSize(getFederateHandleBoolPairVector());
  return result;
}

bool
FederationSynchronizedMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const FederationSynchronizedMessage* message = dynamic_cast<const FederationSynchronizedMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
FederationSynchronizedMessage::operator==(const FederationSynchronizedMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getLabel() != rhs.getLabel()) return false;
  if (getFederateHandleBoolPairVector() != rhs.getFederateHandleBoolPairVector()) return false;
  return true;
}

bool
FederationSynchronizedMessage::operator<(const FederationSynchronizedMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getLabel() < rhs.getLabel()) return true;
  if (rhs.getLabel() < getLabel()) return false;
  if (getFederateHandleBoolPairVector() < rhs.getFederateHandleBoolPairVector()) return true;
  if (rhs.getFederateHandleBoolPairVector() < getFederateHandleBoolPairVector()) return false;
  return false;
}

const char*
EnableTimeRegulationRequestMessage::getTypeName() const noexcept
{
  return "EnableTimeRegulationRequestMessage";
}

void
EnableTimeRegulationRequestMessage::out(std::ostream& os) const
{
  os << "EnableTimeRegulationRequestMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "timeStamp: " << getTimeStamp();
  os << ", ";
  os << "commitId: " << getCommitId();
  os << " }";
}

void
EnableTimeRegulationRequestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
EnableTimeRegulationRequestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
EnableTimeRegulationRequestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getTimeStamp());
  result += byteSize(getCommitId());
  return result;
}

bool
EnableTimeRegulationRequestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const EnableTimeRegulationRequestMessage* message = dynamic_cast<const EnableTimeRegulationRequestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
EnableTimeRegulationRequestMessage::operator==(const EnableTimeRegulationRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getTimeStamp() != rhs.getTimeStamp()) return false;
  if (getCommitId() != rhs.getCommitId()) return false;
  return true;
}

bool
EnableTimeRegulationRequestMessage::operator<(const EnableTimeRegulationRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getTimeStamp() < rhs.getTimeStamp()) return true;
  if (rhs.getTimeStamp() < getTimeStamp()) return false;
  if (getCommitId() < rhs.getCommitId()) return true;
  if (rhs.getCommitId() < getCommitId()) return false;
  return false;
}

const char*
EnableTimeRegulationResponseMessage::getTypeName() const noexcept
{
  return "EnableTimeRegulationResponseMessage";
}

void
EnableTimeRegulationResponseMessage::out(std::ostream& os) const
{
  os << "EnableTimeRegulationResponseMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "respondingFederateHandle: " << getRespondingFederateHandle();
  os << ", ";
  os << "timeStampValid: " << getTimeStampValid();
  os << ", ";
  os << "timeStamp: " << getTimeStamp();
  os << " }";
}

void
EnableTimeRegulationResponseMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
EnableTimeRegulationResponseMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
EnableTimeRegulationResponseMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getRespondingFederateHandle());
  result += byteSize(getTimeStampValid());
  result += byteSize(getTimeStamp());
  return result;
}

bool
EnableTimeRegulationResponseMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const EnableTimeRegulationResponseMessage* message = dynamic_cast<const EnableTimeRegulationResponseMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
EnableTimeRegulationResponseMessage::operator==(const EnableTimeRegulationResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getRespondingFederateHandle() != rhs.getRespondingFederateHandle()) return false;
  if (getTimeStampValid() != rhs.getTimeStampValid()) return false;
  if (getTimeStamp() != rhs.getTimeStamp()) return false;
  return true;
}

bool
EnableTimeRegulationResponseMessage::operator<(const EnableTimeRegulationResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getRespondingFederateHandle() < rhs.getRespondingFederateHandle()) return true;
  if (rhs.getRespondingFederateHandle() < getRespondingFederateHandle()) return false;
  if (getTimeStampValid() < rhs.getTimeStampValid()) return true;
  if (rhs.getTimeStampValid() < getTimeStampValid()) return false;
  if (getTimeStamp() < rhs.getTimeStamp()) return true;
  if (rhs.getTimeStamp() < getTimeStamp()) return false;
  return false;
}

const char*
DisableTimeRegulationRequestMessage::getTypeName() const noexcept
{
  return "DisableTimeRegulationRequestMessage";
}

void
DisableTimeRegulationRequestMessage::out(std::ostream& os) const
{
  os << "DisableTimeRegulationRequestMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << " }";
}

void
DisableTimeRegulationRequestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
DisableTimeRegulationRequestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
DisableTimeRegulationRequestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  return result;
}

bool
DisableTimeRegulationRequestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const DisableTimeRegulationRequestMessage* message = dynamic_cast<const DisableTimeRegulationRequestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
DisableTimeRegulationRequestMessage::operator==(const DisableTimeRegulationRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  return true;
}

bool
DisableTimeRegulationRequestMessage::operator<(const DisableTimeRegulationRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  return false;
}

const char*
EnableTimeConstrainedNotifyMessage::getTypeName() const noexcept
{
  return "EnableTimeConstrainedNotifyMessage";
}

void
EnableTimeConstrainedNotifyMessage::out(std::ostream& os) const
{
  os << "EnableTimeConstrainedNotifyMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << " }";
}

void
EnableTimeConstrainedNotifyMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
EnableTimeConstrainedNotifyMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
EnableTimeConstrainedNotifyMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  return result;
}

bool
EnableTimeConstrainedNotifyMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const EnableTimeConstrainedNotifyMessage* message = dynamic_cast<const EnableTimeConstrainedNotifyMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
EnableTimeConstrainedNotifyMessage::operator==(const EnableTimeConstrainedNotifyMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  return true;
}

bool
EnableTimeConstrainedNotifyMessage::operator<(const EnableTimeConstrainedNotifyMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  return false;
}

const char*
DisableTimeConstrainedNotifyMessage::getTypeName() const noexcept
{
  return "DisableTimeConstrainedNotifyMessage";
}

void
DisableTimeConstrainedNotifyMessage::out(std::ostream& os) const
{
  os << "DisableTimeConstrainedNotifyMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << " }";
}

void
DisableTimeConstrainedNotifyMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
DisableTimeConstrainedNotifyMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
DisableTimeConstrainedNotifyMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  return result;
}

bool
DisableTimeConstrainedNotifyMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const DisableTimeConstrainedNotifyMessage* message = dynamic_cast<const DisableTimeConstrainedNotifyMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
DisableTimeConstrainedNotifyMessage::operator==(const DisableTimeConstrainedNotifyMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  return true;
}

bool
DisableTimeConstrainedNotifyMessage::operator<(const DisableTimeConstrainedNotifyMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  return false;
}

const char*
CommitLowerBoundTimeStampMessage::getTypeName() const noexcept
{
  return "CommitLowerBoundTimeStampMessage";
}

void
CommitLowerBoundTimeStampMessage::out(std::ostream& os) const
{
  os << "CommitLowerBoundTimeStampMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  // StructField federateHandle (hidden)
  //os << "federateHandle: " << getFederateHandle();
  //os << ", ";
  os << "timeStamp: " << getTimeStamp();
  os << ", ";
  os << "commitType: " << getCommitType();
  os << ", ";
  os << "commitId: " << getCommitId();
  os << " }";
}

void
CommitLowerBoundTimeStampMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
CommitLowerBoundTimeStampMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
CommitLowerBoundTimeStampMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getTimeStamp());
  result += byteSize(getCommitType());
  result += byteSize(getCommitId());
  return result;
}

bool
CommitLowerBoundTimeStampMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const CommitLowerBoundTimeStampMessage* message = dynamic_cast<const CommitLowerBoundTimeStampMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
CommitLowerBoundTimeStampMessage::operator==(const CommitLowerBoundTimeStampMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getTimeStamp() != rhs.getTimeStamp()) return false;
  if (getCommitType() != rhs.getCommitType()) return false;
  if (getCommitId() != rhs.getCommitId()) return false;
  return true;
}

bool
CommitLowerBoundTimeStampMessage::operator<(const CommitLowerBoundTimeStampMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getTimeStamp() < rhs.getTimeStamp()) return true;
  if (rhs.getTimeStamp() < getTimeStamp()) return false;
  if (getCommitType() < rhs.getCommitType()) return true;
  if (rhs.getCommitType() < getCommitType()) return false;
  if (getCommitId() < rhs.getCommitId()) return true;
  if (rhs.getCommitId() < getCommitId()) return false;
  return false;
}

const char*
CommitLowerBoundTimeStampResponseMessage::getTypeName() const noexcept
{
  return "CommitLowerBoundTimeStampResponseMessage";
}

void
CommitLowerBoundTimeStampResponseMessage::out(std::ostream& os) const
{
  os << "CommitLowerBoundTimeStampResponseMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "sendingFederateHandle: " << getSendingFederateHandle();
  os << ", ";
  os << "commitId: " << getCommitId();
  os << " }";
}

void
CommitLowerBoundTimeStampResponseMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
CommitLowerBoundTimeStampResponseMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
CommitLowerBoundTimeStampResponseMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getSendingFederateHandle());
  result += byteSize(getCommitId());
  return result;
}

bool
CommitLowerBoundTimeStampResponseMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const CommitLowerBoundTimeStampResponseMessage* message = dynamic_cast<const CommitLowerBoundTimeStampResponseMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
CommitLowerBoundTimeStampResponseMessage::operator==(const CommitLowerBoundTimeStampResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getSendingFederateHandle() != rhs.getSendingFederateHandle()) return false;
  if (getCommitId() != rhs.getCommitId()) return false;
  return true;
}

bool
CommitLowerBoundTimeStampResponseMessage::operator<(const CommitLowerBoundTimeStampResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getSendingFederateHandle() < rhs.getSendingFederateHandle()) return true;
  if (rhs.getSendingFederateHandle() < getSendingFederateHandle()) return false;
  if (getCommitId() < rhs.getCommitId()) return true;
  if (rhs.getCommitId() < getCommitId()) return false;
  return false;
}

const char*
LockedByNextMessageRequestMessage::getTypeName() const noexcept
{
  return "LockedByNextMessageRequestMessage";
}

void
LockedByNextMessageRequestMessage::out(std::ostream& os) const
{
  os << "LockedByNextMessageRequestMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "sendingFederateHandle: " << getSendingFederateHandle();
  os << ", ";
  os << "lockedByNextMessage: " << getLockedByNextMessage();
  os << " }";
}

void
LockedByNextMessageRequestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
LockedByNextMessageRequestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
LockedByNextMessageRequestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getSendingFederateHandle());
  result += byteSize(getLockedByNextMessage());
  return result;
}

bool
LockedByNextMessageRequestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const LockedByNextMessageRequestMessage* message = dynamic_cast<const LockedByNextMessageRequestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
LockedByNextMessageRequestMessage::operator==(const LockedByNextMessageRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getSendingFederateHandle() != rhs.getSendingFederateHandle()) return false;
  if (getLockedByNextMessage() != rhs.getLockedByNextMessage()) return false;
  return true;
}

bool
LockedByNextMessageRequestMessage::operator<(const LockedByNextMessageRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getSendingFederateHandle() < rhs.getSendingFederateHandle()) return true;
  if (rhs.getSendingFederateHandle() < getSendingFederateHandle()) return false;
  if (getLockedByNextMessage() < rhs.getLockedByNextMessage()) return true;
  if (rhs.getLockedByNextMessage() < getLockedByNextMessage()) return false;
  return false;
}

const char*
ResetFederationRequestMessage::getTypeName() const noexcept
{
  return "ResetFederationRequestMessage";
}

void
ResetFederationRequestMessage::out(std::ostream& os) const
{
  os << "ResetFederationRequestMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "timeStamp: " << getTimeStamp();
  os << ", ";
  os << "tag: " << getTag();
  os << " }";
}

void
ResetFederationRequestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ResetFederationRequestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ResetFederationRequestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getTimeStamp());
  result += byteSize(getTag());
  return result;
}

bool
ResetFederationRequestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ResetFederationRequestMessage* message = dynamic_cast<const ResetFederationRequestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ResetFederationRequestMessage::operator==(const ResetFederationRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getTimeStamp() != rhs.getTimeStamp()) return false;
  if (getTag() != rhs.getTag()) return false;
  return true;
}

bool
ResetFederationRequestMessage::operator<(const ResetFederationRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getTimeStamp() < rhs.getTimeStamp()) return true;
  if (rhs.getTimeStamp() < getTimeStamp()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  return false;
}

const char*
ResetFederationInitiateMessage::getTypeName() const noexcept
{
  return "ResetFederationInitiateMessage";
}

void
ResetFederationInitiateMessage::out(std::ostream& os) const
{
  os << "ResetFederationInitiateMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  // StructField federateHandle (hidden)
  //os << "federateHandle: " << getFederateHandle();
  //os << ", ";
  os << "federateHandleVector: " << getFederateHandleVector();
  os << ", ";
  os << "timeStamp: " << getTimeStamp();
  os << ", ";
  os << "tag: " << getTag();
  os << " }";
}

void
ResetFederationInitiateMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ResetFederationInitiateMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ResetFederationInitiateMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getFederateHandleVector());
  result += byteSize(getTimeStamp());
  result += byteSize(getTag());
  return result;
}

bool
ResetFederationInitiateMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ResetFederationInitiateMessage* message = dynamic_cast<const ResetFederationInitiateMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ResetFederationInitiateMessage::operator==(const ResetFederationInitiateMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getFederateHandleVector() != rhs.getFederateHandleVector()) return false;
  if (getTimeStamp() != rhs.getTimeStamp()) return false;
  if (getTag() != rhs.getTag()) return false;
  return true;
}

bool
ResetFederationInitiateMessage::operator<(const ResetFederationInitiateMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getFederateHandleVector() < rhs.getFederateHandleVector()) return true;
  if (rhs.getFederateHandleVector() < getFederateHandleVector()) return false;
  if (getTimeStamp() < rhs.getTimeStamp()) return true;
  if (rhs.getTimeStamp() < getTimeStamp()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  return false;
}

const char*
ResetFederationDoneMessage::getTypeName() const noexcept
{
  return "ResetFederationDoneMessage";
}

void
ResetFederationDoneMessage::out(std::ostream& os) const
{
  os << "ResetFederationDoneMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "timeStamp: " << getTimeStamp();
  os << ", ";
  os << "tag: " << getTag();
  os << ", ";
  os << "success: " << getSuccess();
  os << " }";
}

void
ResetFederationDoneMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ResetFederationDoneMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ResetFederationDoneMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getTimeStamp());
  result += byteSize(getTag());
  result += byteSize(getSuccess());
  return result;
}

bool
ResetFederationDoneMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ResetFederationDoneMessage* message = dynamic_cast<const ResetFederationDoneMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ResetFederationDoneMessage::operator==(const ResetFederationDoneMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getTimeStamp() != rhs.getTimeStamp()) return false;
  if (getTag() != rhs.getTag()) return false;
  if (getSuccess() != rhs.getSuccess()) return false;
  return true;
}

bool
ResetFederationDoneMessage::operator<(const ResetFederationDoneMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getTimeStamp() < rhs.getTimeStamp()) return true;
  if (rhs.getTimeStamp() < getTimeStamp()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  if (getSuccess() < rhs.getSuccess()) return true;
  if (rhs.getSuccess() < getSuccess()) return false;
  return false;
}

const char*
ResetFederationBegunMessage::getTypeName() const noexcept
{
  return "ResetFederationBegunMessage";
}

void
ResetFederationBegunMessage::out(std::ostream& os) const
{
  os << "ResetFederationBegunMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandleVector: " << getFederateHandleVector();
  os << ", ";
  // StructField federateHandle (hidden)
  //os << "federateHandle: " << getFederateHandle();
  //os << ", ";
  os << "timeStamp: " << getTimeStamp();
  os << ", ";
  os << "tag: " << getTag();
  os << " }";
}

void
ResetFederationBegunMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ResetFederationBegunMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ResetFederationBegunMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandleVector());
  result += byteSize(getFederateHandle());
  result += byteSize(getTimeStamp());
  result += byteSize(getTag());
  return result;
}

bool
ResetFederationBegunMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ResetFederationBegunMessage* message = dynamic_cast<const ResetFederationBegunMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ResetFederationBegunMessage::operator==(const ResetFederationBegunMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandleVector() != rhs.getFederateHandleVector()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getTimeStamp() != rhs.getTimeStamp()) return false;
  if (getTag() != rhs.getTag()) return false;
  return true;
}

bool
ResetFederationBegunMessage::operator<(const ResetFederationBegunMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandleVector() < rhs.getFederateHandleVector()) return true;
  if (rhs.getFederateHandleVector() < getFederateHandleVector()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getTimeStamp() < rhs.getTimeStamp()) return true;
  if (rhs.getTimeStamp() < getTimeStamp()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  return false;
}

const char*
ResetFederationCompleteMessage::getTypeName() const noexcept
{
  return "ResetFederationCompleteMessage";
}

void
ResetFederationCompleteMessage::out(std::ostream& os) const
{
  os << "ResetFederationCompleteMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandleBoolPairVector: " << getFederateHandleBoolPairVector();
  os << ", ";
  // StructField federateHandle (hidden)
  //os << "federateHandle: " << getFederateHandle();
  //os << ", ";
  os << "timeStamp: " << getTimeStamp();
  os << ", ";
  os << "success: " << getSuccess();
  os << ", ";
  os << "tag: " << getTag();
  os << " }";
}

void
ResetFederationCompleteMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ResetFederationCompleteMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ResetFederationCompleteMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandleBoolPairVector());
  result += byteSize(getFederateHandle());
  result += byteSize(getTimeStamp());
  result += byteSize(getSuccess());
  result += byteSize(getTag());
  return result;
}

bool
ResetFederationCompleteMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ResetFederationCompleteMessage* message = dynamic_cast<const ResetFederationCompleteMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ResetFederationCompleteMessage::operator==(const ResetFederationCompleteMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandleBoolPairVector() != rhs.getFederateHandleBoolPairVector()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getTimeStamp() != rhs.getTimeStamp()) return false;
  if (getSuccess() != rhs.getSuccess()) return false;
  if (getTag() != rhs.getTag()) return false;
  return true;
}

bool
ResetFederationCompleteMessage::operator<(const ResetFederationCompleteMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandleBoolPairVector() < rhs.getFederateHandleBoolPairVector()) return true;
  if (rhs.getFederateHandleBoolPairVector() < getFederateHandleBoolPairVector()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getTimeStamp() < rhs.getTimeStamp()) return true;
  if (rhs.getTimeStamp() < getTimeStamp()) return false;
  if (getSuccess() < rhs.getSuccess()) return true;
  if (rhs.getSuccess() < getSuccess()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  return false;
}

const char*
TimeConstrainedEnabledMessage::getTypeName() const noexcept
{
  return "TimeConstrainedEnabledMessage";
}

void
TimeConstrainedEnabledMessage::out(std::ostream& os) const
{
  os << "TimeConstrainedEnabledMessage { ";
  os << " }";
}

void
TimeConstrainedEnabledMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
TimeConstrainedEnabledMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
TimeConstrainedEnabledMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  return result;
}

bool
TimeConstrainedEnabledMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const TimeConstrainedEnabledMessage* message = dynamic_cast<const TimeConstrainedEnabledMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
TimeConstrainedEnabledMessage::operator==(const TimeConstrainedEnabledMessage&) const noexcept
{
  return true;
}

bool
TimeConstrainedEnabledMessage::operator<(const TimeConstrainedEnabledMessage&) const noexcept
{
  return false;
}

const char*
TimeRegulationEnabledMessage::getTypeName() const noexcept
{
  return "TimeRegulationEnabledMessage";
}

void
TimeRegulationEnabledMessage::out(std::ostream& os) const
{
  os << "TimeRegulationEnabledMessage { ";
  os << " }";
}

void
TimeRegulationEnabledMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
TimeRegulationEnabledMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
TimeRegulationEnabledMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  return result;
}

bool
TimeRegulationEnabledMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const TimeRegulationEnabledMessage* message = dynamic_cast<const TimeRegulationEnabledMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
TimeRegulationEnabledMessage::operator==(const TimeRegulationEnabledMessage&) const noexcept
{
  return true;
}

bool
TimeRegulationEnabledMessage::operator<(const TimeRegulationEnabledMessage&) const noexcept
{
  return false;
}

const char*
TimeAdvanceGrantedMessage::getTypeName() const noexcept
{
  return "TimeAdvanceGrantedMessage";
}

void
TimeAdvanceGrantedMessage::out(std::ostream& os) const
{
  os << "TimeAdvanceGrantedMessage { ";
  os << " }";
}

void
TimeAdvanceGrantedMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
TimeAdvanceGrantedMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
TimeAdvanceGrantedMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  return result;
}

bool
TimeAdvanceGrantedMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const TimeAdvanceGrantedMessage* message = dynamic_cast<const TimeAdvanceGrantedMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
TimeAdvanceGrantedMessage::operator==(const TimeAdvanceGrantedMessage&) const noexcept
{
  return true;
}

bool
TimeAdvanceGrantedMessage::operator<(const TimeAdvanceGrantedMessage&) const noexcept
{
  return false;
}

const char*
InsertRegionMessage::getTypeName() const noexcept
{
  return "InsertRegionMessage";
}

void
InsertRegionMessage::out(std::ostream& os) const
{
  os << "InsertRegionMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "regionHandleDimensionHandleSetPairVector: " << getRegionHandleDimensionHandleSetPairVector();
  os << " }";
}

void
InsertRegionMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
InsertRegionMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
InsertRegionMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getRegionHandleDimensionHandleSetPairVector());
  return result;
}

bool
InsertRegionMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const InsertRegionMessage* message = dynamic_cast<const InsertRegionMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
InsertRegionMessage::operator==(const InsertRegionMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getRegionHandleDimensionHandleSetPairVector() != rhs.getRegionHandleDimensionHandleSetPairVector()) return false;
  return true;
}

bool
InsertRegionMessage::operator<(const InsertRegionMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getRegionHandleDimensionHandleSetPairVector() < rhs.getRegionHandleDimensionHandleSetPairVector()) return true;
  if (rhs.getRegionHandleDimensionHandleSetPairVector() < getRegionHandleDimensionHandleSetPairVector()) return false;
  return false;
}

const char*
CommitRegionMessage::getTypeName() const noexcept
{
  return "CommitRegionMessage";
}

void
CommitRegionMessage::out(std::ostream& os) const
{
  os << "CommitRegionMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "regionHandleRegionValuePairVector: " << getRegionHandleRegionValuePairVector();
  os << " }";
}

void
CommitRegionMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
CommitRegionMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
CommitRegionMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getRegionHandleRegionValuePairVector());
  return result;
}

bool
CommitRegionMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const CommitRegionMessage* message = dynamic_cast<const CommitRegionMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
CommitRegionMessage::operator==(const CommitRegionMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getRegionHandleRegionValuePairVector() != rhs.getRegionHandleRegionValuePairVector()) return false;
  return true;
}

bool
CommitRegionMessage::operator<(const CommitRegionMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getRegionHandleRegionValuePairVector() < rhs.getRegionHandleRegionValuePairVector()) return true;
  if (rhs.getRegionHandleRegionValuePairVector() < getRegionHandleRegionValuePairVector()) return false;
  return false;
}

const char*
EraseRegionMessage::getTypeName() const noexcept
{
  return "EraseRegionMessage";
}

void
EraseRegionMessage::out(std::ostream& os) const
{
  os << "EraseRegionMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "regionHandleVector: " << getRegionHandleVector();
  os << " }";
}

void
EraseRegionMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
EraseRegionMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
EraseRegionMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getRegionHandleVector());
  return result;
}

bool
EraseRegionMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const EraseRegionMessage* message = dynamic_cast<const EraseRegionMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
EraseRegionMessage::operator==(const EraseRegionMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getRegionHandleVector() != rhs.getRegionHandleVector()) return false;
  return true;
}

bool
EraseRegionMessage::operator<(const EraseRegionMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getRegionHandleVector() < rhs.getRegionHandleVector()) return true;
  if (rhs.getRegionHandleVector() < getRegionHandleVector()) return false;
  return false;
}

const char*
ChangeInteractionClassPublicationMessage::getTypeName() const noexcept
{
  return "ChangeInteractionClassPublicationMessage";
}

void
ChangeInteractionClassPublicationMessage::out(std::ostream& os) const
{
  os << "ChangeInteractionClassPublicationMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "publicationType: " << getPublicationType();
  os << ", ";
  os << "interactionClassHandle: " << getInteractionClassHandle();
  os << " }";
}

void
ChangeInteractionClassPublicationMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ChangeInteractionClassPublicationMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ChangeInteractionClassPublicationMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getPublicationType());
  result += byteSize(getInteractionClassHandle());
  return result;
}

bool
ChangeInteractionClassPublicationMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ChangeInteractionClassPublicationMessage* message = dynamic_cast<const ChangeInteractionClassPublicationMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ChangeInteractionClassPublicationMessage::operator==(const ChangeInteractionClassPublicationMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getPublicationType() != rhs.getPublicationType()) return false;
  if (getInteractionClassHandle() != rhs.getInteractionClassHandle()) return false;
  return true;
}

bool
ChangeInteractionClassPublicationMessage::operator<(const ChangeInteractionClassPublicationMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getPublicationType() < rhs.getPublicationType()) return true;
  if (rhs.getPublicationType() < getPublicationType()) return false;
  if (getInteractionClassHandle() < rhs.getInteractionClassHandle()) return true;
  if (rhs.getInteractionClassHandle() < getInteractionClassHandle()) return false;
  return false;
}

const char*
ChangeObjectClassPublicationMessage::getTypeName() const noexcept
{
  return "ChangeObjectClassPublicationMessage";
}

void
ChangeObjectClassPublicationMessage::out(std::ostream& os) const
{
  os << "ChangeObjectClassPublicationMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "publicationType: " << getPublicationType();
  os << ", ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "attributeHandles: " << getAttributeHandles();
  os << " }";
}

void
ChangeObjectClassPublicationMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ChangeObjectClassPublicationMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ChangeObjectClassPublicationMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getPublicationType());
  result += byteSize(getObjectClassHandle());
  result += byteSize(getAttributeHandles());
  return result;
}

bool
ChangeObjectClassPublicationMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ChangeObjectClassPublicationMessage* message = dynamic_cast<const ChangeObjectClassPublicationMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ChangeObjectClassPublicationMessage::operator==(const ChangeObjectClassPublicationMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getPublicationType() != rhs.getPublicationType()) return false;
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  return true;
}

bool
ChangeObjectClassPublicationMessage::operator<(const ChangeObjectClassPublicationMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getPublicationType() < rhs.getPublicationType()) return true;
  if (rhs.getPublicationType() < getPublicationType()) return false;
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  return false;
}

const char*
ChangeInteractionClassSubscriptionMessage::getTypeName() const noexcept
{
  return "ChangeInteractionClassSubscriptionMessage";
}

void
ChangeInteractionClassSubscriptionMessage::out(std::ostream& os) const
{
  os << "ChangeInteractionClassSubscriptionMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "subscriptionType: " << getSubscriptionType();
  os << ", ";
  os << "interactionClassHandle: " << getInteractionClassHandle();
  os << ", ";
  os << "parameterFilterValues: " << getParameterFilterValues();
  os << " }";
}

void
ChangeInteractionClassSubscriptionMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ChangeInteractionClassSubscriptionMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ChangeInteractionClassSubscriptionMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getSubscriptionType());
  result += byteSize(getInteractionClassHandle());
  result += byteSize(getParameterFilterValues());
  return result;
}

bool
ChangeInteractionClassSubscriptionMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ChangeInteractionClassSubscriptionMessage* message = dynamic_cast<const ChangeInteractionClassSubscriptionMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ChangeInteractionClassSubscriptionMessage::operator==(const ChangeInteractionClassSubscriptionMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getSubscriptionType() != rhs.getSubscriptionType()) return false;
  if (getInteractionClassHandle() != rhs.getInteractionClassHandle()) return false;
  if (getParameterFilterValues() != rhs.getParameterFilterValues()) return false;
  return true;
}

bool
ChangeInteractionClassSubscriptionMessage::operator<(const ChangeInteractionClassSubscriptionMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getSubscriptionType() < rhs.getSubscriptionType()) return true;
  if (rhs.getSubscriptionType() < getSubscriptionType()) return false;
  if (getInteractionClassHandle() < rhs.getInteractionClassHandle()) return true;
  if (rhs.getInteractionClassHandle() < getInteractionClassHandle()) return false;
  if (getParameterFilterValues() < rhs.getParameterFilterValues()) return true;
  if (rhs.getParameterFilterValues() < getParameterFilterValues()) return false;
  return false;
}

const char*
ChangeObjectClassSubscriptionMessage::getTypeName() const noexcept
{
  return "ChangeObjectClassSubscriptionMessage";
}

void
ChangeObjectClassSubscriptionMessage::out(std::ostream& os) const
{
  os << "ChangeObjectClassSubscriptionMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "subscriptionType: " << getSubscriptionType();
  os << ", ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "attributeHandles: " << getAttributeHandles();
  os << " }";
}

void
ChangeObjectClassSubscriptionMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ChangeObjectClassSubscriptionMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ChangeObjectClassSubscriptionMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getSubscriptionType());
  result += byteSize(getObjectClassHandle());
  result += byteSize(getAttributeHandles());
  return result;
}

bool
ChangeObjectClassSubscriptionMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ChangeObjectClassSubscriptionMessage* message = dynamic_cast<const ChangeObjectClassSubscriptionMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ChangeObjectClassSubscriptionMessage::operator==(const ChangeObjectClassSubscriptionMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getSubscriptionType() != rhs.getSubscriptionType()) return false;
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  return true;
}

bool
ChangeObjectClassSubscriptionMessage::operator<(const ChangeObjectClassSubscriptionMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getSubscriptionType() < rhs.getSubscriptionType()) return true;
  if (rhs.getSubscriptionType() < getSubscriptionType()) return false;
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  return false;
}

const char*
ChangeObjectInstanceSubscriptionMessage::getTypeName() const noexcept
{
  return "ChangeObjectInstanceSubscriptionMessage";
}

void
ChangeObjectInstanceSubscriptionMessage::out(std::ostream& os) const
{
  os << "ChangeObjectInstanceSubscriptionMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "subscriptionType: " << getSubscriptionType();
  os << ", ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << " }";
}

void
ChangeObjectInstanceSubscriptionMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ChangeObjectInstanceSubscriptionMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ChangeObjectInstanceSubscriptionMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getSubscriptionType());
  result += byteSize(getObjectClassHandle());
  result += byteSize(getObjectInstanceHandle());
  return result;
}

bool
ChangeObjectInstanceSubscriptionMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ChangeObjectInstanceSubscriptionMessage* message = dynamic_cast<const ChangeObjectInstanceSubscriptionMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ChangeObjectInstanceSubscriptionMessage::operator==(const ChangeObjectInstanceSubscriptionMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getSubscriptionType() != rhs.getSubscriptionType()) return false;
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  return true;
}

bool
ChangeObjectInstanceSubscriptionMessage::operator<(const ChangeObjectInstanceSubscriptionMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getSubscriptionType() < rhs.getSubscriptionType()) return true;
  if (rhs.getSubscriptionType() < getSubscriptionType()) return false;
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  return false;
}

const char*
AttributeOwnershipRequestDivestMessage::getTypeName() const noexcept
{
  return "AttributeOwnershipRequestDivestMessage";
}

void
AttributeOwnershipRequestDivestMessage::out(std::ostream& os) const
{
  os << "AttributeOwnershipRequestDivestMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << getAttributeHandles();
  os << ", ";
  os << "tag: " << getTag();
  os << ", ";
  os << "unconditional: " << getUnconditional();
  os << " }";
}

void
AttributeOwnershipRequestDivestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
AttributeOwnershipRequestDivestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
AttributeOwnershipRequestDivestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getObjectClassHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getAttributeHandles());
  result += byteSize(getTag());
  result += byteSize(getUnconditional());
  return result;
}

bool
AttributeOwnershipRequestDivestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const AttributeOwnershipRequestDivestMessage* message = dynamic_cast<const AttributeOwnershipRequestDivestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
AttributeOwnershipRequestDivestMessage::operator==(const AttributeOwnershipRequestDivestMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  if (getTag() != rhs.getTag()) return false;
  if (getUnconditional() != rhs.getUnconditional()) return false;
  return true;
}

bool
AttributeOwnershipRequestDivestMessage::operator<(const AttributeOwnershipRequestDivestMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  if (getUnconditional() < rhs.getUnconditional()) return true;
  if (rhs.getUnconditional() < getUnconditional()) return false;
  return false;
}

const char*
AttributeOwnershipRequestAcquireMessage::getTypeName() const noexcept
{
  return "AttributeOwnershipRequestAcquireMessage";
}

void
AttributeOwnershipRequestAcquireMessage::out(std::ostream& os) const
{
  os << "AttributeOwnershipRequestAcquireMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << getAttributeHandles();
  os << ", ";
  os << "tag: " << getTag();
  os << ", ";
  os << "ifAvailable: " << getIfAvailable();
  os << ", ";
  // StructField federateHandle (hidden)
  //os << "federateHandle: " << getFederateHandle();
  os << " }";
}

void
AttributeOwnershipRequestAcquireMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
AttributeOwnershipRequestAcquireMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
AttributeOwnershipRequestAcquireMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getObjectClassHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getAttributeHandles());
  result += byteSize(getTag());
  result += byteSize(getIfAvailable());
  result += byteSize(getFederateHandle());
  return result;
}

bool
AttributeOwnershipRequestAcquireMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const AttributeOwnershipRequestAcquireMessage* message = dynamic_cast<const AttributeOwnershipRequestAcquireMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
AttributeOwnershipRequestAcquireMessage::operator==(const AttributeOwnershipRequestAcquireMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  if (getTag() != rhs.getTag()) return false;
  if (getIfAvailable() != rhs.getIfAvailable()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  return true;
}

bool
AttributeOwnershipRequestAcquireMessage::operator<(const AttributeOwnershipRequestAcquireMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  if (getIfAvailable() < rhs.getIfAvailable()) return true;
  if (rhs.getIfAvailable() < getIfAvailable()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  return false;
}

const char*
AttributeOwnershipResponseUnavailableMessage::getTypeName() const noexcept
{
  return "AttributeOwnershipResponseUnavailableMessage";
}

void
AttributeOwnershipResponseUnavailableMessage::out(std::ostream& os) const
{
  os << "AttributeOwnershipResponseUnavailableMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << getAttributeHandles();
  os << " }";
}

void
AttributeOwnershipResponseUnavailableMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
AttributeOwnershipResponseUnavailableMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
AttributeOwnershipResponseUnavailableMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getObjectClassHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getAttributeHandles());
  return result;
}

bool
AttributeOwnershipResponseUnavailableMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const AttributeOwnershipResponseUnavailableMessage* message = dynamic_cast<const AttributeOwnershipResponseUnavailableMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
AttributeOwnershipResponseUnavailableMessage::operator==(const AttributeOwnershipResponseUnavailableMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  return true;
}

bool
AttributeOwnershipResponseUnavailableMessage::operator<(const AttributeOwnershipResponseUnavailableMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  return false;
}

const char*
AttributeOwnershipConfirmDivestitureMessage::getTypeName() const noexcept
{
  return "AttributeOwnershipConfirmDivestitureMessage";
}

void
AttributeOwnershipConfirmDivestitureMessage::out(std::ostream& os) const
{
  os << "AttributeOwnershipConfirmDivestitureMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << getAttributeHandles();
  os << " }";
}

void
AttributeOwnershipConfirmDivestitureMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
AttributeOwnershipConfirmDivestitureMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
AttributeOwnershipConfirmDivestitureMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getObjectClassHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getAttributeHandles());
  return result;
}

bool
AttributeOwnershipConfirmDivestitureMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const AttributeOwnershipConfirmDivestitureMessage* message = dynamic_cast<const AttributeOwnershipConfirmDivestitureMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
AttributeOwnershipConfirmDivestitureMessage::operator==(const AttributeOwnershipConfirmDivestitureMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  return true;
}

bool
AttributeOwnershipConfirmDivestitureMessage::operator<(const AttributeOwnershipConfirmDivestitureMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  return false;
}

const char*
AttributeOwnershipRequestCancelAcquireMessage::getTypeName() const noexcept
{
  return "AttributeOwnershipRequestCancelAcquireMessage";
}

void
AttributeOwnershipRequestCancelAcquireMessage::out(std::ostream& os) const
{
  os << "AttributeOwnershipRequestCancelAcquireMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << getAttributeHandles();
  os << ", ";
  os << "immediate: " << getImmediate();
  os << " }";
}

void
AttributeOwnershipRequestCancelAcquireMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
AttributeOwnershipRequestCancelAcquireMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
AttributeOwnershipRequestCancelAcquireMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getObjectClassHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getAttributeHandles());
  result += byteSize(getImmediate());
  return result;
}

bool
AttributeOwnershipRequestCancelAcquireMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const AttributeOwnershipRequestCancelAcquireMessage* message = dynamic_cast<const AttributeOwnershipRequestCancelAcquireMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
AttributeOwnershipRequestCancelAcquireMessage::operator==(const AttributeOwnershipRequestCancelAcquireMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  if (getImmediate() != rhs.getImmediate()) return false;
  return true;
}

bool
AttributeOwnershipRequestCancelAcquireMessage::operator<(const AttributeOwnershipRequestCancelAcquireMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  if (getImmediate() < rhs.getImmediate()) return true;
  if (rhs.getImmediate() < getImmediate()) return false;
  return false;
}

const char*
AttributeOwnershipResponseCancelConfirmationMessage::getTypeName() const noexcept
{
  return "AttributeOwnershipResponseCancelConfirmationMessage";
}

void
AttributeOwnershipResponseCancelConfirmationMessage::out(std::ostream& os) const
{
  os << "AttributeOwnershipResponseCancelConfirmationMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << getAttributeHandles();
  os << " }";
}

void
AttributeOwnershipResponseCancelConfirmationMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
AttributeOwnershipResponseCancelConfirmationMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
AttributeOwnershipResponseCancelConfirmationMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getObjectClassHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getAttributeHandles());
  return result;
}

bool
AttributeOwnershipResponseCancelConfirmationMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const AttributeOwnershipResponseCancelConfirmationMessage* message = dynamic_cast<const AttributeOwnershipResponseCancelConfirmationMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
AttributeOwnershipResponseCancelConfirmationMessage::operator==(const AttributeOwnershipResponseCancelConfirmationMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  return true;
}

bool
AttributeOwnershipResponseCancelConfirmationMessage::operator<(const AttributeOwnershipResponseCancelConfirmationMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  return false;
}

const char*
AttributeOwnershipRequestCancelDivestMessage::getTypeName() const noexcept
{
  return "AttributeOwnershipRequestCancelDivestMessage";
}

void
AttributeOwnershipRequestCancelDivestMessage::out(std::ostream& os) const
{
  os << "AttributeOwnershipRequestCancelDivestMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << getAttributeHandles();
  os << " }";
}

void
AttributeOwnershipRequestCancelDivestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
AttributeOwnershipRequestCancelDivestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
AttributeOwnershipRequestCancelDivestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getObjectClassHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getAttributeHandles());
  return result;
}

bool
AttributeOwnershipRequestCancelDivestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const AttributeOwnershipRequestCancelDivestMessage* message = dynamic_cast<const AttributeOwnershipRequestCancelDivestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
AttributeOwnershipRequestCancelDivestMessage::operator==(const AttributeOwnershipRequestCancelDivestMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  return true;
}

bool
AttributeOwnershipRequestCancelDivestMessage::operator<(const AttributeOwnershipRequestCancelDivestMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  return false;
}

const char*
AttributeOwnershipDivestConfirmationMessage::getTypeName() const noexcept
{
  return "AttributeOwnershipDivestConfirmationMessage";
}

void
AttributeOwnershipDivestConfirmationMessage::out(std::ostream& os) const
{
  os << "AttributeOwnershipDivestConfirmationMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << getAttributeHandles();
  os << " }";
}

void
AttributeOwnershipDivestConfirmationMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
AttributeOwnershipDivestConfirmationMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
AttributeOwnershipDivestConfirmationMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getObjectClassHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getAttributeHandles());
  return result;
}

bool
AttributeOwnershipDivestConfirmationMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const AttributeOwnershipDivestConfirmationMessage* message = dynamic_cast<const AttributeOwnershipDivestConfirmationMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
AttributeOwnershipDivestConfirmationMessage::operator==(const AttributeOwnershipDivestConfirmationMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  return true;
}

bool
AttributeOwnershipDivestConfirmationMessage::operator<(const AttributeOwnershipDivestConfirmationMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  return false;
}

const char*
AttributeOwnershipResponseOwnershipAcquiredMessage::getTypeName() const noexcept
{
  return "AttributeOwnershipResponseOwnershipAcquiredMessage";
}

void
AttributeOwnershipResponseOwnershipAcquiredMessage::out(std::ostream& os) const
{
  os << "AttributeOwnershipResponseOwnershipAcquiredMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  // StructField federateHandle (hidden)
  //os << "federateHandle: " << getFederateHandle();
  //os << ", ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << getAttributeHandles();
  os << ", ";
  os << "ifAvailable: " << getIfAvailable();
  os << " }";
}

void
AttributeOwnershipResponseOwnershipAcquiredMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
AttributeOwnershipResponseOwnershipAcquiredMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
AttributeOwnershipResponseOwnershipAcquiredMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getObjectClassHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getAttributeHandles());
  result += byteSize(getIfAvailable());
  return result;
}

bool
AttributeOwnershipResponseOwnershipAcquiredMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const AttributeOwnershipResponseOwnershipAcquiredMessage* message = dynamic_cast<const AttributeOwnershipResponseOwnershipAcquiredMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
AttributeOwnershipResponseOwnershipAcquiredMessage::operator==(const AttributeOwnershipResponseOwnershipAcquiredMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  if (getIfAvailable() != rhs.getIfAvailable()) return false;
  return true;
}

bool
AttributeOwnershipResponseOwnershipAcquiredMessage::operator<(const AttributeOwnershipResponseOwnershipAcquiredMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  if (getIfAvailable() < rhs.getIfAvailable()) return true;
  if (rhs.getIfAvailable() < getIfAvailable()) return false;
  return false;
}

const char*
QueryAttributeOwnershipRequestMessage::getTypeName() const noexcept
{
  return "QueryAttributeOwnershipRequestMessage";
}

void
QueryAttributeOwnershipRequestMessage::out(std::ostream& os) const
{
  os << "QueryAttributeOwnershipRequestMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandle: " << getAttributeHandle();
  os << " }";
}

void
QueryAttributeOwnershipRequestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
QueryAttributeOwnershipRequestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
QueryAttributeOwnershipRequestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getAttributeHandle());
  return result;
}

bool
QueryAttributeOwnershipRequestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const QueryAttributeOwnershipRequestMessage* message = dynamic_cast<const QueryAttributeOwnershipRequestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
QueryAttributeOwnershipRequestMessage::operator==(const QueryAttributeOwnershipRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getAttributeHandle() != rhs.getAttributeHandle()) return false;
  return true;
}

bool
QueryAttributeOwnershipRequestMessage::operator<(const QueryAttributeOwnershipRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getAttributeHandle() < rhs.getAttributeHandle()) return true;
  if (rhs.getAttributeHandle() < getAttributeHandle()) return false;
  return false;
}

const char*
QueryAttributeOwnershipResponseMessage::getTypeName() const noexcept
{
  return "QueryAttributeOwnershipResponseMessage";
}

void
QueryAttributeOwnershipResponseMessage::out(std::ostream& os) const
{
  os << "QueryAttributeOwnershipResponseMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandle: " << getAttributeHandle();
  os << ", ";
  os << "owner: " << getOwner();
  os << " }";
}

void
QueryAttributeOwnershipResponseMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
QueryAttributeOwnershipResponseMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
QueryAttributeOwnershipResponseMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getAttributeHandle());
  result += byteSize(getOwner());
  return result;
}

bool
QueryAttributeOwnershipResponseMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const QueryAttributeOwnershipResponseMessage* message = dynamic_cast<const QueryAttributeOwnershipResponseMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
QueryAttributeOwnershipResponseMessage::operator==(const QueryAttributeOwnershipResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getAttributeHandle() != rhs.getAttributeHandle()) return false;
  if (getOwner() != rhs.getOwner()) return false;
  return true;
}

bool
QueryAttributeOwnershipResponseMessage::operator<(const QueryAttributeOwnershipResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getAttributeHandle() < rhs.getAttributeHandle()) return true;
  if (rhs.getAttributeHandle() < getAttributeHandle()) return false;
  if (getOwner() < rhs.getOwner()) return true;
  if (rhs.getOwner() < getOwner()) return false;
  return false;
}

const char*
RegistrationForObjectClassMessage::getTypeName() const noexcept
{
  return "RegistrationForObjectClassMessage";
}

void
RegistrationForObjectClassMessage::out(std::ostream& os) const
{
  os << "RegistrationForObjectClassMessage { ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "start: " << getStart();
  os << " }";
}

void
RegistrationForObjectClassMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
RegistrationForObjectClassMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
RegistrationForObjectClassMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getObjectClassHandle());
  result += byteSize(getStart());
  return result;
}

bool
RegistrationForObjectClassMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const RegistrationForObjectClassMessage* message = dynamic_cast<const RegistrationForObjectClassMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
RegistrationForObjectClassMessage::operator==(const RegistrationForObjectClassMessage& rhs) const noexcept
{
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getStart() != rhs.getStart()) return false;
  return true;
}

bool
RegistrationForObjectClassMessage::operator<(const RegistrationForObjectClassMessage& rhs) const noexcept
{
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getStart() < rhs.getStart()) return true;
  if (rhs.getStart() < getStart()) return false;
  return false;
}

const char*
AttributesInScopeMessage::getTypeName() const noexcept
{
  return "AttributesInScopeMessage";
}

void
AttributesInScopeMessage::out(std::ostream& os) const
{
  os << "AttributesInScopeMessage { ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << getAttributeHandles();
  os << ", ";
  os << "inScope: " << getInScope();
  os << " }";
}

void
AttributesInScopeMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
AttributesInScopeMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
AttributesInScopeMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getAttributeHandles());
  result += byteSize(getInScope());
  return result;
}

bool
AttributesInScopeMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const AttributesInScopeMessage* message = dynamic_cast<const AttributesInScopeMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
AttributesInScopeMessage::operator==(const AttributesInScopeMessage& rhs) const noexcept
{
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  if (getInScope() != rhs.getInScope()) return false;
  return true;
}

bool
AttributesInScopeMessage::operator<(const AttributesInScopeMessage& rhs) const noexcept
{
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  if (getInScope() < rhs.getInScope()) return true;
  if (rhs.getInScope() < getInScope()) return false;
  return false;
}

ObjectInstanceHandle
AttributesInScopeMessage::getObjectInstanceHandleForMessage() const noexcept
{
  return getObjectInstanceHandle();
}

const char*
TurnUpdatesOnForInstanceMessage::getTypeName() const noexcept
{
  return "TurnUpdatesOnForInstanceMessage";
}

void
TurnUpdatesOnForInstanceMessage::out(std::ostream& os) const
{
  os << "TurnUpdatesOnForInstanceMessage { ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << getAttributeHandles();
  os << ", ";
  os << "updateRate: " << getUpdateRate();
  os << ", ";
  os << "on: " << getOn();
  os << " }";
}

void
TurnUpdatesOnForInstanceMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
TurnUpdatesOnForInstanceMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
TurnUpdatesOnForInstanceMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getAttributeHandles());
  result += byteSize(getUpdateRate());
  result += byteSize(getOn());
  return result;
}

bool
TurnUpdatesOnForInstanceMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const TurnUpdatesOnForInstanceMessage* message = dynamic_cast<const TurnUpdatesOnForInstanceMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
TurnUpdatesOnForInstanceMessage::operator==(const TurnUpdatesOnForInstanceMessage& rhs) const noexcept
{
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  if (getUpdateRate() != rhs.getUpdateRate()) return false;
  if (getOn() != rhs.getOn()) return false;
  return true;
}

bool
TurnUpdatesOnForInstanceMessage::operator<(const TurnUpdatesOnForInstanceMessage& rhs) const noexcept
{
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  if (getUpdateRate() < rhs.getUpdateRate()) return true;
  if (rhs.getUpdateRate() < getUpdateRate()) return false;
  if (getOn() < rhs.getOn()) return true;
  if (rhs.getOn() < getOn()) return false;
  return false;
}

ObjectInstanceHandle
TurnUpdatesOnForInstanceMessage::getObjectInstanceHandleForMessage() const noexcept
{
  return getObjectInstanceHandle();
}

const char*
TurnInteractionsOnMessage::getTypeName() const noexcept
{
  return "TurnInteractionsOnMessage";
}

void
TurnInteractionsOnMessage::out(std::ostream& os) const
{
  os << "TurnInteractionsOnMessage { ";
  os << "interactionClassHandle: " << getInteractionClassHandle();
  os << ", ";
  os << "on: " << getOn();
  os << " }";
}

void
TurnInteractionsOnMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
TurnInteractionsOnMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
TurnInteractionsOnMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getInteractionClassHandle());
  result += byteSize(getOn());
  return result;
}

bool
TurnInteractionsOnMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const TurnInteractionsOnMessage* message = dynamic_cast<const TurnInteractionsOnMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
TurnInteractionsOnMessage::operator==(const TurnInteractionsOnMessage& rhs) const noexcept
{
  if (getInteractionClassHandle() != rhs.getInteractionClassHandle()) return false;
  if (getOn() != rhs.getOn()) return false;
  return true;
}

bool
TurnInteractionsOnMessage::operator<(const TurnInteractionsOnMessage& rhs) const noexcept
{
  if (getInteractionClassHandle() < rhs.getInteractionClassHandle()) return true;
  if (rhs.getInteractionClassHandle() < getInteractionClassHandle()) return false;
  if (getOn() < rhs.getOn()) return true;
  if (rhs.getOn() < getOn()) return false;
  return false;
}

const char*
InteractionMessage::getTypeName() const noexcept
{
  return "InteractionMessage";
}

void
InteractionMessage::out(std::ostream& os) const
{
  os << "InteractionMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "interactionClassHandle: " << getInteractionClassHandle();
  os << ", ";
  // StructField transportationType (hidden)
  //os << "transportationType: " << getTransportationType();
  //os << ", ";
  // StructField tag (hidden)
  //os << "tag: " << getTag();
  //os << ", ";
  os << "parameterValues: " << getParameterValues();
  os << " }";
}

void
InteractionMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
InteractionMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
InteractionMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getInteractionClassHandle());
  result += byteSize(getTransportationType());
  result += byteSize(getTag());
  result += byteSize(getParameterValues());
  return result;
}

bool
InteractionMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const InteractionMessage* message = dynamic_cast<const InteractionMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
InteractionMessage::operator==(const InteractionMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getInteractionClassHandle() != rhs.getInteractionClassHandle()) return false;
  if (getTransportationType() != rhs.getTransportationType()) return false;
  if (getTag() != rhs.getTag()) return false;
  if (getParameterValues() != rhs.getParameterValues()) return false;
  return true;
}

bool
InteractionMessage::operator<(const InteractionMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getInteractionClassHandle() < rhs.getInteractionClassHandle()) return true;
  if (rhs.getInteractionClassHandle() < getInteractionClassHandle()) return false;
  if (getTransportationType() < rhs.getTransportationType()) return true;
  if (rhs.getTransportationType() < getTransportationType()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  if (getParameterValues() < rhs.getParameterValues()) return true;
  if (rhs.getParameterValues() < getParameterValues()) return false;
  return false;
}

bool
InteractionMessage::getReliable() const noexcept
{
  return getTransportationType() == RELIABLE;
}

const char*
TimeStampedInteractionMessage::getTypeName() const noexcept
{
  return "TimeStampedInteractionMessage";
}

void
TimeStampedInteractionMessage::out(std::ostream& os) const
{
  os << "TimeStampedInteractionMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "interactionClassHandle: " << getInteractionClassHandle();
  os << ", ";
  os << "orderType: " << getOrderType();
  os << ", ";
  // StructField transportationType (hidden)
  //os << "transportationType: " << getTransportationType();
  //os << ", ";
  // StructField tag (hidden)
  //os << "tag: " << getTag();
  //os << ", ";
  os << "timeStamp: " << getTimeStamp();
  os << ", ";
  // StructField messageRetractionHandle (hidden)
  //os << "messageRetractionHandle: " << getMessageRetractionHandle();
  //os << ", ";
  os << "parameterValues: " << getParameterValues();
  os << " }";
}

void
TimeStampedInteractionMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
TimeStampedInteractionMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
TimeStampedInteractionMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getInteractionClassHandle());
  result += byteSize(getOrderType());
  result += byteSize(getTransportationType());
  result += byteSize(getTag());
  result += byteSize(getTimeStamp());
  result += byteSize(getMessageRetractionHandle());
  result += byteSize(getParameterValues());
  return result;
}

bool
TimeStampedInteractionMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const TimeStampedInteractionMessage* message = dynamic_cast<const TimeStampedInteractionMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
TimeStampedInteractionMessage::operator==(const TimeStampedInteractionMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getInteractionClassHandle() != rhs.getInteractionClassHandle()) return false;
  if (getOrderType() != rhs.getOrderType()) return false;
  if (getTransportationType() != rhs.getTransportationType()) return false;
  if (getTag() != rhs.getTag()) return false;
  if (getTimeStamp() != rhs.getTimeStamp()) return false;
  if (getMessageRetractionHandle() != rhs.getMessageRetractionHandle()) return false;
  if (getParameterValues() != rhs.getParameterValues()) return false;
  return true;
}

bool
TimeStampedInteractionMessage::operator<(const TimeStampedInteractionMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getInteractionClassHandle() < rhs.getInteractionClassHandle()) return true;
  if (rhs.getInteractionClassHandle() < getInteractionClassHandle()) return false;
  if (getOrderType() < rhs.getOrderType()) return true;
  if (rhs.getOrderType() < getOrderType()) return false;
  if (getTransportationType() < rhs.getTransportationType()) return true;
  if (rhs.getTransportationType() < getTransportationType()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  if (getTimeStamp() < rhs.getTimeStamp()) return true;
  if (rhs.getTimeStamp() < getTimeStamp()) return false;
  if (getMessageRetractionHandle() < rhs.getMessageRetractionHandle()) return true;
  if (rhs.getMessageRetractionHandle() < getMessageRetractionHandle()) return false;
  if (getParameterValues() < rhs.getParameterValues()) return true;
  if (rhs.getParameterValues() < getParameterValues()) return false;
  return false;
}

bool
TimeStampedInteractionMessage::getReliable() const noexcept
{
  return getTransportationType() == RELIABLE;
}

const char*
ObjectInstanceHandlesRequestMessage::getTypeName() const noexcept
{
  return "ObjectInstanceHandlesRequestMessage";
}

void
ObjectInstanceHandlesRequestMessage::out(std::ostream& os) const
{
  os << "ObjectInstanceHandlesRequestMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "count: " << getCount();
  os << " }";
}

void
ObjectInstanceHandlesRequestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ObjectInstanceHandlesRequestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ObjectInstanceHandlesRequestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getCount());
  return result;
}

bool
ObjectInstanceHandlesRequestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ObjectInstanceHandlesRequestMessage* message = dynamic_cast<const ObjectInstanceHandlesRequestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ObjectInstanceHandlesRequestMessage::operator==(const ObjectInstanceHandlesRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getCount() != rhs.getCount()) return false;
  return true;
}

bool
ObjectInstanceHandlesRequestMessage::operator<(const ObjectInstanceHandlesRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getCount() < rhs.getCount()) return true;
  if (rhs.getCount() < getCount()) return false;
  return false;
}

const char*
ObjectInstanceHandlesResponseMessage::getTypeName() const noexcept
{
  return "ObjectInstanceHandlesResponseMessage";
}

void
ObjectInstanceHandlesResponseMessage::out(std::ostream& os) const
{
  os << "ObjectInstanceHandlesResponseMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  // StructField objectInstanceHandleNamePairVector (hidden)
  //os << "objectInstanceHandleNamePairVector: " << getObjectInstanceHandleNamePairVector();
  os << " }";
}

void
ObjectInstanceHandlesResponseMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ObjectInstanceHandlesResponseMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ObjectInstanceHandlesResponseMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getObjectInstanceHandleNamePairVector());
  return result;
}

bool
ObjectInstanceHandlesResponseMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ObjectInstanceHandlesResponseMessage* message = dynamic_cast<const ObjectInstanceHandlesResponseMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ObjectInstanceHandlesResponseMessage::operator==(const ObjectInstanceHandlesResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getObjectInstanceHandleNamePairVector() != rhs.getObjectInstanceHandleNamePairVector()) return false;
  return true;
}

bool
ObjectInstanceHandlesResponseMessage::operator<(const ObjectInstanceHandlesResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getObjectInstanceHandleNamePairVector() < rhs.getObjectInstanceHandleNamePairVector()) return true;
  if (rhs.getObjectInstanceHandleNamePairVector() < getObjectInstanceHandleNamePairVector()) return false;
  return false;
}

const char*
ReleaseMultipleObjectInstanceNameHandlePairsMessage::getTypeName() const noexcept
{
  return "ReleaseMultipleObjectInstanceNameHandlePairsMessage";
}

void
ReleaseMultipleObjectInstanceNameHandlePairsMessage::out(std::ostream& os) const
{
  os << "ReleaseMultipleObjectInstanceNameHandlePairsMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "objectInstanceHandleVector: " << getObjectInstanceHandleVector();
  os << " }";
}

void
ReleaseMultipleObjectInstanceNameHandlePairsMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ReleaseMultipleObjectInstanceNameHandlePairsMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ReleaseMultipleObjectInstanceNameHandlePairsMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getObjectInstanceHandleVector());
  return result;
}

bool
ReleaseMultipleObjectInstanceNameHandlePairsMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ReleaseMultipleObjectInstanceNameHandlePairsMessage* message = dynamic_cast<const ReleaseMultipleObjectInstanceNameHandlePairsMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ReleaseMultipleObjectInstanceNameHandlePairsMessage::operator==(const ReleaseMultipleObjectInstanceNameHandlePairsMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getObjectInstanceHandleVector() != rhs.getObjectInstanceHandleVector()) return false;
  return true;
}

bool
ReleaseMultipleObjectInstanceNameHandlePairsMessage::operator<(const ReleaseMultipleObjectInstanceNameHandlePairsMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getObjectInstanceHandleVector() < rhs.getObjectInstanceHandleVector()) return true;
  if (rhs.getObjectInstanceHandleVector() < getObjectInstanceHandleVector()) return false;
  return false;
}

const char*
ReserveObjectInstanceNameRequestMessage::getTypeName() const noexcept
{
  return "ReserveObjectInstanceNameRequestMessage";
}

void
ReserveObjectInstanceNameRequestMessage::out(std::ostream& os) const
{
  os << "ReserveObjectInstanceNameRequestMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "name: " << getName();
  os << ", ";
  os << "isInternal: " << getIsInternal();
  os << " }";
}

void
ReserveObjectInstanceNameRequestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ReserveObjectInstanceNameRequestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ReserveObjectInstanceNameRequestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getName());
  result += byteSize(getIsInternal());
  return result;
}

bool
ReserveObjectInstanceNameRequestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ReserveObjectInstanceNameRequestMessage* message = dynamic_cast<const ReserveObjectInstanceNameRequestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ReserveObjectInstanceNameRequestMessage::operator==(const ReserveObjectInstanceNameRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getName() != rhs.getName()) return false;
  if (getIsInternal() != rhs.getIsInternal()) return false;
  return true;
}

bool
ReserveObjectInstanceNameRequestMessage::operator<(const ReserveObjectInstanceNameRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getName() < rhs.getName()) return true;
  if (rhs.getName() < getName()) return false;
  if (getIsInternal() < rhs.getIsInternal()) return true;
  if (rhs.getIsInternal() < getIsInternal()) return false;
  return false;
}

const char*
ReserveObjectInstanceNameResponseMessage::getTypeName() const noexcept
{
  return "ReserveObjectInstanceNameResponseMessage";
}

void
ReserveObjectInstanceNameResponseMessage::out(std::ostream& os) const
{
  os << "ReserveObjectInstanceNameResponseMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "objectInstanceHandleNamePair: " << getObjectInstanceHandleNamePair();
  os << ", ";
  os << "success: " << getSuccess();
  os << " }";
}

void
ReserveObjectInstanceNameResponseMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ReserveObjectInstanceNameResponseMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ReserveObjectInstanceNameResponseMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getObjectInstanceHandleNamePair());
  result += byteSize(getSuccess());
  return result;
}

bool
ReserveObjectInstanceNameResponseMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ReserveObjectInstanceNameResponseMessage* message = dynamic_cast<const ReserveObjectInstanceNameResponseMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ReserveObjectInstanceNameResponseMessage::operator==(const ReserveObjectInstanceNameResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getObjectInstanceHandleNamePair() != rhs.getObjectInstanceHandleNamePair()) return false;
  if (getSuccess() != rhs.getSuccess()) return false;
  return true;
}

bool
ReserveObjectInstanceNameResponseMessage::operator<(const ReserveObjectInstanceNameResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getObjectInstanceHandleNamePair() < rhs.getObjectInstanceHandleNamePair()) return true;
  if (rhs.getObjectInstanceHandleNamePair() < getObjectInstanceHandleNamePair()) return false;
  if (getSuccess() < rhs.getSuccess()) return true;
  if (rhs.getSuccess() < getSuccess()) return false;
  return false;
}

const char*
ReserveMultipleObjectInstanceNameRequestMessage::getTypeName() const noexcept
{
  return "ReserveMultipleObjectInstanceNameRequestMessage";
}

void
ReserveMultipleObjectInstanceNameRequestMessage::out(std::ostream& os) const
{
  os << "ReserveMultipleObjectInstanceNameRequestMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "nameList: " << getNameList();
  os << " }";
}

void
ReserveMultipleObjectInstanceNameRequestMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ReserveMultipleObjectInstanceNameRequestMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ReserveMultipleObjectInstanceNameRequestMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getNameList());
  return result;
}

bool
ReserveMultipleObjectInstanceNameRequestMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ReserveMultipleObjectInstanceNameRequestMessage* message = dynamic_cast<const ReserveMultipleObjectInstanceNameRequestMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ReserveMultipleObjectInstanceNameRequestMessage::operator==(const ReserveMultipleObjectInstanceNameRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getNameList() != rhs.getNameList()) return false;
  return true;
}

bool
ReserveMultipleObjectInstanceNameRequestMessage::operator<(const ReserveMultipleObjectInstanceNameRequestMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getNameList() < rhs.getNameList()) return true;
  if (rhs.getNameList() < getNameList()) return false;
  return false;
}

const char*
ReserveMultipleObjectInstanceNameResponseMessage::getTypeName() const noexcept
{
  return "ReserveMultipleObjectInstanceNameResponseMessage";
}

void
ReserveMultipleObjectInstanceNameResponseMessage::out(std::ostream& os) const
{
  os << "ReserveMultipleObjectInstanceNameResponseMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  // StructField objectInstanceHandleNamePairVector (hidden)
  //os << "objectInstanceHandleNamePairVector: " << getObjectInstanceHandleNamePairVector();
  //os << ", ";
  os << "success: " << getSuccess();
  os << " }";
}

void
ReserveMultipleObjectInstanceNameResponseMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
ReserveMultipleObjectInstanceNameResponseMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
ReserveMultipleObjectInstanceNameResponseMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getObjectInstanceHandleNamePairVector());
  result += byteSize(getSuccess());
  return result;
}

bool
ReserveMultipleObjectInstanceNameResponseMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const ReserveMultipleObjectInstanceNameResponseMessage* message = dynamic_cast<const ReserveMultipleObjectInstanceNameResponseMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
ReserveMultipleObjectInstanceNameResponseMessage::operator==(const ReserveMultipleObjectInstanceNameResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getObjectInstanceHandleNamePairVector() != rhs.getObjectInstanceHandleNamePairVector()) return false;
  if (getSuccess() != rhs.getSuccess()) return false;
  return true;
}

bool
ReserveMultipleObjectInstanceNameResponseMessage::operator<(const ReserveMultipleObjectInstanceNameResponseMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getObjectInstanceHandleNamePairVector() < rhs.getObjectInstanceHandleNamePairVector()) return true;
  if (rhs.getObjectInstanceHandleNamePairVector() < getObjectInstanceHandleNamePairVector()) return false;
  if (getSuccess() < rhs.getSuccess()) return true;
  if (rhs.getSuccess() < getSuccess()) return false;
  return false;
}

const char*
InsertObjectInstanceMessage::getTypeName() const noexcept
{
  return "InsertObjectInstanceMessage";
}

void
InsertObjectInstanceMessage::out(std::ostream& os) const
{
  os << "InsertObjectInstanceMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "name: " << getName();
  os << ", ";
  // StructField attributeStateVector (hidden)
  //os << "attributeStateVector: " << getAttributeStateVector();
  os << " }";
}

void
InsertObjectInstanceMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
InsertObjectInstanceMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
InsertObjectInstanceMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getObjectClassHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getName());
  result += byteSize(getAttributeStateVector());
  return result;
}

bool
InsertObjectInstanceMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const InsertObjectInstanceMessage* message = dynamic_cast<const InsertObjectInstanceMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
InsertObjectInstanceMessage::operator==(const InsertObjectInstanceMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getName() != rhs.getName()) return false;
  if (getAttributeStateVector() != rhs.getAttributeStateVector()) return false;
  return true;
}

bool
InsertObjectInstanceMessage::operator<(const InsertObjectInstanceMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getName() < rhs.getName()) return true;
  if (rhs.getName() < getName()) return false;
  if (getAttributeStateVector() < rhs.getAttributeStateVector()) return true;
  if (rhs.getAttributeStateVector() < getAttributeStateVector()) return false;
  return false;
}

ObjectInstanceHandle
InsertObjectInstanceMessage::getObjectInstanceHandleForMessage() const noexcept
{
  return getObjectInstanceHandle();
}

const char*
DeleteObjectInstanceMessage::getTypeName() const noexcept
{
  return "DeleteObjectInstanceMessage";
}

void
DeleteObjectInstanceMessage::out(std::ostream& os) const
{
  os << "DeleteObjectInstanceMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "tag: " << getTag();
  os << " }";
}

void
DeleteObjectInstanceMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
DeleteObjectInstanceMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
DeleteObjectInstanceMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getTag());
  return result;
}

bool
DeleteObjectInstanceMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const DeleteObjectInstanceMessage* message = dynamic_cast<const DeleteObjectInstanceMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
DeleteObjectInstanceMessage::operator==(const DeleteObjectInstanceMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getTag() != rhs.getTag()) return false;
  return true;
}

bool
DeleteObjectInstanceMessage::operator<(const DeleteObjectInstanceMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  return false;
}

ObjectInstanceHandle
DeleteObjectInstanceMessage::getObjectInstanceHandleForMessage() const noexcept
{
  return getObjectInstanceHandle();
}

const char*
TimeStampedDeleteObjectInstanceMessage::getTypeName() const noexcept
{
  return "TimeStampedDeleteObjectInstanceMessage";
}

void
TimeStampedDeleteObjectInstanceMessage::out(std::ostream& os) const
{
  os << "TimeStampedDeleteObjectInstanceMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "orderType: " << getOrderType();
  os << ", ";
  os << "tag: " << getTag();
  os << ", ";
  os << "timeStamp: " << getTimeStamp();
  os << ", ";
  os << "messageRetractionHandle: " << getMessageRetractionHandle();
  os << " }";
}

void
TimeStampedDeleteObjectInstanceMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
TimeStampedDeleteObjectInstanceMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
TimeStampedDeleteObjectInstanceMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getOrderType());
  result += byteSize(getTag());
  result += byteSize(getTimeStamp());
  result += byteSize(getMessageRetractionHandle());
  return result;
}

bool
TimeStampedDeleteObjectInstanceMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const TimeStampedDeleteObjectInstanceMessage* message = dynamic_cast<const TimeStampedDeleteObjectInstanceMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
TimeStampedDeleteObjectInstanceMessage::operator==(const TimeStampedDeleteObjectInstanceMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getOrderType() != rhs.getOrderType()) return false;
  if (getTag() != rhs.getTag()) return false;
  if (getTimeStamp() != rhs.getTimeStamp()) return false;
  if (getMessageRetractionHandle() != rhs.getMessageRetractionHandle()) return false;
  return true;
}

bool
TimeStampedDeleteObjectInstanceMessage::operator<(const TimeStampedDeleteObjectInstanceMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getOrderType() < rhs.getOrderType()) return true;
  if (rhs.getOrderType() < getOrderType()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  if (getTimeStamp() < rhs.getTimeStamp()) return true;
  if (rhs.getTimeStamp() < getTimeStamp()) return false;
  if (getMessageRetractionHandle() < rhs.getMessageRetractionHandle()) return true;
  if (rhs.getMessageRetractionHandle() < getMessageRetractionHandle()) return false;
  return false;
}

ObjectInstanceHandle
TimeStampedDeleteObjectInstanceMessage::getObjectInstanceHandleForMessage() const noexcept
{
  return getObjectInstanceHandle();
}

const char*
AttributeUpdateMessage::getTypeName() const noexcept
{
  return "AttributeUpdateMessage";
}

void
AttributeUpdateMessage::out(std::ostream& os) const
{
  os << "AttributeUpdateMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  // StructField tag (hidden)
  //os << "tag: " << getTag();
  //os << ", ";
  // StructField transportationType (hidden)
  //os << "transportationType: " << getTransportationType();
  //os << ", ";
  // StructField attributeValues (hidden)
  //os << "attributeValues: " << getAttributeValues();
  os << " }";
}

void
AttributeUpdateMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
AttributeUpdateMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
AttributeUpdateMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getTag());
  result += byteSize(getTransportationType());
  result += byteSize(getAttributeValues());
  return result;
}

bool
AttributeUpdateMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const AttributeUpdateMessage* message = dynamic_cast<const AttributeUpdateMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
AttributeUpdateMessage::operator==(const AttributeUpdateMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getTag() != rhs.getTag()) return false;
  if (getTransportationType() != rhs.getTransportationType()) return false;
  if (getAttributeValues() != rhs.getAttributeValues()) return false;
  return true;
}

bool
AttributeUpdateMessage::operator<(const AttributeUpdateMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  if (getTransportationType() < rhs.getTransportationType()) return true;
  if (rhs.getTransportationType() < getTransportationType()) return false;
  if (getAttributeValues() < rhs.getAttributeValues()) return true;
  if (rhs.getAttributeValues() < getAttributeValues()) return false;
  return false;
}

bool
AttributeUpdateMessage::getReliable() const noexcept
{
  return getTransportationType() == RELIABLE;
}

ObjectInstanceHandle
AttributeUpdateMessage::getObjectInstanceHandleForMessage() const noexcept
{
  return getObjectInstanceHandle();
}

const char*
TimeStampedAttributeUpdateMessage::getTypeName() const noexcept
{
  return "TimeStampedAttributeUpdateMessage";
}

void
TimeStampedAttributeUpdateMessage::out(std::ostream& os) const
{
  os << "TimeStampedAttributeUpdateMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "federateHandle: " << getFederateHandle();
  os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  os << "tag: " << getTag();
  os << ", ";
  os << "timeStamp: " << getTimeStamp();
  os << ", ";
  os << "messageRetractionHandle: " << getMessageRetractionHandle();
  os << ", ";
  os << "orderType: " << getOrderType();
  os << ", ";
  os << "transportationType: " << getTransportationType();
  os << ", ";
  os << "attributeValues: " << getAttributeValues();
  os << " }";
}

void
TimeStampedAttributeUpdateMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
TimeStampedAttributeUpdateMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
TimeStampedAttributeUpdateMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getFederateHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getTag());
  result += byteSize(getTimeStamp());
  result += byteSize(getMessageRetractionHandle());
  result += byteSize(getOrderType());
  result += byteSize(getTransportationType());
  result += byteSize(getAttributeValues());
  return result;
}

bool
TimeStampedAttributeUpdateMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const TimeStampedAttributeUpdateMessage* message = dynamic_cast<const TimeStampedAttributeUpdateMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
TimeStampedAttributeUpdateMessage::operator==(const TimeStampedAttributeUpdateMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getFederateHandle() != rhs.getFederateHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getTag() != rhs.getTag()) return false;
  if (getTimeStamp() != rhs.getTimeStamp()) return false;
  if (getMessageRetractionHandle() != rhs.getMessageRetractionHandle()) return false;
  if (getOrderType() != rhs.getOrderType()) return false;
  if (getTransportationType() != rhs.getTransportationType()) return false;
  if (getAttributeValues() != rhs.getAttributeValues()) return false;
  return true;
}

bool
TimeStampedAttributeUpdateMessage::operator<(const TimeStampedAttributeUpdateMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getFederateHandle() < rhs.getFederateHandle()) return true;
  if (rhs.getFederateHandle() < getFederateHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  if (getTimeStamp() < rhs.getTimeStamp()) return true;
  if (rhs.getTimeStamp() < getTimeStamp()) return false;
  if (getMessageRetractionHandle() < rhs.getMessageRetractionHandle()) return true;
  if (rhs.getMessageRetractionHandle() < getMessageRetractionHandle()) return false;
  if (getOrderType() < rhs.getOrderType()) return true;
  if (rhs.getOrderType() < getOrderType()) return false;
  if (getTransportationType() < rhs.getTransportationType()) return true;
  if (rhs.getTransportationType() < getTransportationType()) return false;
  if (getAttributeValues() < rhs.getAttributeValues()) return true;
  if (rhs.getAttributeValues() < getAttributeValues()) return false;
  return false;
}

bool
TimeStampedAttributeUpdateMessage::getReliable() const noexcept
{
  return getTransportationType() == RELIABLE;
}

ObjectInstanceHandle
TimeStampedAttributeUpdateMessage::getObjectInstanceHandleForMessage() const noexcept
{
  return getObjectInstanceHandle();
}

const char*
RequestAttributeUpdateMessage::getTypeName() const noexcept
{
  return "RequestAttributeUpdateMessage";
}

void
RequestAttributeUpdateMessage::out(std::ostream& os) const
{
  os << "RequestAttributeUpdateMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << getFederationHandle();
  //os << ", ";
  os << "objectInstanceHandle: " << getObjectInstanceHandle();
  os << ", ";
  // StructField attributeHandles (hidden)
  //os << "attributeHandles: " << getAttributeHandles();
  //os << ", ";
  os << "tag: " << getTag();
  os << " }";
}

void
RequestAttributeUpdateMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
RequestAttributeUpdateMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
RequestAttributeUpdateMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getObjectInstanceHandle());
  result += byteSize(getAttributeHandles());
  result += byteSize(getTag());
  return result;
}

bool
RequestAttributeUpdateMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const RequestAttributeUpdateMessage* message = dynamic_cast<const RequestAttributeUpdateMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
RequestAttributeUpdateMessage::operator==(const RequestAttributeUpdateMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getObjectInstanceHandle() != rhs.getObjectInstanceHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  if (getTag() != rhs.getTag()) return false;
  return true;
}

bool
RequestAttributeUpdateMessage::operator<(const RequestAttributeUpdateMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getObjectInstanceHandle() < rhs.getObjectInstanceHandle()) return true;
  if (rhs.getObjectInstanceHandle() < getObjectInstanceHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  return false;
}

ObjectInstanceHandle
RequestAttributeUpdateMessage::getObjectInstanceHandleForMessage() const noexcept
{
  return getObjectInstanceHandle();
}

const char*
RequestClassAttributeUpdateMessage::getTypeName() const noexcept
{
  return "RequestClassAttributeUpdateMessage";
}

void
RequestClassAttributeUpdateMessage::out(std::ostream& os) const
{
  os << "RequestClassAttributeUpdateMessage { ";
  os << "federationHandle: " << getFederationHandle();
  os << ", ";
  os << "objectClassHandle: " << getObjectClassHandle();
  os << ", ";
  os << "attributeHandles: " << getAttributeHandles();
  os << ", ";
  os << "tag: " << getTag();
  os << " }";
}

void
RequestClassAttributeUpdateMessage::out(std::ostream& os, ServerModel::Federation* federation) const
{
  prettyprint(os, *this, federation);
}

void
RequestClassAttributeUpdateMessage::dispatch(const AbstractMessageDispatcher& dispatcher) const
{
  dispatcher.accept(*this);
}

size_t
RequestClassAttributeUpdateMessage::messageSize() const noexcept
{
  size_t result = AbstractMessage::messageSize();
  result += byteSize(getFederationHandle());
  result += byteSize(getObjectClassHandle());
  result += byteSize(getAttributeHandles());
  result += byteSize(getTag());
  return result;
}

bool
RequestClassAttributeUpdateMessage::operator==(const AbstractMessage& rhs) const noexcept
{
  const RequestClassAttributeUpdateMessage* message = dynamic_cast<const RequestClassAttributeUpdateMessage*>(&rhs);
  if (!message)
    return false;
  return operator==(*message);
}

bool
RequestClassAttributeUpdateMessage::operator==(const RequestClassAttributeUpdateMessage& rhs) const noexcept
{
  if (getFederationHandle() != rhs.getFederationHandle()) return false;
  if (getObjectClassHandle() != rhs.getObjectClassHandle()) return false;
  if (getAttributeHandles() != rhs.getAttributeHandles()) return false;
  if (getTag() != rhs.getTag()) return false;
  return true;
}

bool
RequestClassAttributeUpdateMessage::operator<(const RequestClassAttributeUpdateMessage& rhs) const noexcept
{
  if (getFederationHandle() < rhs.getFederationHandle()) return true;
  if (rhs.getFederationHandle() < getFederationHandle()) return false;
  if (getObjectClassHandle() < rhs.getObjectClassHandle()) return true;
  if (rhs.getObjectClassHandle() < getObjectClassHandle()) return false;
  if (getAttributeHandles() < rhs.getAttributeHandles()) return true;
  if (rhs.getAttributeHandles() < getAttributeHandles()) return false;
  if (getTag() < rhs.getTag()) return true;
  if (rhs.getTag() < getTag()) return false;
  return false;
}

// EnumDataType CallbackModel
std::ostream&
operator<<(std::ostream& os, const CallbackModel& value)
{
  switch (value) {
  case CallbackModel::HLA_IMMEDIATE: os << "HLA_IMMEDIATE"; break;
  case CallbackModel::HLA_EVOKED: os << "HLA_EVOKED"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const CallbackModel& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType OrderType
std::ostream&
operator<<(std::ostream& os, const OrderType& value)
{
  switch (value) {
  case OrderType::RECEIVE: os << "RECEIVE"; break;
  case OrderType::TIMESTAMP: os << "TIMESTAMP"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const OrderType& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType TransportationType
std::ostream&
operator<<(std::ostream& os, const TransportationType& value)
{
  switch (value) {
  case TransportationType::RELIABLE: os << "RELIABLE"; break;
  case TransportationType::BEST_EFFORT: os << "BEST_EFFORT"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const TransportationType& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType SubscriptionType
std::ostream&
operator<<(std::ostream& os, const SubscriptionType& value)
{
  switch (value) {
  case SubscriptionType::Unsubscribed: os << "Unsubscribed"; break;
  case SubscriptionType::SubscribedPassive: os << "SubscribedPassive"; break;
  case SubscriptionType::SubscribedActive: os << "SubscribedActive"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const SubscriptionType& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType PublicationType
std::ostream&
operator<<(std::ostream& os, const PublicationType& value)
{
  switch (value) {
  case PublicationType::Unpublished: os << "Unpublished"; break;
  case PublicationType::Published: os << "Published"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const PublicationType& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType OwnershipType
std::ostream&
operator<<(std::ostream& os, const OwnershipType& value)
{
  switch (value) {
  case OwnershipType::NoTransfer: os << "NoTransfer"; break;
  case OwnershipType::Divest: os << "Divest"; break;
  case OwnershipType::Acquire: os << "Acquire"; break;
  case OwnershipType::DivestAcquire: os << "DivestAcquire"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const OwnershipType& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType ResignAction
std::ostream&
operator<<(std::ostream& os, const ResignAction& value)
{
  switch (value) {
  case ResignAction::UNCONDITIONALLY_DIVEST_ATTRIBUTES: os << "UNCONDITIONALLY_DIVEST_ATTRIBUTES"; break;
  case ResignAction::DELETE_OBJECTS: os << "DELETE_OBJECTS"; break;
  case ResignAction::CANCEL_PENDING_OWNERSHIP_ACQUISITIONS: os << "CANCEL_PENDING_OWNERSHIP_ACQUISITIONS"; break;
  case ResignAction::DELETE_OBJECTS_THEN_DIVEST: os << "DELETE_OBJECTS_THEN_DIVEST"; break;
  case ResignAction::CANCEL_THEN_DELETE_THEN_DIVEST: os << "CANCEL_THEN_DELETE_THEN_DIVEST"; break;
  case ResignAction::NO_ACTION: os << "NO_ACTION"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ResignAction& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType RestoreFailureReason
std::ostream&
operator<<(std::ostream& os, const RestoreFailureReason& value)
{
  switch (value) {
  case RestoreFailureReason::RTI_UNABLE_TO_RESTORE: os << "RTI_UNABLE_TO_RESTORE"; break;
  case RestoreFailureReason::FEDERATE_REPORTED_FAILURE_DURING_RESTORE: os << "FEDERATE_REPORTED_FAILURE_DURING_RESTORE"; break;
  case RestoreFailureReason::FEDERATE_RESIGNED_DURING_RESTORE: os << "FEDERATE_RESIGNED_DURING_RESTORE"; break;
  case RestoreFailureReason::RTI_DETECTED_FAILURE_DURING_RESTORE: os << "RTI_DETECTED_FAILURE_DURING_RESTORE"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RestoreFailureReason& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType RestoreStatus
std::ostream&
operator<<(std::ostream& os, const RestoreStatus& value)
{
  switch (value) {
  case RestoreStatus::NO_RESTORE_IN_PROGRESS: os << "NO_RESTORE_IN_PROGRESS"; break;
  case RestoreStatus::FEDERATE_RESTORE_REQUEST_PENDING: os << "FEDERATE_RESTORE_REQUEST_PENDING"; break;
  case RestoreStatus::FEDERATE_WAITING_FOR_RESTORE_TO_BEGIN: os << "FEDERATE_WAITING_FOR_RESTORE_TO_BEGIN"; break;
  case RestoreStatus::FEDERATE_PREPARED_TO_RESTORE: os << "FEDERATE_PREPARED_TO_RESTORE"; break;
  case RestoreStatus::FEDERATE_RESTORING: os << "FEDERATE_RESTORING"; break;
  case RestoreStatus::FEDERATE_WAITING_FOR_FEDERATION_TO_RESTORE: os << "FEDERATE_WAITING_FOR_FEDERATION_TO_RESTORE"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RestoreStatus& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType SaveFailureReason
std::ostream&
operator<<(std::ostream& os, const SaveFailureReason& value)
{
  switch (value) {
  case SaveFailureReason::RTI_UNABLE_TO_SAVE: os << "RTI_UNABLE_TO_SAVE"; break;
  case SaveFailureReason::FEDERATE_REPORTED_FAILURE_DURING_SAVE: os << "FEDERATE_REPORTED_FAILURE_DURING_SAVE"; break;
  case SaveFailureReason::FEDERATE_RESIGNED_DURING_SAVE: os << "FEDERATE_RESIGNED_DURING_SAVE"; break;
  case SaveFailureReason::RTI_DETECTED_FAILURE_DURING_SAVE: os << "RTI_DETECTED_FAILURE_DURING_SAVE"; break;
  case SaveFailureReason::SAVE_TIME_CANNOT_BE_HONORED: os << "SAVE_TIME_CANNOT_BE_HONORED"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const SaveFailureReason& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType SaveStatus
std::ostream&
operator<<(std::ostream& os, const SaveStatus& value)
{
  switch (value) {
  case SaveStatus::NO_SAVE_IN_PROGRESS: os << "NO_SAVE_IN_PROGRESS"; break;
  case SaveStatus::FEDERATE_INSTRUCTED_TO_SAVE: os << "FEDERATE_INSTRUCTED_TO_SAVE"; break;
  case SaveStatus::FEDERATE_SAVING: os << "FEDERATE_SAVING"; break;
  case SaveStatus::FEDERATE_WAITING_FOR_FEDERATION_TO_SAVE: os << "FEDERATE_WAITING_FOR_FEDERATION_TO_SAVE"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const SaveStatus& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType ServiceGroupIndicator
std::ostream&
operator<<(std::ostream& os, const ServiceGroupIndicator& value)
{
  switch (value) {
  case ServiceGroupIndicator::FEDERATION_MANAGEMENT: os << "FEDERATION_MANAGEMENT"; break;
  case ServiceGroupIndicator::DECLARATION_MANAGEMENT: os << "DECLARATION_MANAGEMENT"; break;
  case ServiceGroupIndicator::OBJECT_MANAGEMENT: os << "OBJECT_MANAGEMENT"; break;
  case ServiceGroupIndicator::OWNERSHIP_MANAGEMENT: os << "OWNERSHIP_MANAGEMENT"; break;
  case ServiceGroupIndicator::TIME_MANAGEMENT: os << "TIME_MANAGEMENT"; break;
  case ServiceGroupIndicator::DATA_DISTRIBUTION_MANAGEMENT: os << "DATA_DISTRIBUTION_MANAGEMENT"; break;
  case ServiceGroupIndicator::SUPPORT_SERVICES: os << "SUPPORT_SERVICES"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ServiceGroupIndicator& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType LowerBoundTimeStampCommitType
std::ostream&
operator<<(std::ostream& os, const LowerBoundTimeStampCommitType& value)
{
  switch (value) {
  case LowerBoundTimeStampCommitType::TimeAdvanceCommit: os << "TimeAdvanceCommit"; break;
  case LowerBoundTimeStampCommitType::NextMessageCommit: os << "NextMessageCommit"; break;
  case LowerBoundTimeStampCommitType::TimeAdvanceAndNextMessageCommit: os << "TimeAdvanceAndNextMessageCommit"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const LowerBoundTimeStampCommitType& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType SwitchesType
std::ostream&
operator<<(std::ostream& os, const SwitchesType& value)
{
  switch (value) {
  case SwitchesType::InteractionRelevanceAdvisorySwitchesType: os << "InteractionRelevanceAdvisorySwitchesType"; break;
  case SwitchesType::ObjectClassRelevanceAdvisorySwitchesType: os << "ObjectClassRelevanceAdvisorySwitchesType"; break;
  case SwitchesType::AttributeRelevanceAdvisorySwitchesType: os << "AttributeRelevanceAdvisorySwitchesType"; break;
  case SwitchesType::AttributeScopeAdvisorySwitchesType: os << "AttributeScopeAdvisorySwitchesType"; break;
  case SwitchesType::AutoProvideSwitchesType: os << "AutoProvideSwitchesType"; break;
  case SwitchesType::ConveyRegionDesignatorSetsSwitchesType: os << "ConveyRegionDesignatorSetsSwitchesType"; break;
  case SwitchesType::ServiceReportingSwitchesType: os << "ServiceReportingSwitchesType"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const SwitchesType& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType ArrayDataTypeEncoding
std::ostream&
operator<<(std::ostream& os, const ArrayDataTypeEncoding& value)
{
  switch (value) {
  case ArrayDataTypeEncoding::FixedArrayDataTypeEncoding: os << "HLAfixedArray"; break;
  case ArrayDataTypeEncoding::VariableArrayDataTypeEncoding: os << "HLAvariableArray"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ArrayDataTypeEncoding& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType Endianness
std::ostream&
operator<<(std::ostream& os, const Endianness& value)
{
  switch (value) {
  case Endianness::BigEndian: os << "BIG"; break;
  case Endianness::LittleEndian: os << "LITTLE"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const Endianness& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// VectorDataType AttributeHandleVector
std::ostream&
operator<<(std::ostream& os, const AttributeHandleVector& value)
{
  os << "{ ";
  AttributeHandleVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeHandleVector& value)
{
  os << "{ ";
  AttributeHandleVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// VectorDataType FederateHandleVector
std::ostream&
operator<<(std::ostream& os, const FederateHandleVector& value)
{
  os << "{ ";
  FederateHandleVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FederateHandleVector& value)
{
  os << "{ ";
  FederateHandleVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// VectorDataType ParameterHandleVector
std::ostream&
operator<<(std::ostream& os, const ParameterHandleVector& value)
{
  os << "{ ";
  ParameterHandleVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ParameterHandleVector& value, ServerModel::InteractionClass* interactionClass)
{
  os << "{ ";
  ParameterHandleVector::const_iterator i = value.begin();
  if (i != value.end()) {
    prettyprint(os, *i, interactionClass);
    while (++i != value.end()) {
      os << ", "; prettyprint(os, *i, interactionClass);
    }
  }
  os << " }";
  return os;
}

// VectorDataType DimensionHandleVector
std::ostream&
operator<<(std::ostream& os, const DimensionHandleVector& value)
{
  os << "{ ";
  DimensionHandleVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const DimensionHandleVector& value)
{
  os << "{ ";
  DimensionHandleVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// SetDataType DimensionHandleSet
std::ostream&
operator<<(std::ostream& os, const DimensionHandleSet& value)
{
  os << "{ ";
  DimensionHandleSet::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const DimensionHandleSet& value, ServerModel::Federation* federation)
{
  os << "{ ";
  DimensionHandleSet::const_iterator i = value.begin();
  if (i != value.end()) {
    prettyprint(os, *i, federation);
    while (++i != value.end()) {
      os << ", "; prettyprint(os, *i, federation);
    }
  }
  os << " }";
  return os;
}

// VectorDataType ObjectInstanceHandleVector
std::ostream&
operator<<(std::ostream& os, const ObjectInstanceHandleVector& value)
{
  os << "{ ";
  ObjectInstanceHandleVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ObjectInstanceHandleVector& value, ServerModel::Federation* federation)
{
  os << "{ ";
  ObjectInstanceHandleVector::const_iterator i = value.begin();
  if (i != value.end()) {
    prettyprint(os, *i, federation);
    while (++i != value.end()) {
      os << ", "; prettyprint(os, *i, federation);
    }
  }
  os << " }";
  return os;
}

// VectorDataType RegionHandleVector
std::ostream&
operator<<(std::ostream& os, const RegionHandleVector& value)
{
  os << "{ ";
  RegionHandleVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RegionHandleVector& value)
{
  os << "{ ";
  RegionHandleVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// VectorDataType ModuleHandleVector
std::ostream&
operator<<(std::ostream& os, const ModuleHandleVector& value)
{
  os << "{ ";
  ModuleHandleVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ModuleHandleVector& value)
{
  os << "{ ";
  ModuleHandleVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// VectorDataType StringVector
std::ostream&
operator<<(std::ostream& os, const StringVector& value)
{
  os << "{ ";
  StringVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const StringVector& value)
{
  os << "{ ";
  StringVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// SetDataType StringSet
std::ostream&
operator<<(std::ostream& os, const StringSet& value)
{
  os << "{ ";
  StringSet::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const StringSet& value, ServerModel::Federation* federation)
{
  os << "{ ";
  StringSet::const_iterator i = value.begin();
  if (i != value.end()) {
    prettyprint(os, *i, federation);
    while (++i != value.end()) {
      os << ", "; prettyprint(os, *i, federation);
    }
  }
  os << " }";
  return os;
}

// PairDataType FederateHandleBoolPair
std::ostream&
operator<<(std::ostream& os, const FederateHandleBoolPair& value)
{
  os << "{ ";
  os << "first: " << value.first << ", ";
  os << "second: " << value.second;
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FederateHandleBoolPair& value, ServerModel::Federation* federation)
{
  os << "{ ";
  os << "first: "; prettyprint(os, value.first, federation); os << ", ";
  os << "second: "; prettyprint(os, value.second, federation); os << ", ";
  os << " }";
  return os;
}

// VectorDataType FederateHandleBoolPairVector
std::ostream&
operator<<(std::ostream& os, const FederateHandleBoolPairVector& value)
{
  os << "{ ";
  FederateHandleBoolPairVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FederateHandleBoolPairVector& value)
{
  os << "{ ";
  FederateHandleBoolPairVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType RangeBoundsValue
std::ostream&
operator<<(std::ostream& os, const RangeBoundsValue&  value)
{
  os << "RangeBoundsValue { ";
  os << "lowerBound: " << value.getLowerBound();
  os << ", ";
  os << "upperBound: " << value.getUpperBound();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RangeBoundsValue& value)
{
  os << "RangeBoundsValue { ";
  os << "lowerBound: "<< value.getLowerBound();
  os << ", ";
  os << "upperBound: "<< value.getUpperBound();
  os << " }";
  return os;
}

// PairDataType DimensionHandleRangeBoundsValuePair
std::ostream&
operator<<(std::ostream& os, const DimensionHandleRangeBoundsValuePair& value)
{
  os << "{ ";
  os << "first: " << value.first << ", ";
  os << "second: " << value.second;
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const DimensionHandleRangeBoundsValuePair& value, ServerModel::Federation* federation)
{
  os << "{ ";
  os << "first: "; prettyprint(os, value.first, federation); os << ", ";
  os << "second: "; prettyprint(os, value.second, federation); os << ", ";
  os << " }";
  return os;
}

// VectorDataType RegionValue
std::ostream&
operator<<(std::ostream& os, const RegionValue& value)
{
  os << "{ ";
  RegionValue::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RegionValue& value)
{
  os << "{ ";
  RegionValue::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// VectorDataType RegionValueList
std::ostream&
operator<<(std::ostream& os, const RegionValueList& value)
{
  os << "{ ";
  RegionValueList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RegionValueList& value)
{
  os << "{ ";
  RegionValueList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// PairDataType RegionHandleDimensionHandleSetPair
std::ostream&
operator<<(std::ostream& os, const RegionHandleDimensionHandleSetPair& value)
{
  os << "{ ";
  os << "first: " << value.first << ", ";
  os << "second: " << value.second;
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RegionHandleDimensionHandleSetPair& value, ServerModel::Federation* federation)
{
  os << "{ ";
  os << "first: "; prettyprint(os, value.first, federation); os << ", ";
  os << "second: "; prettyprint(os, value.second, federation); os << ", ";
  os << " }";
  return os;
}

// VectorDataType RegionHandleDimensionHandleSetPairVector
std::ostream&
operator<<(std::ostream& os, const RegionHandleDimensionHandleSetPairVector& value)
{
  os << "{ ";
  RegionHandleDimensionHandleSetPairVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RegionHandleDimensionHandleSetPairVector& value)
{
  os << "{ ";
  RegionHandleDimensionHandleSetPairVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// PairDataType RegionHandleSpaceHandlePair
std::ostream&
operator<<(std::ostream& os, const RegionHandleSpaceHandlePair& value)
{
  os << "{ ";
  os << "first: " << value.first << ", ";
  os << "second: " << value.second;
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RegionHandleSpaceHandlePair& value, ServerModel::Federation* federation)
{
  os << "{ ";
  os << "first: "; prettyprint(os, value.first, federation); os << ", ";
  os << "second: "; prettyprint(os, value.second, federation); os << ", ";
  os << " }";
  return os;
}

// VectorDataType RegionHandleSpaceHandlePairVector
std::ostream&
operator<<(std::ostream& os, const RegionHandleSpaceHandlePairVector& value)
{
  os << "{ ";
  RegionHandleSpaceHandlePairVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RegionHandleSpaceHandlePairVector& value)
{
  os << "{ ";
  RegionHandleSpaceHandlePairVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// PairDataType RegionHandleRegionValuePair
std::ostream&
operator<<(std::ostream& os, const RegionHandleRegionValuePair& value)
{
  os << "{ ";
  os << "first: " << value.first << ", ";
  os << "second: " << value.second;
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RegionHandleRegionValuePair& value, ServerModel::Federation* federation)
{
  os << "{ ";
  os << "first: "; prettyprint(os, value.first, federation); os << ", ";
  os << "second: "; prettyprint(os, value.second, federation); os << ", ";
  os << " }";
  return os;
}

// VectorDataType RegionHandleRegionValuePairVector
std::ostream&
operator<<(std::ostream& os, const RegionHandleRegionValuePairVector& value)
{
  os << "{ ";
  RegionHandleRegionValuePairVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RegionHandleRegionValuePairVector& value)
{
  os << "{ ";
  RegionHandleRegionValuePairVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// PairDataType InteractionClassHandleRegionValueListPair
std::ostream&
operator<<(std::ostream& os, const InteractionClassHandleRegionValueListPair& value)
{
  os << "{ ";
  os << "first: " << value.first << ", ";
  os << "second: " << value.second;
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const InteractionClassHandleRegionValueListPair& value, ServerModel::Federation* federation)
{
  os << "{ ";
  os << "first: "; prettyprint(os, value.first, federation); os << ", ";
  os << "second: "; prettyprint(os, value.second, federation); os << ", ";
  os << " }";
  return os;
}

// PairDataType AttributeHandleRegionValueListPair
std::ostream&
operator<<(std::ostream& os, const AttributeHandleRegionValueListPair& value)
{
  os << "{ ";
  os << "first: " << value.first << ", ";
  os << "second: " << value.second;
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeHandleRegionValueListPair& value, ServerModel::Federation* federation)
{
  os << "{ ";
  os << "first: "; prettyprint(os, value.first, federation); os << ", ";
  os << "second: "; prettyprint(os, value.second, federation); os << ", ";
  os << " }";
  return os;
}

// StructDataType AttributeState
std::ostream&
operator<<(std::ostream& os, const AttributeState&  value)
{
  os << "AttributeState { ";
  os << "attributeHandle: " << value.getAttributeHandle();
  os << ", ";
  os << "ownerFederate: " << value.getOwnerFederate();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeState& value)
{
  os << "AttributeState { ";
  os << "attributeHandle: "<< value.getAttributeHandle();
  os << ", ";
  os << "ownerFederate: "<< value.getOwnerFederate();
  os << " }";
  return os;
}

// VectorDataType AttributeStateVector
std::ostream&
operator<<(std::ostream& os, const AttributeStateVector& value)
{
  os << "{ ";
  AttributeStateVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeStateVector& value)
{
  os << "{ ";
  AttributeStateVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType ParameterValue
std::ostream&
operator<<(std::ostream& os, const ParameterValue&  value)
{
  os << "ParameterValue { ";
  os << "parameterHandle: " << value.getParameterHandle();
  os << ", ";
  os << "value: " << value.getValue();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ParameterValue& value, ServerModel::InteractionClass* interactionClass)
{
  os << "ParameterValue { ";
  os << "parameterHandle: "; prettyprint(os, value.getParameterHandle(), interactionClass);//ParameterHandle parent=InteractionClass
  os << ", ";
  os << "value: "<< value.getValue();
  os << " }";
  return os;
}

// VectorDataType ParameterValueVector
std::ostream&
operator<<(std::ostream& os, const ParameterValueVector& value)
{
  os << "{ ";
  ParameterValueVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ParameterValueVector& value, ServerModel::InteractionClass* interactionClass)
{
  os << "{ ";
  ParameterValueVector::const_iterator i = value.begin();
  if (i != value.end()) {
    prettyprint(os, *i, interactionClass);
    while (++i != value.end()) {
      os << ", "; prettyprint(os, *i, interactionClass);
    }
  }
  os << " }";
  return os;
}

// StructDataType AttributeValue
std::ostream&
operator<<(std::ostream& os, const AttributeValue&  value)
{
  os << "AttributeValue { ";
  os << "attributeHandle: " << value.getAttributeHandle();
  os << ", ";
  os << "value: " << value.getValue();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeValue& value)
{
  os << "AttributeValue { ";
  os << "attributeHandle: "<< value.getAttributeHandle();
  os << ", ";
  os << "value: "<< value.getValue();
  os << " }";
  return os;
}

// VectorDataType AttributeValueVector
std::ostream&
operator<<(std::ostream& os, const AttributeValueVector& value)
{
  os << "{ ";
  AttributeValueVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeValueVector& value)
{
  os << "{ ";
  AttributeValueVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// PairDataType FederateHandleSaveStatusPair
std::ostream&
operator<<(std::ostream& os, const FederateHandleSaveStatusPair& value)
{
  os << "{ ";
  os << "first: " << value.first << ", ";
  os << "second: " << value.second;
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FederateHandleSaveStatusPair& value, ServerModel::Federation* federation)
{
  os << "{ ";
  os << "first: "; prettyprint(os, value.first, federation); os << ", ";
  os << "second: "; prettyprint(os, value.second, federation); os << ", ";
  os << " }";
  return os;
}

// VectorDataType FederateHandleSaveStatusPairVector
std::ostream&
operator<<(std::ostream& os, const FederateHandleSaveStatusPairVector& value)
{
  os << "{ ";
  FederateHandleSaveStatusPairVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FederateHandleSaveStatusPairVector& value)
{
  os << "{ ";
  FederateHandleSaveStatusPairVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// PairDataType FederateHandleRestoreStatusPair
std::ostream&
operator<<(std::ostream& os, const FederateHandleRestoreStatusPair& value)
{
  os << "{ ";
  os << "first: " << value.first << ", ";
  os << "second: " << value.second;
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FederateHandleRestoreStatusPair& value, ServerModel::Federation* federation)
{
  os << "{ ";
  os << "first: "; prettyprint(os, value.first, federation); os << ", ";
  os << "second: "; prettyprint(os, value.second, federation); os << ", ";
  os << " }";
  return os;
}

// VectorDataType FederateHandleRestoreStatusPairVector
std::ostream&
operator<<(std::ostream& os, const FederateHandleRestoreStatusPairVector& value)
{
  os << "{ ";
  FederateHandleRestoreStatusPairVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FederateHandleRestoreStatusPairVector& value)
{
  os << "{ ";
  FederateHandleRestoreStatusPairVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FederationExecutionInformation
std::ostream&
operator<<(std::ostream& os, const FederationExecutionInformation&  value)
{
  os << "FederationExecutionInformation { ";
  os << "federationExecutionName: " << value.getFederationExecutionName();
  os << ", ";
  os << "logicalTimeFactoryName: " << value.getLogicalTimeFactoryName();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FederationExecutionInformation& value)
{
  os << "FederationExecutionInformation { ";
  os << "federationExecutionName: "<< value.getFederationExecutionName();
  os << ", ";
  os << "logicalTimeFactoryName: "<< value.getLogicalTimeFactoryName();
  os << " }";
  return os;
}

// VectorDataType FederationExecutionInformationVector
std::ostream&
operator<<(std::ostream& os, const FederationExecutionInformationVector& value)
{
  os << "{ ";
  FederationExecutionInformationVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FederationExecutionInformationVector& value)
{
  os << "{ ";
  FederationExecutionInformationVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// PairDataType ObjectInstanceHandleNamePair
std::ostream&
operator<<(std::ostream& os, const ObjectInstanceHandleNamePair& value)
{
  os << "{ ";
  os << "first: " << value.first << ", ";
  os << "second: " << value.second;
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ObjectInstanceHandleNamePair& value, ServerModel::Federation* federation)
{
  os << "{ ";
  os << "first: "; prettyprint(os, value.first, federation); os << ", ";
  os << "second: "; prettyprint(os, value.second, federation); os << ", ";
  os << " }";
  return os;
}

// VectorDataType ObjectInstanceHandleNamePairVector
std::ostream&
operator<<(std::ostream& os, const ObjectInstanceHandleNamePairVector& value)
{
  os << "{ ";
  ObjectInstanceHandleNamePairVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ObjectInstanceHandleNamePairVector& value)
{
  os << "{ ";
  ObjectInstanceHandleNamePairVector::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// EnumDataType CreateFederationExecutionResponseType
std::ostream&
operator<<(std::ostream& os, const CreateFederationExecutionResponseType& value)
{
  switch (value) {
  case CreateFederationExecutionResponseType::CreateFederationExecutionResponseSuccess: os << "CreateFederationExecutionResponseSuccess"; break;
  case CreateFederationExecutionResponseType::CreateFederationExecutionResponseFederationExecutionAlreadyExists: os << "CreateFederationExecutionResponseFederationExecutionAlreadyExists"; break;
  case CreateFederationExecutionResponseType::CreateFederationExecutionResponseCouldNotOpenFDD: os << "CreateFederationExecutionResponseCouldNotOpenFDD"; break;
  case CreateFederationExecutionResponseType::CreateFederationExecutionResponseErrorReadingFDD: os << "CreateFederationExecutionResponseErrorReadingFDD"; break;
  case CreateFederationExecutionResponseType::CreateFederationExecutionResponseCouldNotCreateLogicalTimeFactory: os << "CreateFederationExecutionResponseCouldNotCreateLogicalTimeFactory"; break;
  case CreateFederationExecutionResponseType::CreateFederationExecutionResponseInconsistentFDD: os << "CreateFederationExecutionResponseInconsistentFDD"; break;
  case CreateFederationExecutionResponseType::CreateFederationExecutionResponseRTIinternalError: os << "CreateFederationExecutionResponseRTIinternalError"; break;
  case CreateFederationExecutionResponseType::CreateFederationExecutionResponseTimeout: os << "CreateFederationExecutionResponseTimeout"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const CreateFederationExecutionResponseType& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType DestroyFederationExecutionResponseType
std::ostream&
operator<<(std::ostream& os, const DestroyFederationExecutionResponseType& value)
{
  switch (value) {
  case DestroyFederationExecutionResponseType::DestroyFederationExecutionResponseSuccess: os << "DestroyFederationExecutionResponseSuccess"; break;
  case DestroyFederationExecutionResponseType::DestroyFederationExecutionResponseFederatesCurrentlyJoined: os << "DestroyFederationExecutionResponseFederatesCurrentlyJoined"; break;
  case DestroyFederationExecutionResponseType::DestroyFederationExecutionResponseFederationExecutionDoesNotExist: os << "DestroyFederationExecutionResponseFederationExecutionDoesNotExist"; break;
  case DestroyFederationExecutionResponseType::DestroyFederationExecutionResponseRTIinternalError: os << "DestroyFederationExecutionResponseRTIinternalError"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const DestroyFederationExecutionResponseType& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType JoinFederationExecutionResponseType
std::ostream&
operator<<(std::ostream& os, const JoinFederationExecutionResponseType& value)
{
  switch (value) {
  case JoinFederationExecutionResponseType::JoinFederationExecutionResponseSuccess: os << "JoinFederationExecutionResponseSuccess"; break;
  case JoinFederationExecutionResponseType::JoinFederationExecutionResponseFederateNameAlreadyInUse: os << "JoinFederationExecutionResponseFederateNameAlreadyInUse"; break;
  case JoinFederationExecutionResponseType::JoinFederationExecutionResponseFederationExecutionDoesNotExist: os << "JoinFederationExecutionResponseFederationExecutionDoesNotExist"; break;
  case JoinFederationExecutionResponseType::JoinFederationExecutionResponseSaveInProgress: os << "JoinFederationExecutionResponseSaveInProgress"; break;
  case JoinFederationExecutionResponseType::JoinFederationExecutionResponseRestoreInProgress: os << "JoinFederationExecutionResponseRestoreInProgress"; break;
  case JoinFederationExecutionResponseType::JoinFederationExecutionResponseInconsistentFDD: os << "JoinFederationExecutionResponseInconsistentFDD"; break;
  case JoinFederationExecutionResponseType::JoinFederationExecutionResponseTimeout: os << "JoinFederationExecutionResponseTimeout"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const JoinFederationExecutionResponseType& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// EnumDataType RegisterFederationSynchronizationPointResponseType
std::ostream&
operator<<(std::ostream& os, const RegisterFederationSynchronizationPointResponseType& value)
{
  switch (value) {
  case RegisterFederationSynchronizationPointResponseType::RegisterFederationSynchronizationPointResponseSuccess: os << "RegisterFederationSynchronizationPointResponseSuccess"; break;
  case RegisterFederationSynchronizationPointResponseType::RegisterFederationSynchronizationPointResponseLabelNotUnique: os << "RegisterFederationSynchronizationPointResponseLabelNotUnique"; break;
  case RegisterFederationSynchronizationPointResponseType::RegisterFederationSynchronizationPointResponseMemberNotJoined: os << "RegisterFederationSynchronizationPointResponseMemberNotJoined"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RegisterFederationSynchronizationPointResponseType& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// MapDataType ConfigurationParameterMap
std::ostream&
operator<<(std::ostream& os, const ConfigurationParameterMap& value)
{
  os << "{ ";
  ConfigurationParameterMap::const_iterator i = value.begin();
  if (i != value.end()) {
    os << i->first << ": " << i->second;
    while (++i != value.end()) {
      os << ", " << i->first << ": " << i->second;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ConfigurationParameterMap& value, ServerModel::Federation* federation)
{
  os << "{ ";
  ConfigurationParameterMap::const_iterator i = value.begin();
  if (i != value.end()) {
    prettyprint(os, i->first, federation); os << ": "; prettyprint(os, i->second, federation);
    while (++i != value.end()) {
      prettyprint(os, i->first, federation); os << ": "; prettyprint(os, i->second, federation);
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringBasicDataType
std::ostream&
operator<<(std::ostream& os, const FOMStringBasicDataType&  value)
{
  os << "FOMStringBasicDataType { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "size: " << value.getSize();
  os << ", ";
  os << "endian: " << value.getEndian();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringBasicDataType& value)
{
  os << "FOMStringBasicDataType { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "size: "<< value.getSize();
  os << ", ";
  os << "endian: "<< value.getEndian();
  os << " }";
  return os;
}

// VectorDataType FOMStringBasicDataTypeList
std::ostream&
operator<<(std::ostream& os, const FOMStringBasicDataTypeList& value)
{
  os << "{ ";
  FOMStringBasicDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringBasicDataTypeList& value)
{
  os << "{ ";
  FOMStringBasicDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringSimpleDataType
std::ostream&
operator<<(std::ostream& os, const FOMStringSimpleDataType&  value)
{
  os << "FOMStringSimpleDataType { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "representation: " << value.getRepresentation();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringSimpleDataType& value)
{
  os << "FOMStringSimpleDataType { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "representation: "<< value.getRepresentation();
  os << " }";
  return os;
}

// VectorDataType FOMStringSimpleDataTypeList
std::ostream&
operator<<(std::ostream& os, const FOMStringSimpleDataTypeList& value)
{
  os << "{ ";
  FOMStringSimpleDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringSimpleDataTypeList& value)
{
  os << "{ ";
  FOMStringSimpleDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringEnumerator
std::ostream&
operator<<(std::ostream& os, const FOMStringEnumerator&  value)
{
  os << "FOMStringEnumerator { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "value: " << value.getValue();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringEnumerator& value)
{
  os << "FOMStringEnumerator { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "value: "<< value.getValue();
  os << " }";
  return os;
}

// VectorDataType FOMStringEnumeratorList
std::ostream&
operator<<(std::ostream& os, const FOMStringEnumeratorList& value)
{
  os << "{ ";
  FOMStringEnumeratorList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringEnumeratorList& value)
{
  os << "{ ";
  FOMStringEnumeratorList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringEnumeratedDataType
std::ostream&
operator<<(std::ostream& os, const FOMStringEnumeratedDataType&  value)
{
  os << "FOMStringEnumeratedDataType { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "representation: " << value.getRepresentation();
  os << ", ";
  os << "enumerators: " << value.getEnumerators();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringEnumeratedDataType& value)
{
  os << "FOMStringEnumeratedDataType { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "representation: "<< value.getRepresentation();
  os << ", ";
  os << "enumerators: "<< value.getEnumerators();
  os << " }";
  return os;
}

// VectorDataType FOMStringEnumeratedDataTypeList
std::ostream&
operator<<(std::ostream& os, const FOMStringEnumeratedDataTypeList& value)
{
  os << "{ ";
  FOMStringEnumeratedDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringEnumeratedDataTypeList& value)
{
  os << "{ ";
  FOMStringEnumeratedDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringArrayDataType
std::ostream&
operator<<(std::ostream& os, const FOMStringArrayDataType&  value)
{
  os << "FOMStringArrayDataType { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << ", ";
  os << "cardinality: " << value.getCardinality();
  os << ", ";
  os << "encoding: " << value.getEncoding();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringArrayDataType& value)
{
  os << "FOMStringArrayDataType { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << ", ";
  os << "cardinality: "<< value.getCardinality();
  os << ", ";
  os << "encoding: "<< value.getEncoding();
  os << " }";
  return os;
}

// VectorDataType FOMStringArrayDataTypeList
std::ostream&
operator<<(std::ostream& os, const FOMStringArrayDataTypeList& value)
{
  os << "{ ";
  FOMStringArrayDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringArrayDataTypeList& value)
{
  os << "{ ";
  FOMStringArrayDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringArrayDataType2
std::ostream&
operator<<(std::ostream& os, const FOMStringArrayDataType2&  value)
{
  os << "FOMStringArrayDataType2 { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << ", ";
  os << "cardinality: " << value.getCardinality();
  os << ", ";
  os << "encoding: " << value.getEncoding();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringArrayDataType2& value)
{
  os << "FOMStringArrayDataType2 { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << ", ";
  os << "cardinality: "<< value.getCardinality();
  os << ", ";
  os << "encoding: "<< value.getEncoding();
  os << " }";
  return os;
}

// VectorDataType FOMStringArrayDataType2List
std::ostream&
operator<<(std::ostream& os, const FOMStringArrayDataType2List& value)
{
  os << "{ ";
  FOMStringArrayDataType2List::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringArrayDataType2List& value)
{
  os << "{ ";
  FOMStringArrayDataType2List::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringFixedRecordField
std::ostream&
operator<<(std::ostream& os, const FOMStringFixedRecordField&  value)
{
  os << "FOMStringFixedRecordField { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringFixedRecordField& value)
{
  os << "FOMStringFixedRecordField { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << " }";
  return os;
}

// VectorDataType FOMStringFixedRecordFieldList
std::ostream&
operator<<(std::ostream& os, const FOMStringFixedRecordFieldList& value)
{
  os << "{ ";
  FOMStringFixedRecordFieldList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringFixedRecordFieldList& value)
{
  os << "{ ";
  FOMStringFixedRecordFieldList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringFixedRecordDataType
std::ostream&
operator<<(std::ostream& os, const FOMStringFixedRecordDataType&  value)
{
  os << "FOMStringFixedRecordDataType { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "encoding: " << value.getEncoding();
  os << ", ";
  os << "fields: " << value.getFields();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringFixedRecordDataType& value)
{
  os << "FOMStringFixedRecordDataType { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "encoding: "<< value.getEncoding();
  os << ", ";
  os << "fields: "<< value.getFields();
  os << " }";
  return os;
}

// VectorDataType FOMStringFixedRecordDataTypeList
std::ostream&
operator<<(std::ostream& os, const FOMStringFixedRecordDataTypeList& value)
{
  os << "{ ";
  FOMStringFixedRecordDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringFixedRecordDataTypeList& value)
{
  os << "{ ";
  FOMStringFixedRecordDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringFixedRecordField2
std::ostream&
operator<<(std::ostream& os, const FOMStringFixedRecordField2&  value)
{
  os << "FOMStringFixedRecordField2 { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << ", ";
  os << "version: " << value.getVersion();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringFixedRecordField2& value)
{
  os << "FOMStringFixedRecordField2 { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << ", ";
  os << "version: "<< value.getVersion();
  os << " }";
  return os;
}

// VectorDataType FOMStringFixedRecordField2List
std::ostream&
operator<<(std::ostream& os, const FOMStringFixedRecordField2List& value)
{
  os << "{ ";
  FOMStringFixedRecordField2List::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringFixedRecordField2List& value)
{
  os << "{ ";
  FOMStringFixedRecordField2List::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringFixedRecordDataType2
std::ostream&
operator<<(std::ostream& os, const FOMStringFixedRecordDataType2&  value)
{
  os << "FOMStringFixedRecordDataType2 { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "encoding: " << value.getEncoding();
  os << ", ";
  os << "include: " << value.getInclude();
  os << ", ";
  os << "version: " << value.getVersion();
  os << ", ";
  os << "fields: " << value.getFields();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringFixedRecordDataType2& value)
{
  os << "FOMStringFixedRecordDataType2 { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "encoding: "<< value.getEncoding();
  os << ", ";
  os << "include: "<< value.getInclude();
  os << ", ";
  os << "version: "<< value.getVersion();
  os << ", ";
  os << "fields: "<< value.getFields();
  os << " }";
  return os;
}

// VectorDataType FOMStringFixedRecordDataType2List
std::ostream&
operator<<(std::ostream& os, const FOMStringFixedRecordDataType2List& value)
{
  os << "{ ";
  FOMStringFixedRecordDataType2List::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringFixedRecordDataType2List& value)
{
  os << "{ ";
  FOMStringFixedRecordDataType2List::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringVariantRecordAlternative
std::ostream&
operator<<(std::ostream& os, const FOMStringVariantRecordAlternative&  value)
{
  os << "FOMStringVariantRecordAlternative { ";
  os << "enumerator: " << value.getEnumerator();
  os << ", ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringVariantRecordAlternative& value)
{
  os << "FOMStringVariantRecordAlternative { ";
  os << "enumerator: "<< value.getEnumerator();
  os << ", ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << " }";
  return os;
}

// VectorDataType FOMStringVariantRecordAlternativeList
std::ostream&
operator<<(std::ostream& os, const FOMStringVariantRecordAlternativeList& value)
{
  os << "{ ";
  FOMStringVariantRecordAlternativeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringVariantRecordAlternativeList& value)
{
  os << "{ ";
  FOMStringVariantRecordAlternativeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringVariantRecordDataType
std::ostream&
operator<<(std::ostream& os, const FOMStringVariantRecordDataType&  value)
{
  os << "FOMStringVariantRecordDataType { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "discriminant: " << value.getDiscriminant();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << ", ";
  os << "alternatives: " << value.getAlternatives();
  os << ", ";
  os << "encoding: " << value.getEncoding();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringVariantRecordDataType& value)
{
  os << "FOMStringVariantRecordDataType { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "discriminant: "<< value.getDiscriminant();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << ", ";
  os << "alternatives: "<< value.getAlternatives();
  os << ", ";
  os << "encoding: "<< value.getEncoding();
  os << " }";
  return os;
}

// VectorDataType FOMStringVariantRecordDataTypeList
std::ostream&
operator<<(std::ostream& os, const FOMStringVariantRecordDataTypeList& value)
{
  os << "{ ";
  FOMStringVariantRecordDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringVariantRecordDataTypeList& value)
{
  os << "{ ";
  FOMStringVariantRecordDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringVariantRecordAlternative2
std::ostream&
operator<<(std::ostream& os, const FOMStringVariantRecordAlternative2&  value)
{
  os << "FOMStringVariantRecordAlternative2 { ";
  os << "enumerator: " << value.getEnumerator();
  os << ", ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringVariantRecordAlternative2& value)
{
  os << "FOMStringVariantRecordAlternative2 { ";
  os << "enumerator: "<< value.getEnumerator();
  os << ", ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << " }";
  return os;
}

// VectorDataType FOMStringVariantRecordAlternative2List
std::ostream&
operator<<(std::ostream& os, const FOMStringVariantRecordAlternative2List& value)
{
  os << "{ ";
  FOMStringVariantRecordAlternative2List::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringVariantRecordAlternative2List& value)
{
  os << "{ ";
  FOMStringVariantRecordAlternative2List::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringVariantRecordDataType2
std::ostream&
operator<<(std::ostream& os, const FOMStringVariantRecordDataType2&  value)
{
  os << "FOMStringVariantRecordDataType2 { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "discriminant: " << value.getDiscriminant();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << ", ";
  os << "alternatives: " << value.getAlternatives();
  os << ", ";
  os << "encoding: " << value.getEncoding();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringVariantRecordDataType2& value)
{
  os << "FOMStringVariantRecordDataType2 { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "discriminant: "<< value.getDiscriminant();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << ", ";
  os << "alternatives: "<< value.getAlternatives();
  os << ", ";
  os << "encoding: "<< value.getEncoding();
  os << " }";
  return os;
}

// VectorDataType FOMStringVariantRecordDataType2List
std::ostream&
operator<<(std::ostream& os, const FOMStringVariantRecordDataType2List& value)
{
  os << "{ ";
  FOMStringVariantRecordDataType2List::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringVariantRecordDataType2List& value)
{
  os << "{ ";
  FOMStringVariantRecordDataType2List::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringTransportationType
std::ostream&
operator<<(std::ostream& os, const FOMStringTransportationType&  value)
{
  os << "FOMStringTransportationType { ";
  os << "name: " << value.getName();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringTransportationType& value)
{
  os << "FOMStringTransportationType { ";
  os << "name: "<< value.getName();
  os << " }";
  return os;
}

// VectorDataType FOMStringTransportationTypeList
std::ostream&
operator<<(std::ostream& os, const FOMStringTransportationTypeList& value)
{
  os << "{ ";
  FOMStringTransportationTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringTransportationTypeList& value)
{
  os << "{ ";
  FOMStringTransportationTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringDimension
std::ostream&
operator<<(std::ostream& os, const FOMStringDimension&  value)
{
  os << "FOMStringDimension { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "upperBound: " << value.getUpperBound();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringDimension& value)
{
  os << "FOMStringDimension { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "upperBound: "<< value.getUpperBound();
  os << " }";
  return os;
}

// VectorDataType FOMStringDimensionList
std::ostream&
operator<<(std::ostream& os, const FOMStringDimensionList& value)
{
  os << "{ ";
  FOMStringDimensionList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringDimensionList& value)
{
  os << "{ ";
  FOMStringDimensionList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringRoutingSpace
std::ostream&
operator<<(std::ostream& os, const FOMStringRoutingSpace&  value)
{
  os << "FOMStringRoutingSpace { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dimensionSet: " << value.getDimensionSet();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringRoutingSpace& value)
{
  os << "FOMStringRoutingSpace { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dimensionSet: "<< value.getDimensionSet();
  os << " }";
  return os;
}

// VectorDataType FOMStringRoutingSpaceList
std::ostream&
operator<<(std::ostream& os, const FOMStringRoutingSpaceList& value)
{
  os << "{ ";
  FOMStringRoutingSpaceList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringRoutingSpaceList& value)
{
  os << "{ ";
  FOMStringRoutingSpaceList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringParameter
std::ostream&
operator<<(std::ostream& os, const FOMStringParameter&  value)
{
  os << "FOMStringParameter { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringParameter& value)
{
  os << "FOMStringParameter { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << " }";
  return os;
}

// VectorDataType FOMStringParameterList
std::ostream&
operator<<(std::ostream& os, const FOMStringParameterList& value)
{
  os << "{ ";
  FOMStringParameterList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringParameterList& value)
{
  os << "{ ";
  FOMStringParameterList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringInteractionClass
std::ostream&
operator<<(std::ostream& os, const FOMStringInteractionClass&  value)
{
  os << "FOMStringInteractionClass { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "orderType: " << value.getOrderType();
  os << ", ";
  os << "transportationType: " << value.getTransportationType();
  os << ", ";
  os << "routingSpace: " << value.getRoutingSpace();
  os << ", ";
  os << "dimensionSet: " << value.getDimensionSet();
  os << ", ";
  os << "parameterList: " << value.getParameterList();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringInteractionClass& value)
{
  os << "FOMStringInteractionClass { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "orderType: "<< value.getOrderType();
  os << ", ";
  os << "transportationType: "<< value.getTransportationType();
  os << ", ";
  os << "routingSpace: "<< value.getRoutingSpace();
  os << ", ";
  os << "dimensionSet: "<< value.getDimensionSet();
  os << ", ";
  os << "parameterList: "<< value.getParameterList();
  os << " }";
  return os;
}

// VectorDataType FOMStringInteractionClassList
std::ostream&
operator<<(std::ostream& os, const FOMStringInteractionClassList& value)
{
  os << "{ ";
  FOMStringInteractionClassList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringInteractionClassList& value)
{
  os << "{ ";
  FOMStringInteractionClassList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringAttribute
std::ostream&
operator<<(std::ostream& os, const FOMStringAttribute&  value)
{
  os << "FOMStringAttribute { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << ", ";
  os << "orderType: " << value.getOrderType();
  os << ", ";
  os << "transportationType: " << value.getTransportationType();
  os << ", ";
  os << "routingSpace: " << value.getRoutingSpace();
  os << ", ";
  os << "dimensionSet: " << value.getDimensionSet();
  os << ", ";
  os << "ownershipType: " << value.getOwnershipType();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringAttribute& value)
{
  os << "FOMStringAttribute { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << ", ";
  os << "orderType: "<< value.getOrderType();
  os << ", ";
  os << "transportationType: "<< value.getTransportationType();
  os << ", ";
  os << "routingSpace: "<< value.getRoutingSpace();
  os << ", ";
  os << "dimensionSet: "<< value.getDimensionSet();
  os << ", ";
  os << "ownershipType: "<< value.getOwnershipType();
  os << " }";
  return os;
}

// VectorDataType FOMStringAttributeList
std::ostream&
operator<<(std::ostream& os, const FOMStringAttributeList& value)
{
  os << "{ ";
  FOMStringAttributeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringAttributeList& value)
{
  os << "{ ";
  FOMStringAttributeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringObjectClass
std::ostream&
operator<<(std::ostream& os, const FOMStringObjectClass&  value)
{
  os << "FOMStringObjectClass { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "attributeList: " << value.getAttributeList();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringObjectClass& value)
{
  os << "FOMStringObjectClass { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "attributeList: "<< value.getAttributeList();
  os << " }";
  return os;
}

// VectorDataType FOMStringObjectClassList
std::ostream&
operator<<(std::ostream& os, const FOMStringObjectClassList& value)
{
  os << "{ ";
  FOMStringObjectClassList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringObjectClassList& value)
{
  os << "{ ";
  FOMStringObjectClassList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringUpdateRate
std::ostream&
operator<<(std::ostream& os, const FOMStringUpdateRate&  value)
{
  os << "FOMStringUpdateRate { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "rate: " << value.getRate();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringUpdateRate& value)
{
  os << "FOMStringUpdateRate { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "rate: "<< value.getRate();
  os << " }";
  return os;
}

// VectorDataType FOMStringUpdateRateList
std::ostream&
operator<<(std::ostream& os, const FOMStringUpdateRateList& value)
{
  os << "{ ";
  FOMStringUpdateRateList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringUpdateRateList& value)
{
  os << "{ ";
  FOMStringUpdateRateList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringSwitch
std::ostream&
operator<<(std::ostream& os, const FOMStringSwitch&  value)
{
  os << "FOMStringSwitch { ";
  os << "switchesType: " << value.getSwitchesType();
  os << ", ";
  os << "enabled: " << value.getEnabled();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringSwitch& value)
{
  os << "FOMStringSwitch { ";
  os << "switchesType: "<< value.getSwitchesType();
  os << ", ";
  os << "enabled: "<< value.getEnabled();
  os << " }";
  return os;
}

// VectorDataType FOMStringSwitchList
std::ostream&
operator<<(std::ostream& os, const FOMStringSwitchList& value)
{
  os << "{ ";
  FOMStringSwitchList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringSwitchList& value)
{
  os << "{ ";
  FOMStringSwitchList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringModule
std::ostream&
operator<<(std::ostream& os, const FOMStringModule&  value)
{
  os << "FOMStringModule { ";
  os << "designator: " << value.getDesignator();
  os << ", ";
  os << "transportationTypeList: " << value.getTransportationTypeList();
  os << ", ";
  os << "dimensionList: " << value.getDimensionList();
  os << ", ";
  os << "routingSpaceList: " << value.getRoutingSpaceList();
  os << ", ";
  os << "interactionClassList: " << value.getInteractionClassList();
  os << ", ";
  os << "objectClassList: " << value.getObjectClassList();
  os << ", ";
  os << "updateRateList: " << value.getUpdateRateList();
  os << ", ";
  os << "switchList: " << value.getSwitchList();
  os << ", ";
  os << "simpleDataTypeList: " << value.getSimpleDataTypeList();
  os << ", ";
  os << "enumeratedDataTypeList: " << value.getEnumeratedDataTypeList();
  os << ", ";
  os << "arrayDataTypeList: " << value.getArrayDataTypeList();
  os << ", ";
  os << "fixedRecordDataTypeList: " << value.getFixedRecordDataTypeList();
  os << ", ";
  os << "variantRecordDataTypeList: " << value.getVariantRecordDataTypeList();
  os << ", ";
  os << "artificialInteractionRoot: " << value.getArtificialInteractionRoot();
  os << ", ";
  os << "artificialObjectRoot: " << value.getArtificialObjectRoot();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringModule& value)
{
  os << "FOMStringModule { ";
  os << "designator: "<< value.getDesignator();
  os << ", ";
  os << "transportationTypeList: "<< value.getTransportationTypeList();
  os << ", ";
  os << "dimensionList: "<< value.getDimensionList();
  os << ", ";
  os << "routingSpaceList: "<< value.getRoutingSpaceList();
  os << ", ";
  os << "interactionClassList: "<< value.getInteractionClassList();
  os << ", ";
  os << "objectClassList: "<< value.getObjectClassList();
  os << ", ";
  os << "updateRateList: "<< value.getUpdateRateList();
  os << ", ";
  os << "switchList: "<< value.getSwitchList();
  os << ", ";
  os << "simpleDataTypeList: "<< value.getSimpleDataTypeList();
  os << ", ";
  os << "enumeratedDataTypeList: "<< value.getEnumeratedDataTypeList();
  os << ", ";
  os << "arrayDataTypeList: "<< value.getArrayDataTypeList();
  os << ", ";
  os << "fixedRecordDataTypeList: "<< value.getFixedRecordDataTypeList();
  os << ", ";
  os << "variantRecordDataTypeList: "<< value.getVariantRecordDataTypeList();
  os << ", ";
  os << "artificialInteractionRoot: "<< value.getArtificialInteractionRoot();
  os << ", ";
  os << "artificialObjectRoot: "<< value.getArtificialObjectRoot();
  os << " }";
  return os;
}

// VectorDataType FOMStringModuleList
std::ostream&
operator<<(std::ostream& os, const FOMStringModuleList& value)
{
  os << "{ ";
  FOMStringModuleList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringModuleList& value)
{
  os << "{ ";
  FOMStringModuleList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMStringModule2
std::ostream&
operator<<(std::ostream& os, const FOMStringModule2&  value)
{
  os << "FOMStringModule2 { ";
  os << "designator: " << value.getDesignator();
  os << ", ";
  os << "transportationTypeList: " << value.getTransportationTypeList();
  os << ", ";
  os << "dimensionList: " << value.getDimensionList();
  os << ", ";
  os << "routingSpaceList: " << value.getRoutingSpaceList();
  os << ", ";
  os << "interactionClassList: " << value.getInteractionClassList();
  os << ", ";
  os << "objectClassList: " << value.getObjectClassList();
  os << ", ";
  os << "updateRateList: " << value.getUpdateRateList();
  os << ", ";
  os << "switchList: " << value.getSwitchList();
  os << ", ";
  os << "basicDataTypeList: " << value.getBasicDataTypeList();
  os << ", ";
  os << "simpleDataTypeList: " << value.getSimpleDataTypeList();
  os << ", ";
  os << "enumeratedDataTypeList: " << value.getEnumeratedDataTypeList();
  os << ", ";
  os << "arrayDataTypeList: " << value.getArrayDataTypeList();
  os << ", ";
  os << "fixedRecordDataTypeList: " << value.getFixedRecordDataTypeList();
  os << ", ";
  os << "variantRecordDataTypeList: " << value.getVariantRecordDataTypeList();
  os << ", ";
  os << "artificialInteractionRoot: " << value.getArtificialInteractionRoot();
  os << ", ";
  os << "artificialObjectRoot: " << value.getArtificialObjectRoot();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringModule2& value)
{
  os << "FOMStringModule2 { ";
  os << "designator: "<< value.getDesignator();
  os << ", ";
  os << "transportationTypeList: "<< value.getTransportationTypeList();
  os << ", ";
  os << "dimensionList: "<< value.getDimensionList();
  os << ", ";
  os << "routingSpaceList: "<< value.getRoutingSpaceList();
  os << ", ";
  os << "interactionClassList: "<< value.getInteractionClassList();
  os << ", ";
  os << "objectClassList: "<< value.getObjectClassList();
  os << ", ";
  os << "updateRateList: "<< value.getUpdateRateList();
  os << ", ";
  os << "switchList: "<< value.getSwitchList();
  os << ", ";
  os << "basicDataTypeList: "<< value.getBasicDataTypeList();
  os << ", ";
  os << "simpleDataTypeList: "<< value.getSimpleDataTypeList();
  os << ", ";
  os << "enumeratedDataTypeList: "<< value.getEnumeratedDataTypeList();
  os << ", ";
  os << "arrayDataTypeList: "<< value.getArrayDataTypeList();
  os << ", ";
  os << "fixedRecordDataTypeList: "<< value.getFixedRecordDataTypeList();
  os << ", ";
  os << "variantRecordDataTypeList: "<< value.getVariantRecordDataTypeList();
  os << ", ";
  os << "artificialInteractionRoot: "<< value.getArtificialInteractionRoot();
  os << ", ";
  os << "artificialObjectRoot: "<< value.getArtificialObjectRoot();
  os << " }";
  return os;
}

// VectorDataType FOMStringModule2List
std::ostream&
operator<<(std::ostream& os, const FOMStringModule2List& value)
{
  os << "{ ";
  FOMStringModule2List::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMStringModule2List& value)
{
  os << "{ ";
  FOMStringModule2List::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMTransportationType
std::ostream&
operator<<(std::ostream& os, const FOMTransportationType&  value)
{
  os << "FOMTransportationType { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "transportationType: " << value.getTransportationType();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMTransportationType& value)
{
  os << "FOMTransportationType { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "transportationType: "<< value.getTransportationType();
  os << " }";
  return os;
}

// VectorDataType FOMTransportationTypeList
std::ostream&
operator<<(std::ostream& os, const FOMTransportationTypeList& value)
{
  os << "{ ";
  FOMTransportationTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMTransportationTypeList& value)
{
  os << "{ ";
  FOMTransportationTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMDimension
std::ostream&
operator<<(std::ostream& os, const FOMDimension&  value)
{
  os << "FOMDimension { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dimensionHandle: " << value.getDimensionHandle();
  os << ", ";
  os << "upperBound: " << value.getUpperBound();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMDimension& value)
{
  os << "FOMDimension { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dimensionHandle: "<< value.getDimensionHandle();
  os << ", ";
  os << "upperBound: "<< value.getUpperBound();
  os << " }";
  return os;
}

// VectorDataType FOMDimensionList
std::ostream&
operator<<(std::ostream& os, const FOMDimensionList& value)
{
  os << "{ ";
  FOMDimensionList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMDimensionList& value)
{
  os << "{ ";
  FOMDimensionList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMRoutingSpace
std::ostream&
operator<<(std::ostream& os, const FOMRoutingSpace&  value)
{
  os << "FOMRoutingSpace { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "spaceHandle: " << value.getSpaceHandle();
  os << ", ";
  os << "dimensionHandleSet: " << value.getDimensionHandleSet();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMRoutingSpace& value)
{
  os << "FOMRoutingSpace { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "spaceHandle: "<< value.getSpaceHandle();
  os << ", ";
  os << "dimensionHandleSet: "<< value.getDimensionHandleSet();
  os << " }";
  return os;
}

// VectorDataType FOMRoutingSpaceList
std::ostream&
operator<<(std::ostream& os, const FOMRoutingSpaceList& value)
{
  os << "{ ";
  FOMRoutingSpaceList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMRoutingSpaceList& value)
{
  os << "{ ";
  FOMRoutingSpaceList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMParameter
std::ostream&
operator<<(std::ostream& os, const FOMParameter&  value)
{
  os << "FOMParameter { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << ", ";
  os << "parameterHandle: " << value.getParameterHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMParameter& value)
{
  os << "FOMParameter { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << ", ";
  os << "parameterHandle: "<< value.getParameterHandle();
  os << " }";
  return os;
}

// VectorDataType FOMParameterList
std::ostream&
operator<<(std::ostream& os, const FOMParameterList& value)
{
  os << "{ ";
  FOMParameterList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMParameterList& value)
{
  os << "{ ";
  FOMParameterList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMInteractionClass
std::ostream&
operator<<(std::ostream& os, const FOMInteractionClass&  value)
{
  os << "FOMInteractionClass { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "interactionClassHandle: " << value.getInteractionClassHandle();
  os << ", ";
  os << "parentInteractionClassHandle: " << value.getParentInteractionClassHandle();
  os << ", ";
  os << "orderType: " << value.getOrderType();
  os << ", ";
  os << "transportationType: " << value.getTransportationType();
  os << ", ";
  os << "dimensionHandleSet: " << value.getDimensionHandleSet();
  os << ", ";
  os << "parameterList: " << value.getParameterList();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMInteractionClass& value)
{
  os << "FOMInteractionClass { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "interactionClassHandle: "<< value.getInteractionClassHandle();
  os << ", ";
  os << "parentInteractionClassHandle: "<< value.getParentInteractionClassHandle();
  os << ", ";
  os << "orderType: "<< value.getOrderType();
  os << ", ";
  os << "transportationType: "<< value.getTransportationType();
  os << ", ";
  os << "dimensionHandleSet: "<< value.getDimensionHandleSet();
  os << ", ";
  os << "parameterList: "<< value.getParameterList();
  os << " }";
  return os;
}

// VectorDataType FOMInteractionClassList
std::ostream&
operator<<(std::ostream& os, const FOMInteractionClassList& value)
{
  os << "{ ";
  FOMInteractionClassList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMInteractionClassList& value)
{
  os << "{ ";
  FOMInteractionClassList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMAttribute
std::ostream&
operator<<(std::ostream& os, const FOMAttribute&  value)
{
  os << "FOMAttribute { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << ", ";
  os << "attributeHandle: " << value.getAttributeHandle();
  os << ", ";
  os << "orderType: " << value.getOrderType();
  os << ", ";
  os << "transportationType: " << value.getTransportationType();
  os << ", ";
  os << "dimensionHandleSet: " << value.getDimensionHandleSet();
  os << ", ";
  os << "ownershipType: " << value.getOwnershipType();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMAttribute& value)
{
  os << "FOMAttribute { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << ", ";
  os << "attributeHandle: "<< value.getAttributeHandle();
  os << ", ";
  os << "orderType: "<< value.getOrderType();
  os << ", ";
  os << "transportationType: "<< value.getTransportationType();
  os << ", ";
  os << "dimensionHandleSet: "<< value.getDimensionHandleSet();
  os << ", ";
  os << "ownershipType: "<< value.getOwnershipType();
  os << " }";
  return os;
}

// VectorDataType FOMAttributeList
std::ostream&
operator<<(std::ostream& os, const FOMAttributeList& value)
{
  os << "{ ";
  FOMAttributeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMAttributeList& value)
{
  os << "{ ";
  FOMAttributeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMObjectClass
std::ostream&
operator<<(std::ostream& os, const FOMObjectClass&  value)
{
  os << "FOMObjectClass { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "parentObjectClassHandle: " << value.getParentObjectClassHandle();
  os << ", ";
  os << "attributeList: " << value.getAttributeList();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMObjectClass& value)
{
  os << "FOMObjectClass { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "objectClassHandle: "<< value.getObjectClassHandle();
  os << ", ";
  os << "parentObjectClassHandle: "<< value.getParentObjectClassHandle();
  os << ", ";
  os << "attributeList: "<< value.getAttributeList();
  os << " }";
  return os;
}

// VectorDataType FOMObjectClassList
std::ostream&
operator<<(std::ostream& os, const FOMObjectClassList& value)
{
  os << "{ ";
  FOMObjectClassList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMObjectClassList& value)
{
  os << "{ ";
  FOMObjectClassList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMUpdateRate
std::ostream&
operator<<(std::ostream& os, const FOMUpdateRate&  value)
{
  os << "FOMUpdateRate { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "updateRateHandle: " << value.getUpdateRateHandle();
  os << ", ";
  os << "rate: " << value.getRate();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMUpdateRate& value)
{
  os << "FOMUpdateRate { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "updateRateHandle: "<< value.getUpdateRateHandle();
  os << ", ";
  os << "rate: "<< value.getRate();
  os << " }";
  return os;
}

// VectorDataType FOMUpdateRateList
std::ostream&
operator<<(std::ostream& os, const FOMUpdateRateList& value)
{
  os << "{ ";
  FOMUpdateRateList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMUpdateRateList& value)
{
  os << "{ ";
  FOMUpdateRateList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMSwitch
std::ostream&
operator<<(std::ostream& os, const FOMSwitch&  value)
{
  os << "FOMSwitch { ";
  os << "switchesType: " << value.getSwitchesType();
  os << ", ";
  os << "enabled: " << value.getEnabled();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMSwitch& value)
{
  os << "FOMSwitch { ";
  os << "switchesType: "<< value.getSwitchesType();
  os << ", ";
  os << "enabled: "<< value.getEnabled();
  os << " }";
  return os;
}

// VectorDataType FOMSwitchList
std::ostream&
operator<<(std::ostream& os, const FOMSwitchList& value)
{
  os << "{ ";
  FOMSwitchList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMSwitchList& value)
{
  os << "{ ";
  FOMSwitchList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMBasicDataType
std::ostream&
operator<<(std::ostream& os, const FOMBasicDataType&  value)
{
  os << "FOMBasicDataType { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "size: " << value.getSize();
  os << ", ";
  os << "endian: " << value.getEndian();
  os << ", ";
  os << "handle: " << value.getHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMBasicDataType& value)
{
  os << "FOMBasicDataType { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "size: "<< value.getSize();
  os << ", ";
  os << "endian: "<< value.getEndian();
  os << ", ";
  os << "handle: "<< value.getHandle();
  os << " }";
  return os;
}

// VectorDataType FOMBasicDataTypeList
std::ostream&
operator<<(std::ostream& os, const FOMBasicDataTypeList& value)
{
  os << "{ ";
  FOMBasicDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMBasicDataTypeList& value)
{
  os << "{ ";
  FOMBasicDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMSimpleDataType
std::ostream&
operator<<(std::ostream& os, const FOMSimpleDataType&  value)
{
  os << "FOMSimpleDataType { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "representation: " << value.getRepresentation();
  os << ", ";
  os << "handle: " << value.getHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMSimpleDataType& value)
{
  os << "FOMSimpleDataType { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "representation: "<< value.getRepresentation();
  os << ", ";
  os << "handle: "<< value.getHandle();
  os << " }";
  return os;
}

// VectorDataType FOMSimpleDataTypeList
std::ostream&
operator<<(std::ostream& os, const FOMSimpleDataTypeList& value)
{
  os << "{ ";
  FOMSimpleDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMSimpleDataTypeList& value)
{
  os << "{ ";
  FOMSimpleDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMEnumerator
std::ostream&
operator<<(std::ostream& os, const FOMEnumerator&  value)
{
  os << "FOMEnumerator { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "value: " << value.getValue();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMEnumerator& value)
{
  os << "FOMEnumerator { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "value: "<< value.getValue();
  os << " }";
  return os;
}

// VectorDataType FOMEnumeratorList
std::ostream&
operator<<(std::ostream& os, const FOMEnumeratorList& value)
{
  os << "{ ";
  FOMEnumeratorList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMEnumeratorList& value)
{
  os << "{ ";
  FOMEnumeratorList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMEnumeratedDataType
std::ostream&
operator<<(std::ostream& os, const FOMEnumeratedDataType&  value)
{
  os << "FOMEnumeratedDataType { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "representation: " << value.getRepresentation();
  os << ", ";
  os << "enumerators: " << value.getEnumerators();
  os << ", ";
  os << "handle: " << value.getHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMEnumeratedDataType& value)
{
  os << "FOMEnumeratedDataType { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "representation: "<< value.getRepresentation();
  os << ", ";
  os << "enumerators: "<< value.getEnumerators();
  os << ", ";
  os << "handle: "<< value.getHandle();
  os << " }";
  return os;
}

// VectorDataType FOMEnumeratedDataTypeList
std::ostream&
operator<<(std::ostream& os, const FOMEnumeratedDataTypeList& value)
{
  os << "{ ";
  FOMEnumeratedDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMEnumeratedDataTypeList& value)
{
  os << "{ ";
  FOMEnumeratedDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMArrayDataType
std::ostream&
operator<<(std::ostream& os, const FOMArrayDataType&  value)
{
  os << "FOMArrayDataType { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << ", ";
  os << "cardinality: " << value.getCardinality();
  os << ", ";
  os << "encoding: " << value.getEncoding();
  os << ", ";
  os << "handle: " << value.getHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMArrayDataType& value)
{
  os << "FOMArrayDataType { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << ", ";
  os << "cardinality: "<< value.getCardinality();
  os << ", ";
  os << "encoding: "<< value.getEncoding();
  os << ", ";
  os << "handle: "<< value.getHandle();
  os << " }";
  return os;
}

// VectorDataType FOMArrayDataTypeList
std::ostream&
operator<<(std::ostream& os, const FOMArrayDataTypeList& value)
{
  os << "{ ";
  FOMArrayDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMArrayDataTypeList& value)
{
  os << "{ ";
  FOMArrayDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMFixedRecordField
std::ostream&
operator<<(std::ostream& os, const FOMFixedRecordField&  value)
{
  os << "FOMFixedRecordField { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << ", ";
  os << "version: " << value.getVersion();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMFixedRecordField& value)
{
  os << "FOMFixedRecordField { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << ", ";
  os << "version: "<< value.getVersion();
  os << " }";
  return os;
}

// VectorDataType FOMFixedRecordFieldList
std::ostream&
operator<<(std::ostream& os, const FOMFixedRecordFieldList& value)
{
  os << "{ ";
  FOMFixedRecordFieldList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMFixedRecordFieldList& value)
{
  os << "{ ";
  FOMFixedRecordFieldList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMFixedRecordDataType
std::ostream&
operator<<(std::ostream& os, const FOMFixedRecordDataType&  value)
{
  os << "FOMFixedRecordDataType { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "encoding: " << value.getEncoding();
  os << ", ";
  os << "include: " << value.getInclude();
  os << ", ";
  os << "version: " << value.getVersion();
  os << ", ";
  os << "fields: " << value.getFields();
  os << ", ";
  os << "handle: " << value.getHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMFixedRecordDataType& value)
{
  os << "FOMFixedRecordDataType { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "encoding: "<< value.getEncoding();
  os << ", ";
  os << "include: "<< value.getInclude();
  os << ", ";
  os << "version: "<< value.getVersion();
  os << ", ";
  os << "fields: "<< value.getFields();
  os << ", ";
  os << "handle: "<< value.getHandle();
  os << " }";
  return os;
}

// VectorDataType FOMFixedRecordDataTypeList
std::ostream&
operator<<(std::ostream& os, const FOMFixedRecordDataTypeList& value)
{
  os << "{ ";
  FOMFixedRecordDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMFixedRecordDataTypeList& value)
{
  os << "{ ";
  FOMFixedRecordDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMVariantRecordAlternative
std::ostream&
operator<<(std::ostream& os, const FOMVariantRecordAlternative&  value)
{
  os << "FOMVariantRecordAlternative { ";
  os << "enumerator: " << value.getEnumerator();
  os << ", ";
  os << "name: " << value.getName();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMVariantRecordAlternative& value)
{
  os << "FOMVariantRecordAlternative { ";
  os << "enumerator: "<< value.getEnumerator();
  os << ", ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << " }";
  return os;
}

// VectorDataType FOMVariantRecordAlternativeList
std::ostream&
operator<<(std::ostream& os, const FOMVariantRecordAlternativeList& value)
{
  os << "{ ";
  FOMVariantRecordAlternativeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMVariantRecordAlternativeList& value)
{
  os << "{ ";
  FOMVariantRecordAlternativeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMVariantRecordDataType
std::ostream&
operator<<(std::ostream& os, const FOMVariantRecordDataType&  value)
{
  os << "FOMVariantRecordDataType { ";
  os << "name: " << value.getName();
  os << ", ";
  os << "discriminant: " << value.getDiscriminant();
  os << ", ";
  os << "dataType: " << value.getDataType();
  os << ", ";
  os << "alternatives: " << value.getAlternatives();
  os << ", ";
  os << "encoding: " << value.getEncoding();
  os << ", ";
  os << "handle: " << value.getHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMVariantRecordDataType& value)
{
  os << "FOMVariantRecordDataType { ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "discriminant: "<< value.getDiscriminant();
  os << ", ";
  os << "dataType: "<< value.getDataType();
  os << ", ";
  os << "alternatives: "<< value.getAlternatives();
  os << ", ";
  os << "encoding: "<< value.getEncoding();
  os << ", ";
  os << "handle: "<< value.getHandle();
  os << " }";
  return os;
}

// VectorDataType FOMVariantRecordDataTypeList
std::ostream&
operator<<(std::ostream& os, const FOMVariantRecordDataTypeList& value)
{
  os << "{ ";
  FOMVariantRecordDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMVariantRecordDataTypeList& value)
{
  os << "{ ";
  FOMVariantRecordDataTypeList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMModule
std::ostream&
operator<<(std::ostream& os, const FOMModule&  value)
{
  os << "FOMModule { ";
  os << "moduleHandle: " << value.getModuleHandle();
  os << ", ";
  os << "transportationTypeList: " << value.getTransportationTypeList();
  os << ", ";
  os << "dimensionList: " << value.getDimensionList();
  os << ", ";
  os << "routingSpaceList: " << value.getRoutingSpaceList();
  os << ", ";
  os << "interactionClassList: " << value.getInteractionClassList();
  os << ", ";
  os << "objectClassList: " << value.getObjectClassList();
  os << ", ";
  os << "updateRateList: " << value.getUpdateRateList();
  os << ", ";
  os << "switchList: " << value.getSwitchList();
  os << ", ";
  os << "artificialInteractionRoot: " << value.getArtificialInteractionRoot();
  os << ", ";
  os << "artificialObjectRoot: " << value.getArtificialObjectRoot();
  os << ", ";
  os << "designator: " << value.getDesignator();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMModule& value)
{
  os << "FOMModule { ";
  os << "moduleHandle: "<< value.getModuleHandle();
  os << ", ";
  os << "transportationTypeList: "<< value.getTransportationTypeList();
  os << ", ";
  os << "dimensionList: "<< value.getDimensionList();
  os << ", ";
  os << "routingSpaceList: "<< value.getRoutingSpaceList();
  os << ", ";
  os << "interactionClassList: "<< value.getInteractionClassList();
  os << ", ";
  os << "objectClassList: "<< value.getObjectClassList();
  os << ", ";
  os << "updateRateList: "<< value.getUpdateRateList();
  os << ", ";
  os << "switchList: "<< value.getSwitchList();
  os << ", ";
  os << "artificialInteractionRoot: "<< value.getArtificialInteractionRoot();
  os << ", ";
  os << "artificialObjectRoot: "<< value.getArtificialObjectRoot();
  os << ", ";
  os << "designator: "<< value.getDesignator();
  os << " }";
  return os;
}

// VectorDataType FOMModuleList
std::ostream&
operator<<(std::ostream& os, const FOMModuleList& value)
{
  os << "{ ";
  FOMModuleList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMModuleList& value)
{
  os << "{ ";
  FOMModuleList::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// StructDataType FOMModule2
std::ostream&
operator<<(std::ostream& os, const FOMModule2&  value)
{
  os << "FOMModule2 { ";
  os << "basicDataTypeList: " << value.getBasicDataTypeList();
  os << ", ";
  os << "simpleDataTypeList: " << value.getSimpleDataTypeList();
  os << ", ";
  os << "enumeratedDataTypeList: " << value.getEnumeratedDataTypeList();
  os << ", ";
  os << "arrayDataTypeList: " << value.getArrayDataTypeList();
  os << ", ";
  os << "fixedRecordDataTypeList: " << value.getFixedRecordDataTypeList();
  os << ", ";
  os << "variantRecordDataTypeList: " << value.getVariantRecordDataTypeList();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMModule2& value)
{
  os << "FOMModule2 { ";
  os << "basicDataTypeList: "<< value.getBasicDataTypeList();
  os << ", ";
  os << "simpleDataTypeList: "<< value.getSimpleDataTypeList();
  os << ", ";
  os << "enumeratedDataTypeList: "<< value.getEnumeratedDataTypeList();
  os << ", ";
  os << "arrayDataTypeList: "<< value.getArrayDataTypeList();
  os << ", ";
  os << "fixedRecordDataTypeList: "<< value.getFixedRecordDataTypeList();
  os << ", ";
  os << "variantRecordDataTypeList: "<< value.getVariantRecordDataTypeList();
  os << " }";
  return os;
}

// VectorDataType FOMModule2List
std::ostream&
operator<<(std::ostream& os, const FOMModule2List& value)
{
  os << "{ ";
  FOMModule2List::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FOMModule2List& value)
{
  os << "{ ";
  FOMModule2List::const_iterator i = value.begin();
  if (i != value.end()) {
    os << *i;
    while (++i != value.end()) {
      os << ", " << *i;
    }
  }
  os << " }";
  return os;
}

// MessageDataType ConnectionLostMessage
std::ostream&
operator<<(std::ostream& os, const ConnectionLostMessage&  value)
{
  os << "ConnectionLostMessage { ";
  os << "faultDescription: " << value.getFaultDescription();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ConnectionLostMessage& value, ServerModel::Federation* )
{
  os << "ConnectionLostMessage { ";
  os << "faultDescription: "<< value.getFaultDescription();
  os << " }";
  return os;
}

// MessageDataType CreateFederationExecutionRequestMessage
std::ostream&
operator<<(std::ostream& os, const CreateFederationExecutionRequestMessage&  value)
{
  os << "CreateFederationExecutionRequestMessage { ";
  os << "federationExecution: " << value.getFederationExecution();
  os << ", ";
  os << "logicalTimeFactoryName: " << value.getLogicalTimeFactoryName();
  os << ", ";
  os << "fOMStringModuleList: " << value.getFOMStringModuleList();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const CreateFederationExecutionRequestMessage& value, ServerModel::Federation* )
{
  os << "CreateFederationExecutionRequestMessage { ";
  os << "federationExecution: "<< value.getFederationExecution();
  os << ", ";
  os << "logicalTimeFactoryName: "<< value.getLogicalTimeFactoryName();
  os << ", ";
  os << "fOMStringModuleList: "<< value.getFOMStringModuleList();
  os << " }";
  return os;
}

// MessageDataType CreateFederationExecutionRequest2Message
std::ostream&
operator<<(std::ostream& os, const CreateFederationExecutionRequest2Message&  value)
{
  os << "CreateFederationExecutionRequest2Message { ";
  os << "federationExecution: " << value.getFederationExecution();
  os << ", ";
  os << "logicalTimeFactoryName: " << value.getLogicalTimeFactoryName();
  os << ", ";
  os << "fOMStringModuleList: " << value.getFOMStringModuleList();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const CreateFederationExecutionRequest2Message& value, ServerModel::Federation* )
{
  os << "CreateFederationExecutionRequest2Message { ";
  os << "federationExecution: "<< value.getFederationExecution();
  os << ", ";
  os << "logicalTimeFactoryName: "<< value.getLogicalTimeFactoryName();
  os << ", ";
  os << "fOMStringModuleList: "<< value.getFOMStringModuleList();
  os << " }";
  return os;
}

// MessageDataType CreateFederationExecutionResponseMessage
std::ostream&
operator<<(std::ostream& os, const CreateFederationExecutionResponseMessage&  value)
{
  os << "CreateFederationExecutionResponseMessage { ";
  os << "createFederationExecutionResponseType: " << value.getCreateFederationExecutionResponseType();
  os << ", ";
  os << "exceptionString: " << value.getExceptionString();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const CreateFederationExecutionResponseMessage& value, ServerModel::Federation* )
{
  os << "CreateFederationExecutionResponseMessage { ";
  os << "createFederationExecutionResponseType: "<< value.getCreateFederationExecutionResponseType();
  os << ", ";
  os << "exceptionString: "<< value.getExceptionString();
  os << " }";
  return os;
}

// MessageDataType DestroyFederationExecutionRequestMessage
std::ostream&
operator<<(std::ostream& os, const DestroyFederationExecutionRequestMessage&  value)
{
  os << "DestroyFederationExecutionRequestMessage { ";
  os << "federationExecution: " << value.getFederationExecution();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const DestroyFederationExecutionRequestMessage& value, ServerModel::Federation* )
{
  os << "DestroyFederationExecutionRequestMessage { ";
  os << "federationExecution: "<< value.getFederationExecution();
  os << " }";
  return os;
}

// MessageDataType DestroyFederationExecutionResponseMessage
std::ostream&
operator<<(std::ostream& os, const DestroyFederationExecutionResponseMessage&  value)
{
  os << "DestroyFederationExecutionResponseMessage { ";
  os << "destroyFederationExecutionResponseType: " << value.getDestroyFederationExecutionResponseType();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const DestroyFederationExecutionResponseMessage& value, ServerModel::Federation* )
{
  os << "DestroyFederationExecutionResponseMessage { ";
  os << "destroyFederationExecutionResponseType: "<< value.getDestroyFederationExecutionResponseType();
  os << " }";
  return os;
}

// MessageDataType EnumerateFederationExecutionsRequestMessage
std::ostream&
operator<<(std::ostream& os, const EnumerateFederationExecutionsRequestMessage& )
{
  os << "EnumerateFederationExecutionsRequestMessage { ";
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const EnumerateFederationExecutionsRequestMessage&, ServerModel::Federation* )
{
  os << "EnumerateFederationExecutionsRequestMessage { ";
  os << " }";
  return os;
}

// MessageDataType EnumerateFederationExecutionsResponseMessage
std::ostream&
operator<<(std::ostream& os, const EnumerateFederationExecutionsResponseMessage&  value)
{
  os << "EnumerateFederationExecutionsResponseMessage { ";
  os << "federationExecutionInformationVector: " << value.getFederationExecutionInformationVector();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const EnumerateFederationExecutionsResponseMessage& value, ServerModel::Federation* )
{
  os << "EnumerateFederationExecutionsResponseMessage { ";
  os << "federationExecutionInformationVector: "<< value.getFederationExecutionInformationVector();
  os << " }";
  return os;
}

// MessageDataType InsertFederationExecutionMessage
std::ostream&
operator<<(std::ostream& os, const InsertFederationExecutionMessage&  value)
{
  os << "InsertFederationExecutionMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "federationName: " << value.getFederationName();
  os << ", ";
  os << "logicalTimeFactoryName: " << value.getLogicalTimeFactoryName();
  os << ", ";
  os << "configurationParameterMap: " << value.getConfigurationParameterMap();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const InsertFederationExecutionMessage& value, ServerModel::Federation* )
{
  os << "InsertFederationExecutionMessage { ";
  // StructField federationHandle (hidden)
  os << "federationName: "<< value.getFederationName();
  os << ", ";
  os << "logicalTimeFactoryName: "<< value.getLogicalTimeFactoryName();
  os << ", ";
  os << "configurationParameterMap: "<< value.getConfigurationParameterMap();
  os << " }";
  return os;
}

// MessageDataType ShutdownFederationExecutionMessage
std::ostream&
operator<<(std::ostream& os, const ShutdownFederationExecutionMessage&  value)
{
  os << "ShutdownFederationExecutionMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ShutdownFederationExecutionMessage& value, ServerModel::Federation* )
{
  os << "ShutdownFederationExecutionMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << " }";
  return os;
}

// MessageDataType EraseFederationExecutionMessage
std::ostream&
operator<<(std::ostream& os, const EraseFederationExecutionMessage&  value)
{
  os << "EraseFederationExecutionMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const EraseFederationExecutionMessage& value, ServerModel::Federation* )
{
  os << "EraseFederationExecutionMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << " }";
  return os;
}

// MessageDataType ReleaseFederationHandleMessage
std::ostream&
operator<<(std::ostream& os, const ReleaseFederationHandleMessage&  value)
{
  os << "ReleaseFederationHandleMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ReleaseFederationHandleMessage& value, ServerModel::Federation* )
{
  os << "ReleaseFederationHandleMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << " }";
  return os;
}

// MessageDataType InsertModulesMessage
std::ostream&
operator<<(std::ostream& os, const InsertModulesMessage& )
{
  os << "InsertModulesMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  // StructField fOMModuleList (hidden)
  //os << "fOMModuleList: " << value.getFOMModuleList();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const InsertModulesMessage&, ServerModel::Federation* )
{
  os << "InsertModulesMessage { ";
  // StructField federationHandle (hidden)
  // StructField fOMModuleList (hidden)
  os << " }";
  return os;
}

// MessageDataType InsertModules2Message
std::ostream&
operator<<(std::ostream& os, const InsertModules2Message& )
{
  os << "InsertModules2Message { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  // StructField fOMModule2List (hidden)
  //os << "fOMModule2List: " << value.getFOMModule2List();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const InsertModules2Message&, ServerModel::Federation* )
{
  os << "InsertModules2Message { ";
  // StructField federationHandle (hidden)
  // StructField fOMModule2List (hidden)
  os << " }";
  return os;
}

// MessageDataType JoinFederationExecutionRequestMessage
std::ostream&
operator<<(std::ostream& os, const JoinFederationExecutionRequestMessage&  value)
{
  os << "JoinFederationExecutionRequestMessage { ";
  os << "federationExecution: " << value.getFederationExecution();
  os << ", ";
  os << "federateType: " << value.getFederateType();
  os << ", ";
  os << "federateName: " << value.getFederateName();
  os << ", ";
  os << "fOMStringModuleList: " << value.getFOMStringModuleList();
  os << ", ";
  os << "configurationParameterMap: " << value.getConfigurationParameterMap();
  os << ", ";
  os << "isInternal: " << value.getIsInternal();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const JoinFederationExecutionRequestMessage& value, ServerModel::Federation* )
{
  os << "JoinFederationExecutionRequestMessage { ";
  os << "federationExecution: "<< value.getFederationExecution();
  os << ", ";
  os << "federateType: "<< value.getFederateType();
  os << ", ";
  os << "federateName: "<< value.getFederateName();
  os << ", ";
  os << "fOMStringModuleList: "<< value.getFOMStringModuleList();
  os << ", ";
  os << "configurationParameterMap: "<< value.getConfigurationParameterMap();
  os << ", ";
  os << "isInternal: "<< value.getIsInternal();
  os << " }";
  return os;
}

// MessageDataType JoinFederationExecutionRequest2Message
std::ostream&
operator<<(std::ostream& os, const JoinFederationExecutionRequest2Message&  value)
{
  os << "JoinFederationExecutionRequest2Message { ";
  os << "federationExecution: " << value.getFederationExecution();
  os << ", ";
  os << "federateType: " << value.getFederateType();
  os << ", ";
  os << "federateName: " << value.getFederateName();
  os << ", ";
  os << "fOMStringModuleList: " << value.getFOMStringModuleList();
  os << ", ";
  os << "configurationParameterMap: " << value.getConfigurationParameterMap();
  os << ", ";
  os << "isInternal: " << value.getIsInternal();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const JoinFederationExecutionRequest2Message& value, ServerModel::Federation* )
{
  os << "JoinFederationExecutionRequest2Message { ";
  os << "federationExecution: "<< value.getFederationExecution();
  os << ", ";
  os << "federateType: "<< value.getFederateType();
  os << ", ";
  os << "federateName: "<< value.getFederateName();
  os << ", ";
  os << "fOMStringModuleList: "<< value.getFOMStringModuleList();
  os << ", ";
  os << "configurationParameterMap: "<< value.getConfigurationParameterMap();
  os << ", ";
  os << "isInternal: "<< value.getIsInternal();
  os << " }";
  return os;
}

// MessageDataType JoinFederationExecutionResponseMessage
std::ostream&
operator<<(std::ostream& os, const JoinFederationExecutionResponseMessage&  value)
{
  os << "JoinFederationExecutionResponseMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "joinFederationExecutionResponseType: " << value.getJoinFederationExecutionResponseType();
  os << ", ";
  os << "exceptionString: " << value.getExceptionString();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "federateType: " << value.getFederateType();
  os << ", ";
  os << "federateName: " << value.getFederateName();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const JoinFederationExecutionResponseMessage& value, ServerModel::Federation* )
{
  os << "JoinFederationExecutionResponseMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "joinFederationExecutionResponseType: "<< value.getJoinFederationExecutionResponseType();
  os << ", ";
  os << "exceptionString: "<< value.getExceptionString();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "federateType: "<< value.getFederateType();
  os << ", ";
  os << "federateName: "<< value.getFederateName();
  os << " }";
  return os;
}

// MessageDataType ResignFederationExecutionLeafRequestMessage
std::ostream&
operator<<(std::ostream& os, const ResignFederationExecutionLeafRequestMessage&  value)
{
  os << "ResignFederationExecutionLeafRequestMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "resignAction: " << value.getResignAction();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ResignFederationExecutionLeafRequestMessage& value, ServerModel::Federation* )
{
  os << "ResignFederationExecutionLeafRequestMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "resignAction: "<< value.getResignAction();
  os << " }";
  return os;
}

// MessageDataType ResignFederationExecutionRequestMessage
std::ostream&
operator<<(std::ostream& os, const ResignFederationExecutionRequestMessage&  value)
{
  os << "ResignFederationExecutionRequestMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ResignFederationExecutionRequestMessage& value, ServerModel::Federation* )
{
  os << "ResignFederationExecutionRequestMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << " }";
  return os;
}

// MessageDataType JoinFederateNotifyMessage
std::ostream&
operator<<(std::ostream& os, const JoinFederateNotifyMessage&  value)
{
  os << "JoinFederateNotifyMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "federateType: " << value.getFederateType();
  os << ", ";
  os << "federateName: " << value.getFederateName();
  os << ", ";
  os << "isInternal: " << value.getIsInternal();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const JoinFederateNotifyMessage& value, ServerModel::Federation* )
{
  os << "JoinFederateNotifyMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "federateType: "<< value.getFederateType();
  os << ", ";
  os << "federateName: "<< value.getFederateName();
  os << ", ";
  os << "isInternal: "<< value.getIsInternal();
  os << " }";
  return os;
}

// MessageDataType ResignFederateNotifyMessage
std::ostream&
operator<<(std::ostream& os, const ResignFederateNotifyMessage&  value)
{
  os << "ResignFederateNotifyMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ResignFederateNotifyMessage& value, ServerModel::Federation* )
{
  os << "ResignFederateNotifyMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << " }";
  return os;
}

// MessageDataType ChangeAutomaticResignDirectiveMessage
std::ostream&
operator<<(std::ostream& os, const ChangeAutomaticResignDirectiveMessage&  value)
{
  os << "ChangeAutomaticResignDirectiveMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "resignAction: " << value.getResignAction();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ChangeAutomaticResignDirectiveMessage& value, ServerModel::Federation* )
{
  os << "ChangeAutomaticResignDirectiveMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "resignAction: "<< value.getResignAction();
  os << " }";
  return os;
}

// MessageDataType RegisterFederationSynchronizationPointMessage
std::ostream&
operator<<(std::ostream& os, const RegisterFederationSynchronizationPointMessage&  value)
{
  os << "RegisterFederationSynchronizationPointMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "label: " << value.getLabel();
  os << ", ";
  os << "tag: " << value.getTag();
  os << ", ";
  os << "federateHandleVector: " << value.getFederateHandleVector();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RegisterFederationSynchronizationPointMessage& value, ServerModel::Federation* )
{
  os << "RegisterFederationSynchronizationPointMessage { ";
  // StructField federationHandle (hidden)
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "label: "<< value.getLabel();
  os << ", ";
  os << "tag: "<< value.getTag();
  os << ", ";
  os << "federateHandleVector: "<< value.getFederateHandleVector();
  os << " }";
  return os;
}

// MessageDataType RegisterFederationSynchronizationPointResponseMessage
std::ostream&
operator<<(std::ostream& os, const RegisterFederationSynchronizationPointResponseMessage&  value)
{
  os << "RegisterFederationSynchronizationPointResponseMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "label: " << value.getLabel();
  os << ", ";
  os << "registerFederationSynchronizationPointResponseType: " << value.getRegisterFederationSynchronizationPointResponseType();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RegisterFederationSynchronizationPointResponseMessage& value, ServerModel::Federation* )
{
  os << "RegisterFederationSynchronizationPointResponseMessage { ";
  // StructField federationHandle (hidden)
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "label: "<< value.getLabel();
  os << ", ";
  os << "registerFederationSynchronizationPointResponseType: "<< value.getRegisterFederationSynchronizationPointResponseType();
  os << " }";
  return os;
}

// MessageDataType AnnounceSynchronizationPointMessage
std::ostream&
operator<<(std::ostream& os, const AnnounceSynchronizationPointMessage&  value)
{
  os << "AnnounceSynchronizationPointMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "label: " << value.getLabel();
  os << ", ";
  os << "tag: " << value.getTag();
  os << ", ";
  os << "addJoiningFederates: " << value.getAddJoiningFederates();
  os << ", ";
  os << "federateHandleVector: " << value.getFederateHandleVector();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AnnounceSynchronizationPointMessage& value, ServerModel::Federation* )
{
  os << "AnnounceSynchronizationPointMessage { ";
  // StructField federationHandle (hidden)
  os << "label: "<< value.getLabel();
  os << ", ";
  os << "tag: "<< value.getTag();
  os << ", ";
  os << "addJoiningFederates: "<< value.getAddJoiningFederates();
  os << ", ";
  os << "federateHandleVector: "<< value.getFederateHandleVector();
  os << " }";
  return os;
}

// MessageDataType SynchronizationPointAchievedMessage
std::ostream&
operator<<(std::ostream& os, const SynchronizationPointAchievedMessage&  value)
{
  os << "SynchronizationPointAchievedMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "label: " << value.getLabel();
  os << ", ";
  os << "federateHandleBoolPairVector: " << value.getFederateHandleBoolPairVector();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const SynchronizationPointAchievedMessage& value, ServerModel::Federation* )
{
  os << "SynchronizationPointAchievedMessage { ";
  // StructField federationHandle (hidden)
  os << "label: "<< value.getLabel();
  os << ", ";
  os << "federateHandleBoolPairVector: "<< value.getFederateHandleBoolPairVector();
  os << " }";
  return os;
}

// MessageDataType FederationSynchronizedMessage
std::ostream&
operator<<(std::ostream& os, const FederationSynchronizedMessage&  value)
{
  os << "FederationSynchronizedMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "label: " << value.getLabel();
  os << ", ";
  os << "federateHandleBoolPairVector: " << value.getFederateHandleBoolPairVector();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const FederationSynchronizedMessage& value, ServerModel::Federation* )
{
  os << "FederationSynchronizedMessage { ";
  // StructField federationHandle (hidden)
  os << "label: "<< value.getLabel();
  os << ", ";
  os << "federateHandleBoolPairVector: "<< value.getFederateHandleBoolPairVector();
  os << " }";
  return os;
}

// MessageDataType EnableTimeRegulationRequestMessage
std::ostream&
operator<<(std::ostream& os, const EnableTimeRegulationRequestMessage&  value)
{
  os << "EnableTimeRegulationRequestMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "timeStamp: " << value.getTimeStamp();
  os << ", ";
  os << "commitId: " << value.getCommitId();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const EnableTimeRegulationRequestMessage& value, ServerModel::Federation* )
{
  os << "EnableTimeRegulationRequestMessage { ";
  // StructField federationHandle (hidden)
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "timeStamp: "<< value.getTimeStamp();
  os << ", ";
  os << "commitId: "<< value.getCommitId();
  os << " }";
  return os;
}

// MessageDataType EnableTimeRegulationResponseMessage
std::ostream&
operator<<(std::ostream& os, const EnableTimeRegulationResponseMessage&  value)
{
  os << "EnableTimeRegulationResponseMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "respondingFederateHandle: " << value.getRespondingFederateHandle();
  os << ", ";
  os << "timeStampValid: " << value.getTimeStampValid();
  os << ", ";
  os << "timeStamp: " << value.getTimeStamp();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const EnableTimeRegulationResponseMessage& value, ServerModel::Federation* )
{
  os << "EnableTimeRegulationResponseMessage { ";
  // StructField federationHandle (hidden)
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "respondingFederateHandle: "<< value.getRespondingFederateHandle();
  os << ", ";
  os << "timeStampValid: "<< value.getTimeStampValid();
  os << ", ";
  os << "timeStamp: "<< value.getTimeStamp();
  os << " }";
  return os;
}

// MessageDataType DisableTimeRegulationRequestMessage
std::ostream&
operator<<(std::ostream& os, const DisableTimeRegulationRequestMessage&  value)
{
  os << "DisableTimeRegulationRequestMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const DisableTimeRegulationRequestMessage& value, ServerModel::Federation* )
{
  os << "DisableTimeRegulationRequestMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << " }";
  return os;
}

// MessageDataType EnableTimeConstrainedNotifyMessage
std::ostream&
operator<<(std::ostream& os, const EnableTimeConstrainedNotifyMessage&  value)
{
  os << "EnableTimeConstrainedNotifyMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const EnableTimeConstrainedNotifyMessage& value, ServerModel::Federation* )
{
  os << "EnableTimeConstrainedNotifyMessage { ";
  // StructField federationHandle (hidden)
  os << "federateHandle: "<< value.getFederateHandle();
  os << " }";
  return os;
}

// MessageDataType DisableTimeConstrainedNotifyMessage
std::ostream&
operator<<(std::ostream& os, const DisableTimeConstrainedNotifyMessage&  value)
{
  os << "DisableTimeConstrainedNotifyMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const DisableTimeConstrainedNotifyMessage& value, ServerModel::Federation* )
{
  os << "DisableTimeConstrainedNotifyMessage { ";
  // StructField federationHandle (hidden)
  os << "federateHandle: "<< value.getFederateHandle();
  os << " }";
  return os;
}

// MessageDataType CommitLowerBoundTimeStampMessage
std::ostream&
operator<<(std::ostream& os, const CommitLowerBoundTimeStampMessage&  value)
{
  os << "CommitLowerBoundTimeStampMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  // StructField federateHandle (hidden)
  //os << "federateHandle: " << value.getFederateHandle();
  //os << ", ";
  os << "timeStamp: " << value.getTimeStamp();
  os << ", ";
  os << "commitType: " << value.getCommitType();
  os << ", ";
  os << "commitId: " << value.getCommitId();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const CommitLowerBoundTimeStampMessage& value, ServerModel::Federation* )
{
  os << "CommitLowerBoundTimeStampMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  // StructField federateHandle (hidden)
  os << "timeStamp: "<< value.getTimeStamp();
  os << ", ";
  os << "commitType: "<< value.getCommitType();
  os << ", ";
  os << "commitId: "<< value.getCommitId();
  os << " }";
  return os;
}

// MessageDataType CommitLowerBoundTimeStampResponseMessage
std::ostream&
operator<<(std::ostream& os, const CommitLowerBoundTimeStampResponseMessage&  value)
{
  os << "CommitLowerBoundTimeStampResponseMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "sendingFederateHandle: " << value.getSendingFederateHandle();
  os << ", ";
  os << "commitId: " << value.getCommitId();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const CommitLowerBoundTimeStampResponseMessage& value, ServerModel::Federation* )
{
  os << "CommitLowerBoundTimeStampResponseMessage { ";
  // StructField federationHandle (hidden)
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "sendingFederateHandle: "<< value.getSendingFederateHandle();
  os << ", ";
  os << "commitId: "<< value.getCommitId();
  os << " }";
  return os;
}

// MessageDataType LockedByNextMessageRequestMessage
std::ostream&
operator<<(std::ostream& os, const LockedByNextMessageRequestMessage&  value)
{
  os << "LockedByNextMessageRequestMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "sendingFederateHandle: " << value.getSendingFederateHandle();
  os << ", ";
  os << "lockedByNextMessage: " << value.getLockedByNextMessage();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const LockedByNextMessageRequestMessage& value, ServerModel::Federation* )
{
  os << "LockedByNextMessageRequestMessage { ";
  // StructField federationHandle (hidden)
  os << "sendingFederateHandle: "<< value.getSendingFederateHandle();
  os << ", ";
  os << "lockedByNextMessage: "<< value.getLockedByNextMessage();
  os << " }";
  return os;
}

// MessageDataType ResetFederationRequestMessage
std::ostream&
operator<<(std::ostream& os, const ResetFederationRequestMessage&  value)
{
  os << "ResetFederationRequestMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "timeStamp: " << value.getTimeStamp();
  os << ", ";
  os << "tag: " << value.getTag();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ResetFederationRequestMessage& value, ServerModel::Federation* )
{
  os << "ResetFederationRequestMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "timeStamp: "<< value.getTimeStamp();
  os << ", ";
  os << "tag: "<< value.getTag();
  os << " }";
  return os;
}

// MessageDataType ResetFederationInitiateMessage
std::ostream&
operator<<(std::ostream& os, const ResetFederationInitiateMessage&  value)
{
  os << "ResetFederationInitiateMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  // StructField federateHandle (hidden)
  //os << "federateHandle: " << value.getFederateHandle();
  //os << ", ";
  os << "federateHandleVector: " << value.getFederateHandleVector();
  os << ", ";
  os << "timeStamp: " << value.getTimeStamp();
  os << ", ";
  os << "tag: " << value.getTag();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ResetFederationInitiateMessage& value, ServerModel::Federation* )
{
  os << "ResetFederationInitiateMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  // StructField federateHandle (hidden)
  os << "federateHandleVector: "<< value.getFederateHandleVector();
  os << ", ";
  os << "timeStamp: "<< value.getTimeStamp();
  os << ", ";
  os << "tag: "<< value.getTag();
  os << " }";
  return os;
}

// MessageDataType ResetFederationDoneMessage
std::ostream&
operator<<(std::ostream& os, const ResetFederationDoneMessage&  value)
{
  os << "ResetFederationDoneMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "timeStamp: " << value.getTimeStamp();
  os << ", ";
  os << "tag: " << value.getTag();
  os << ", ";
  os << "success: " << value.getSuccess();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ResetFederationDoneMessage& value, ServerModel::Federation* )
{
  os << "ResetFederationDoneMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "timeStamp: "<< value.getTimeStamp();
  os << ", ";
  os << "tag: "<< value.getTag();
  os << ", ";
  os << "success: "<< value.getSuccess();
  os << " }";
  return os;
}

// MessageDataType ResetFederationBegunMessage
std::ostream&
operator<<(std::ostream& os, const ResetFederationBegunMessage&  value)
{
  os << "ResetFederationBegunMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandleVector: " << value.getFederateHandleVector();
  os << ", ";
  // StructField federateHandle (hidden)
  //os << "federateHandle: " << value.getFederateHandle();
  //os << ", ";
  os << "timeStamp: " << value.getTimeStamp();
  os << ", ";
  os << "tag: " << value.getTag();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ResetFederationBegunMessage& value, ServerModel::Federation* )
{
  os << "ResetFederationBegunMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandleVector: "<< value.getFederateHandleVector();
  os << ", ";
  // StructField federateHandle (hidden)
  os << "timeStamp: "<< value.getTimeStamp();
  os << ", ";
  os << "tag: "<< value.getTag();
  os << " }";
  return os;
}

// MessageDataType ResetFederationCompleteMessage
std::ostream&
operator<<(std::ostream& os, const ResetFederationCompleteMessage&  value)
{
  os << "ResetFederationCompleteMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandleBoolPairVector: " << value.getFederateHandleBoolPairVector();
  os << ", ";
  // StructField federateHandle (hidden)
  //os << "federateHandle: " << value.getFederateHandle();
  //os << ", ";
  os << "timeStamp: " << value.getTimeStamp();
  os << ", ";
  os << "success: " << value.getSuccess();
  os << ", ";
  os << "tag: " << value.getTag();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ResetFederationCompleteMessage& value, ServerModel::Federation* )
{
  os << "ResetFederationCompleteMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandleBoolPairVector: "<< value.getFederateHandleBoolPairVector();
  os << ", ";
  // StructField federateHandle (hidden)
  os << "timeStamp: "<< value.getTimeStamp();
  os << ", ";
  os << "success: "<< value.getSuccess();
  os << ", ";
  os << "tag: "<< value.getTag();
  os << " }";
  return os;
}

// MessageDataType TimeConstrainedEnabledMessage
std::ostream&
operator<<(std::ostream& os, const TimeConstrainedEnabledMessage& )
{
  os << "TimeConstrainedEnabledMessage { ";
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const TimeConstrainedEnabledMessage&, ServerModel::Federation* )
{
  os << "TimeConstrainedEnabledMessage { ";
  os << " }";
  return os;
}

// MessageDataType TimeRegulationEnabledMessage
std::ostream&
operator<<(std::ostream& os, const TimeRegulationEnabledMessage& )
{
  os << "TimeRegulationEnabledMessage { ";
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const TimeRegulationEnabledMessage&, ServerModel::Federation* )
{
  os << "TimeRegulationEnabledMessage { ";
  os << " }";
  return os;
}

// MessageDataType TimeAdvanceGrantedMessage
std::ostream&
operator<<(std::ostream& os, const TimeAdvanceGrantedMessage& )
{
  os << "TimeAdvanceGrantedMessage { ";
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const TimeAdvanceGrantedMessage&, ServerModel::Federation* )
{
  os << "TimeAdvanceGrantedMessage { ";
  os << " }";
  return os;
}

// MessageDataType InsertRegionMessage
std::ostream&
operator<<(std::ostream& os, const InsertRegionMessage&  value)
{
  os << "InsertRegionMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "regionHandleDimensionHandleSetPairVector: " << value.getRegionHandleDimensionHandleSetPairVector();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const InsertRegionMessage& value, ServerModel::Federation* )
{
  os << "InsertRegionMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "regionHandleDimensionHandleSetPairVector: "<< value.getRegionHandleDimensionHandleSetPairVector();
  os << " }";
  return os;
}

// MessageDataType CommitRegionMessage
std::ostream&
operator<<(std::ostream& os, const CommitRegionMessage&  value)
{
  os << "CommitRegionMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "regionHandleRegionValuePairVector: " << value.getRegionHandleRegionValuePairVector();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const CommitRegionMessage& value, ServerModel::Federation* )
{
  os << "CommitRegionMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "regionHandleRegionValuePairVector: "<< value.getRegionHandleRegionValuePairVector();
  os << " }";
  return os;
}

// MessageDataType EraseRegionMessage
std::ostream&
operator<<(std::ostream& os, const EraseRegionMessage&  value)
{
  os << "EraseRegionMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "regionHandleVector: " << value.getRegionHandleVector();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const EraseRegionMessage& value, ServerModel::Federation* )
{
  os << "EraseRegionMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "regionHandleVector: "<< value.getRegionHandleVector();
  os << " }";
  return os;
}

// MessageDataType ChangeInteractionClassPublicationMessage
std::ostream&
operator<<(std::ostream& os, const ChangeInteractionClassPublicationMessage&  value)
{
  os << "ChangeInteractionClassPublicationMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "publicationType: " << value.getPublicationType();
  os << ", ";
  os << "interactionClassHandle: " << value.getInteractionClassHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ChangeInteractionClassPublicationMessage& value, ServerModel::Federation* federation)
{
  os << "ChangeInteractionClassPublicationMessage { ";
  // StructField federationHandle (hidden)
  os << "publicationType: "<< value.getPublicationType();
  os << ", ";
  os << "interactionClassHandle: "; prettyprint(os, value.getInteractionClassHandle(), federation);//InteractionClassHandle parent=Federation
  os << " }";
  return os;
}

// MessageDataType ChangeObjectClassPublicationMessage
std::ostream&
operator<<(std::ostream& os, const ChangeObjectClassPublicationMessage&  value)
{
  os << "ChangeObjectClassPublicationMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "publicationType: " << value.getPublicationType();
  os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "attributeHandles: " << value.getAttributeHandles();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ChangeObjectClassPublicationMessage& value, ServerModel::Federation* federation)
{
  os << "ChangeObjectClassPublicationMessage { ";
  // StructField federationHandle (hidden)
  os << "publicationType: "<< value.getPublicationType();
  os << ", ";
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "attributeHandles: "<< value.getAttributeHandles();
  os << " }";
  return os;
}

// MessageDataType ChangeInteractionClassSubscriptionMessage
std::ostream&
operator<<(std::ostream& os, const ChangeInteractionClassSubscriptionMessage&  value)
{
  os << "ChangeInteractionClassSubscriptionMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "subscriptionType: " << value.getSubscriptionType();
  os << ", ";
  os << "interactionClassHandle: " << value.getInteractionClassHandle();
  os << ", ";
  os << "parameterFilterValues: " << value.getParameterFilterValues();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ChangeInteractionClassSubscriptionMessage& value, ServerModel::Federation* federation)
{
  ServerModel::InteractionClass* interactionClass = federation->getInteractionClass(value.getInteractionClassHandle());
  os << "ChangeInteractionClassSubscriptionMessage { ";
  // StructField federationHandle (hidden)
  os << "subscriptionType: "<< value.getSubscriptionType();
  os << ", ";
  os << "interactionClassHandle: "; prettyprint(os, value.getInteractionClassHandle(), federation);//InteractionClassHandle parent=Federation
  os << ", ";
  os << "parameterFilterValues: "; prettyprint(os, value.getParameterFilterValues(), interactionClass);//ParameterValueVector parent=InteractionClass
  os << " }";
  return os;
}

// MessageDataType ChangeObjectClassSubscriptionMessage
std::ostream&
operator<<(std::ostream& os, const ChangeObjectClassSubscriptionMessage&  value)
{
  os << "ChangeObjectClassSubscriptionMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "subscriptionType: " << value.getSubscriptionType();
  os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "attributeHandles: " << value.getAttributeHandles();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ChangeObjectClassSubscriptionMessage& value, ServerModel::Federation* federation)
{
  os << "ChangeObjectClassSubscriptionMessage { ";
  // StructField federationHandle (hidden)
  os << "subscriptionType: "<< value.getSubscriptionType();
  os << ", ";
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "attributeHandles: "<< value.getAttributeHandles();
  os << " }";
  return os;
}

// MessageDataType ChangeObjectInstanceSubscriptionMessage
std::ostream&
operator<<(std::ostream& os, const ChangeObjectInstanceSubscriptionMessage&  value)
{
  os << "ChangeObjectInstanceSubscriptionMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "subscriptionType: " << value.getSubscriptionType();
  os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ChangeObjectInstanceSubscriptionMessage& value, ServerModel::Federation* federation)
{
  os << "ChangeObjectInstanceSubscriptionMessage { ";
  // StructField federationHandle (hidden)
  os << "subscriptionType: "<< value.getSubscriptionType();
  os << ", ";
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << " }";
  return os;
}

// EnumDataType OwnershipTransferState
std::ostream&
operator<<(std::ostream& os, const OwnershipTransferState& value)
{
  switch (value) {
  case OwnershipTransferState::None: os << "None"; break;
  case OwnershipTransferState::Acquiring: os << "Acquiring"; break;
  case OwnershipTransferState::Divesting: os << "Divesting"; break;
  }
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const OwnershipTransferState& value, ServerModel::Federation* )
{
  os << value;
  return os;
}

// MessageDataType AttributeOwnershipRequestDivestMessage
std::ostream&
operator<<(std::ostream& os, const AttributeOwnershipRequestDivestMessage&  value)
{
  os << "AttributeOwnershipRequestDivestMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << value.getAttributeHandles();
  os << ", ";
  os << "tag: " << value.getTag();
  os << ", ";
  os << "unconditional: " << value.getUnconditional();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeOwnershipRequestDivestMessage& value, ServerModel::Federation* federation)
{
  os << "AttributeOwnershipRequestDivestMessage { ";
  // StructField federationHandle (hidden)
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "attributeHandles: "<< value.getAttributeHandles();
  os << ", ";
  os << "tag: "<< value.getTag();
  os << ", ";
  os << "unconditional: "<< value.getUnconditional();
  os << " }";
  return os;
}

// MessageDataType AttributeOwnershipRequestAcquireMessage
std::ostream&
operator<<(std::ostream& os, const AttributeOwnershipRequestAcquireMessage&  value)
{
  os << "AttributeOwnershipRequestAcquireMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << value.getAttributeHandles();
  os << ", ";
  os << "tag: " << value.getTag();
  os << ", ";
  os << "ifAvailable: " << value.getIfAvailable();
  os << ", ";
  // StructField federateHandle (hidden)
  //os << "federateHandle: " << value.getFederateHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeOwnershipRequestAcquireMessage& value, ServerModel::Federation* federation)
{
  os << "AttributeOwnershipRequestAcquireMessage { ";
  // StructField federationHandle (hidden)
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "attributeHandles: "<< value.getAttributeHandles();
  os << ", ";
  os << "tag: "<< value.getTag();
  os << ", ";
  os << "ifAvailable: "<< value.getIfAvailable();
  os << ", ";
  // StructField federateHandle (hidden)
  os << " }";
  return os;
}

// MessageDataType AttributeOwnershipResponseUnavailableMessage
std::ostream&
operator<<(std::ostream& os, const AttributeOwnershipResponseUnavailableMessage&  value)
{
  os << "AttributeOwnershipResponseUnavailableMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << value.getAttributeHandles();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeOwnershipResponseUnavailableMessage& value, ServerModel::Federation* federation)
{
  os << "AttributeOwnershipResponseUnavailableMessage { ";
  // StructField federationHandle (hidden)
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "attributeHandles: "<< value.getAttributeHandles();
  os << " }";
  return os;
}

// MessageDataType AttributeOwnershipConfirmDivestitureMessage
std::ostream&
operator<<(std::ostream& os, const AttributeOwnershipConfirmDivestitureMessage&  value)
{
  os << "AttributeOwnershipConfirmDivestitureMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << value.getAttributeHandles();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeOwnershipConfirmDivestitureMessage& value, ServerModel::Federation* federation)
{
  os << "AttributeOwnershipConfirmDivestitureMessage { ";
  // StructField federationHandle (hidden)
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "attributeHandles: "<< value.getAttributeHandles();
  os << " }";
  return os;
}

// MessageDataType AttributeOwnershipRequestCancelAcquireMessage
std::ostream&
operator<<(std::ostream& os, const AttributeOwnershipRequestCancelAcquireMessage&  value)
{
  os << "AttributeOwnershipRequestCancelAcquireMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << value.getAttributeHandles();
  os << ", ";
  os << "immediate: " << value.getImmediate();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeOwnershipRequestCancelAcquireMessage& value, ServerModel::Federation* federation)
{
  os << "AttributeOwnershipRequestCancelAcquireMessage { ";
  // StructField federationHandle (hidden)
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "attributeHandles: "<< value.getAttributeHandles();
  os << ", ";
  os << "immediate: "<< value.getImmediate();
  os << " }";
  return os;
}

// MessageDataType AttributeOwnershipResponseCancelConfirmationMessage
std::ostream&
operator<<(std::ostream& os, const AttributeOwnershipResponseCancelConfirmationMessage&  value)
{
  os << "AttributeOwnershipResponseCancelConfirmationMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << value.getAttributeHandles();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeOwnershipResponseCancelConfirmationMessage& value, ServerModel::Federation* federation)
{
  os << "AttributeOwnershipResponseCancelConfirmationMessage { ";
  // StructField federationHandle (hidden)
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "attributeHandles: "<< value.getAttributeHandles();
  os << " }";
  return os;
}

// MessageDataType AttributeOwnershipRequestCancelDivestMessage
std::ostream&
operator<<(std::ostream& os, const AttributeOwnershipRequestCancelDivestMessage&  value)
{
  os << "AttributeOwnershipRequestCancelDivestMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << value.getAttributeHandles();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeOwnershipRequestCancelDivestMessage& value, ServerModel::Federation* federation)
{
  os << "AttributeOwnershipRequestCancelDivestMessage { ";
  // StructField federationHandle (hidden)
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "attributeHandles: "<< value.getAttributeHandles();
  os << " }";
  return os;
}

// MessageDataType AttributeOwnershipDivestConfirmationMessage
std::ostream&
operator<<(std::ostream& os, const AttributeOwnershipDivestConfirmationMessage&  value)
{
  os << "AttributeOwnershipDivestConfirmationMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << value.getAttributeHandles();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeOwnershipDivestConfirmationMessage& value, ServerModel::Federation* federation)
{
  os << "AttributeOwnershipDivestConfirmationMessage { ";
  // StructField federationHandle (hidden)
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "attributeHandles: "<< value.getAttributeHandles();
  os << " }";
  return os;
}

// MessageDataType AttributeOwnershipResponseOwnershipAcquiredMessage
std::ostream&
operator<<(std::ostream& os, const AttributeOwnershipResponseOwnershipAcquiredMessage&  value)
{
  os << "AttributeOwnershipResponseOwnershipAcquiredMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  // StructField federateHandle (hidden)
  //os << "federateHandle: " << value.getFederateHandle();
  //os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << value.getAttributeHandles();
  os << ", ";
  os << "ifAvailable: " << value.getIfAvailable();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeOwnershipResponseOwnershipAcquiredMessage& value, ServerModel::Federation* federation)
{
  os << "AttributeOwnershipResponseOwnershipAcquiredMessage { ";
  // StructField federationHandle (hidden)
  // StructField federateHandle (hidden)
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "attributeHandles: "<< value.getAttributeHandles();
  os << ", ";
  os << "ifAvailable: "<< value.getIfAvailable();
  os << " }";
  return os;
}

// MessageDataType QueryAttributeOwnershipRequestMessage
std::ostream&
operator<<(std::ostream& os, const QueryAttributeOwnershipRequestMessage&  value)
{
  os << "QueryAttributeOwnershipRequestMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandle: " << value.getAttributeHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const QueryAttributeOwnershipRequestMessage& value, ServerModel::Federation* federation)
{
  os << "QueryAttributeOwnershipRequestMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "attributeHandle: "<< value.getAttributeHandle();
  os << " }";
  return os;
}

// MessageDataType QueryAttributeOwnershipResponseMessage
std::ostream&
operator<<(std::ostream& os, const QueryAttributeOwnershipResponseMessage&  value)
{
  os << "QueryAttributeOwnershipResponseMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandle: " << value.getAttributeHandle();
  os << ", ";
  os << "owner: " << value.getOwner();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const QueryAttributeOwnershipResponseMessage& value, ServerModel::Federation* federation)
{
  os << "QueryAttributeOwnershipResponseMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "attributeHandle: "<< value.getAttributeHandle();
  os << ", ";
  os << "owner: "<< value.getOwner();
  os << " }";
  return os;
}

// MessageDataType RegistrationForObjectClassMessage
std::ostream&
operator<<(std::ostream& os, const RegistrationForObjectClassMessage&  value)
{
  os << "RegistrationForObjectClassMessage { ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "start: " << value.getStart();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RegistrationForObjectClassMessage& value, ServerModel::Federation* federation)
{
  os << "RegistrationForObjectClassMessage { ";
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "start: "<< value.getStart();
  os << " }";
  return os;
}

// MessageDataType AttributesInScopeMessage
std::ostream&
operator<<(std::ostream& os, const AttributesInScopeMessage&  value)
{
  os << "AttributesInScopeMessage { ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << value.getAttributeHandles();
  os << ", ";
  os << "inScope: " << value.getInScope();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributesInScopeMessage& value, ServerModel::Federation* federation)
{
  os << "AttributesInScopeMessage { ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "attributeHandles: "<< value.getAttributeHandles();
  os << ", ";
  os << "inScope: "<< value.getInScope();
  os << " }";
  return os;
}

// MessageDataType TurnUpdatesOnForInstanceMessage
std::ostream&
operator<<(std::ostream& os, const TurnUpdatesOnForInstanceMessage&  value)
{
  os << "TurnUpdatesOnForInstanceMessage { ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "attributeHandles: " << value.getAttributeHandles();
  os << ", ";
  os << "updateRate: " << value.getUpdateRate();
  os << ", ";
  os << "on: " << value.getOn();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const TurnUpdatesOnForInstanceMessage& value, ServerModel::Federation* federation)
{
  os << "TurnUpdatesOnForInstanceMessage { ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "attributeHandles: "<< value.getAttributeHandles();
  os << ", ";
  os << "updateRate: "<< value.getUpdateRate();
  os << ", ";
  os << "on: "<< value.getOn();
  os << " }";
  return os;
}

// MessageDataType TurnInteractionsOnMessage
std::ostream&
operator<<(std::ostream& os, const TurnInteractionsOnMessage&  value)
{
  os << "TurnInteractionsOnMessage { ";
  os << "interactionClassHandle: " << value.getInteractionClassHandle();
  os << ", ";
  os << "on: " << value.getOn();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const TurnInteractionsOnMessage& value, ServerModel::Federation* federation)
{
  os << "TurnInteractionsOnMessage { ";
  os << "interactionClassHandle: "; prettyprint(os, value.getInteractionClassHandle(), federation);//InteractionClassHandle parent=Federation
  os << ", ";
  os << "on: "<< value.getOn();
  os << " }";
  return os;
}

// MessageDataType InteractionMessage
std::ostream&
operator<<(std::ostream& os, const InteractionMessage&  value)
{
  os << "InteractionMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "interactionClassHandle: " << value.getInteractionClassHandle();
  os << ", ";
  // StructField transportationType (hidden)
  //os << "transportationType: " << value.getTransportationType();
  //os << ", ";
  // StructField tag (hidden)
  //os << "tag: " << value.getTag();
  //os << ", ";
  os << "parameterValues: " << value.getParameterValues();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const InteractionMessage& value, ServerModel::Federation* federation)
{
  ServerModel::InteractionClass* interactionClass = federation->getInteractionClass(value.getInteractionClassHandle());
  os << "InteractionMessage { ";
  // StructField federationHandle (hidden)
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "interactionClassHandle: "; prettyprint(os, value.getInteractionClassHandle(), federation);//InteractionClassHandle parent=Federation
  os << ", ";
  // StructField transportationType (hidden)
  // StructField tag (hidden)
  os << "parameterValues: "; prettyprint(os, value.getParameterValues(), interactionClass);//ParameterValueVector parent=InteractionClass
  os << " }";
  return os;
}

// MessageDataType TimeStampedInteractionMessage
std::ostream&
operator<<(std::ostream& os, const TimeStampedInteractionMessage&  value)
{
  os << "TimeStampedInteractionMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "interactionClassHandle: " << value.getInteractionClassHandle();
  os << ", ";
  os << "orderType: " << value.getOrderType();
  os << ", ";
  // StructField transportationType (hidden)
  //os << "transportationType: " << value.getTransportationType();
  //os << ", ";
  // StructField tag (hidden)
  //os << "tag: " << value.getTag();
  //os << ", ";
  os << "timeStamp: " << value.getTimeStamp();
  os << ", ";
  // StructField messageRetractionHandle (hidden)
  //os << "messageRetractionHandle: " << value.getMessageRetractionHandle();
  //os << ", ";
  os << "parameterValues: " << value.getParameterValues();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const TimeStampedInteractionMessage& value, ServerModel::Federation* federation)
{
  ServerModel::InteractionClass* interactionClass = federation->getInteractionClass(value.getInteractionClassHandle());
  os << "TimeStampedInteractionMessage { ";
  // StructField federationHandle (hidden)
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "interactionClassHandle: "; prettyprint(os, value.getInteractionClassHandle(), federation);//InteractionClassHandle parent=Federation
  os << ", ";
  os << "orderType: "<< value.getOrderType();
  os << ", ";
  // StructField transportationType (hidden)
  // StructField tag (hidden)
  os << "timeStamp: "<< value.getTimeStamp();
  os << ", ";
  // StructField messageRetractionHandle (hidden)
  os << "parameterValues: "; prettyprint(os, value.getParameterValues(), interactionClass);//ParameterValueVector parent=InteractionClass
  os << " }";
  return os;
}

// MessageDataType ObjectInstanceHandlesRequestMessage
std::ostream&
operator<<(std::ostream& os, const ObjectInstanceHandlesRequestMessage&  value)
{
  os << "ObjectInstanceHandlesRequestMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "count: " << value.getCount();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ObjectInstanceHandlesRequestMessage& value, ServerModel::Federation* )
{
  os << "ObjectInstanceHandlesRequestMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "count: "<< value.getCount();
  os << " }";
  return os;
}

// MessageDataType ObjectInstanceHandlesResponseMessage
std::ostream&
operator<<(std::ostream& os, const ObjectInstanceHandlesResponseMessage&  value)
{
  os << "ObjectInstanceHandlesResponseMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  // StructField objectInstanceHandleNamePairVector (hidden)
  //os << "objectInstanceHandleNamePairVector: " << value.getObjectInstanceHandleNamePairVector();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ObjectInstanceHandlesResponseMessage& value, ServerModel::Federation* )
{
  os << "ObjectInstanceHandlesResponseMessage { ";
  // StructField federationHandle (hidden)
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  // StructField objectInstanceHandleNamePairVector (hidden)
  os << " }";
  return os;
}

// MessageDataType ReleaseMultipleObjectInstanceNameHandlePairsMessage
std::ostream&
operator<<(std::ostream& os, const ReleaseMultipleObjectInstanceNameHandlePairsMessage&  value)
{
  os << "ReleaseMultipleObjectInstanceNameHandlePairsMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "objectInstanceHandleVector: " << value.getObjectInstanceHandleVector();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ReleaseMultipleObjectInstanceNameHandlePairsMessage& value, ServerModel::Federation* federation)
{
  os << "ReleaseMultipleObjectInstanceNameHandlePairsMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "objectInstanceHandleVector: "; prettyprint(os, value.getObjectInstanceHandleVector(), federation);//ObjectInstanceHandleVector parent=Federation
  os << " }";
  return os;
}

// MessageDataType ReserveObjectInstanceNameRequestMessage
std::ostream&
operator<<(std::ostream& os, const ReserveObjectInstanceNameRequestMessage&  value)
{
  os << "ReserveObjectInstanceNameRequestMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "name: " << value.getName();
  os << ", ";
  os << "isInternal: " << value.getIsInternal();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ReserveObjectInstanceNameRequestMessage& value, ServerModel::Federation* )
{
  os << "ReserveObjectInstanceNameRequestMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "name: "<< value.getName();
  os << ", ";
  os << "isInternal: "<< value.getIsInternal();
  os << " }";
  return os;
}

// MessageDataType ReserveObjectInstanceNameResponseMessage
std::ostream&
operator<<(std::ostream& os, const ReserveObjectInstanceNameResponseMessage&  value)
{
  os << "ReserveObjectInstanceNameResponseMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "objectInstanceHandleNamePair: " << value.getObjectInstanceHandleNamePair();
  os << ", ";
  os << "success: " << value.getSuccess();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ReserveObjectInstanceNameResponseMessage& value, ServerModel::Federation* )
{
  os << "ReserveObjectInstanceNameResponseMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "objectInstanceHandleNamePair: "<< value.getObjectInstanceHandleNamePair();
  os << ", ";
  os << "success: "<< value.getSuccess();
  os << " }";
  return os;
}

// MessageDataType ReserveMultipleObjectInstanceNameRequestMessage
std::ostream&
operator<<(std::ostream& os, const ReserveMultipleObjectInstanceNameRequestMessage&  value)
{
  os << "ReserveMultipleObjectInstanceNameRequestMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "nameList: " << value.getNameList();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ReserveMultipleObjectInstanceNameRequestMessage& value, ServerModel::Federation* )
{
  os << "ReserveMultipleObjectInstanceNameRequestMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "nameList: "<< value.getNameList();
  os << " }";
  return os;
}

// MessageDataType ReserveMultipleObjectInstanceNameResponseMessage
std::ostream&
operator<<(std::ostream& os, const ReserveMultipleObjectInstanceNameResponseMessage&  value)
{
  os << "ReserveMultipleObjectInstanceNameResponseMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  // StructField objectInstanceHandleNamePairVector (hidden)
  //os << "objectInstanceHandleNamePairVector: " << value.getObjectInstanceHandleNamePairVector();
  //os << ", ";
  os << "success: " << value.getSuccess();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const ReserveMultipleObjectInstanceNameResponseMessage& value, ServerModel::Federation* )
{
  os << "ReserveMultipleObjectInstanceNameResponseMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  // StructField objectInstanceHandleNamePairVector (hidden)
  os << "success: "<< value.getSuccess();
  os << " }";
  return os;
}

// MessageDataType InsertObjectInstanceMessage
std::ostream&
operator<<(std::ostream& os, const InsertObjectInstanceMessage&  value)
{
  os << "InsertObjectInstanceMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "name: " << value.getName();
  os << ", ";
  // StructField attributeStateVector (hidden)
  //os << "attributeStateVector: " << value.getAttributeStateVector();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const InsertObjectInstanceMessage& value, ServerModel::Federation* federation)
{
  os << "InsertObjectInstanceMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "name: "<< value.getName();
  os << ", ";
  // StructField attributeStateVector (hidden)
  os << " }";
  return os;
}

// MessageDataType DeleteObjectInstanceMessage
std::ostream&
operator<<(std::ostream& os, const DeleteObjectInstanceMessage&  value)
{
  os << "DeleteObjectInstanceMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "tag: " << value.getTag();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const DeleteObjectInstanceMessage& value, ServerModel::Federation* federation)
{
  os << "DeleteObjectInstanceMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "tag: "<< value.getTag();
  os << " }";
  return os;
}

// MessageDataType TimeStampedDeleteObjectInstanceMessage
std::ostream&
operator<<(std::ostream& os, const TimeStampedDeleteObjectInstanceMessage&  value)
{
  os << "TimeStampedDeleteObjectInstanceMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "orderType: " << value.getOrderType();
  os << ", ";
  os << "tag: " << value.getTag();
  os << ", ";
  os << "timeStamp: " << value.getTimeStamp();
  os << ", ";
  os << "messageRetractionHandle: " << value.getMessageRetractionHandle();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const TimeStampedDeleteObjectInstanceMessage& value, ServerModel::Federation* federation)
{
  os << "TimeStampedDeleteObjectInstanceMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "orderType: "<< value.getOrderType();
  os << ", ";
  os << "tag: "<< value.getTag();
  os << ", ";
  os << "timeStamp: "<< value.getTimeStamp();
  os << ", ";
  os << "messageRetractionHandle: "<< value.getMessageRetractionHandle();
  os << " }";
  return os;
}

// MessageDataType AttributeUpdateMessage
std::ostream&
operator<<(std::ostream& os, const AttributeUpdateMessage&  value)
{
  os << "AttributeUpdateMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  // StructField tag (hidden)
  //os << "tag: " << value.getTag();
  //os << ", ";
  // StructField transportationType (hidden)
  //os << "transportationType: " << value.getTransportationType();
  //os << ", ";
  // StructField attributeValues (hidden)
  //os << "attributeValues: " << value.getAttributeValues();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const AttributeUpdateMessage& value, ServerModel::Federation* federation)
{
  os << "AttributeUpdateMessage { ";
  // StructField federationHandle (hidden)
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  // StructField tag (hidden)
  // StructField transportationType (hidden)
  // StructField attributeValues (hidden)
  os << " }";
  return os;
}

// MessageDataType TimeStampedAttributeUpdateMessage
std::ostream&
operator<<(std::ostream& os, const TimeStampedAttributeUpdateMessage&  value)
{
  os << "TimeStampedAttributeUpdateMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "federateHandle: " << value.getFederateHandle();
  os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  os << "tag: " << value.getTag();
  os << ", ";
  os << "timeStamp: " << value.getTimeStamp();
  os << ", ";
  os << "messageRetractionHandle: " << value.getMessageRetractionHandle();
  os << ", ";
  os << "orderType: " << value.getOrderType();
  os << ", ";
  os << "transportationType: " << value.getTransportationType();
  os << ", ";
  os << "attributeValues: " << value.getAttributeValues();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const TimeStampedAttributeUpdateMessage& value, ServerModel::Federation* federation)
{
  os << "TimeStampedAttributeUpdateMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "federateHandle: "<< value.getFederateHandle();
  os << ", ";
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  os << "tag: "<< value.getTag();
  os << ", ";
  os << "timeStamp: "<< value.getTimeStamp();
  os << ", ";
  os << "messageRetractionHandle: "<< value.getMessageRetractionHandle();
  os << ", ";
  os << "orderType: "<< value.getOrderType();
  os << ", ";
  os << "transportationType: "<< value.getTransportationType();
  os << ", ";
  os << "attributeValues: "<< value.getAttributeValues();
  os << " }";
  return os;
}

// MessageDataType RequestAttributeUpdateMessage
std::ostream&
operator<<(std::ostream& os, const RequestAttributeUpdateMessage&  value)
{
  os << "RequestAttributeUpdateMessage { ";
  // StructField federationHandle (hidden)
  //os << "federationHandle: " << value.getFederationHandle();
  //os << ", ";
  os << "objectInstanceHandle: " << value.getObjectInstanceHandle();
  os << ", ";
  // StructField attributeHandles (hidden)
  //os << "attributeHandles: " << value.getAttributeHandles();
  //os << ", ";
  os << "tag: " << value.getTag();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RequestAttributeUpdateMessage& value, ServerModel::Federation* federation)
{
  os << "RequestAttributeUpdateMessage { ";
  // StructField federationHandle (hidden)
  os << "objectInstanceHandle: "; prettyprint(os, value.getObjectInstanceHandle(), federation);//ObjectInstanceHandle parent=Federation
  os << ", ";
  // StructField attributeHandles (hidden)
  os << "tag: "<< value.getTag();
  os << " }";
  return os;
}

// MessageDataType RequestClassAttributeUpdateMessage
std::ostream&
operator<<(std::ostream& os, const RequestClassAttributeUpdateMessage&  value)
{
  os << "RequestClassAttributeUpdateMessage { ";
  os << "federationHandle: " << value.getFederationHandle();
  os << ", ";
  os << "objectClassHandle: " << value.getObjectClassHandle();
  os << ", ";
  os << "attributeHandles: " << value.getAttributeHandles();
  os << ", ";
  os << "tag: " << value.getTag();
  os << " }";
  return os;
}

std::ostream&
prettyprint(std::ostream& os, const RequestClassAttributeUpdateMessage& value, ServerModel::Federation* federation)
{
  os << "RequestClassAttributeUpdateMessage { ";
  os << "federationHandle: "<< value.getFederationHandle();
  os << ", ";
  os << "objectClassHandle: "; prettyprint(os, value.getObjectClassHandle(), federation);//ObjectClassHandle parent=Federation
  os << ", ";
  os << "attributeHandles: "<< value.getAttributeHandles();
  os << ", ";
  os << "tag: "<< value.getTag();
  os << " }";
  return os;
}


} // namespace OpenRTI
