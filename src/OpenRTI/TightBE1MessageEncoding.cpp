/* -*-c++-*- OpenRTI - Copyright (C) 2009-2013 Mathias Froehlich
 *
 *
 * This file is part of OpenRTI.
 *
 * OpenRTI is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * OpenRTI is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OpenRTI.  If not, see <http://www.gnu.org/licenses/>.
 *
 * This file is autogenerated by messagegen.py. Do not edit!
 *
 */


#include "DebugNew.h"
#include "TightBE1MessageEncoding.h"
#include "AbstractMessageEncoding.h"
#include "DecodeDataStream.h"
#include "EncodeDataStream.h"
#include "Export.h"
#include "Message.h"
#include "AbstractNetworkStatistics.h"

#ifndef __CPlusPlusStd
#error "must include OpenRTIConfig.h!"
#endif

namespace OpenRTI {

class OPENRTI_LOCAL TightBE1MessageEncoding::EncodeStream : public EncodeDataStream {
public:
  EncodeStream(VariableLengthData& variableLengthData, TightBE1MessageEncoding& messageEncoding) :
    EncodeDataStream(variableLengthData),
    _messageEncoding(messageEncoding)
  { }
  void writeCallbackModel(const CallbackModel& value)
  {
    switch (value) {
    case CallbackModel::HLA_IMMEDIATE:
      writeUInt32Compressed(0);
      break;
    case CallbackModel::HLA_EVOKED:
      writeUInt32Compressed(1);
      break;
    default:
      writeUInt32Compressed(2);
      break;
    }
  }

  void writeOrderType(const OrderType& value)
  {
    switch (value) {
    case OrderType::RECEIVE:
      writeUInt32Compressed(0);
      break;
    case OrderType::TIMESTAMP:
      writeUInt32Compressed(1);
      break;
    default:
      writeUInt32Compressed(2);
      break;
    }
  }

  void writeTransportationType(const TransportationType& value)
  {
    switch (value) {
    case TransportationType::RELIABLE:
      writeUInt32Compressed(0);
      break;
    case TransportationType::BEST_EFFORT:
      writeUInt32Compressed(1);
      break;
    default:
      writeUInt32Compressed(2);
      break;
    }
  }

  void writeSubscriptionType(const SubscriptionType& value)
  {
    switch (value) {
    case SubscriptionType::Unsubscribed:
      writeUInt32Compressed(0);
      break;
    case SubscriptionType::SubscribedPassive:
      writeUInt32Compressed(1);
      break;
    case SubscriptionType::SubscribedActive:
      writeUInt32Compressed(2);
      break;
    default:
      writeUInt32Compressed(3);
      break;
    }
  }

  void writePublicationType(const PublicationType& value)
  {
    switch (value) {
    case PublicationType::Unpublished:
      writeUInt32Compressed(0);
      break;
    case PublicationType::Published:
      writeUInt32Compressed(1);
      break;
    default:
      writeUInt32Compressed(2);
      break;
    }
  }

  void writeResignAction(const ResignAction& value)
  {
    switch (value) {
    case ResignAction::UNCONDITIONALLY_DIVEST_ATTRIBUTES:
      writeUInt32Compressed(0);
      break;
    case ResignAction::DELETE_OBJECTS:
      writeUInt32Compressed(1);
      break;
    case ResignAction::CANCEL_PENDING_OWNERSHIP_ACQUISITIONS:
      writeUInt32Compressed(2);
      break;
    case ResignAction::DELETE_OBJECTS_THEN_DIVEST:
      writeUInt32Compressed(3);
      break;
    case ResignAction::CANCEL_THEN_DELETE_THEN_DIVEST:
      writeUInt32Compressed(4);
      break;
    case ResignAction::NO_ACTION:
      writeUInt32Compressed(5);
      break;
    default:
      writeUInt32Compressed(6);
      break;
    }
  }

  void writeRestoreFailureReason(const RestoreFailureReason& value)
  {
    switch (value) {
    case RestoreFailureReason::RTI_UNABLE_TO_RESTORE:
      writeUInt32Compressed(0);
      break;
    case RestoreFailureReason::FEDERATE_REPORTED_FAILURE_DURING_RESTORE:
      writeUInt32Compressed(1);
      break;
    case RestoreFailureReason::FEDERATE_RESIGNED_DURING_RESTORE:
      writeUInt32Compressed(2);
      break;
    case RestoreFailureReason::RTI_DETECTED_FAILURE_DURING_RESTORE:
      writeUInt32Compressed(3);
      break;
    default:
      writeUInt32Compressed(4);
      break;
    }
  }

  void writeRestoreStatus(const RestoreStatus& value)
  {
    switch (value) {
    case RestoreStatus::NO_RESTORE_IN_PROGRESS:
      writeUInt32Compressed(0);
      break;
    case RestoreStatus::FEDERATE_RESTORE_REQUEST_PENDING:
      writeUInt32Compressed(1);
      break;
    case RestoreStatus::FEDERATE_WAITING_FOR_RESTORE_TO_BEGIN:
      writeUInt32Compressed(2);
      break;
    case RestoreStatus::FEDERATE_PREPARED_TO_RESTORE:
      writeUInt32Compressed(3);
      break;
    case RestoreStatus::FEDERATE_RESTORING:
      writeUInt32Compressed(4);
      break;
    case RestoreStatus::FEDERATE_WAITING_FOR_FEDERATION_TO_RESTORE:
      writeUInt32Compressed(5);
      break;
    default:
      writeUInt32Compressed(6);
      break;
    }
  }

  void writeSaveFailureReason(const SaveFailureReason& value)
  {
    switch (value) {
    case SaveFailureReason::RTI_UNABLE_TO_SAVE:
      writeUInt32Compressed(0);
      break;
    case SaveFailureReason::FEDERATE_REPORTED_FAILURE_DURING_SAVE:
      writeUInt32Compressed(1);
      break;
    case SaveFailureReason::FEDERATE_RESIGNED_DURING_SAVE:
      writeUInt32Compressed(2);
      break;
    case SaveFailureReason::RTI_DETECTED_FAILURE_DURING_SAVE:
      writeUInt32Compressed(3);
      break;
    case SaveFailureReason::SAVE_TIME_CANNOT_BE_HONORED:
      writeUInt32Compressed(4);
      break;
    default:
      writeUInt32Compressed(5);
      break;
    }
  }

  void writeSaveStatus(const SaveStatus& value)
  {
    switch (value) {
    case SaveStatus::NO_SAVE_IN_PROGRESS:
      writeUInt32Compressed(0);
      break;
    case SaveStatus::FEDERATE_INSTRUCTED_TO_SAVE:
      writeUInt32Compressed(1);
      break;
    case SaveStatus::FEDERATE_SAVING:
      writeUInt32Compressed(2);
      break;
    case SaveStatus::FEDERATE_WAITING_FOR_FEDERATION_TO_SAVE:
      writeUInt32Compressed(3);
      break;
    default:
      writeUInt32Compressed(4);
      break;
    }
  }

  void writeServiceGroupIndicator(const ServiceGroupIndicator& value)
  {
    switch (value) {
    case ServiceGroupIndicator::FEDERATION_MANAGEMENT:
      writeUInt32Compressed(0);
      break;
    case ServiceGroupIndicator::DECLARATION_MANAGEMENT:
      writeUInt32Compressed(1);
      break;
    case ServiceGroupIndicator::OBJECT_MANAGEMENT:
      writeUInt32Compressed(2);
      break;
    case ServiceGroupIndicator::OWNERSHIP_MANAGEMENT:
      writeUInt32Compressed(3);
      break;
    case ServiceGroupIndicator::TIME_MANAGEMENT:
      writeUInt32Compressed(4);
      break;
    case ServiceGroupIndicator::DATA_DISTRIBUTION_MANAGEMENT:
      writeUInt32Compressed(5);
      break;
    case ServiceGroupIndicator::SUPPORT_SERVICES:
      writeUInt32Compressed(6);
      break;
    default:
      writeUInt32Compressed(7);
      break;
    }
  }

  void writeLowerBoundTimeStampCommitType(const LowerBoundTimeStampCommitType& value)
  {
    switch (value) {
    case LowerBoundTimeStampCommitType::TimeAdvanceCommit:
      writeUInt32Compressed(0);
      break;
    case LowerBoundTimeStampCommitType::NextMessageCommit:
      writeUInt32Compressed(1);
      break;
    case LowerBoundTimeStampCommitType::TimeAdvanceAndNextMessageCommit:
      writeUInt32Compressed(2);
      break;
    default:
      writeUInt32Compressed(3);
      break;
    }
  }

  void writeSwitchesType(const SwitchesType& value)
  {
    switch (value) {
    case SwitchesType::InteractionRelevanceAdvisorySwitchesType:
      writeUInt32Compressed(0);
      break;
    case SwitchesType::ObjectClassRelevanceAdvisorySwitchesType:
      writeUInt32Compressed(1);
      break;
    case SwitchesType::AttributeRelevanceAdvisorySwitchesType:
      writeUInt32Compressed(2);
      break;
    case SwitchesType::AttributeScopeAdvisorySwitchesType:
      writeUInt32Compressed(3);
      break;
    case SwitchesType::AutoProvideSwitchesType:
      writeUInt32Compressed(4);
      break;
    case SwitchesType::ConveyRegionDesignatorSetsSwitchesType:
      writeUInt32Compressed(5);
      break;
    case SwitchesType::ServiceReportingSwitchesType:
      writeUInt32Compressed(6);
      break;
    default:
      writeUInt32Compressed(7);
      break;
    }
  }

  void writeArrayDataTypeEncoding(const ArrayDataTypeEncoding& value)
  {
    switch (value) {
    case ArrayDataTypeEncoding::FixedArrayDataTypeEncoding:
      writeUInt32Compressed(0);
      break;
    case ArrayDataTypeEncoding::VariableArrayDataTypeEncoding:
      writeUInt32Compressed(1);
      break;
    default:
      writeUInt32Compressed(2);
      break;
    }
  }

  void writeEndianness(const Endianness& value)
  {
    switch (value) {
    case Endianness::BigEndian:
      writeUInt32Compressed(0);
      break;
    case Endianness::LittleEndian:
      writeUInt32Compressed(1);
      break;
    default:
      writeUInt32Compressed(2);
      break;
    }
  }

  void writeBool(const bool& value)
  {
    writeBoolCompressed(value);
  }

  void writeString(const std::string& value)
  {
    writeSizeTCompressed(value.size());
    for (std::string::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeChar(*i);
    }
  }

  void writeUnsigned(const uint32_t& value)
  {
    writeUInt32Compressed(value);
  }

  void writeDouble(const double& value)
  {
    writeFloat64Compressed(value);
  }

  void writeFederationHandle(const FederationHandle& value)
  {
    writeUInt16Compressed(value);
  }

  void writeModuleHandle(const ModuleHandle& value)
  {
    writeUInt16Compressed(value);
  }

  void writeAttributeHandle(const AttributeHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeDimensionHandle(const DimensionHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeUpdateRateHandle(const UpdateRateHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeBasicDataTypeHandle(const BasicDataTypeHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeSimpleDataTypeHandle(const SimpleDataTypeHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeEnumeratedDataTypeHandle(const EnumeratedDataTypeHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeArrayDataTypeHandle(const ArrayDataTypeHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeFixedRecordDataTypeHandle(const FixedRecordDataTypeHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeVariantRecordDataTypeHandle(const VariantRecordDataTypeHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeObjectClassHandle(const ObjectClassHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeObjectInstanceHandle(const ObjectInstanceHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeInteractionClassHandle(const InteractionClassHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeParameterHandle(const ParameterHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeFederateHandle(const FederateHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeSpaceHandle(const SpaceHandle& value)
  {
    writeUInt32Compressed(value);
  }

  void writeTransportationHandle(const TransportationHandle& value)
  {
    writeUInt8Compressed(value);
  }

  void writeOrderingHandle(const OrderingHandle& value)
  {
    writeUInt8Compressed(value);
  }

  void writeMessageRetractionHandle(const MessageRetractionHandle& value)
  {
    writeUInt64Compressed(value);
  }

  void writeRegionHandle(const RegionHandle& value)
  {
    writeUInt64Compressed(value);
  }

  void writeAttributeHandleVector(const AttributeHandleVector& value)
  {
    writeSizeTCompressed(value.size());
    for (AttributeHandleVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeAttributeHandle(*i);
    }
  }

  void writeFederateHandleVector(const FederateHandleVector& value)
  {
    writeSizeTCompressed(value.size());
    for (FederateHandleVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFederateHandle(*i);
    }
  }

  void writeParameterHandleVector(const ParameterHandleVector& value)
  {
    writeSizeTCompressed(value.size());
    for (ParameterHandleVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeParameterHandle(*i);
    }
  }

  void writeDimensionHandleVector(const DimensionHandleVector& value)
  {
    writeSizeTCompressed(value.size());
    for (DimensionHandleVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeDimensionHandle(*i);
    }
  }

  void writeDimensionHandleSet(const DimensionHandleSet& value)
  {
    writeSizeTCompressed(value.size());
    for (DimensionHandleSet::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeDimensionHandle(*i);
    }
  }

  void writeObjectInstanceHandleVector(const ObjectInstanceHandleVector& value)
  {
    writeSizeTCompressed(value.size());
    for (ObjectInstanceHandleVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeObjectInstanceHandle(*i);
    }
  }

  void writeRegionHandleVector(const RegionHandleVector& value)
  {
    writeSizeTCompressed(value.size());
    for (RegionHandleVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeRegionHandle(*i);
    }
  }

  void writeModuleHandleVector(const ModuleHandleVector& value)
  {
    writeSizeTCompressed(value.size());
    for (ModuleHandleVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeModuleHandle(*i);
    }
  }

  void writeStringVector(const StringVector& value)
  {
    writeSizeTCompressed(value.size());
    for (StringVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeString(*i);
    }
  }

  void writeStringSet(const StringSet& value)
  {
    writeSizeTCompressed(value.size());
    for (StringSet::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeString(*i);
    }
  }

  void writeVariableLengthData(const VariableLengthData& value)
  {
    writeSizeTCompressed(value.size());
    if (!value.empty())
      _messageEncoding.addWriteBuffer(value);
  }

  void writeFederateHandleBoolPair(const FederateHandleBoolPair& value)
  {
    writeFederateHandle(value.first);
    writeBool(value.second);
  }

  void writeFederateHandleBoolPairVector(const FederateHandleBoolPairVector& value)
  {
    writeSizeTCompressed(value.size());
    for (FederateHandleBoolPairVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFederateHandleBoolPair(*i);
    }
  }

  void writeRangeBoundsValue(const RangeBoundsValue& value)
  {
    writeUnsigned( value.getLowerBound());
    writeUnsigned( value.getUpperBound());
  }

  void writeDimensionHandleRangeBoundsValuePair(const DimensionHandleRangeBoundsValuePair& value)
  {
    writeDimensionHandle(value.first);
    writeRangeBoundsValue(value.second);
  }

  void writeRegionValue(const RegionValue& value)
  {
    writeSizeTCompressed(value.size());
    for (RegionValue::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeDimensionHandleRangeBoundsValuePair(*i);
    }
  }

  void writeRegionValueList(const RegionValueList& value)
  {
    writeSizeTCompressed(value.size());
    for (RegionValueList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeRegionValue(*i);
    }
  }

  void writeRegionHandleDimensionHandleSetPair(const RegionHandleDimensionHandleSetPair& value)
  {
    writeRegionHandle(value.first);
    writeDimensionHandleSet(value.second);
  }

  void writeRegionHandleDimensionHandleSetPairVector(const RegionHandleDimensionHandleSetPairVector& value)
  {
    writeSizeTCompressed(value.size());
    for (RegionHandleDimensionHandleSetPairVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeRegionHandleDimensionHandleSetPair(*i);
    }
  }

  void writeRegionHandleSpaceHandlePair(const RegionHandleSpaceHandlePair& value)
  {
    writeRegionHandle(value.first);
    writeSpaceHandle(value.second);
  }

  void writeRegionHandleSpaceHandlePairVector(const RegionHandleSpaceHandlePairVector& value)
  {
    writeSizeTCompressed(value.size());
    for (RegionHandleSpaceHandlePairVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeRegionHandleSpaceHandlePair(*i);
    }
  }

  void writeRegionHandleRegionValuePair(const RegionHandleRegionValuePair& value)
  {
    writeRegionHandle(value.first);
    writeRegionValue(value.second);
  }

  void writeRegionHandleRegionValuePairVector(const RegionHandleRegionValuePairVector& value)
  {
    writeSizeTCompressed(value.size());
    for (RegionHandleRegionValuePairVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeRegionHandleRegionValuePair(*i);
    }
  }

  void writeInteractionClassHandleRegionValueListPair(const InteractionClassHandleRegionValueListPair& value)
  {
    writeInteractionClassHandle(value.first);
    writeRegionValueList(value.second);
  }

  void writeAttributeHandleRegionValueListPair(const AttributeHandleRegionValueListPair& value)
  {
    writeAttributeHandle(value.first);
    writeRegionValueList(value.second);
  }

  void writeAttributeState(const AttributeState& value)
  {
    writeAttributeHandle( value.getAttributeHandle());
    writeFederateHandle( value.getOwnerFederate());
  }

  void writeAttributeStateVector(const AttributeStateVector& value)
  {
    writeSizeTCompressed(value.size());
    for (AttributeStateVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeAttributeState(*i);
    }
  }

  void writeParameterValue(const ParameterValue& value)
  {
    writeParameterHandle( value.getParameterHandle());
    writeVariableLengthData( value.getValue());
  }

  void writeParameterValueVector(const ParameterValueVector& value)
  {
    writeSizeTCompressed(value.size());
    for (ParameterValueVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeParameterValue(*i);
    }
  }

  void writeAttributeValue(const AttributeValue& value)
  {
    writeAttributeHandle( value.getAttributeHandle());
    writeVariableLengthData( value.getValue());
  }

  void writeAttributeValueVector(const AttributeValueVector& value)
  {
    writeSizeTCompressed(value.size());
    for (AttributeValueVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeAttributeValue(*i);
    }
  }

  void writeFederateHandleSaveStatusPair(const FederateHandleSaveStatusPair& value)
  {
    writeFederateHandle(value.first);
    writeSaveStatus(value.second);
  }

  void writeFederateHandleSaveStatusPairVector(const FederateHandleSaveStatusPairVector& value)
  {
    writeSizeTCompressed(value.size());
    for (FederateHandleSaveStatusPairVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFederateHandleSaveStatusPair(*i);
    }
  }

  void writeFederateHandleRestoreStatusPair(const FederateHandleRestoreStatusPair& value)
  {
    writeFederateHandle(value.first);
    writeRestoreStatus(value.second);
  }

  void writeFederateHandleRestoreStatusPairVector(const FederateHandleRestoreStatusPairVector& value)
  {
    writeSizeTCompressed(value.size());
    for (FederateHandleRestoreStatusPairVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFederateHandleRestoreStatusPair(*i);
    }
  }

  void writeFederationExecutionInformation(const FederationExecutionInformation& value)
  {
    writeString( value.getFederationExecutionName());
    writeString( value.getLogicalTimeFactoryName());
  }

  void writeFederationExecutionInformationVector(const FederationExecutionInformationVector& value)
  {
    writeSizeTCompressed(value.size());
    for (FederationExecutionInformationVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFederationExecutionInformation(*i);
    }
  }

  void writeObjectInstanceHandleNamePair(const ObjectInstanceHandleNamePair& value)
  {
    writeObjectInstanceHandle(value.first);
    writeString(value.second);
  }

  void writeObjectInstanceHandleNamePairVector(const ObjectInstanceHandleNamePairVector& value)
  {
    writeSizeTCompressed(value.size());
    for (ObjectInstanceHandleNamePairVector::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeObjectInstanceHandleNamePair(*i);
    }
  }

  void writeCreateFederationExecutionResponseType(const CreateFederationExecutionResponseType& value)
  {
    switch (value) {
    case CreateFederationExecutionResponseType::CreateFederationExecutionResponseSuccess:
      writeUInt32Compressed(0);
      break;
    case CreateFederationExecutionResponseType::CreateFederationExecutionResponseFederationExecutionAlreadyExists:
      writeUInt32Compressed(1);
      break;
    case CreateFederationExecutionResponseType::CreateFederationExecutionResponseCouldNotOpenFDD:
      writeUInt32Compressed(2);
      break;
    case CreateFederationExecutionResponseType::CreateFederationExecutionResponseErrorReadingFDD:
      writeUInt32Compressed(3);
      break;
    case CreateFederationExecutionResponseType::CreateFederationExecutionResponseCouldNotCreateLogicalTimeFactory:
      writeUInt32Compressed(4);
      break;
    case CreateFederationExecutionResponseType::CreateFederationExecutionResponseInconsistentFDD:
      writeUInt32Compressed(5);
      break;
    case CreateFederationExecutionResponseType::CreateFederationExecutionResponseRTIinternalError:
      writeUInt32Compressed(6);
      break;
    case CreateFederationExecutionResponseType::CreateFederationExecutionResponseTimeout:
      writeUInt32Compressed(7);
      break;
    default:
      writeUInt32Compressed(8);
      break;
    }
  }

  void writeDestroyFederationExecutionResponseType(const DestroyFederationExecutionResponseType& value)
  {
    switch (value) {
    case DestroyFederationExecutionResponseType::DestroyFederationExecutionResponseSuccess:
      writeUInt32Compressed(0);
      break;
    case DestroyFederationExecutionResponseType::DestroyFederationExecutionResponseFederatesCurrentlyJoined:
      writeUInt32Compressed(1);
      break;
    case DestroyFederationExecutionResponseType::DestroyFederationExecutionResponseFederationExecutionDoesNotExist:
      writeUInt32Compressed(2);
      break;
    case DestroyFederationExecutionResponseType::DestroyFederationExecutionResponseRTIinternalError:
      writeUInt32Compressed(3);
      break;
    default:
      writeUInt32Compressed(4);
      break;
    }
  }

  void writeJoinFederationExecutionResponseType(const JoinFederationExecutionResponseType& value)
  {
    switch (value) {
    case JoinFederationExecutionResponseType::JoinFederationExecutionResponseSuccess:
      writeUInt32Compressed(0);
      break;
    case JoinFederationExecutionResponseType::JoinFederationExecutionResponseFederateNameAlreadyInUse:
      writeUInt32Compressed(1);
      break;
    case JoinFederationExecutionResponseType::JoinFederationExecutionResponseFederationExecutionDoesNotExist:
      writeUInt32Compressed(2);
      break;
    case JoinFederationExecutionResponseType::JoinFederationExecutionResponseSaveInProgress:
      writeUInt32Compressed(3);
      break;
    case JoinFederationExecutionResponseType::JoinFederationExecutionResponseRestoreInProgress:
      writeUInt32Compressed(4);
      break;
    case JoinFederationExecutionResponseType::JoinFederationExecutionResponseInconsistentFDD:
      writeUInt32Compressed(5);
      break;
    case JoinFederationExecutionResponseType::JoinFederationExecutionResponseTimeout:
      writeUInt32Compressed(6);
      break;
    default:
      writeUInt32Compressed(7);
      break;
    }
  }

  void writeRegisterFederationSynchronizationPointResponseType(const RegisterFederationSynchronizationPointResponseType& value)
  {
    switch (value) {
    case RegisterFederationSynchronizationPointResponseType::RegisterFederationSynchronizationPointResponseSuccess:
      writeUInt32Compressed(0);
      break;
    case RegisterFederationSynchronizationPointResponseType::RegisterFederationSynchronizationPointResponseLabelNotUnique:
      writeUInt32Compressed(1);
      break;
    case RegisterFederationSynchronizationPointResponseType::RegisterFederationSynchronizationPointResponseMemberNotJoined:
      writeUInt32Compressed(2);
      break;
    default:
      writeUInt32Compressed(3);
      break;
    }
  }

  void writeConfigurationParameterMap(const ConfigurationParameterMap& value)
  {
    writeSizeTCompressed(value.size());
    for (ConfigurationParameterMap::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeString(i->first);
      writeStringVector(i->second);
    }
  }

  void writeFOMStringBasicDataType(const FOMStringBasicDataType& value)
  {
    writeString( value.getName());
    writeUnsigned( value.getSize());
    writeEndianness( value.getEndian());
  }

  void writeFOMStringBasicDataTypeList(const FOMStringBasicDataTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringBasicDataTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringBasicDataType(*i);
    }
  }

  void writeFOMStringSimpleDataType(const FOMStringSimpleDataType& value)
  {
    writeString( value.getName());
    writeString( value.getRepresentation());
  }

  void writeFOMStringSimpleDataTypeList(const FOMStringSimpleDataTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringSimpleDataTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringSimpleDataType(*i);
    }
  }

  void writeFOMStringEnumerator(const FOMStringEnumerator& value)
  {
    writeString( value.getName());
    writeUnsigned( value.getValue());
  }

  void writeFOMStringEnumeratorList(const FOMStringEnumeratorList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringEnumeratorList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringEnumerator(*i);
    }
  }

  void writeFOMStringEnumeratedDataType(const FOMStringEnumeratedDataType& value)
  {
    writeString( value.getName());
    writeString( value.getRepresentation());
    writeFOMStringEnumeratorList( value.getEnumerators());
  }

  void writeFOMStringEnumeratedDataTypeList(const FOMStringEnumeratedDataTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringEnumeratedDataTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringEnumeratedDataType(*i);
    }
  }

  void writeFOMStringArrayDataType(const FOMStringArrayDataType& value)
  {
    writeString( value.getName());
    writeString( value.getDataType());
    writeString( value.getCardinality());
    writeString( value.getEncoding());
  }

  void writeFOMStringArrayDataTypeList(const FOMStringArrayDataTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringArrayDataTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringArrayDataType(*i);
    }
  }

  void writeFOMStringArrayDataType2(const FOMStringArrayDataType2& value)
  {
    writeString( value.getName());
    writeString( value.getDataType());
    writeString( value.getCardinality());
    writeArrayDataTypeEncoding( value.getEncoding());
  }

  void writeFOMStringArrayDataType2List(const FOMStringArrayDataType2List& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringArrayDataType2List::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringArrayDataType2(*i);
    }
  }

  void writeFOMStringFixedRecordField(const FOMStringFixedRecordField& value)
  {
    writeString( value.getName());
    writeUnsigned( value.getDataType());
  }

  void writeFOMStringFixedRecordFieldList(const FOMStringFixedRecordFieldList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringFixedRecordFieldList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringFixedRecordField(*i);
    }
  }

  void writeFOMStringFixedRecordDataType(const FOMStringFixedRecordDataType& value)
  {
    writeString( value.getName());
    writeString( value.getEncoding());
    writeFOMStringFixedRecordFieldList( value.getFields());
  }

  void writeFOMStringFixedRecordDataTypeList(const FOMStringFixedRecordDataTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringFixedRecordDataTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringFixedRecordDataType(*i);
    }
  }

  void writeFOMStringFixedRecordField2(const FOMStringFixedRecordField2& value)
  {
    writeString( value.getName());
    writeString( value.getDataType());
    writeUnsigned( value.getVersion());
  }

  void writeFOMStringFixedRecordField2List(const FOMStringFixedRecordField2List& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringFixedRecordField2List::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringFixedRecordField2(*i);
    }
  }

  void writeFOMStringFixedRecordDataType2(const FOMStringFixedRecordDataType2& value)
  {
    writeString( value.getName());
    writeString( value.getEncoding());
    writeString( value.getInclude());
    writeUnsigned( value.getVersion());
    writeFOMStringFixedRecordField2List( value.getFields());
  }

  void writeFOMStringFixedRecordDataType2List(const FOMStringFixedRecordDataType2List& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringFixedRecordDataType2List::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringFixedRecordDataType2(*i);
    }
  }

  void writeFOMStringVariantRecordAlternative(const FOMStringVariantRecordAlternative& value)
  {
    writeString( value.getEnumerator());
    writeString( value.getName());
    writeUnsigned( value.getDataType());
  }

  void writeFOMStringVariantRecordAlternativeList(const FOMStringVariantRecordAlternativeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringVariantRecordAlternativeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringVariantRecordAlternative(*i);
    }
  }

  void writeFOMStringVariantRecordDataType(const FOMStringVariantRecordDataType& value)
  {
    writeString( value.getName());
    writeString( value.getDiscriminant());
    writeString( value.getDataType());
    writeFOMStringVariantRecordAlternativeList( value.getAlternatives());
    writeString( value.getEncoding());
  }

  void writeFOMStringVariantRecordDataTypeList(const FOMStringVariantRecordDataTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringVariantRecordDataTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringVariantRecordDataType(*i);
    }
  }

  void writeFOMStringVariantRecordAlternative2(const FOMStringVariantRecordAlternative2& value)
  {
    writeString( value.getEnumerator());
    writeString( value.getName());
    writeString( value.getDataType());
  }

  void writeFOMStringVariantRecordAlternative2List(const FOMStringVariantRecordAlternative2List& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringVariantRecordAlternative2List::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringVariantRecordAlternative2(*i);
    }
  }

  void writeFOMStringVariantRecordDataType2(const FOMStringVariantRecordDataType2& value)
  {
    writeString( value.getName());
    writeString( value.getDiscriminant());
    writeString( value.getDataType());
    writeFOMStringVariantRecordAlternative2List( value.getAlternatives());
    writeString( value.getEncoding());
  }

  void writeFOMStringVariantRecordDataType2List(const FOMStringVariantRecordDataType2List& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringVariantRecordDataType2List::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringVariantRecordDataType2(*i);
    }
  }

  void writeFOMStringTransportationType(const FOMStringTransportationType& value)
  {
    writeString( value.getName());
  }

  void writeFOMStringTransportationTypeList(const FOMStringTransportationTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringTransportationTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringTransportationType(*i);
    }
  }

  void writeFOMStringDimension(const FOMStringDimension& value)
  {
    writeString( value.getName());
    writeUnsigned( value.getUpperBound());
  }

  void writeFOMStringDimensionList(const FOMStringDimensionList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringDimensionList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringDimension(*i);
    }
  }

  void writeFOMStringRoutingSpace(const FOMStringRoutingSpace& value)
  {
    writeString( value.getName());
    writeStringSet( value.getDimensionSet());
  }

  void writeFOMStringRoutingSpaceList(const FOMStringRoutingSpaceList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringRoutingSpaceList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringRoutingSpace(*i);
    }
  }

  void writeFOMStringParameter(const FOMStringParameter& value)
  {
    writeString( value.getName());
    writeString( value.getDataType());
  }

  void writeFOMStringParameterList(const FOMStringParameterList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringParameterList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringParameter(*i);
    }
  }

  void writeFOMStringInteractionClass(const FOMStringInteractionClass& value)
  {
    writeStringVector( value.getName());
    writeString( value.getOrderType());
    writeString( value.getTransportationType());
    writeString( value.getRoutingSpace());
    writeStringSet( value.getDimensionSet());
    writeFOMStringParameterList( value.getParameterList());
  }

  void writeFOMStringInteractionClassList(const FOMStringInteractionClassList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringInteractionClassList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringInteractionClass(*i);
    }
  }

  void writeFOMStringAttribute(const FOMStringAttribute& value)
  {
    writeString( value.getName());
    writeString( value.getDataType());
    writeString( value.getOrderType());
    writeString( value.getTransportationType());
    writeString( value.getRoutingSpace());
    writeStringSet( value.getDimensionSet());
  }

  void writeFOMStringAttributeList(const FOMStringAttributeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringAttributeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringAttribute(*i);
    }
  }

  void writeFOMStringObjectClass(const FOMStringObjectClass& value)
  {
    writeStringVector( value.getName());
    writeFOMStringAttributeList( value.getAttributeList());
  }

  void writeFOMStringObjectClassList(const FOMStringObjectClassList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringObjectClassList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringObjectClass(*i);
    }
  }

  void writeFOMStringUpdateRate(const FOMStringUpdateRate& value)
  {
    writeString( value.getName());
    writeDouble( value.getRate());
  }

  void writeFOMStringUpdateRateList(const FOMStringUpdateRateList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringUpdateRateList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringUpdateRate(*i);
    }
  }

  void writeFOMStringSwitch(const FOMStringSwitch& value)
  {
    writeSwitchesType( value.getSwitchesType());
    writeBool( value.getEnabled());
  }

  void writeFOMStringSwitchList(const FOMStringSwitchList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringSwitchList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringSwitch(*i);
    }
  }

  void writeFOMStringModule(const FOMStringModule& value)
  {
    writeString( value.getDesignator());
    writeFOMStringTransportationTypeList( value.getTransportationTypeList());
    writeFOMStringDimensionList( value.getDimensionList());
    writeFOMStringRoutingSpaceList( value.getRoutingSpaceList());
    writeFOMStringInteractionClassList( value.getInteractionClassList());
    writeFOMStringObjectClassList( value.getObjectClassList());
    writeFOMStringUpdateRateList( value.getUpdateRateList());
    writeFOMStringSwitchList( value.getSwitchList());
    writeFOMStringSimpleDataTypeList( value.getSimpleDataTypeList());
    writeFOMStringEnumeratedDataTypeList( value.getEnumeratedDataTypeList());
    writeFOMStringArrayDataTypeList( value.getArrayDataTypeList());
    writeFOMStringFixedRecordDataTypeList( value.getFixedRecordDataTypeList());
    writeFOMStringVariantRecordDataTypeList( value.getVariantRecordDataTypeList());
    writeBool( value.getArtificialInteractionRoot());
    writeBool( value.getArtificialObjectRoot());
  }

  void writeFOMStringModuleList(const FOMStringModuleList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringModuleList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringModule(*i);
    }
  }

  void writeFOMStringModule2(const FOMStringModule2& value)
  {
    writeString( value.getDesignator());
    writeFOMStringTransportationTypeList( value.getTransportationTypeList());
    writeFOMStringDimensionList( value.getDimensionList());
    writeFOMStringRoutingSpaceList( value.getRoutingSpaceList());
    writeFOMStringInteractionClassList( value.getInteractionClassList());
    writeFOMStringObjectClassList( value.getObjectClassList());
    writeFOMStringUpdateRateList( value.getUpdateRateList());
    writeFOMStringSwitchList( value.getSwitchList());
    writeFOMStringBasicDataTypeList( value.getBasicDataTypeList());
    writeFOMStringSimpleDataTypeList( value.getSimpleDataTypeList());
    writeFOMStringEnumeratedDataTypeList( value.getEnumeratedDataTypeList());
    writeFOMStringArrayDataType2List( value.getArrayDataTypeList());
    writeFOMStringFixedRecordDataType2List( value.getFixedRecordDataTypeList());
    writeFOMStringVariantRecordDataType2List( value.getVariantRecordDataTypeList());
    writeBool( value.getArtificialInteractionRoot());
    writeBool( value.getArtificialObjectRoot());
  }

  void writeFOMStringModule2List(const FOMStringModule2List& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMStringModule2List::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMStringModule2(*i);
    }
  }

  void writeFOMTransportationType(const FOMTransportationType& value)
  {
    writeString( value.getName());
    writeTransportationType( value.getTransportationType());
  }

  void writeFOMTransportationTypeList(const FOMTransportationTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMTransportationTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMTransportationType(*i);
    }
  }

  void writeFOMDimension(const FOMDimension& value)
  {
    writeString( value.getName());
    writeDimensionHandle( value.getDimensionHandle());
    writeUnsigned( value.getUpperBound());
  }

  void writeFOMDimensionList(const FOMDimensionList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMDimensionList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMDimension(*i);
    }
  }

  void writeFOMRoutingSpace(const FOMRoutingSpace& value)
  {
    writeString( value.getName());
    writeSpaceHandle( value.getSpaceHandle());
    writeDimensionHandleSet( value.getDimensionHandleSet());
  }

  void writeFOMRoutingSpaceList(const FOMRoutingSpaceList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMRoutingSpaceList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMRoutingSpace(*i);
    }
  }

  void writeFOMParameter(const FOMParameter& value)
  {
    writeString( value.getName());
    writeString( value.getDataType());
    writeParameterHandle( value.getParameterHandle());
  }

  void writeFOMParameterList(const FOMParameterList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMParameterList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMParameter(*i);
    }
  }

  void writeFOMInteractionClass(const FOMInteractionClass& value)
  {
    writeString( value.getName());
    writeInteractionClassHandle( value.getInteractionClassHandle());
    writeInteractionClassHandle( value.getParentInteractionClassHandle());
    writeOrderType( value.getOrderType());
    writeTransportationType( value.getTransportationType());
    writeDimensionHandleSet( value.getDimensionHandleSet());
    writeFOMParameterList( value.getParameterList());
  }

  void writeFOMInteractionClassList(const FOMInteractionClassList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMInteractionClassList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMInteractionClass(*i);
    }
  }

  void writeFOMAttribute(const FOMAttribute& value)
  {
    writeString( value.getName());
    writeString( value.getDataType());
    writeAttributeHandle( value.getAttributeHandle());
    writeOrderType( value.getOrderType());
    writeTransportationType( value.getTransportationType());
    writeDimensionHandleSet( value.getDimensionHandleSet());
  }

  void writeFOMAttributeList(const FOMAttributeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMAttributeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMAttribute(*i);
    }
  }

  void writeFOMObjectClass(const FOMObjectClass& value)
  {
    writeString( value.getName());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeObjectClassHandle( value.getParentObjectClassHandle());
    writeFOMAttributeList( value.getAttributeList());
  }

  void writeFOMObjectClassList(const FOMObjectClassList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMObjectClassList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMObjectClass(*i);
    }
  }

  void writeFOMUpdateRate(const FOMUpdateRate& value)
  {
    writeString( value.getName());
    writeUpdateRateHandle( value.getUpdateRateHandle());
    writeDouble( value.getRate());
  }

  void writeFOMUpdateRateList(const FOMUpdateRateList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMUpdateRateList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMUpdateRate(*i);
    }
  }

  void writeFOMSwitch(const FOMSwitch& value)
  {
    writeSwitchesType( value.getSwitchesType());
    writeBool( value.getEnabled());
  }

  void writeFOMSwitchList(const FOMSwitchList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMSwitchList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMSwitch(*i);
    }
  }

  void writeFOMBasicDataType(const FOMBasicDataType& value)
  {
    writeString( value.getName());
    writeUnsigned( value.getSize());
    writeEndianness( value.getEndian());
    writeBasicDataTypeHandle( value.getHandle());
  }

  void writeFOMBasicDataTypeList(const FOMBasicDataTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMBasicDataTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMBasicDataType(*i);
    }
  }

  void writeFOMSimpleDataType(const FOMSimpleDataType& value)
  {
    writeString( value.getName());
    writeString( value.getRepresentation());
    writeSimpleDataTypeHandle( value.getHandle());
  }

  void writeFOMSimpleDataTypeList(const FOMSimpleDataTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMSimpleDataTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMSimpleDataType(*i);
    }
  }

  void writeFOMEnumerator(const FOMEnumerator& value)
  {
    writeString( value.getName());
    writeUnsigned( value.getValue());
  }

  void writeFOMEnumeratorList(const FOMEnumeratorList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMEnumeratorList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMEnumerator(*i);
    }
  }

  void writeFOMEnumeratedDataType(const FOMEnumeratedDataType& value)
  {
    writeString( value.getName());
    writeString( value.getRepresentation());
    writeFOMEnumeratorList( value.getEnumerators());
    writeEnumeratedDataTypeHandle( value.getHandle());
  }

  void writeFOMEnumeratedDataTypeList(const FOMEnumeratedDataTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMEnumeratedDataTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMEnumeratedDataType(*i);
    }
  }

  void writeFOMArrayDataType(const FOMArrayDataType& value)
  {
    writeString( value.getName());
    writeString( value.getDataType());
    writeString( value.getCardinality());
    writeArrayDataTypeEncoding( value.getEncoding());
    writeArrayDataTypeHandle( value.getHandle());
  }

  void writeFOMArrayDataTypeList(const FOMArrayDataTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMArrayDataTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMArrayDataType(*i);
    }
  }

  void writeFOMFixedRecordField(const FOMFixedRecordField& value)
  {
    writeString( value.getName());
    writeString( value.getDataType());
    writeUnsigned( value.getVersion());
  }

  void writeFOMFixedRecordFieldList(const FOMFixedRecordFieldList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMFixedRecordFieldList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMFixedRecordField(*i);
    }
  }

  void writeFOMFixedRecordDataType(const FOMFixedRecordDataType& value)
  {
    writeString( value.getName());
    writeString( value.getEncoding());
    writeString( value.getInclude());
    writeUnsigned( value.getVersion());
    writeFOMFixedRecordFieldList( value.getFields());
    writeFixedRecordDataTypeHandle( value.getHandle());
  }

  void writeFOMFixedRecordDataTypeList(const FOMFixedRecordDataTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMFixedRecordDataTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMFixedRecordDataType(*i);
    }
  }

  void writeFOMVariantRecordAlternative(const FOMVariantRecordAlternative& value)
  {
    writeString( value.getEnumerator());
    writeString( value.getName());
    writeString( value.getDataType());
  }

  void writeFOMVariantRecordAlternativeList(const FOMVariantRecordAlternativeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMVariantRecordAlternativeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMVariantRecordAlternative(*i);
    }
  }

  void writeFOMVariantRecordDataType(const FOMVariantRecordDataType& value)
  {
    writeString( value.getName());
    writeString( value.getDiscriminant());
    writeString( value.getDataType());
    writeFOMVariantRecordAlternativeList( value.getAlternatives());
    writeString( value.getEncoding());
    writeVariantRecordDataTypeHandle( value.getHandle());
  }

  void writeFOMVariantRecordDataTypeList(const FOMVariantRecordDataTypeList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMVariantRecordDataTypeList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMVariantRecordDataType(*i);
    }
  }

  void writeFOMModule(const FOMModule& value)
  {
    writeModuleHandle( value.getModuleHandle());
    writeFOMTransportationTypeList( value.getTransportationTypeList());
    writeFOMDimensionList( value.getDimensionList());
    writeFOMRoutingSpaceList( value.getRoutingSpaceList());
    writeFOMInteractionClassList( value.getInteractionClassList());
    writeFOMObjectClassList( value.getObjectClassList());
    writeFOMUpdateRateList( value.getUpdateRateList());
    writeFOMSwitchList( value.getSwitchList());
    writeBool( value.getArtificialInteractionRoot());
    writeBool( value.getArtificialObjectRoot());
    writeString( value.getDesignator());
  }

  void writeFOMModuleList(const FOMModuleList& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMModuleList::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMModule(*i);
    }
  }

  void writeFOMModule2(const FOMModule2& value)
  {
    writeFOMBasicDataTypeList( value.getBasicDataTypeList());
    writeFOMSimpleDataTypeList( value.getSimpleDataTypeList());
    writeFOMEnumeratedDataTypeList( value.getEnumeratedDataTypeList());
    writeFOMArrayDataTypeList( value.getArrayDataTypeList());
    writeFOMFixedRecordDataTypeList( value.getFixedRecordDataTypeList());
    writeFOMVariantRecordDataTypeList( value.getVariantRecordDataTypeList());
  }

  void writeFOMModule2List(const FOMModule2List& value)
  {
    writeSizeTCompressed(value.size());
    for (FOMModule2List::const_iterator i = value.begin(); i != value.end(); ++i) {
      writeFOMModule2(*i);
    }
  }

  void writeConnectionLostMessage(const ConnectionLostMessage& value)
  {
    writeString( value.getFaultDescription());
  }

  void writeCreateFederationExecutionRequestMessage(const CreateFederationExecutionRequestMessage& value)
  {
    writeString( value.getFederationExecution());
    writeString( value.getLogicalTimeFactoryName());
    writeFOMStringModuleList( value.getFOMStringModuleList());
  }

  void writeCreateFederationExecutionRequest2Message(const CreateFederationExecutionRequest2Message& value)
  {
    writeString( value.getFederationExecution());
    writeString( value.getLogicalTimeFactoryName());
    writeFOMStringModule2List( value.getFOMStringModuleList());
  }

  void writeCreateFederationExecutionResponseMessage(const CreateFederationExecutionResponseMessage& value)
  {
    writeCreateFederationExecutionResponseType( value.getCreateFederationExecutionResponseType());
    writeString( value.getExceptionString());
  }

  void writeDestroyFederationExecutionRequestMessage(const DestroyFederationExecutionRequestMessage& value)
  {
    writeString( value.getFederationExecution());
  }

  void writeDestroyFederationExecutionResponseMessage(const DestroyFederationExecutionResponseMessage& value)
  {
    writeDestroyFederationExecutionResponseType( value.getDestroyFederationExecutionResponseType());
  }

  void writeEnumerateFederationExecutionsRequestMessage(const EnumerateFederationExecutionsRequestMessage&)
  {
  }

  void writeEnumerateFederationExecutionsResponseMessage(const EnumerateFederationExecutionsResponseMessage& value)
  {
    writeFederationExecutionInformationVector( value.getFederationExecutionInformationVector());
  }

  void writeInsertFederationExecutionMessage(const InsertFederationExecutionMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeString( value.getFederationName());
    writeString( value.getLogicalTimeFactoryName());
    writeConfigurationParameterMap( value.getConfigurationParameterMap());
  }

  void writeShutdownFederationExecutionMessage(const ShutdownFederationExecutionMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
  }

  void writeEraseFederationExecutionMessage(const EraseFederationExecutionMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
  }

  void writeReleaseFederationHandleMessage(const ReleaseFederationHandleMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
  }

  void writeInsertModulesMessage(const InsertModulesMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFOMModuleList( value.getFOMModuleList());
  }

  void writeInsertModules2Message(const InsertModules2Message& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFOMModule2List( value.getFOMModule2List());
  }

  void writeJoinFederationExecutionRequestMessage(const JoinFederationExecutionRequestMessage& value)
  {
    writeString( value.getFederationExecution());
    writeString( value.getFederateType());
    writeString( value.getFederateName());
    writeFOMStringModuleList( value.getFOMStringModuleList());
    writeConfigurationParameterMap( value.getConfigurationParameterMap());
    writeBool( value.getIsInternal());
  }

  void writeJoinFederationExecutionRequest2Message(const JoinFederationExecutionRequest2Message& value)
  {
    writeString( value.getFederationExecution());
    writeString( value.getFederateType());
    writeString( value.getFederateName());
    writeFOMStringModule2List( value.getFOMStringModuleList());
    writeConfigurationParameterMap( value.getConfigurationParameterMap());
    writeBool( value.getIsInternal());
  }

  void writeJoinFederationExecutionResponseMessage(const JoinFederationExecutionResponseMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeJoinFederationExecutionResponseType( value.getJoinFederationExecutionResponseType());
    writeString( value.getExceptionString());
    writeFederateHandle( value.getFederateHandle());
    writeString( value.getFederateType());
    writeString( value.getFederateName());
  }

  void writeResignFederationExecutionLeafRequestMessage(const ResignFederationExecutionLeafRequestMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeResignAction( value.getResignAction());
  }

  void writeResignFederationExecutionRequestMessage(const ResignFederationExecutionRequestMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
  }

  void writeJoinFederateNotifyMessage(const JoinFederateNotifyMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeString( value.getFederateType());
    writeString( value.getFederateName());
    writeBool( value.getIsInternal());
  }

  void writeResignFederateNotifyMessage(const ResignFederateNotifyMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
  }

  void writeChangeAutomaticResignDirectiveMessage(const ChangeAutomaticResignDirectiveMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeResignAction( value.getResignAction());
  }

  void writeRegisterFederationSynchronizationPointMessage(const RegisterFederationSynchronizationPointMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeString( value.getLabel());
    writeVariableLengthData( value.getTag());
    writeFederateHandleVector( value.getFederateHandleVector());
  }

  void writeRegisterFederationSynchronizationPointResponseMessage(const RegisterFederationSynchronizationPointResponseMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeString( value.getLabel());
    writeRegisterFederationSynchronizationPointResponseType( value.getRegisterFederationSynchronizationPointResponseType());
  }

  void writeAnnounceSynchronizationPointMessage(const AnnounceSynchronizationPointMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeString( value.getLabel());
    writeVariableLengthData( value.getTag());
    writeBool( value.getAddJoiningFederates());
    writeFederateHandleVector( value.getFederateHandleVector());
  }

  void writeSynchronizationPointAchievedMessage(const SynchronizationPointAchievedMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeString( value.getLabel());
    writeFederateHandleBoolPairVector( value.getFederateHandleBoolPairVector());
  }

  void writeFederationSynchronizedMessage(const FederationSynchronizedMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeString( value.getLabel());
    writeFederateHandleBoolPairVector( value.getFederateHandleBoolPairVector());
  }

  void writeEnableTimeRegulationRequestMessage(const EnableTimeRegulationRequestMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeVariableLengthData( value.getTimeStamp());
    writeUnsigned( value.getCommitId());
  }

  void writeEnableTimeRegulationResponseMessage(const EnableTimeRegulationResponseMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeFederateHandle( value.getRespondingFederateHandle());
    writeBool( value.getTimeStampValid());
    writeVariableLengthData( value.getTimeStamp());
  }

  void writeDisableTimeRegulationRequestMessage(const DisableTimeRegulationRequestMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
  }

  void writeEnableTimeConstrainedNotifyMessage(const EnableTimeConstrainedNotifyMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
  }

  void writeDisableTimeConstrainedNotifyMessage(const DisableTimeConstrainedNotifyMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
  }

  void writeCommitLowerBoundTimeStampMessage(const CommitLowerBoundTimeStampMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeVariableLengthData( value.getTimeStamp());
    writeLowerBoundTimeStampCommitType( value.getCommitType());
    writeUnsigned( value.getCommitId());
  }

  void writeCommitLowerBoundTimeStampResponseMessage(const CommitLowerBoundTimeStampResponseMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeFederateHandle( value.getSendingFederateHandle());
    writeUnsigned( value.getCommitId());
  }

  void writeLockedByNextMessageRequestMessage(const LockedByNextMessageRequestMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getSendingFederateHandle());
    writeBool( value.getLockedByNextMessage());
  }

  void writeResetFederationRequestMessage(const ResetFederationRequestMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeVariableLengthData( value.getTimeStamp());
    writeVariableLengthData( value.getTag());
  }

  void writeResetFederationInitiateMessage(const ResetFederationInitiateMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeFederateHandleVector( value.getFederateHandleVector());
    writeVariableLengthData( value.getTimeStamp());
    writeVariableLengthData( value.getTag());
  }

  void writeResetFederationDoneMessage(const ResetFederationDoneMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeVariableLengthData( value.getTimeStamp());
    writeVariableLengthData( value.getTag());
    writeBool( value.getSuccess());
  }

  void writeResetFederationBegunMessage(const ResetFederationBegunMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandleVector( value.getFederateHandleVector());
    writeFederateHandle( value.getFederateHandle());
    writeVariableLengthData( value.getTimeStamp());
    writeVariableLengthData( value.getTag());
  }

  void writeResetFederationCompleteMessage(const ResetFederationCompleteMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandleBoolPairVector( value.getFederateHandleBoolPairVector());
    writeFederateHandle( value.getFederateHandle());
    writeVariableLengthData( value.getTimeStamp());
    writeBool( value.getSuccess());
    writeVariableLengthData( value.getTag());
  }

  void writeTimeConstrainedEnabledMessage(const TimeConstrainedEnabledMessage&)
  {
  }

  void writeTimeRegulationEnabledMessage(const TimeRegulationEnabledMessage&)
  {
  }

  void writeTimeAdvanceGrantedMessage(const TimeAdvanceGrantedMessage&)
  {
  }

  void writeInsertRegionMessage(const InsertRegionMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeRegionHandleDimensionHandleSetPairVector( value.getRegionHandleDimensionHandleSetPairVector());
  }

  void writeCommitRegionMessage(const CommitRegionMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeRegionHandleRegionValuePairVector( value.getRegionHandleRegionValuePairVector());
  }

  void writeEraseRegionMessage(const EraseRegionMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeRegionHandleVector( value.getRegionHandleVector());
  }

  void writeChangeInteractionClassPublicationMessage(const ChangeInteractionClassPublicationMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writePublicationType( value.getPublicationType());
    writeInteractionClassHandle( value.getInteractionClassHandle());
  }

  void writeChangeObjectClassPublicationMessage(const ChangeObjectClassPublicationMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writePublicationType( value.getPublicationType());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
  }

  void writeChangeInteractionClassSubscriptionMessage(const ChangeInteractionClassSubscriptionMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeSubscriptionType( value.getSubscriptionType());
    writeInteractionClassHandle( value.getInteractionClassHandle());
    writeParameterValueVector( value.getParameterFilterValues());
  }

  void writeChangeObjectClassSubscriptionMessage(const ChangeObjectClassSubscriptionMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeSubscriptionType( value.getSubscriptionType());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
  }

  void writeChangeObjectInstanceSubscriptionMessage(const ChangeObjectInstanceSubscriptionMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeSubscriptionType( value.getSubscriptionType());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
  }

  void writeOwnershipTransferState(const OwnershipTransferState& value)
  {
    switch (value) {
    case OwnershipTransferState::None:
      writeUInt32Compressed(0);
      break;
    case OwnershipTransferState::Acquiring:
      writeUInt32Compressed(1);
      break;
    case OwnershipTransferState::Divesting:
      writeUInt32Compressed(2);
      break;
    default:
      writeUInt32Compressed(3);
      break;
    }
  }

  void writeAttributeOwnershipRequestDivestMessage(const AttributeOwnershipRequestDivestMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
    writeVariableLengthData( value.getTag());
    writeBool( value.getUnconditional());
  }

  void writeAttributeOwnershipRequestAcquireMessage(const AttributeOwnershipRequestAcquireMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
    writeVariableLengthData( value.getTag());
    writeBool( value.getIfAvailable());
    writeFederateHandle( value.getFederateHandle());
  }

  void writeAttributeOwnershipResponseUnavailableMessage(const AttributeOwnershipResponseUnavailableMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
  }

  void writeAttributeOwnershipConfirmDivestitureMessage(const AttributeOwnershipConfirmDivestitureMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
  }

  void writeAttributeOwnershipRequestCancelAcquireMessage(const AttributeOwnershipRequestCancelAcquireMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
    writeBool( value.getImmediate());
  }

  void writeAttributeOwnershipResponseCancelConfirmationMessage(const AttributeOwnershipResponseCancelConfirmationMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
  }

  void writeAttributeOwnershipRequestCancelDivestMessage(const AttributeOwnershipRequestCancelDivestMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
  }

  void writeAttributeOwnershipDivestConfirmationMessage(const AttributeOwnershipDivestConfirmationMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
  }

  void writeAttributeOwnershipResponseOwnershipAcquiredMessage(const AttributeOwnershipResponseOwnershipAcquiredMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
    writeBool( value.getIfAvailable());
  }

  void writeQueryAttributeOwnershipRequestMessage(const QueryAttributeOwnershipRequestMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeAttributeHandle( value.getAttributeHandle());
  }

  void writeQueryAttributeOwnershipResponseMessage(const QueryAttributeOwnershipResponseMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeAttributeHandle( value.getAttributeHandle());
    writeFederateHandle( value.getOwner());
  }

  void writeRegistrationForObjectClassMessage(const RegistrationForObjectClassMessage& value)
  {
    writeObjectClassHandle( value.getObjectClassHandle());
    writeBool( value.getStart());
  }

  void writeAttributesInScopeMessage(const AttributesInScopeMessage& value)
  {
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
    writeBool( value.getInScope());
  }

  void writeTurnUpdatesOnForInstanceMessage(const TurnUpdatesOnForInstanceMessage& value)
  {
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
    writeString( value.getUpdateRate());
    writeBool( value.getOn());
  }

  void writeTurnInteractionsOnMessage(const TurnInteractionsOnMessage& value)
  {
    writeInteractionClassHandle( value.getInteractionClassHandle());
    writeBool( value.getOn());
  }

  void writeInteractionMessage(const InteractionMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeInteractionClassHandle( value.getInteractionClassHandle());
    writeTransportationType( value.getTransportationType());
    writeVariableLengthData( value.getTag());
    writeParameterValueVector( value.getParameterValues());
  }

  void writeTimeStampedInteractionMessage(const TimeStampedInteractionMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeInteractionClassHandle( value.getInteractionClassHandle());
    writeOrderType( value.getOrderType());
    writeTransportationType( value.getTransportationType());
    writeVariableLengthData( value.getTag());
    writeVariableLengthData( value.getTimeStamp());
    writeMessageRetractionHandle( value.getMessageRetractionHandle());
    writeParameterValueVector( value.getParameterValues());
  }

  void writeObjectInstanceHandlesRequestMessage(const ObjectInstanceHandlesRequestMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeUnsigned( value.getCount());
  }

  void writeObjectInstanceHandlesResponseMessage(const ObjectInstanceHandlesResponseMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeObjectInstanceHandleNamePairVector( value.getObjectInstanceHandleNamePairVector());
  }

  void writeReleaseMultipleObjectInstanceNameHandlePairsMessage(const ReleaseMultipleObjectInstanceNameHandlePairsMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeObjectInstanceHandleVector( value.getObjectInstanceHandleVector());
  }

  void writeReserveObjectInstanceNameRequestMessage(const ReserveObjectInstanceNameRequestMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeString( value.getName());
    writeBool( value.getIsInternal());
  }

  void writeReserveObjectInstanceNameResponseMessage(const ReserveObjectInstanceNameResponseMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeObjectInstanceHandleNamePair( value.getObjectInstanceHandleNamePair());
    writeBool( value.getSuccess());
  }

  void writeReserveMultipleObjectInstanceNameRequestMessage(const ReserveMultipleObjectInstanceNameRequestMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeStringVector( value.getNameList());
  }

  void writeReserveMultipleObjectInstanceNameResponseMessage(const ReserveMultipleObjectInstanceNameResponseMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeObjectInstanceHandleNamePairVector( value.getObjectInstanceHandleNamePairVector());
    writeBool( value.getSuccess());
  }

  void writeInsertObjectInstanceMessage(const InsertObjectInstanceMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeString( value.getName());
    writeAttributeStateVector( value.getAttributeStateVector());
  }

  void writeDeleteObjectInstanceMessage(const DeleteObjectInstanceMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeVariableLengthData( value.getTag());
  }

  void writeTimeStampedDeleteObjectInstanceMessage(const TimeStampedDeleteObjectInstanceMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeOrderType( value.getOrderType());
    writeVariableLengthData( value.getTag());
    writeVariableLengthData( value.getTimeStamp());
    writeMessageRetractionHandle( value.getMessageRetractionHandle());
  }

  void writeAttributeUpdateMessage(const AttributeUpdateMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeVariableLengthData( value.getTag());
    writeTransportationType( value.getTransportationType());
    writeAttributeValueVector( value.getAttributeValues());
  }

  void writeTimeStampedAttributeUpdateMessage(const TimeStampedAttributeUpdateMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeFederateHandle( value.getFederateHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeVariableLengthData( value.getTag());
    writeVariableLengthData( value.getTimeStamp());
    writeMessageRetractionHandle( value.getMessageRetractionHandle());
    writeOrderType( value.getOrderType());
    writeTransportationType( value.getTransportationType());
    writeAttributeValueVector( value.getAttributeValues());
  }

  void writeRequestAttributeUpdateMessage(const RequestAttributeUpdateMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeObjectInstanceHandle( value.getObjectInstanceHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
    writeVariableLengthData( value.getTag());
  }

  void writeRequestClassAttributeUpdateMessage(const RequestClassAttributeUpdateMessage& value)
  {
    writeFederationHandle( value.getFederationHandle());
    writeObjectClassHandle( value.getObjectClassHandle());
    writeAttributeHandleVector( value.getAttributeHandles());
    writeVariableLengthData( value.getTag());
  }

  TightBE1MessageEncoding& _messageEncoding;
};

class OPENRTI_LOCAL TightBE1MessageEncoding::DispatchFunctor {
public:
  DispatchFunctor(TightBE1MessageEncoding& messageEncoding) :
    _messageEncoding(messageEncoding)
  { }

  template<typename M>
  void operator()(const M& message) const
  { encode(_messageEncoding, message); }

  void
  encode(TightBE1MessageEncoding&, const AbstractMessage&) const
  {
    throw RTIinternalError("Invalid message dispatched to encoding!");
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ConnectionLostMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ConnectionLostMessage::OpCode);
    encodeStream.writeConnectionLostMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const CreateFederationExecutionRequestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(CreateFederationExecutionRequestMessage::OpCode);
    encodeStream.writeCreateFederationExecutionRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const CreateFederationExecutionRequest2Message& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(CreateFederationExecutionRequest2Message::OpCode);
    encodeStream.writeCreateFederationExecutionRequest2Message(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const CreateFederationExecutionResponseMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(CreateFederationExecutionResponseMessage::OpCode);
    encodeStream.writeCreateFederationExecutionResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const DestroyFederationExecutionRequestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(DestroyFederationExecutionRequestMessage::OpCode);
    encodeStream.writeDestroyFederationExecutionRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const DestroyFederationExecutionResponseMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(DestroyFederationExecutionResponseMessage::OpCode);
    encodeStream.writeDestroyFederationExecutionResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const EnumerateFederationExecutionsRequestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(EnumerateFederationExecutionsRequestMessage::OpCode);
    encodeStream.writeEnumerateFederationExecutionsRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const EnumerateFederationExecutionsResponseMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(EnumerateFederationExecutionsResponseMessage::OpCode);
    encodeStream.writeEnumerateFederationExecutionsResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const InsertFederationExecutionMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(InsertFederationExecutionMessage::OpCode);
    encodeStream.writeInsertFederationExecutionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ShutdownFederationExecutionMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ShutdownFederationExecutionMessage::OpCode);
    encodeStream.writeShutdownFederationExecutionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const EraseFederationExecutionMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(EraseFederationExecutionMessage::OpCode);
    encodeStream.writeEraseFederationExecutionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ReleaseFederationHandleMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ReleaseFederationHandleMessage::OpCode);
    encodeStream.writeReleaseFederationHandleMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const InsertModulesMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(InsertModulesMessage::OpCode);
    encodeStream.writeInsertModulesMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const InsertModules2Message& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(InsertModules2Message::OpCode);
    encodeStream.writeInsertModules2Message(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const JoinFederationExecutionRequestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(JoinFederationExecutionRequestMessage::OpCode);
    encodeStream.writeJoinFederationExecutionRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const JoinFederationExecutionRequest2Message& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(JoinFederationExecutionRequest2Message::OpCode);
    encodeStream.writeJoinFederationExecutionRequest2Message(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const JoinFederationExecutionResponseMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(JoinFederationExecutionResponseMessage::OpCode);
    encodeStream.writeJoinFederationExecutionResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ResignFederationExecutionRequestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ResignFederationExecutionRequestMessage::OpCode);
    encodeStream.writeResignFederationExecutionRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const JoinFederateNotifyMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(JoinFederateNotifyMessage::OpCode);
    encodeStream.writeJoinFederateNotifyMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ResignFederateNotifyMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ResignFederateNotifyMessage::OpCode);
    encodeStream.writeResignFederateNotifyMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ChangeAutomaticResignDirectiveMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ChangeAutomaticResignDirectiveMessage::OpCode);
    encodeStream.writeChangeAutomaticResignDirectiveMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const RegisterFederationSynchronizationPointMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(RegisterFederationSynchronizationPointMessage::OpCode);
    encodeStream.writeRegisterFederationSynchronizationPointMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const RegisterFederationSynchronizationPointResponseMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(RegisterFederationSynchronizationPointResponseMessage::OpCode);
    encodeStream.writeRegisterFederationSynchronizationPointResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const AnnounceSynchronizationPointMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(AnnounceSynchronizationPointMessage::OpCode);
    encodeStream.writeAnnounceSynchronizationPointMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const SynchronizationPointAchievedMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(SynchronizationPointAchievedMessage::OpCode);
    encodeStream.writeSynchronizationPointAchievedMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const FederationSynchronizedMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(FederationSynchronizedMessage::OpCode);
    encodeStream.writeFederationSynchronizedMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const EnableTimeRegulationRequestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(EnableTimeRegulationRequestMessage::OpCode);
    encodeStream.writeEnableTimeRegulationRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const EnableTimeRegulationResponseMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(EnableTimeRegulationResponseMessage::OpCode);
    encodeStream.writeEnableTimeRegulationResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const DisableTimeRegulationRequestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(DisableTimeRegulationRequestMessage::OpCode);
    encodeStream.writeDisableTimeRegulationRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const EnableTimeConstrainedNotifyMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(EnableTimeConstrainedNotifyMessage::OpCode);
    encodeStream.writeEnableTimeConstrainedNotifyMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const DisableTimeConstrainedNotifyMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(DisableTimeConstrainedNotifyMessage::OpCode);
    encodeStream.writeDisableTimeConstrainedNotifyMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const CommitLowerBoundTimeStampMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(CommitLowerBoundTimeStampMessage::OpCode);
    encodeStream.writeCommitLowerBoundTimeStampMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const CommitLowerBoundTimeStampResponseMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(CommitLowerBoundTimeStampResponseMessage::OpCode);
    encodeStream.writeCommitLowerBoundTimeStampResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const LockedByNextMessageRequestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(LockedByNextMessageRequestMessage::OpCode);
    encodeStream.writeLockedByNextMessageRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ResetFederationRequestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ResetFederationRequestMessage::OpCode);
    encodeStream.writeResetFederationRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ResetFederationInitiateMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ResetFederationInitiateMessage::OpCode);
    encodeStream.writeResetFederationInitiateMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ResetFederationDoneMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ResetFederationDoneMessage::OpCode);
    encodeStream.writeResetFederationDoneMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ResetFederationBegunMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ResetFederationBegunMessage::OpCode);
    encodeStream.writeResetFederationBegunMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ResetFederationCompleteMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ResetFederationCompleteMessage::OpCode);
    encodeStream.writeResetFederationCompleteMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const InsertRegionMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(InsertRegionMessage::OpCode);
    encodeStream.writeInsertRegionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const CommitRegionMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(CommitRegionMessage::OpCode);
    encodeStream.writeCommitRegionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const EraseRegionMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(EraseRegionMessage::OpCode);
    encodeStream.writeEraseRegionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ChangeInteractionClassPublicationMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ChangeInteractionClassPublicationMessage::OpCode);
    encodeStream.writeChangeInteractionClassPublicationMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ChangeObjectClassPublicationMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ChangeObjectClassPublicationMessage::OpCode);
    encodeStream.writeChangeObjectClassPublicationMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ChangeInteractionClassSubscriptionMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ChangeInteractionClassSubscriptionMessage::OpCode);
    encodeStream.writeChangeInteractionClassSubscriptionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ChangeObjectClassSubscriptionMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ChangeObjectClassSubscriptionMessage::OpCode);
    encodeStream.writeChangeObjectClassSubscriptionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ChangeObjectInstanceSubscriptionMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ChangeObjectInstanceSubscriptionMessage::OpCode);
    encodeStream.writeChangeObjectInstanceSubscriptionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const AttributeOwnershipRequestDivestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(AttributeOwnershipRequestDivestMessage::OpCode);
    encodeStream.writeAttributeOwnershipRequestDivestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const AttributeOwnershipRequestAcquireMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(AttributeOwnershipRequestAcquireMessage::OpCode);
    encodeStream.writeAttributeOwnershipRequestAcquireMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const AttributeOwnershipResponseUnavailableMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(AttributeOwnershipResponseUnavailableMessage::OpCode);
    encodeStream.writeAttributeOwnershipResponseUnavailableMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const AttributeOwnershipConfirmDivestitureMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(AttributeOwnershipConfirmDivestitureMessage::OpCode);
    encodeStream.writeAttributeOwnershipConfirmDivestitureMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const AttributeOwnershipRequestCancelAcquireMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(AttributeOwnershipRequestCancelAcquireMessage::OpCode);
    encodeStream.writeAttributeOwnershipRequestCancelAcquireMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const AttributeOwnershipResponseCancelConfirmationMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(AttributeOwnershipResponseCancelConfirmationMessage::OpCode);
    encodeStream.writeAttributeOwnershipResponseCancelConfirmationMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const AttributeOwnershipRequestCancelDivestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(AttributeOwnershipRequestCancelDivestMessage::OpCode);
    encodeStream.writeAttributeOwnershipRequestCancelDivestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const AttributeOwnershipDivestConfirmationMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(AttributeOwnershipDivestConfirmationMessage::OpCode);
    encodeStream.writeAttributeOwnershipDivestConfirmationMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const AttributeOwnershipResponseOwnershipAcquiredMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(AttributeOwnershipResponseOwnershipAcquiredMessage::OpCode);
    encodeStream.writeAttributeOwnershipResponseOwnershipAcquiredMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const QueryAttributeOwnershipRequestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(QueryAttributeOwnershipRequestMessage::OpCode);
    encodeStream.writeQueryAttributeOwnershipRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const QueryAttributeOwnershipResponseMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(QueryAttributeOwnershipResponseMessage::OpCode);
    encodeStream.writeQueryAttributeOwnershipResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const InteractionMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(InteractionMessage::OpCode);
    encodeStream.writeInteractionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const TimeStampedInteractionMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(TimeStampedInteractionMessage::OpCode);
    encodeStream.writeTimeStampedInteractionMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ObjectInstanceHandlesRequestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ObjectInstanceHandlesRequestMessage::OpCode);
    encodeStream.writeObjectInstanceHandlesRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ObjectInstanceHandlesResponseMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ObjectInstanceHandlesResponseMessage::OpCode);
    encodeStream.writeObjectInstanceHandlesResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ReleaseMultipleObjectInstanceNameHandlePairsMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ReleaseMultipleObjectInstanceNameHandlePairsMessage::OpCode);
    encodeStream.writeReleaseMultipleObjectInstanceNameHandlePairsMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ReserveObjectInstanceNameRequestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ReserveObjectInstanceNameRequestMessage::OpCode);
    encodeStream.writeReserveObjectInstanceNameRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ReserveObjectInstanceNameResponseMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ReserveObjectInstanceNameResponseMessage::OpCode);
    encodeStream.writeReserveObjectInstanceNameResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ReserveMultipleObjectInstanceNameRequestMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ReserveMultipleObjectInstanceNameRequestMessage::OpCode);
    encodeStream.writeReserveMultipleObjectInstanceNameRequestMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const ReserveMultipleObjectInstanceNameResponseMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(ReserveMultipleObjectInstanceNameResponseMessage::OpCode);
    encodeStream.writeReserveMultipleObjectInstanceNameResponseMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const InsertObjectInstanceMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(InsertObjectInstanceMessage::OpCode);
    encodeStream.writeInsertObjectInstanceMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const DeleteObjectInstanceMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(DeleteObjectInstanceMessage::OpCode);
    encodeStream.writeDeleteObjectInstanceMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const TimeStampedDeleteObjectInstanceMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(TimeStampedDeleteObjectInstanceMessage::OpCode);
    encodeStream.writeTimeStampedDeleteObjectInstanceMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const AttributeUpdateMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(AttributeUpdateMessage::OpCode);
    encodeStream.writeAttributeUpdateMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const TimeStampedAttributeUpdateMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(TimeStampedAttributeUpdateMessage::OpCode);
    encodeStream.writeTimeStampedAttributeUpdateMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const RequestAttributeUpdateMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(RequestAttributeUpdateMessage::OpCode);
    encodeStream.writeRequestAttributeUpdateMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

  void
  encode(TightBE1MessageEncoding& messageEncoding, const RequestClassAttributeUpdateMessage& message) const
  {
    EncodeDataStream headerStream(messageEncoding.addScratchWriteBuffer());
    EncodeStream encodeStream(messageEncoding.addScratchWriteBuffer(), messageEncoding);
    encodeStream.writeUInt16Compressed(RequestClassAttributeUpdateMessage::OpCode);
    encodeStream.writeRequestClassAttributeUpdateMessage(message);
    headerStream.writeUInt32BE(uint32_t(encodeStream.size()));
  }

private:
  TightBE1MessageEncoding& _messageEncoding;
};

class OPENRTI_LOCAL TightBE1MessageEncoding::DecodeStream : public DecodeDataStream {
public:
  DecodeStream(const VariableLengthData& variableLengthData, TightBE1MessageEncoding& messageEncoding) :
    DecodeDataStream(variableLengthData),
    _messageEncoding(messageEncoding)
  { }
  void readCallbackModel(CallbackModel& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = CallbackModel::HLA_IMMEDIATE;
      break;
    case 1:
      value = CallbackModel::HLA_EVOKED;
      break;
    default:
      value = CallbackModel::HLA_EVOKED;
      break;
    }
  }

  void readOrderType(OrderType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = OrderType::RECEIVE;
      break;
    case 1:
      value = OrderType::TIMESTAMP;
      break;
    default:
      value = OrderType::TIMESTAMP;
      break;
    }
  }

  void readTransportationType(TransportationType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = TransportationType::RELIABLE;
      break;
    case 1:
      value = TransportationType::BEST_EFFORT;
      break;
    default:
      value = TransportationType::BEST_EFFORT;
      break;
    }
  }

  void readSubscriptionType(SubscriptionType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = SubscriptionType::Unsubscribed;
      break;
    case 1:
      value = SubscriptionType::SubscribedPassive;
      break;
    case 2:
      value = SubscriptionType::SubscribedActive;
      break;
    default:
      value = SubscriptionType::SubscribedActive;
      break;
    }
  }

  void readPublicationType(PublicationType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = PublicationType::Unpublished;
      break;
    case 1:
      value = PublicationType::Published;
      break;
    default:
      value = PublicationType::Published;
      break;
    }
  }

  void readResignAction(ResignAction& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = ResignAction::UNCONDITIONALLY_DIVEST_ATTRIBUTES;
      break;
    case 1:
      value = ResignAction::DELETE_OBJECTS;
      break;
    case 2:
      value = ResignAction::CANCEL_PENDING_OWNERSHIP_ACQUISITIONS;
      break;
    case 3:
      value = ResignAction::DELETE_OBJECTS_THEN_DIVEST;
      break;
    case 4:
      value = ResignAction::CANCEL_THEN_DELETE_THEN_DIVEST;
      break;
    case 5:
      value = ResignAction::NO_ACTION;
      break;
    default:
      value = ResignAction::NO_ACTION;
      break;
    }
  }

  void readRestoreFailureReason(RestoreFailureReason& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = RestoreFailureReason::RTI_UNABLE_TO_RESTORE;
      break;
    case 1:
      value = RestoreFailureReason::FEDERATE_REPORTED_FAILURE_DURING_RESTORE;
      break;
    case 2:
      value = RestoreFailureReason::FEDERATE_RESIGNED_DURING_RESTORE;
      break;
    case 3:
      value = RestoreFailureReason::RTI_DETECTED_FAILURE_DURING_RESTORE;
      break;
    default:
      value = RestoreFailureReason::RTI_DETECTED_FAILURE_DURING_RESTORE;
      break;
    }
  }

  void readRestoreStatus(RestoreStatus& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = RestoreStatus::NO_RESTORE_IN_PROGRESS;
      break;
    case 1:
      value = RestoreStatus::FEDERATE_RESTORE_REQUEST_PENDING;
      break;
    case 2:
      value = RestoreStatus::FEDERATE_WAITING_FOR_RESTORE_TO_BEGIN;
      break;
    case 3:
      value = RestoreStatus::FEDERATE_PREPARED_TO_RESTORE;
      break;
    case 4:
      value = RestoreStatus::FEDERATE_RESTORING;
      break;
    case 5:
      value = RestoreStatus::FEDERATE_WAITING_FOR_FEDERATION_TO_RESTORE;
      break;
    default:
      value = RestoreStatus::FEDERATE_WAITING_FOR_FEDERATION_TO_RESTORE;
      break;
    }
  }

  void readSaveFailureReason(SaveFailureReason& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = SaveFailureReason::RTI_UNABLE_TO_SAVE;
      break;
    case 1:
      value = SaveFailureReason::FEDERATE_REPORTED_FAILURE_DURING_SAVE;
      break;
    case 2:
      value = SaveFailureReason::FEDERATE_RESIGNED_DURING_SAVE;
      break;
    case 3:
      value = SaveFailureReason::RTI_DETECTED_FAILURE_DURING_SAVE;
      break;
    case 4:
      value = SaveFailureReason::SAVE_TIME_CANNOT_BE_HONORED;
      break;
    default:
      value = SaveFailureReason::SAVE_TIME_CANNOT_BE_HONORED;
      break;
    }
  }

  void readSaveStatus(SaveStatus& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = SaveStatus::NO_SAVE_IN_PROGRESS;
      break;
    case 1:
      value = SaveStatus::FEDERATE_INSTRUCTED_TO_SAVE;
      break;
    case 2:
      value = SaveStatus::FEDERATE_SAVING;
      break;
    case 3:
      value = SaveStatus::FEDERATE_WAITING_FOR_FEDERATION_TO_SAVE;
      break;
    default:
      value = SaveStatus::FEDERATE_WAITING_FOR_FEDERATION_TO_SAVE;
      break;
    }
  }

  void readServiceGroupIndicator(ServiceGroupIndicator& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = ServiceGroupIndicator::FEDERATION_MANAGEMENT;
      break;
    case 1:
      value = ServiceGroupIndicator::DECLARATION_MANAGEMENT;
      break;
    case 2:
      value = ServiceGroupIndicator::OBJECT_MANAGEMENT;
      break;
    case 3:
      value = ServiceGroupIndicator::OWNERSHIP_MANAGEMENT;
      break;
    case 4:
      value = ServiceGroupIndicator::TIME_MANAGEMENT;
      break;
    case 5:
      value = ServiceGroupIndicator::DATA_DISTRIBUTION_MANAGEMENT;
      break;
    case 6:
      value = ServiceGroupIndicator::SUPPORT_SERVICES;
      break;
    default:
      value = ServiceGroupIndicator::SUPPORT_SERVICES;
      break;
    }
  }

  void readLowerBoundTimeStampCommitType(LowerBoundTimeStampCommitType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = LowerBoundTimeStampCommitType::TimeAdvanceCommit;
      break;
    case 1:
      value = LowerBoundTimeStampCommitType::NextMessageCommit;
      break;
    case 2:
      value = LowerBoundTimeStampCommitType::TimeAdvanceAndNextMessageCommit;
      break;
    default:
      value = LowerBoundTimeStampCommitType::TimeAdvanceAndNextMessageCommit;
      break;
    }
  }

  void readSwitchesType(SwitchesType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = SwitchesType::InteractionRelevanceAdvisorySwitchesType;
      break;
    case 1:
      value = SwitchesType::ObjectClassRelevanceAdvisorySwitchesType;
      break;
    case 2:
      value = SwitchesType::AttributeRelevanceAdvisorySwitchesType;
      break;
    case 3:
      value = SwitchesType::AttributeScopeAdvisorySwitchesType;
      break;
    case 4:
      value = SwitchesType::AutoProvideSwitchesType;
      break;
    case 5:
      value = SwitchesType::ConveyRegionDesignatorSetsSwitchesType;
      break;
    case 6:
      value = SwitchesType::ServiceReportingSwitchesType;
      break;
    default:
      value = SwitchesType::ServiceReportingSwitchesType;
      break;
    }
  }

  void readArrayDataTypeEncoding(ArrayDataTypeEncoding& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = ArrayDataTypeEncoding::FixedArrayDataTypeEncoding;
      break;
    case 1:
      value = ArrayDataTypeEncoding::VariableArrayDataTypeEncoding;
      break;
    default:
      value = ArrayDataTypeEncoding::VariableArrayDataTypeEncoding;
      break;
    }
  }

  void readEndianness(Endianness& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = Endianness::BigEndian;
      break;
    case 1:
      value = Endianness::LittleEndian;
      break;
    default:
      value = Endianness::LittleEndian;
      break;
    }
  }

  void readBool(bool& value)
  {
    value = readBoolCompressed();
  }

  void readString(std::string& value)
  {
    value.resize(readSizeTCompressed());
    for (std::string::iterator i = value.begin(); i != value.end(); ++i) {
      *i = readChar();
    }
  }

  void readUnsigned(uint32_t& value)
  {
    value = readUInt32Compressed();
  }

  void readDouble(double& value)
  {
    value = readFloat64Compressed();
  }

  void readFederationHandle(FederationHandle& value)
  {
    value = FederationHandle(readUInt16Compressed());
  }

  void readModuleHandle(ModuleHandle& value)
  {
    value = ModuleHandle(readUInt16Compressed());
  }

  void readAttributeHandle(AttributeHandle& value)
  {
    value = AttributeHandle(readUInt32Compressed());
  }

  void readDimensionHandle(DimensionHandle& value)
  {
    value = DimensionHandle(readUInt32Compressed());
  }

  void readUpdateRateHandle(UpdateRateHandle& value)
  {
    value = UpdateRateHandle(readUInt32Compressed());
  }

  void readBasicDataTypeHandle(BasicDataTypeHandle& value)
  {
    value = BasicDataTypeHandle(readUInt32Compressed());
  }

  void readSimpleDataTypeHandle(SimpleDataTypeHandle& value)
  {
    value = SimpleDataTypeHandle(readUInt32Compressed());
  }

  void readEnumeratedDataTypeHandle(EnumeratedDataTypeHandle& value)
  {
    value = EnumeratedDataTypeHandle(readUInt32Compressed());
  }

  void readArrayDataTypeHandle(ArrayDataTypeHandle& value)
  {
    value = ArrayDataTypeHandle(readUInt32Compressed());
  }

  void readFixedRecordDataTypeHandle(FixedRecordDataTypeHandle& value)
  {
    value = FixedRecordDataTypeHandle(readUInt32Compressed());
  }

  void readVariantRecordDataTypeHandle(VariantRecordDataTypeHandle& value)
  {
    value = VariantRecordDataTypeHandle(readUInt32Compressed());
  }

  void readObjectClassHandle(ObjectClassHandle& value)
  {
    value = ObjectClassHandle(readUInt32Compressed());
  }

  void readObjectInstanceHandle(ObjectInstanceHandle& value)
  {
    value = ObjectInstanceHandle(readUInt32Compressed());
  }

  void readInteractionClassHandle(InteractionClassHandle& value)
  {
    value = InteractionClassHandle(readUInt32Compressed());
  }

  void readParameterHandle(ParameterHandle& value)
  {
    value = ParameterHandle(readUInt32Compressed());
  }

  void readFederateHandle(FederateHandle& value)
  {
    value = FederateHandle(readUInt32Compressed());
  }

  void readSpaceHandle(SpaceHandle& value)
  {
    value = SpaceHandle(readUInt32Compressed());
  }

  void readTransportationHandle(TransportationHandle& value)
  {
    value = TransportationHandle(readUInt8Compressed());
  }

  void readOrderingHandle(OrderingHandle& value)
  {
    value = OrderingHandle(readUInt8Compressed());
  }

  void readMessageRetractionHandle(MessageRetractionHandle& value)
  {
    value = MessageRetractionHandle(readUInt64Compressed());
  }

  void readRegionHandle(RegionHandle& value)
  {
    value = RegionHandle(readUInt64Compressed());
  }

  void readAttributeHandleVector(AttributeHandleVector& value)
  {
    value.resize(readSizeTCompressed());
    for (AttributeHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readAttributeHandle(*i);
    }
  }

  void readFederateHandleVector(FederateHandleVector& value)
  {
    value.resize(readSizeTCompressed());
    for (FederateHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readFederateHandle(*i);
    }
  }

  void readParameterHandleVector(ParameterHandleVector& value)
  {
    value.resize(readSizeTCompressed());
    for (ParameterHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readParameterHandle(*i);
    }
  }

  void readDimensionHandleVector(DimensionHandleVector& value)
  {
    value.resize(readSizeTCompressed());
    for (DimensionHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readDimensionHandle(*i);
    }
  }

  void readDimensionHandleSet(DimensionHandleSet& value)
  {
    size_t size = readSizeTCompressed();
    for (; size != 0; --size) {
      DimensionHandle scalar;
      readDimensionHandle(scalar);
      value.insert(scalar);
    }
  }

  void readObjectInstanceHandleVector(ObjectInstanceHandleVector& value)
  {
    value.resize(readSizeTCompressed());
    for (ObjectInstanceHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readObjectInstanceHandle(*i);
    }
  }

  void readRegionHandleVector(RegionHandleVector& value)
  {
    value.resize(readSizeTCompressed());
    for (RegionHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readRegionHandle(*i);
    }
  }

  void readModuleHandleVector(ModuleHandleVector& value)
  {
    value.resize(readSizeTCompressed());
    for (ModuleHandleVector::iterator i = value.begin(); i != value.end(); ++i) {
      readModuleHandle(*i);
    }
  }

  void readStringVector(StringVector& value)
  {
    value.resize(readSizeTCompressed());
    for (StringVector::iterator i = value.begin(); i != value.end(); ++i) {
      readString(*i);
    }
  }

  void readStringSet(StringSet& value)
  {
    size_t size = readSizeTCompressed();
    for (; size != 0; --size) {
      String scalar;
      readString(scalar);
      value.insert(scalar);
    }
  }

  void readVariableLengthData(VariableLengthData& value)
  {
    size_t size = readSizeTCompressed();
    value.resize(size);
    if (size)
      _messageEncoding.addReadBuffer(size);
  }

  void readFederateHandleBoolPair(FederateHandleBoolPair& value)
  {
    readFederateHandle(value.first);
    readBool(value.second);
  }

  void readFederateHandleBoolPairVector(FederateHandleBoolPairVector& value)
  {
    value.resize(readSizeTCompressed());
    for (FederateHandleBoolPairVector::iterator i = value.begin(); i != value.end(); ++i) {
      readFederateHandleBoolPair(*i);
    }
  }

  void readRangeBoundsValue(RangeBoundsValue& value)
  {
    readUnsigned( value.getLowerBound());
    readUnsigned( value.getUpperBound());
  }

  void readDimensionHandleRangeBoundsValuePair(DimensionHandleRangeBoundsValuePair& value)
  {
    readDimensionHandle(value.first);
    readRangeBoundsValue(value.second);
  }

  void readRegionValue(RegionValue& value)
  {
    value.resize(readSizeTCompressed());
    for (RegionValue::iterator i = value.begin(); i != value.end(); ++i) {
      readDimensionHandleRangeBoundsValuePair(*i);
    }
  }

  void readRegionValueList(RegionValueList& value)
  {
    value.resize(readSizeTCompressed());
    for (RegionValueList::iterator i = value.begin(); i != value.end(); ++i) {
      readRegionValue(*i);
    }
  }

  void readRegionHandleDimensionHandleSetPair(RegionHandleDimensionHandleSetPair& value)
  {
    readRegionHandle(value.first);
    readDimensionHandleSet(value.second);
  }

  void readRegionHandleDimensionHandleSetPairVector(RegionHandleDimensionHandleSetPairVector& value)
  {
    value.resize(readSizeTCompressed());
    for (RegionHandleDimensionHandleSetPairVector::iterator i = value.begin(); i != value.end(); ++i) {
      readRegionHandleDimensionHandleSetPair(*i);
    }
  }

  void readRegionHandleSpaceHandlePair(RegionHandleSpaceHandlePair& value)
  {
    readRegionHandle(value.first);
    readSpaceHandle(value.second);
  }

  void readRegionHandleSpaceHandlePairVector(RegionHandleSpaceHandlePairVector& value)
  {
    value.resize(readSizeTCompressed());
    for (RegionHandleSpaceHandlePairVector::iterator i = value.begin(); i != value.end(); ++i) {
      readRegionHandleSpaceHandlePair(*i);
    }
  }

  void readRegionHandleRegionValuePair(RegionHandleRegionValuePair& value)
  {
    readRegionHandle(value.first);
    readRegionValue(value.second);
  }

  void readRegionHandleRegionValuePairVector(RegionHandleRegionValuePairVector& value)
  {
    value.resize(readSizeTCompressed());
    for (RegionHandleRegionValuePairVector::iterator i = value.begin(); i != value.end(); ++i) {
      readRegionHandleRegionValuePair(*i);
    }
  }

  void readInteractionClassHandleRegionValueListPair(InteractionClassHandleRegionValueListPair& value)
  {
    readInteractionClassHandle(value.first);
    readRegionValueList(value.second);
  }

  void readAttributeHandleRegionValueListPair(AttributeHandleRegionValueListPair& value)
  {
    readAttributeHandle(value.first);
    readRegionValueList(value.second);
  }

  void readAttributeState(AttributeState& value)
  {
    readAttributeHandle( value.getAttributeHandle());
    readFederateHandle( value.getOwnerFederate());
  }

  void readAttributeStateVector(AttributeStateVector& value)
  {
    value.resize(readSizeTCompressed());
    for (AttributeStateVector::iterator i = value.begin(); i != value.end(); ++i) {
      readAttributeState(*i);
    }
  }

  void readParameterValue(ParameterValue& value)
  {
    readParameterHandle( value.getParameterHandle());
    readVariableLengthData( value.getValue());
  }

  void readParameterValueVector(ParameterValueVector& value)
  {
    value.resize(readSizeTCompressed());
    for (ParameterValueVector::iterator i = value.begin(); i != value.end(); ++i) {
      readParameterValue(*i);
    }
  }

  void readAttributeValue(AttributeValue& value)
  {
    readAttributeHandle( value.getAttributeHandle());
    readVariableLengthData( value.getValue());
  }

  void readAttributeValueVector(AttributeValueVector& value)
  {
    value.resize(readSizeTCompressed());
    for (AttributeValueVector::iterator i = value.begin(); i != value.end(); ++i) {
      readAttributeValue(*i);
    }
  }

  void readFederateHandleSaveStatusPair(FederateHandleSaveStatusPair& value)
  {
    readFederateHandle(value.first);
    readSaveStatus(value.second);
  }

  void readFederateHandleSaveStatusPairVector(FederateHandleSaveStatusPairVector& value)
  {
    value.resize(readSizeTCompressed());
    for (FederateHandleSaveStatusPairVector::iterator i = value.begin(); i != value.end(); ++i) {
      readFederateHandleSaveStatusPair(*i);
    }
  }

  void readFederateHandleRestoreStatusPair(FederateHandleRestoreStatusPair& value)
  {
    readFederateHandle(value.first);
    readRestoreStatus(value.second);
  }

  void readFederateHandleRestoreStatusPairVector(FederateHandleRestoreStatusPairVector& value)
  {
    value.resize(readSizeTCompressed());
    for (FederateHandleRestoreStatusPairVector::iterator i = value.begin(); i != value.end(); ++i) {
      readFederateHandleRestoreStatusPair(*i);
    }
  }

  void readFederationExecutionInformation(FederationExecutionInformation& value)
  {
    readString( value.getFederationExecutionName());
    readString( value.getLogicalTimeFactoryName());
  }

  void readFederationExecutionInformationVector(FederationExecutionInformationVector& value)
  {
    value.resize(readSizeTCompressed());
    for (FederationExecutionInformationVector::iterator i = value.begin(); i != value.end(); ++i) {
      readFederationExecutionInformation(*i);
    }
  }

  void readObjectInstanceHandleNamePair(ObjectInstanceHandleNamePair& value)
  {
    readObjectInstanceHandle(value.first);
    readString(value.second);
  }

  void readObjectInstanceHandleNamePairVector(ObjectInstanceHandleNamePairVector& value)
  {
    value.resize(readSizeTCompressed());
    for (ObjectInstanceHandleNamePairVector::iterator i = value.begin(); i != value.end(); ++i) {
      readObjectInstanceHandleNamePair(*i);
    }
  }

  void readCreateFederationExecutionResponseType(CreateFederationExecutionResponseType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = CreateFederationExecutionResponseType::CreateFederationExecutionResponseSuccess;
      break;
    case 1:
      value = CreateFederationExecutionResponseType::CreateFederationExecutionResponseFederationExecutionAlreadyExists;
      break;
    case 2:
      value = CreateFederationExecutionResponseType::CreateFederationExecutionResponseCouldNotOpenFDD;
      break;
    case 3:
      value = CreateFederationExecutionResponseType::CreateFederationExecutionResponseErrorReadingFDD;
      break;
    case 4:
      value = CreateFederationExecutionResponseType::CreateFederationExecutionResponseCouldNotCreateLogicalTimeFactory;
      break;
    case 5:
      value = CreateFederationExecutionResponseType::CreateFederationExecutionResponseInconsistentFDD;
      break;
    case 6:
      value = CreateFederationExecutionResponseType::CreateFederationExecutionResponseRTIinternalError;
      break;
    case 7:
      value = CreateFederationExecutionResponseType::CreateFederationExecutionResponseTimeout;
      break;
    default:
      value = CreateFederationExecutionResponseType::CreateFederationExecutionResponseTimeout;
      break;
    }
  }

  void readDestroyFederationExecutionResponseType(DestroyFederationExecutionResponseType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = DestroyFederationExecutionResponseType::DestroyFederationExecutionResponseSuccess;
      break;
    case 1:
      value = DestroyFederationExecutionResponseType::DestroyFederationExecutionResponseFederatesCurrentlyJoined;
      break;
    case 2:
      value = DestroyFederationExecutionResponseType::DestroyFederationExecutionResponseFederationExecutionDoesNotExist;
      break;
    case 3:
      value = DestroyFederationExecutionResponseType::DestroyFederationExecutionResponseRTIinternalError;
      break;
    default:
      value = DestroyFederationExecutionResponseType::DestroyFederationExecutionResponseRTIinternalError;
      break;
    }
  }

  void readJoinFederationExecutionResponseType(JoinFederationExecutionResponseType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = JoinFederationExecutionResponseType::JoinFederationExecutionResponseSuccess;
      break;
    case 1:
      value = JoinFederationExecutionResponseType::JoinFederationExecutionResponseFederateNameAlreadyInUse;
      break;
    case 2:
      value = JoinFederationExecutionResponseType::JoinFederationExecutionResponseFederationExecutionDoesNotExist;
      break;
    case 3:
      value = JoinFederationExecutionResponseType::JoinFederationExecutionResponseSaveInProgress;
      break;
    case 4:
      value = JoinFederationExecutionResponseType::JoinFederationExecutionResponseRestoreInProgress;
      break;
    case 5:
      value = JoinFederationExecutionResponseType::JoinFederationExecutionResponseInconsistentFDD;
      break;
    case 6:
      value = JoinFederationExecutionResponseType::JoinFederationExecutionResponseTimeout;
      break;
    default:
      value = JoinFederationExecutionResponseType::JoinFederationExecutionResponseTimeout;
      break;
    }
  }

  void readRegisterFederationSynchronizationPointResponseType(RegisterFederationSynchronizationPointResponseType& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = RegisterFederationSynchronizationPointResponseType::RegisterFederationSynchronizationPointResponseSuccess;
      break;
    case 1:
      value = RegisterFederationSynchronizationPointResponseType::RegisterFederationSynchronizationPointResponseLabelNotUnique;
      break;
    case 2:
      value = RegisterFederationSynchronizationPointResponseType::RegisterFederationSynchronizationPointResponseMemberNotJoined;
      break;
    default:
      value = RegisterFederationSynchronizationPointResponseType::RegisterFederationSynchronizationPointResponseMemberNotJoined;
      break;
    }
  }

  void readConfigurationParameterMap(ConfigurationParameterMap& value)
  {
    size_t size = readSizeTCompressed();
    for (; size != 0; --size) {
      String key;
      readString(key);
      readStringVector(value[key]);
    }
  }

  void readFOMStringBasicDataType(FOMStringBasicDataType& value)
  {
    readString( value.getName());
    readUnsigned( value.getSize());
    readEndianness( value.getEndian());
  }

  void readFOMStringBasicDataTypeList(FOMStringBasicDataTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringBasicDataTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringBasicDataType(*i);
    }
  }

  void readFOMStringSimpleDataType(FOMStringSimpleDataType& value)
  {
    readString( value.getName());
    readString( value.getRepresentation());
  }

  void readFOMStringSimpleDataTypeList(FOMStringSimpleDataTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringSimpleDataTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringSimpleDataType(*i);
    }
  }

  void readFOMStringEnumerator(FOMStringEnumerator& value)
  {
    readString( value.getName());
    readUnsigned( value.getValue());
  }

  void readFOMStringEnumeratorList(FOMStringEnumeratorList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringEnumeratorList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringEnumerator(*i);
    }
  }

  void readFOMStringEnumeratedDataType(FOMStringEnumeratedDataType& value)
  {
    readString( value.getName());
    readString( value.getRepresentation());
    readFOMStringEnumeratorList( value.getEnumerators());
  }

  void readFOMStringEnumeratedDataTypeList(FOMStringEnumeratedDataTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringEnumeratedDataTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringEnumeratedDataType(*i);
    }
  }

  void readFOMStringArrayDataType(FOMStringArrayDataType& value)
  {
    readString( value.getName());
    readString( value.getDataType());
    readString( value.getCardinality());
    readString( value.getEncoding());
  }

  void readFOMStringArrayDataTypeList(FOMStringArrayDataTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringArrayDataTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringArrayDataType(*i);
    }
  }

  void readFOMStringArrayDataType2(FOMStringArrayDataType2& value)
  {
    readString( value.getName());
    readString( value.getDataType());
    readString( value.getCardinality());
    readArrayDataTypeEncoding( value.getEncoding());
  }

  void readFOMStringArrayDataType2List(FOMStringArrayDataType2List& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringArrayDataType2List::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringArrayDataType2(*i);
    }
  }

  void readFOMStringFixedRecordField(FOMStringFixedRecordField& value)
  {
    readString( value.getName());
    readUnsigned( value.getDataType());
  }

  void readFOMStringFixedRecordFieldList(FOMStringFixedRecordFieldList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringFixedRecordFieldList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringFixedRecordField(*i);
    }
  }

  void readFOMStringFixedRecordDataType(FOMStringFixedRecordDataType& value)
  {
    readString( value.getName());
    readString( value.getEncoding());
    readFOMStringFixedRecordFieldList( value.getFields());
  }

  void readFOMStringFixedRecordDataTypeList(FOMStringFixedRecordDataTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringFixedRecordDataTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringFixedRecordDataType(*i);
    }
  }

  void readFOMStringFixedRecordField2(FOMStringFixedRecordField2& value)
  {
    readString( value.getName());
    readString( value.getDataType());
    readUnsigned( value.getVersion());
  }

  void readFOMStringFixedRecordField2List(FOMStringFixedRecordField2List& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringFixedRecordField2List::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringFixedRecordField2(*i);
    }
  }

  void readFOMStringFixedRecordDataType2(FOMStringFixedRecordDataType2& value)
  {
    readString( value.getName());
    readString( value.getEncoding());
    readString( value.getInclude());
    readUnsigned( value.getVersion());
    readFOMStringFixedRecordField2List( value.getFields());
  }

  void readFOMStringFixedRecordDataType2List(FOMStringFixedRecordDataType2List& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringFixedRecordDataType2List::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringFixedRecordDataType2(*i);
    }
  }

  void readFOMStringVariantRecordAlternative(FOMStringVariantRecordAlternative& value)
  {
    readString( value.getEnumerator());
    readString( value.getName());
    readUnsigned( value.getDataType());
  }

  void readFOMStringVariantRecordAlternativeList(FOMStringVariantRecordAlternativeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringVariantRecordAlternativeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringVariantRecordAlternative(*i);
    }
  }

  void readFOMStringVariantRecordDataType(FOMStringVariantRecordDataType& value)
  {
    readString( value.getName());
    readString( value.getDiscriminant());
    readString( value.getDataType());
    readFOMStringVariantRecordAlternativeList( value.getAlternatives());
    readString( value.getEncoding());
  }

  void readFOMStringVariantRecordDataTypeList(FOMStringVariantRecordDataTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringVariantRecordDataTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringVariantRecordDataType(*i);
    }
  }

  void readFOMStringVariantRecordAlternative2(FOMStringVariantRecordAlternative2& value)
  {
    readString( value.getEnumerator());
    readString( value.getName());
    readString( value.getDataType());
  }

  void readFOMStringVariantRecordAlternative2List(FOMStringVariantRecordAlternative2List& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringVariantRecordAlternative2List::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringVariantRecordAlternative2(*i);
    }
  }

  void readFOMStringVariantRecordDataType2(FOMStringVariantRecordDataType2& value)
  {
    readString( value.getName());
    readString( value.getDiscriminant());
    readString( value.getDataType());
    readFOMStringVariantRecordAlternative2List( value.getAlternatives());
    readString( value.getEncoding());
  }

  void readFOMStringVariantRecordDataType2List(FOMStringVariantRecordDataType2List& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringVariantRecordDataType2List::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringVariantRecordDataType2(*i);
    }
  }

  void readFOMStringTransportationType(FOMStringTransportationType& value)
  {
    readString( value.getName());
  }

  void readFOMStringTransportationTypeList(FOMStringTransportationTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringTransportationTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringTransportationType(*i);
    }
  }

  void readFOMStringDimension(FOMStringDimension& value)
  {
    readString( value.getName());
    readUnsigned( value.getUpperBound());
  }

  void readFOMStringDimensionList(FOMStringDimensionList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringDimensionList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringDimension(*i);
    }
  }

  void readFOMStringRoutingSpace(FOMStringRoutingSpace& value)
  {
    readString( value.getName());
    readStringSet( value.getDimensionSet());
  }

  void readFOMStringRoutingSpaceList(FOMStringRoutingSpaceList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringRoutingSpaceList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringRoutingSpace(*i);
    }
  }

  void readFOMStringParameter(FOMStringParameter& value)
  {
    readString( value.getName());
    readString( value.getDataType());
  }

  void readFOMStringParameterList(FOMStringParameterList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringParameterList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringParameter(*i);
    }
  }

  void readFOMStringInteractionClass(FOMStringInteractionClass& value)
  {
    readStringVector( value.getName());
    readString( value.getOrderType());
    readString( value.getTransportationType());
    readString( value.getRoutingSpace());
    readStringSet( value.getDimensionSet());
    readFOMStringParameterList( value.getParameterList());
  }

  void readFOMStringInteractionClassList(FOMStringInteractionClassList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringInteractionClassList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringInteractionClass(*i);
    }
  }

  void readFOMStringAttribute(FOMStringAttribute& value)
  {
    readString( value.getName());
    readString( value.getDataType());
    readString( value.getOrderType());
    readString( value.getTransportationType());
    readString( value.getRoutingSpace());
    readStringSet( value.getDimensionSet());
  }

  void readFOMStringAttributeList(FOMStringAttributeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringAttributeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringAttribute(*i);
    }
  }

  void readFOMStringObjectClass(FOMStringObjectClass& value)
  {
    readStringVector( value.getName());
    readFOMStringAttributeList( value.getAttributeList());
  }

  void readFOMStringObjectClassList(FOMStringObjectClassList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringObjectClassList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringObjectClass(*i);
    }
  }

  void readFOMStringUpdateRate(FOMStringUpdateRate& value)
  {
    readString( value.getName());
    readDouble( value.getRate());
  }

  void readFOMStringUpdateRateList(FOMStringUpdateRateList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringUpdateRateList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringUpdateRate(*i);
    }
  }

  void readFOMStringSwitch(FOMStringSwitch& value)
  {
    readSwitchesType( value.getSwitchesType());
    readBool( value.getEnabled());
  }

  void readFOMStringSwitchList(FOMStringSwitchList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringSwitchList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringSwitch(*i);
    }
  }

  void readFOMStringModule(FOMStringModule& value)
  {
    readString( value.getDesignator());
    readFOMStringTransportationTypeList( value.getTransportationTypeList());
    readFOMStringDimensionList( value.getDimensionList());
    readFOMStringRoutingSpaceList( value.getRoutingSpaceList());
    readFOMStringInteractionClassList( value.getInteractionClassList());
    readFOMStringObjectClassList( value.getObjectClassList());
    readFOMStringUpdateRateList( value.getUpdateRateList());
    readFOMStringSwitchList( value.getSwitchList());
    readFOMStringSimpleDataTypeList( value.getSimpleDataTypeList());
    readFOMStringEnumeratedDataTypeList( value.getEnumeratedDataTypeList());
    readFOMStringArrayDataTypeList( value.getArrayDataTypeList());
    readFOMStringFixedRecordDataTypeList( value.getFixedRecordDataTypeList());
    readFOMStringVariantRecordDataTypeList( value.getVariantRecordDataTypeList());
    readBool( value.getArtificialInteractionRoot());
    readBool( value.getArtificialObjectRoot());
  }

  void readFOMStringModuleList(FOMStringModuleList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringModuleList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringModule(*i);
    }
  }

  void readFOMStringModule2(FOMStringModule2& value)
  {
    readString( value.getDesignator());
    readFOMStringTransportationTypeList( value.getTransportationTypeList());
    readFOMStringDimensionList( value.getDimensionList());
    readFOMStringRoutingSpaceList( value.getRoutingSpaceList());
    readFOMStringInteractionClassList( value.getInteractionClassList());
    readFOMStringObjectClassList( value.getObjectClassList());
    readFOMStringUpdateRateList( value.getUpdateRateList());
    readFOMStringSwitchList( value.getSwitchList());
    readFOMStringBasicDataTypeList( value.getBasicDataTypeList());
    readFOMStringSimpleDataTypeList( value.getSimpleDataTypeList());
    readFOMStringEnumeratedDataTypeList( value.getEnumeratedDataTypeList());
    readFOMStringArrayDataType2List( value.getArrayDataTypeList());
    readFOMStringFixedRecordDataType2List( value.getFixedRecordDataTypeList());
    readFOMStringVariantRecordDataType2List( value.getVariantRecordDataTypeList());
    readBool( value.getArtificialInteractionRoot());
    readBool( value.getArtificialObjectRoot());
  }

  void readFOMStringModule2List(FOMStringModule2List& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMStringModule2List::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMStringModule2(*i);
    }
  }

  void readFOMTransportationType(FOMTransportationType& value)
  {
    readString( value.getName());
    readTransportationType( value.getTransportationType());
  }

  void readFOMTransportationTypeList(FOMTransportationTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMTransportationTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMTransportationType(*i);
    }
  }

  void readFOMDimension(FOMDimension& value)
  {
    readString( value.getName());
    readDimensionHandle( value.getDimensionHandle());
    readUnsigned( value.getUpperBound());
  }

  void readFOMDimensionList(FOMDimensionList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMDimensionList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMDimension(*i);
    }
  }

  void readFOMRoutingSpace(FOMRoutingSpace& value)
  {
    readString( value.getName());
    readSpaceHandle( value.getSpaceHandle());
    readDimensionHandleSet( value.getDimensionHandleSet());
  }

  void readFOMRoutingSpaceList(FOMRoutingSpaceList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMRoutingSpaceList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMRoutingSpace(*i);
    }
  }

  void readFOMParameter(FOMParameter& value)
  {
    readString( value.getName());
    readString( value.getDataType());
    readParameterHandle( value.getParameterHandle());
  }

  void readFOMParameterList(FOMParameterList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMParameterList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMParameter(*i);
    }
  }

  void readFOMInteractionClass(FOMInteractionClass& value)
  {
    readString( value.getName());
    readInteractionClassHandle( value.getInteractionClassHandle());
    readInteractionClassHandle( value.getParentInteractionClassHandle());
    readOrderType( value.getOrderType());
    readTransportationType( value.getTransportationType());
    readDimensionHandleSet( value.getDimensionHandleSet());
    readFOMParameterList( value.getParameterList());
  }

  void readFOMInteractionClassList(FOMInteractionClassList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMInteractionClassList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMInteractionClass(*i);
    }
  }

  void readFOMAttribute(FOMAttribute& value)
  {
    readString( value.getName());
    readString( value.getDataType());
    readAttributeHandle( value.getAttributeHandle());
    readOrderType( value.getOrderType());
    readTransportationType( value.getTransportationType());
    readDimensionHandleSet( value.getDimensionHandleSet());
  }

  void readFOMAttributeList(FOMAttributeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMAttributeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMAttribute(*i);
    }
  }

  void readFOMObjectClass(FOMObjectClass& value)
  {
    readString( value.getName());
    readObjectClassHandle( value.getObjectClassHandle());
    readObjectClassHandle( value.getParentObjectClassHandle());
    readFOMAttributeList( value.getAttributeList());
  }

  void readFOMObjectClassList(FOMObjectClassList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMObjectClassList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMObjectClass(*i);
    }
  }

  void readFOMUpdateRate(FOMUpdateRate& value)
  {
    readString( value.getName());
    readUpdateRateHandle( value.getUpdateRateHandle());
    readDouble( value.getRate());
  }

  void readFOMUpdateRateList(FOMUpdateRateList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMUpdateRateList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMUpdateRate(*i);
    }
  }

  void readFOMSwitch(FOMSwitch& value)
  {
    readSwitchesType( value.getSwitchesType());
    readBool( value.getEnabled());
  }

  void readFOMSwitchList(FOMSwitchList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMSwitchList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMSwitch(*i);
    }
  }

  void readFOMBasicDataType(FOMBasicDataType& value)
  {
    readString( value.getName());
    readUnsigned( value.getSize());
    readEndianness( value.getEndian());
    readBasicDataTypeHandle( value.getHandle());
  }

  void readFOMBasicDataTypeList(FOMBasicDataTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMBasicDataTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMBasicDataType(*i);
    }
  }

  void readFOMSimpleDataType(FOMSimpleDataType& value)
  {
    readString( value.getName());
    readString( value.getRepresentation());
    readSimpleDataTypeHandle( value.getHandle());
  }

  void readFOMSimpleDataTypeList(FOMSimpleDataTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMSimpleDataTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMSimpleDataType(*i);
    }
  }

  void readFOMEnumerator(FOMEnumerator& value)
  {
    readString( value.getName());
    readUnsigned( value.getValue());
  }

  void readFOMEnumeratorList(FOMEnumeratorList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMEnumeratorList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMEnumerator(*i);
    }
  }

  void readFOMEnumeratedDataType(FOMEnumeratedDataType& value)
  {
    readString( value.getName());
    readString( value.getRepresentation());
    readFOMEnumeratorList( value.getEnumerators());
    readEnumeratedDataTypeHandle( value.getHandle());
  }

  void readFOMEnumeratedDataTypeList(FOMEnumeratedDataTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMEnumeratedDataTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMEnumeratedDataType(*i);
    }
  }

  void readFOMArrayDataType(FOMArrayDataType& value)
  {
    readString( value.getName());
    readString( value.getDataType());
    readString( value.getCardinality());
    readArrayDataTypeEncoding( value.getEncoding());
    readArrayDataTypeHandle( value.getHandle());
  }

  void readFOMArrayDataTypeList(FOMArrayDataTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMArrayDataTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMArrayDataType(*i);
    }
  }

  void readFOMFixedRecordField(FOMFixedRecordField& value)
  {
    readString( value.getName());
    readString( value.getDataType());
    readUnsigned( value.getVersion());
  }

  void readFOMFixedRecordFieldList(FOMFixedRecordFieldList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMFixedRecordFieldList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMFixedRecordField(*i);
    }
  }

  void readFOMFixedRecordDataType(FOMFixedRecordDataType& value)
  {
    readString( value.getName());
    readString( value.getEncoding());
    readString( value.getInclude());
    readUnsigned( value.getVersion());
    readFOMFixedRecordFieldList( value.getFields());
    readFixedRecordDataTypeHandle( value.getHandle());
  }

  void readFOMFixedRecordDataTypeList(FOMFixedRecordDataTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMFixedRecordDataTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMFixedRecordDataType(*i);
    }
  }

  void readFOMVariantRecordAlternative(FOMVariantRecordAlternative& value)
  {
    readString( value.getEnumerator());
    readString( value.getName());
    readString( value.getDataType());
  }

  void readFOMVariantRecordAlternativeList(FOMVariantRecordAlternativeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMVariantRecordAlternativeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMVariantRecordAlternative(*i);
    }
  }

  void readFOMVariantRecordDataType(FOMVariantRecordDataType& value)
  {
    readString( value.getName());
    readString( value.getDiscriminant());
    readString( value.getDataType());
    readFOMVariantRecordAlternativeList( value.getAlternatives());
    readString( value.getEncoding());
    readVariantRecordDataTypeHandle( value.getHandle());
  }

  void readFOMVariantRecordDataTypeList(FOMVariantRecordDataTypeList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMVariantRecordDataTypeList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMVariantRecordDataType(*i);
    }
  }

  void readFOMModule(FOMModule& value)
  {
    readModuleHandle( value.getModuleHandle());
    readFOMTransportationTypeList( value.getTransportationTypeList());
    readFOMDimensionList( value.getDimensionList());
    readFOMRoutingSpaceList( value.getRoutingSpaceList());
    readFOMInteractionClassList( value.getInteractionClassList());
    readFOMObjectClassList( value.getObjectClassList());
    readFOMUpdateRateList( value.getUpdateRateList());
    readFOMSwitchList( value.getSwitchList());
    readBool( value.getArtificialInteractionRoot());
    readBool( value.getArtificialObjectRoot());
    readString( value.getDesignator());
  }

  void readFOMModuleList(FOMModuleList& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMModuleList::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMModule(*i);
    }
  }

  void readFOMModule2(FOMModule2& value)
  {
    readFOMBasicDataTypeList( value.getBasicDataTypeList());
    readFOMSimpleDataTypeList( value.getSimpleDataTypeList());
    readFOMEnumeratedDataTypeList( value.getEnumeratedDataTypeList());
    readFOMArrayDataTypeList( value.getArrayDataTypeList());
    readFOMFixedRecordDataTypeList( value.getFixedRecordDataTypeList());
    readFOMVariantRecordDataTypeList( value.getVariantRecordDataTypeList());
  }

  void readFOMModule2List(FOMModule2List& value)
  {
    value.resize(readSizeTCompressed());
    for (FOMModule2List::iterator i = value.begin(); i != value.end(); ++i) {
      readFOMModule2(*i);
    }
  }

  void readConnectionLostMessage(ConnectionLostMessage& value)
  {
    readString( value.getFaultDescription());
  }

  void readCreateFederationExecutionRequestMessage(CreateFederationExecutionRequestMessage& value)
  {
    readString( value.getFederationExecution());
    readString( value.getLogicalTimeFactoryName());
    readFOMStringModuleList( value.getFOMStringModuleList());
  }

  void readCreateFederationExecutionRequest2Message(CreateFederationExecutionRequest2Message& value)
  {
    readString( value.getFederationExecution());
    readString( value.getLogicalTimeFactoryName());
    readFOMStringModule2List( value.getFOMStringModuleList());
  }

  void readCreateFederationExecutionResponseMessage(CreateFederationExecutionResponseMessage& value)
  {
    readCreateFederationExecutionResponseType( value.getCreateFederationExecutionResponseType());
    readString( value.getExceptionString());
  }

  void readDestroyFederationExecutionRequestMessage(DestroyFederationExecutionRequestMessage& value)
  {
    readString( value.getFederationExecution());
  }

  void readDestroyFederationExecutionResponseMessage(DestroyFederationExecutionResponseMessage& value)
  {
    readDestroyFederationExecutionResponseType( value.getDestroyFederationExecutionResponseType());
  }

  void readEnumerateFederationExecutionsRequestMessage(EnumerateFederationExecutionsRequestMessage&)
  {
  }

  void readEnumerateFederationExecutionsResponseMessage(EnumerateFederationExecutionsResponseMessage& value)
  {
    readFederationExecutionInformationVector( value.getFederationExecutionInformationVector());
  }

  void readInsertFederationExecutionMessage(InsertFederationExecutionMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readString( value.getFederationName());
    readString( value.getLogicalTimeFactoryName());
    readConfigurationParameterMap( value.getConfigurationParameterMap());
  }

  void readShutdownFederationExecutionMessage(ShutdownFederationExecutionMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
  }

  void readEraseFederationExecutionMessage(EraseFederationExecutionMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
  }

  void readReleaseFederationHandleMessage(ReleaseFederationHandleMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
  }

  void readInsertModulesMessage(InsertModulesMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFOMModuleList( value.getFOMModuleList());
  }

  void readInsertModules2Message(InsertModules2Message& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFOMModule2List( value.getFOMModule2List());
  }

  void readJoinFederationExecutionRequestMessage(JoinFederationExecutionRequestMessage& value)
  {
    readString( value.getFederationExecution());
    readString( value.getFederateType());
    readString( value.getFederateName());
    readFOMStringModuleList( value.getFOMStringModuleList());
    readConfigurationParameterMap( value.getConfigurationParameterMap());
    readBool( value.getIsInternal());
  }

  void readJoinFederationExecutionRequest2Message(JoinFederationExecutionRequest2Message& value)
  {
    readString( value.getFederationExecution());
    readString( value.getFederateType());
    readString( value.getFederateName());
    readFOMStringModule2List( value.getFOMStringModuleList());
    readConfigurationParameterMap( value.getConfigurationParameterMap());
    readBool( value.getIsInternal());
  }

  void readJoinFederationExecutionResponseMessage(JoinFederationExecutionResponseMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readJoinFederationExecutionResponseType( value.getJoinFederationExecutionResponseType());
    readString( value.getExceptionString());
    readFederateHandle( value.getFederateHandle());
    readString( value.getFederateType());
    readString( value.getFederateName());
  }

  void readResignFederationExecutionLeafRequestMessage(ResignFederationExecutionLeafRequestMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readResignAction( value.getResignAction());
  }

  void readResignFederationExecutionRequestMessage(ResignFederationExecutionRequestMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
  }

  void readJoinFederateNotifyMessage(JoinFederateNotifyMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readString( value.getFederateType());
    readString( value.getFederateName());
    readBool( value.getIsInternal());
  }

  void readResignFederateNotifyMessage(ResignFederateNotifyMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
  }

  void readChangeAutomaticResignDirectiveMessage(ChangeAutomaticResignDirectiveMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readResignAction( value.getResignAction());
  }

  void readRegisterFederationSynchronizationPointMessage(RegisterFederationSynchronizationPointMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readString( value.getLabel());
    readVariableLengthData( value.getTag());
    readFederateHandleVector( value.getFederateHandleVector());
  }

  void readRegisterFederationSynchronizationPointResponseMessage(RegisterFederationSynchronizationPointResponseMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readString( value.getLabel());
    readRegisterFederationSynchronizationPointResponseType( value.getRegisterFederationSynchronizationPointResponseType());
  }

  void readAnnounceSynchronizationPointMessage(AnnounceSynchronizationPointMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readString( value.getLabel());
    readVariableLengthData( value.getTag());
    readBool( value.getAddJoiningFederates());
    readFederateHandleVector( value.getFederateHandleVector());
  }

  void readSynchronizationPointAchievedMessage(SynchronizationPointAchievedMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readString( value.getLabel());
    readFederateHandleBoolPairVector( value.getFederateHandleBoolPairVector());
  }

  void readFederationSynchronizedMessage(FederationSynchronizedMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readString( value.getLabel());
    readFederateHandleBoolPairVector( value.getFederateHandleBoolPairVector());
  }

  void readEnableTimeRegulationRequestMessage(EnableTimeRegulationRequestMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readVariableLengthData( value.getTimeStamp());
    readUnsigned( value.getCommitId());
  }

  void readEnableTimeRegulationResponseMessage(EnableTimeRegulationResponseMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readFederateHandle( value.getRespondingFederateHandle());
    readBool( value.getTimeStampValid());
    readVariableLengthData( value.getTimeStamp());
  }

  void readDisableTimeRegulationRequestMessage(DisableTimeRegulationRequestMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
  }

  void readEnableTimeConstrainedNotifyMessage(EnableTimeConstrainedNotifyMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
  }

  void readDisableTimeConstrainedNotifyMessage(DisableTimeConstrainedNotifyMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
  }

  void readCommitLowerBoundTimeStampMessage(CommitLowerBoundTimeStampMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readVariableLengthData( value.getTimeStamp());
    readLowerBoundTimeStampCommitType( value.getCommitType());
    readUnsigned( value.getCommitId());
  }

  void readCommitLowerBoundTimeStampResponseMessage(CommitLowerBoundTimeStampResponseMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readFederateHandle( value.getSendingFederateHandle());
    readUnsigned( value.getCommitId());
  }

  void readLockedByNextMessageRequestMessage(LockedByNextMessageRequestMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getSendingFederateHandle());
    readBool( value.getLockedByNextMessage());
  }

  void readResetFederationRequestMessage(ResetFederationRequestMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readVariableLengthData( value.getTimeStamp());
    readVariableLengthData( value.getTag());
  }

  void readResetFederationInitiateMessage(ResetFederationInitiateMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readFederateHandleVector( value.getFederateHandleVector());
    readVariableLengthData( value.getTimeStamp());
    readVariableLengthData( value.getTag());
  }

  void readResetFederationDoneMessage(ResetFederationDoneMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readVariableLengthData( value.getTimeStamp());
    readVariableLengthData( value.getTag());
    readBool( value.getSuccess());
  }

  void readResetFederationBegunMessage(ResetFederationBegunMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandleVector( value.getFederateHandleVector());
    readFederateHandle( value.getFederateHandle());
    readVariableLengthData( value.getTimeStamp());
    readVariableLengthData( value.getTag());
  }

  void readResetFederationCompleteMessage(ResetFederationCompleteMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandleBoolPairVector( value.getFederateHandleBoolPairVector());
    readFederateHandle( value.getFederateHandle());
    readVariableLengthData( value.getTimeStamp());
    readBool( value.getSuccess());
    readVariableLengthData( value.getTag());
  }

  void readTimeConstrainedEnabledMessage(TimeConstrainedEnabledMessage&)
  {
  }

  void readTimeRegulationEnabledMessage(TimeRegulationEnabledMessage&)
  {
  }

  void readTimeAdvanceGrantedMessage(TimeAdvanceGrantedMessage&)
  {
  }

  void readInsertRegionMessage(InsertRegionMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readRegionHandleDimensionHandleSetPairVector( value.getRegionHandleDimensionHandleSetPairVector());
  }

  void readCommitRegionMessage(CommitRegionMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readRegionHandleRegionValuePairVector( value.getRegionHandleRegionValuePairVector());
  }

  void readEraseRegionMessage(EraseRegionMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readRegionHandleVector( value.getRegionHandleVector());
  }

  void readChangeInteractionClassPublicationMessage(ChangeInteractionClassPublicationMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readPublicationType( value.getPublicationType());
    readInteractionClassHandle( value.getInteractionClassHandle());
  }

  void readChangeObjectClassPublicationMessage(ChangeObjectClassPublicationMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readPublicationType( value.getPublicationType());
    readObjectClassHandle( value.getObjectClassHandle());
    readAttributeHandleVector( value.getAttributeHandles());
  }

  void readChangeInteractionClassSubscriptionMessage(ChangeInteractionClassSubscriptionMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readSubscriptionType( value.getSubscriptionType());
    readInteractionClassHandle( value.getInteractionClassHandle());
    readParameterValueVector( value.getParameterFilterValues());
  }

  void readChangeObjectClassSubscriptionMessage(ChangeObjectClassSubscriptionMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readSubscriptionType( value.getSubscriptionType());
    readObjectClassHandle( value.getObjectClassHandle());
    readAttributeHandleVector( value.getAttributeHandles());
  }

  void readChangeObjectInstanceSubscriptionMessage(ChangeObjectInstanceSubscriptionMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readSubscriptionType( value.getSubscriptionType());
    readObjectClassHandle( value.getObjectClassHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
  }

  void readOwnershipTransferState(OwnershipTransferState& value)
  {
    switch (readUInt32Compressed()) {
    case 0:
      value = OwnershipTransferState::None;
      break;
    case 1:
      value = OwnershipTransferState::Acquiring;
      break;
    case 2:
      value = OwnershipTransferState::Divesting;
      break;
    default:
      value = OwnershipTransferState::Divesting;
      break;
    }
  }

  void readAttributeOwnershipRequestDivestMessage(AttributeOwnershipRequestDivestMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readObjectClassHandle( value.getObjectClassHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readAttributeHandleVector( value.getAttributeHandles());
    readVariableLengthData( value.getTag());
    readBool( value.getUnconditional());
  }

  void readAttributeOwnershipRequestAcquireMessage(AttributeOwnershipRequestAcquireMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readObjectClassHandle( value.getObjectClassHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readAttributeHandleVector( value.getAttributeHandles());
    readVariableLengthData( value.getTag());
    readBool( value.getIfAvailable());
    readFederateHandle( value.getFederateHandle());
  }

  void readAttributeOwnershipResponseUnavailableMessage(AttributeOwnershipResponseUnavailableMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readObjectClassHandle( value.getObjectClassHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readAttributeHandleVector( value.getAttributeHandles());
  }

  void readAttributeOwnershipConfirmDivestitureMessage(AttributeOwnershipConfirmDivestitureMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readObjectClassHandle( value.getObjectClassHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readAttributeHandleVector( value.getAttributeHandles());
  }

  void readAttributeOwnershipRequestCancelAcquireMessage(AttributeOwnershipRequestCancelAcquireMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readObjectClassHandle( value.getObjectClassHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readAttributeHandleVector( value.getAttributeHandles());
    readBool( value.getImmediate());
  }

  void readAttributeOwnershipResponseCancelConfirmationMessage(AttributeOwnershipResponseCancelConfirmationMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readObjectClassHandle( value.getObjectClassHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readAttributeHandleVector( value.getAttributeHandles());
  }

  void readAttributeOwnershipRequestCancelDivestMessage(AttributeOwnershipRequestCancelDivestMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readObjectClassHandle( value.getObjectClassHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readAttributeHandleVector( value.getAttributeHandles());
  }

  void readAttributeOwnershipDivestConfirmationMessage(AttributeOwnershipDivestConfirmationMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readObjectClassHandle( value.getObjectClassHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readAttributeHandleVector( value.getAttributeHandles());
  }

  void readAttributeOwnershipResponseOwnershipAcquiredMessage(AttributeOwnershipResponseOwnershipAcquiredMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readObjectClassHandle( value.getObjectClassHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readAttributeHandleVector( value.getAttributeHandles());
    readBool( value.getIfAvailable());
  }

  void readQueryAttributeOwnershipRequestMessage(QueryAttributeOwnershipRequestMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readAttributeHandle( value.getAttributeHandle());
  }

  void readQueryAttributeOwnershipResponseMessage(QueryAttributeOwnershipResponseMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readAttributeHandle( value.getAttributeHandle());
    readFederateHandle( value.getOwner());
  }

  void readRegistrationForObjectClassMessage(RegistrationForObjectClassMessage& value)
  {
    readObjectClassHandle( value.getObjectClassHandle());
    readBool( value.getStart());
  }

  void readAttributesInScopeMessage(AttributesInScopeMessage& value)
  {
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readAttributeHandleVector( value.getAttributeHandles());
    readBool( value.getInScope());
  }

  void readTurnUpdatesOnForInstanceMessage(TurnUpdatesOnForInstanceMessage& value)
  {
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readAttributeHandleVector( value.getAttributeHandles());
    readString( value.getUpdateRate());
    readBool( value.getOn());
  }

  void readTurnInteractionsOnMessage(TurnInteractionsOnMessage& value)
  {
    readInteractionClassHandle( value.getInteractionClassHandle());
    readBool( value.getOn());
  }

  void readInteractionMessage(InteractionMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readInteractionClassHandle( value.getInteractionClassHandle());
    readTransportationType( value.getTransportationType());
    readVariableLengthData( value.getTag());
    readParameterValueVector( value.getParameterValues());
  }

  void readTimeStampedInteractionMessage(TimeStampedInteractionMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readInteractionClassHandle( value.getInteractionClassHandle());
    readOrderType( value.getOrderType());
    readTransportationType( value.getTransportationType());
    readVariableLengthData( value.getTag());
    readVariableLengthData( value.getTimeStamp());
    readMessageRetractionHandle( value.getMessageRetractionHandle());
    readParameterValueVector( value.getParameterValues());
  }

  void readObjectInstanceHandlesRequestMessage(ObjectInstanceHandlesRequestMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readUnsigned( value.getCount());
  }

  void readObjectInstanceHandlesResponseMessage(ObjectInstanceHandlesResponseMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readObjectInstanceHandleNamePairVector( value.getObjectInstanceHandleNamePairVector());
  }

  void readReleaseMultipleObjectInstanceNameHandlePairsMessage(ReleaseMultipleObjectInstanceNameHandlePairsMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readObjectInstanceHandleVector( value.getObjectInstanceHandleVector());
  }

  void readReserveObjectInstanceNameRequestMessage(ReserveObjectInstanceNameRequestMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readString( value.getName());
    readBool( value.getIsInternal());
  }

  void readReserveObjectInstanceNameResponseMessage(ReserveObjectInstanceNameResponseMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readObjectInstanceHandleNamePair( value.getObjectInstanceHandleNamePair());
    readBool( value.getSuccess());
  }

  void readReserveMultipleObjectInstanceNameRequestMessage(ReserveMultipleObjectInstanceNameRequestMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readStringVector( value.getNameList());
  }

  void readReserveMultipleObjectInstanceNameResponseMessage(ReserveMultipleObjectInstanceNameResponseMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readObjectInstanceHandleNamePairVector( value.getObjectInstanceHandleNamePairVector());
    readBool( value.getSuccess());
  }

  void readInsertObjectInstanceMessage(InsertObjectInstanceMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readObjectClassHandle( value.getObjectClassHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readString( value.getName());
    readAttributeStateVector( value.getAttributeStateVector());
  }

  void readDeleteObjectInstanceMessage(DeleteObjectInstanceMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readVariableLengthData( value.getTag());
  }

  void readTimeStampedDeleteObjectInstanceMessage(TimeStampedDeleteObjectInstanceMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readOrderType( value.getOrderType());
    readVariableLengthData( value.getTag());
    readVariableLengthData( value.getTimeStamp());
    readMessageRetractionHandle( value.getMessageRetractionHandle());
  }

  void readAttributeUpdateMessage(AttributeUpdateMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readVariableLengthData( value.getTag());
    readTransportationType( value.getTransportationType());
    readAttributeValueVector( value.getAttributeValues());
  }

  void readTimeStampedAttributeUpdateMessage(TimeStampedAttributeUpdateMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readFederateHandle( value.getFederateHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readVariableLengthData( value.getTag());
    readVariableLengthData( value.getTimeStamp());
    readMessageRetractionHandle( value.getMessageRetractionHandle());
    readOrderType( value.getOrderType());
    readTransportationType( value.getTransportationType());
    readAttributeValueVector( value.getAttributeValues());
  }

  void readRequestAttributeUpdateMessage(RequestAttributeUpdateMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readObjectInstanceHandle( value.getObjectInstanceHandle());
    readAttributeHandleVector( value.getAttributeHandles());
    readVariableLengthData( value.getTag());
  }

  void readRequestClassAttributeUpdateMessage(RequestClassAttributeUpdateMessage& value)
  {
    readFederationHandle( value.getFederationHandle());
    readObjectClassHandle( value.getObjectClassHandle());
    readAttributeHandleVector( value.getAttributeHandles());
    readVariableLengthData( value.getTag());
  }

private:
  TightBE1MessageEncoding& _messageEncoding;
};

class OPENRTI_LOCAL TightBE1MessageEncoding::PayloadDecoder {
public:
  PayloadDecoder(const Buffer::const_iterator& i) :
    _i(i)
  { }
  void readPayloadVariableLengthData(VariableLengthData& value)
  {
    if (!value.size())
      return;
    value = *_i;
    ++_i;
  }

  void readPayloadParameterValue(ParameterValue& value)
  {
    readPayloadVariableLengthData(value.getValue());
  }

  void readPayloadParameterValueVector(ParameterValueVector& value)
  {
    for (ParameterValueVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadParameterValue(*i);
    }
  }

  void readPayloadAttributeValue(AttributeValue& value)
  {
    readPayloadVariableLengthData(value.getValue());
  }

  void readPayloadAttributeValueVector(AttributeValueVector& value)
  {
    for (AttributeValueVector::iterator i = value.begin(); i != value.end(); ++i) {
      readPayloadAttributeValue(*i);
    }
  }

  void readPayloadRegisterFederationSynchronizationPointMessage(RegisterFederationSynchronizationPointMessage& value)
  {
    readPayloadVariableLengthData(value.getTag());
  }

  void readPayloadAnnounceSynchronizationPointMessage(AnnounceSynchronizationPointMessage& value)
  {
    readPayloadVariableLengthData(value.getTag());
  }

  void readPayloadEnableTimeRegulationRequestMessage(EnableTimeRegulationRequestMessage& value)
  {
    readPayloadVariableLengthData(value.getTimeStamp());
  }

  void readPayloadEnableTimeRegulationResponseMessage(EnableTimeRegulationResponseMessage& value)
  {
    readPayloadVariableLengthData(value.getTimeStamp());
  }

  void readPayloadCommitLowerBoundTimeStampMessage(CommitLowerBoundTimeStampMessage& value)
  {
    readPayloadVariableLengthData(value.getTimeStamp());
  }

  void readPayloadResetFederationRequestMessage(ResetFederationRequestMessage& value)
  {
    readPayloadVariableLengthData(value.getTimeStamp());
    readPayloadVariableLengthData(value.getTag());
  }

  void readPayloadResetFederationInitiateMessage(ResetFederationInitiateMessage& value)
  {
    readPayloadVariableLengthData(value.getTimeStamp());
    readPayloadVariableLengthData(value.getTag());
  }

  void readPayloadResetFederationDoneMessage(ResetFederationDoneMessage& value)
  {
    readPayloadVariableLengthData(value.getTimeStamp());
    readPayloadVariableLengthData(value.getTag());
  }

  void readPayloadResetFederationBegunMessage(ResetFederationBegunMessage& value)
  {
    readPayloadVariableLengthData(value.getTimeStamp());
    readPayloadVariableLengthData(value.getTag());
  }

  void readPayloadResetFederationCompleteMessage(ResetFederationCompleteMessage& value)
  {
    readPayloadVariableLengthData(value.getTimeStamp());
    readPayloadVariableLengthData(value.getTag());
  }

  void readPayloadChangeInteractionClassSubscriptionMessage(ChangeInteractionClassSubscriptionMessage& value)
  {
    readPayloadParameterValueVector(value.getParameterFilterValues());
  }

  void readPayloadAttributeOwnershipRequestDivestMessage(AttributeOwnershipRequestDivestMessage& value)
  {
    readPayloadVariableLengthData(value.getTag());
  }

  void readPayloadAttributeOwnershipRequestAcquireMessage(AttributeOwnershipRequestAcquireMessage& value)
  {
    readPayloadVariableLengthData(value.getTag());
  }

  void readPayloadInteractionMessage(InteractionMessage& value)
  {
    readPayloadVariableLengthData(value.getTag());
    readPayloadParameterValueVector(value.getParameterValues());
  }

  void readPayloadTimeStampedInteractionMessage(TimeStampedInteractionMessage& value)
  {
    readPayloadVariableLengthData(value.getTag());
    readPayloadVariableLengthData(value.getTimeStamp());
    readPayloadParameterValueVector(value.getParameterValues());
  }

  void readPayloadDeleteObjectInstanceMessage(DeleteObjectInstanceMessage& value)
  {
    readPayloadVariableLengthData(value.getTag());
  }

  void readPayloadTimeStampedDeleteObjectInstanceMessage(TimeStampedDeleteObjectInstanceMessage& value)
  {
    readPayloadVariableLengthData(value.getTag());
    readPayloadVariableLengthData(value.getTimeStamp());
  }

  void readPayloadAttributeUpdateMessage(AttributeUpdateMessage& value)
  {
    readPayloadVariableLengthData(value.getTag());
    readPayloadAttributeValueVector(value.getAttributeValues());
  }

  void readPayloadTimeStampedAttributeUpdateMessage(TimeStampedAttributeUpdateMessage& value)
  {
    readPayloadVariableLengthData(value.getTag());
    readPayloadVariableLengthData(value.getTimeStamp());
    readPayloadAttributeValueVector(value.getAttributeValues());
  }

  void readPayloadRequestAttributeUpdateMessage(RequestAttributeUpdateMessage& value)
  {
    readPayloadVariableLengthData(value.getTag());
  }

  void readPayloadRequestClassAttributeUpdateMessage(RequestClassAttributeUpdateMessage& value)
  {
    readPayloadVariableLengthData(value.getTag());
  }

  Buffer::const_iterator _i;
};

TightBE1MessageEncoding::TightBE1MessageEncoding() noexcept
{
}

TightBE1MessageEncoding::~TightBE1MessageEncoding() noexcept
{
}

const char*
TightBE1MessageEncoding::getName() const
{
  return "TightBE1";
}

void
TightBE1MessageEncoding::readPacket(const Buffer& buffer)
{
  Buffer::const_iterator i = buffer.begin();
  if (i == buffer.end()) {
    addScratchReadBuffer(4);
  } else if (++i == buffer.end()) {
    addScratchReadBuffer(buffer.front().getUInt32BE(0));
  } else if (++i == buffer.end()) {
    decodeBody(*(--i));
  } else {
    decodePayload(i);
  }
  if (getInputBufferComplete() && _message != nullptr)
  {
#ifdef ENABLE_NETWORKSTATISTICS
    GetNetworkStatistics().MessageReceived(_message->getTypeName());
#endif
    getConnect()->send(SharedPtr<AbstractMessage>().swap(_message));
  }
}

void
TightBE1MessageEncoding::decodeBody(const VariableLengthData& variableLengthData)
{
  DecodeStream decodeStream(variableLengthData, *this);
  uint16_t opcode = decodeStream.readUInt16Compressed();
  switch (opcode) {
  case ConnectionLostMessage::OpCode:
    _message = MakeShared<ConnectionLostMessage>();
    decodeStream.readConnectionLostMessage(static_cast<ConnectionLostMessage&>(*_message));
    break;
  case CreateFederationExecutionRequestMessage::OpCode:
    _message = MakeShared<CreateFederationExecutionRequestMessage>();
    decodeStream.readCreateFederationExecutionRequestMessage(static_cast<CreateFederationExecutionRequestMessage&>(*_message));
    break;
  case CreateFederationExecutionRequest2Message::OpCode:
    _message = MakeShared<CreateFederationExecutionRequest2Message>();
    decodeStream.readCreateFederationExecutionRequest2Message(static_cast<CreateFederationExecutionRequest2Message&>(*_message));
    break;
  case CreateFederationExecutionResponseMessage::OpCode:
    _message = MakeShared<CreateFederationExecutionResponseMessage>();
    decodeStream.readCreateFederationExecutionResponseMessage(static_cast<CreateFederationExecutionResponseMessage&>(*_message));
    break;
  case DestroyFederationExecutionRequestMessage::OpCode:
    _message = MakeShared<DestroyFederationExecutionRequestMessage>();
    decodeStream.readDestroyFederationExecutionRequestMessage(static_cast<DestroyFederationExecutionRequestMessage&>(*_message));
    break;
  case DestroyFederationExecutionResponseMessage::OpCode:
    _message = MakeShared<DestroyFederationExecutionResponseMessage>();
    decodeStream.readDestroyFederationExecutionResponseMessage(static_cast<DestroyFederationExecutionResponseMessage&>(*_message));
    break;
  case EnumerateFederationExecutionsRequestMessage::OpCode:
    _message = MakeShared<EnumerateFederationExecutionsRequestMessage>();
    decodeStream.readEnumerateFederationExecutionsRequestMessage(static_cast<EnumerateFederationExecutionsRequestMessage&>(*_message));
    break;
  case EnumerateFederationExecutionsResponseMessage::OpCode:
    _message = MakeShared<EnumerateFederationExecutionsResponseMessage>();
    decodeStream.readEnumerateFederationExecutionsResponseMessage(static_cast<EnumerateFederationExecutionsResponseMessage&>(*_message));
    break;
  case InsertFederationExecutionMessage::OpCode:
    _message = MakeShared<InsertFederationExecutionMessage>();
    decodeStream.readInsertFederationExecutionMessage(static_cast<InsertFederationExecutionMessage&>(*_message));
    break;
  case ShutdownFederationExecutionMessage::OpCode:
    _message = MakeShared<ShutdownFederationExecutionMessage>();
    decodeStream.readShutdownFederationExecutionMessage(static_cast<ShutdownFederationExecutionMessage&>(*_message));
    break;
  case EraseFederationExecutionMessage::OpCode:
    _message = MakeShared<EraseFederationExecutionMessage>();
    decodeStream.readEraseFederationExecutionMessage(static_cast<EraseFederationExecutionMessage&>(*_message));
    break;
  case ReleaseFederationHandleMessage::OpCode:
    _message = MakeShared<ReleaseFederationHandleMessage>();
    decodeStream.readReleaseFederationHandleMessage(static_cast<ReleaseFederationHandleMessage&>(*_message));
    break;
  case InsertModulesMessage::OpCode:
    _message = MakeShared<InsertModulesMessage>();
    decodeStream.readInsertModulesMessage(static_cast<InsertModulesMessage&>(*_message));
    break;
  case InsertModules2Message::OpCode:
    _message = MakeShared<InsertModules2Message>();
    decodeStream.readInsertModules2Message(static_cast<InsertModules2Message&>(*_message));
    break;
  case JoinFederationExecutionRequestMessage::OpCode:
    _message = MakeShared<JoinFederationExecutionRequestMessage>();
    decodeStream.readJoinFederationExecutionRequestMessage(static_cast<JoinFederationExecutionRequestMessage&>(*_message));
    break;
  case JoinFederationExecutionRequest2Message::OpCode:
    _message = MakeShared<JoinFederationExecutionRequest2Message>();
    decodeStream.readJoinFederationExecutionRequest2Message(static_cast<JoinFederationExecutionRequest2Message&>(*_message));
    break;
  case JoinFederationExecutionResponseMessage::OpCode:
    _message = MakeShared<JoinFederationExecutionResponseMessage>();
    decodeStream.readJoinFederationExecutionResponseMessage(static_cast<JoinFederationExecutionResponseMessage&>(*_message));
    break;
  case ResignFederationExecutionRequestMessage::OpCode:
    _message = MakeShared<ResignFederationExecutionRequestMessage>();
    decodeStream.readResignFederationExecutionRequestMessage(static_cast<ResignFederationExecutionRequestMessage&>(*_message));
    break;
  case JoinFederateNotifyMessage::OpCode:
    _message = MakeShared<JoinFederateNotifyMessage>();
    decodeStream.readJoinFederateNotifyMessage(static_cast<JoinFederateNotifyMessage&>(*_message));
    break;
  case ResignFederateNotifyMessage::OpCode:
    _message = MakeShared<ResignFederateNotifyMessage>();
    decodeStream.readResignFederateNotifyMessage(static_cast<ResignFederateNotifyMessage&>(*_message));
    break;
  case ChangeAutomaticResignDirectiveMessage::OpCode:
    _message = MakeShared<ChangeAutomaticResignDirectiveMessage>();
    decodeStream.readChangeAutomaticResignDirectiveMessage(static_cast<ChangeAutomaticResignDirectiveMessage&>(*_message));
    break;
  case RegisterFederationSynchronizationPointMessage::OpCode:
    _message = MakeShared<RegisterFederationSynchronizationPointMessage>();
    decodeStream.readRegisterFederationSynchronizationPointMessage(static_cast<RegisterFederationSynchronizationPointMessage&>(*_message));
    break;
  case RegisterFederationSynchronizationPointResponseMessage::OpCode:
    _message = MakeShared<RegisterFederationSynchronizationPointResponseMessage>();
    decodeStream.readRegisterFederationSynchronizationPointResponseMessage(static_cast<RegisterFederationSynchronizationPointResponseMessage&>(*_message));
    break;
  case AnnounceSynchronizationPointMessage::OpCode:
    _message = MakeShared<AnnounceSynchronizationPointMessage>();
    decodeStream.readAnnounceSynchronizationPointMessage(static_cast<AnnounceSynchronizationPointMessage&>(*_message));
    break;
  case SynchronizationPointAchievedMessage::OpCode:
    _message = MakeShared<SynchronizationPointAchievedMessage>();
    decodeStream.readSynchronizationPointAchievedMessage(static_cast<SynchronizationPointAchievedMessage&>(*_message));
    break;
  case FederationSynchronizedMessage::OpCode:
    _message = MakeShared<FederationSynchronizedMessage>();
    decodeStream.readFederationSynchronizedMessage(static_cast<FederationSynchronizedMessage&>(*_message));
    break;
  case EnableTimeRegulationRequestMessage::OpCode:
    _message = MakeShared<EnableTimeRegulationRequestMessage>();
    decodeStream.readEnableTimeRegulationRequestMessage(static_cast<EnableTimeRegulationRequestMessage&>(*_message));
    break;
  case EnableTimeRegulationResponseMessage::OpCode:
    _message = MakeShared<EnableTimeRegulationResponseMessage>();
    decodeStream.readEnableTimeRegulationResponseMessage(static_cast<EnableTimeRegulationResponseMessage&>(*_message));
    break;
  case DisableTimeRegulationRequestMessage::OpCode:
    _message = MakeShared<DisableTimeRegulationRequestMessage>();
    decodeStream.readDisableTimeRegulationRequestMessage(static_cast<DisableTimeRegulationRequestMessage&>(*_message));
    break;
  case EnableTimeConstrainedNotifyMessage::OpCode:
    _message = MakeShared<EnableTimeConstrainedNotifyMessage>();
    decodeStream.readEnableTimeConstrainedNotifyMessage(static_cast<EnableTimeConstrainedNotifyMessage&>(*_message));
    break;
  case DisableTimeConstrainedNotifyMessage::OpCode:
    _message = MakeShared<DisableTimeConstrainedNotifyMessage>();
    decodeStream.readDisableTimeConstrainedNotifyMessage(static_cast<DisableTimeConstrainedNotifyMessage&>(*_message));
    break;
  case CommitLowerBoundTimeStampMessage::OpCode:
    _message = MakeShared<CommitLowerBoundTimeStampMessage>();
    decodeStream.readCommitLowerBoundTimeStampMessage(static_cast<CommitLowerBoundTimeStampMessage&>(*_message));
    break;
  case CommitLowerBoundTimeStampResponseMessage::OpCode:
    _message = MakeShared<CommitLowerBoundTimeStampResponseMessage>();
    decodeStream.readCommitLowerBoundTimeStampResponseMessage(static_cast<CommitLowerBoundTimeStampResponseMessage&>(*_message));
    break;
  case LockedByNextMessageRequestMessage::OpCode:
    _message = MakeShared<LockedByNextMessageRequestMessage>();
    decodeStream.readLockedByNextMessageRequestMessage(static_cast<LockedByNextMessageRequestMessage&>(*_message));
    break;
  case ResetFederationRequestMessage::OpCode:
    _message = MakeShared<ResetFederationRequestMessage>();
    decodeStream.readResetFederationRequestMessage(static_cast<ResetFederationRequestMessage&>(*_message));
    break;
  case ResetFederationInitiateMessage::OpCode:
    _message = MakeShared<ResetFederationInitiateMessage>();
    decodeStream.readResetFederationInitiateMessage(static_cast<ResetFederationInitiateMessage&>(*_message));
    break;
  case ResetFederationDoneMessage::OpCode:
    _message = MakeShared<ResetFederationDoneMessage>();
    decodeStream.readResetFederationDoneMessage(static_cast<ResetFederationDoneMessage&>(*_message));
    break;
  case ResetFederationBegunMessage::OpCode:
    _message = MakeShared<ResetFederationBegunMessage>();
    decodeStream.readResetFederationBegunMessage(static_cast<ResetFederationBegunMessage&>(*_message));
    break;
  case ResetFederationCompleteMessage::OpCode:
    _message = MakeShared<ResetFederationCompleteMessage>();
    decodeStream.readResetFederationCompleteMessage(static_cast<ResetFederationCompleteMessage&>(*_message));
    break;
  case InsertRegionMessage::OpCode:
    _message = MakeShared<InsertRegionMessage>();
    decodeStream.readInsertRegionMessage(static_cast<InsertRegionMessage&>(*_message));
    break;
  case CommitRegionMessage::OpCode:
    _message = MakeShared<CommitRegionMessage>();
    decodeStream.readCommitRegionMessage(static_cast<CommitRegionMessage&>(*_message));
    break;
  case EraseRegionMessage::OpCode:
    _message = MakeShared<EraseRegionMessage>();
    decodeStream.readEraseRegionMessage(static_cast<EraseRegionMessage&>(*_message));
    break;
  case ChangeInteractionClassPublicationMessage::OpCode:
    _message = MakeShared<ChangeInteractionClassPublicationMessage>();
    decodeStream.readChangeInteractionClassPublicationMessage(static_cast<ChangeInteractionClassPublicationMessage&>(*_message));
    break;
  case ChangeObjectClassPublicationMessage::OpCode:
    _message = MakeShared<ChangeObjectClassPublicationMessage>();
    decodeStream.readChangeObjectClassPublicationMessage(static_cast<ChangeObjectClassPublicationMessage&>(*_message));
    break;
  case ChangeInteractionClassSubscriptionMessage::OpCode:
    _message = MakeShared<ChangeInteractionClassSubscriptionMessage>();
    decodeStream.readChangeInteractionClassSubscriptionMessage(static_cast<ChangeInteractionClassSubscriptionMessage&>(*_message));
    break;
  case ChangeObjectClassSubscriptionMessage::OpCode:
    _message = MakeShared<ChangeObjectClassSubscriptionMessage>();
    decodeStream.readChangeObjectClassSubscriptionMessage(static_cast<ChangeObjectClassSubscriptionMessage&>(*_message));
    break;
  case ChangeObjectInstanceSubscriptionMessage::OpCode:
    _message = MakeShared<ChangeObjectInstanceSubscriptionMessage>();
    decodeStream.readChangeObjectInstanceSubscriptionMessage(static_cast<ChangeObjectInstanceSubscriptionMessage&>(*_message));
    break;
  case AttributeOwnershipRequestDivestMessage::OpCode:
    _message = MakeShared<AttributeOwnershipRequestDivestMessage>();
    decodeStream.readAttributeOwnershipRequestDivestMessage(static_cast<AttributeOwnershipRequestDivestMessage&>(*_message));
    break;
  case AttributeOwnershipRequestAcquireMessage::OpCode:
    _message = MakeShared<AttributeOwnershipRequestAcquireMessage>();
    decodeStream.readAttributeOwnershipRequestAcquireMessage(static_cast<AttributeOwnershipRequestAcquireMessage&>(*_message));
    break;
  case AttributeOwnershipResponseUnavailableMessage::OpCode:
    _message = MakeShared<AttributeOwnershipResponseUnavailableMessage>();
    decodeStream.readAttributeOwnershipResponseUnavailableMessage(static_cast<AttributeOwnershipResponseUnavailableMessage&>(*_message));
    break;
  case AttributeOwnershipConfirmDivestitureMessage::OpCode:
    _message = MakeShared<AttributeOwnershipConfirmDivestitureMessage>();
    decodeStream.readAttributeOwnershipConfirmDivestitureMessage(static_cast<AttributeOwnershipConfirmDivestitureMessage&>(*_message));
    break;
  case AttributeOwnershipRequestCancelAcquireMessage::OpCode:
    _message = MakeShared<AttributeOwnershipRequestCancelAcquireMessage>();
    decodeStream.readAttributeOwnershipRequestCancelAcquireMessage(static_cast<AttributeOwnershipRequestCancelAcquireMessage&>(*_message));
    break;
  case AttributeOwnershipResponseCancelConfirmationMessage::OpCode:
    _message = MakeShared<AttributeOwnershipResponseCancelConfirmationMessage>();
    decodeStream.readAttributeOwnershipResponseCancelConfirmationMessage(static_cast<AttributeOwnershipResponseCancelConfirmationMessage&>(*_message));
    break;
  case AttributeOwnershipRequestCancelDivestMessage::OpCode:
    _message = MakeShared<AttributeOwnershipRequestCancelDivestMessage>();
    decodeStream.readAttributeOwnershipRequestCancelDivestMessage(static_cast<AttributeOwnershipRequestCancelDivestMessage&>(*_message));
    break;
  case AttributeOwnershipDivestConfirmationMessage::OpCode:
    _message = MakeShared<AttributeOwnershipDivestConfirmationMessage>();
    decodeStream.readAttributeOwnershipDivestConfirmationMessage(static_cast<AttributeOwnershipDivestConfirmationMessage&>(*_message));
    break;
  case AttributeOwnershipResponseOwnershipAcquiredMessage::OpCode:
    _message = MakeShared<AttributeOwnershipResponseOwnershipAcquiredMessage>();
    decodeStream.readAttributeOwnershipResponseOwnershipAcquiredMessage(static_cast<AttributeOwnershipResponseOwnershipAcquiredMessage&>(*_message));
    break;
  case QueryAttributeOwnershipRequestMessage::OpCode:
    _message = MakeShared<QueryAttributeOwnershipRequestMessage>();
    decodeStream.readQueryAttributeOwnershipRequestMessage(static_cast<QueryAttributeOwnershipRequestMessage&>(*_message));
    break;
  case QueryAttributeOwnershipResponseMessage::OpCode:
    _message = MakeShared<QueryAttributeOwnershipResponseMessage>();
    decodeStream.readQueryAttributeOwnershipResponseMessage(static_cast<QueryAttributeOwnershipResponseMessage&>(*_message));
    break;
  case InteractionMessage::OpCode:
    _message = MakeShared<InteractionMessage>();
    decodeStream.readInteractionMessage(static_cast<InteractionMessage&>(*_message));
    break;
  case TimeStampedInteractionMessage::OpCode:
    _message = MakeShared<TimeStampedInteractionMessage>();
    decodeStream.readTimeStampedInteractionMessage(static_cast<TimeStampedInteractionMessage&>(*_message));
    break;
  case ObjectInstanceHandlesRequestMessage::OpCode:
    _message = MakeShared<ObjectInstanceHandlesRequestMessage>();
    decodeStream.readObjectInstanceHandlesRequestMessage(static_cast<ObjectInstanceHandlesRequestMessage&>(*_message));
    break;
  case ObjectInstanceHandlesResponseMessage::OpCode:
    _message = MakeShared<ObjectInstanceHandlesResponseMessage>();
    decodeStream.readObjectInstanceHandlesResponseMessage(static_cast<ObjectInstanceHandlesResponseMessage&>(*_message));
    break;
  case ReleaseMultipleObjectInstanceNameHandlePairsMessage::OpCode:
    _message = MakeShared<ReleaseMultipleObjectInstanceNameHandlePairsMessage>();
    decodeStream.readReleaseMultipleObjectInstanceNameHandlePairsMessage(static_cast<ReleaseMultipleObjectInstanceNameHandlePairsMessage&>(*_message));
    break;
  case ReserveObjectInstanceNameRequestMessage::OpCode:
    _message = MakeShared<ReserveObjectInstanceNameRequestMessage>();
    decodeStream.readReserveObjectInstanceNameRequestMessage(static_cast<ReserveObjectInstanceNameRequestMessage&>(*_message));
    break;
  case ReserveObjectInstanceNameResponseMessage::OpCode:
    _message = MakeShared<ReserveObjectInstanceNameResponseMessage>();
    decodeStream.readReserveObjectInstanceNameResponseMessage(static_cast<ReserveObjectInstanceNameResponseMessage&>(*_message));
    break;
  case ReserveMultipleObjectInstanceNameRequestMessage::OpCode:
    _message = MakeShared<ReserveMultipleObjectInstanceNameRequestMessage>();
    decodeStream.readReserveMultipleObjectInstanceNameRequestMessage(static_cast<ReserveMultipleObjectInstanceNameRequestMessage&>(*_message));
    break;
  case ReserveMultipleObjectInstanceNameResponseMessage::OpCode:
    _message = MakeShared<ReserveMultipleObjectInstanceNameResponseMessage>();
    decodeStream.readReserveMultipleObjectInstanceNameResponseMessage(static_cast<ReserveMultipleObjectInstanceNameResponseMessage&>(*_message));
    break;
  case InsertObjectInstanceMessage::OpCode:
    _message = MakeShared<InsertObjectInstanceMessage>();
    decodeStream.readInsertObjectInstanceMessage(static_cast<InsertObjectInstanceMessage&>(*_message));
    break;
  case DeleteObjectInstanceMessage::OpCode:
    _message = MakeShared<DeleteObjectInstanceMessage>();
    decodeStream.readDeleteObjectInstanceMessage(static_cast<DeleteObjectInstanceMessage&>(*_message));
    break;
  case TimeStampedDeleteObjectInstanceMessage::OpCode:
    _message = MakeShared<TimeStampedDeleteObjectInstanceMessage>();
    decodeStream.readTimeStampedDeleteObjectInstanceMessage(static_cast<TimeStampedDeleteObjectInstanceMessage&>(*_message));
    break;
  case AttributeUpdateMessage::OpCode:
    _message = MakeShared<AttributeUpdateMessage>();
    decodeStream.readAttributeUpdateMessage(static_cast<AttributeUpdateMessage&>(*_message));
    break;
  case TimeStampedAttributeUpdateMessage::OpCode:
    _message = MakeShared<TimeStampedAttributeUpdateMessage>();
    decodeStream.readTimeStampedAttributeUpdateMessage(static_cast<TimeStampedAttributeUpdateMessage&>(*_message));
    break;
  case RequestAttributeUpdateMessage::OpCode:
    _message = MakeShared<RequestAttributeUpdateMessage>();
    decodeStream.readRequestAttributeUpdateMessage(static_cast<RequestAttributeUpdateMessage&>(*_message));
    break;
  case RequestClassAttributeUpdateMessage::OpCode:
    _message = MakeShared<RequestClassAttributeUpdateMessage>();
    decodeStream.readRequestClassAttributeUpdateMessage(static_cast<RequestClassAttributeUpdateMessage&>(*_message));
    break;
  default:
    break;
  }
};

void
TightBE1MessageEncoding::decodePayload(const Buffer::const_iterator& i)
{
  Buffer::const_iterator j = i;
  DecodeDataStream decodeStream(*(--j));
  uint16_t opcode = decodeStream.readUInt16Compressed();
  PayloadDecoder payloadDecoder(i);
  switch (opcode) {
  case RegisterFederationSynchronizationPointMessage::OpCode:
    payloadDecoder.readPayloadRegisterFederationSynchronizationPointMessage(static_cast<RegisterFederationSynchronizationPointMessage&>(*_message));
    break;
  case AnnounceSynchronizationPointMessage::OpCode:
    payloadDecoder.readPayloadAnnounceSynchronizationPointMessage(static_cast<AnnounceSynchronizationPointMessage&>(*_message));
    break;
  case EnableTimeRegulationRequestMessage::OpCode:
    payloadDecoder.readPayloadEnableTimeRegulationRequestMessage(static_cast<EnableTimeRegulationRequestMessage&>(*_message));
    break;
  case EnableTimeRegulationResponseMessage::OpCode:
    payloadDecoder.readPayloadEnableTimeRegulationResponseMessage(static_cast<EnableTimeRegulationResponseMessage&>(*_message));
    break;
  case CommitLowerBoundTimeStampMessage::OpCode:
    payloadDecoder.readPayloadCommitLowerBoundTimeStampMessage(static_cast<CommitLowerBoundTimeStampMessage&>(*_message));
    break;
  case ResetFederationRequestMessage::OpCode:
    payloadDecoder.readPayloadResetFederationRequestMessage(static_cast<ResetFederationRequestMessage&>(*_message));
    break;
  case ResetFederationInitiateMessage::OpCode:
    payloadDecoder.readPayloadResetFederationInitiateMessage(static_cast<ResetFederationInitiateMessage&>(*_message));
    break;
  case ResetFederationDoneMessage::OpCode:
    payloadDecoder.readPayloadResetFederationDoneMessage(static_cast<ResetFederationDoneMessage&>(*_message));
    break;
  case ResetFederationBegunMessage::OpCode:
    payloadDecoder.readPayloadResetFederationBegunMessage(static_cast<ResetFederationBegunMessage&>(*_message));
    break;
  case ResetFederationCompleteMessage::OpCode:
    payloadDecoder.readPayloadResetFederationCompleteMessage(static_cast<ResetFederationCompleteMessage&>(*_message));
    break;
  case ChangeInteractionClassSubscriptionMessage::OpCode:
    payloadDecoder.readPayloadChangeInteractionClassSubscriptionMessage(static_cast<ChangeInteractionClassSubscriptionMessage&>(*_message));
    break;
  case AttributeOwnershipRequestDivestMessage::OpCode:
    payloadDecoder.readPayloadAttributeOwnershipRequestDivestMessage(static_cast<AttributeOwnershipRequestDivestMessage&>(*_message));
    break;
  case AttributeOwnershipRequestAcquireMessage::OpCode:
    payloadDecoder.readPayloadAttributeOwnershipRequestAcquireMessage(static_cast<AttributeOwnershipRequestAcquireMessage&>(*_message));
    break;
  case InteractionMessage::OpCode:
    payloadDecoder.readPayloadInteractionMessage(static_cast<InteractionMessage&>(*_message));
    break;
  case TimeStampedInteractionMessage::OpCode:
    payloadDecoder.readPayloadTimeStampedInteractionMessage(static_cast<TimeStampedInteractionMessage&>(*_message));
    break;
  case DeleteObjectInstanceMessage::OpCode:
    payloadDecoder.readPayloadDeleteObjectInstanceMessage(static_cast<DeleteObjectInstanceMessage&>(*_message));
    break;
  case TimeStampedDeleteObjectInstanceMessage::OpCode:
    payloadDecoder.readPayloadTimeStampedDeleteObjectInstanceMessage(static_cast<TimeStampedDeleteObjectInstanceMessage&>(*_message));
    break;
  case AttributeUpdateMessage::OpCode:
    payloadDecoder.readPayloadAttributeUpdateMessage(static_cast<AttributeUpdateMessage&>(*_message));
    break;
  case TimeStampedAttributeUpdateMessage::OpCode:
    payloadDecoder.readPayloadTimeStampedAttributeUpdateMessage(static_cast<TimeStampedAttributeUpdateMessage&>(*_message));
    break;
  case RequestAttributeUpdateMessage::OpCode:
    payloadDecoder.readPayloadRequestAttributeUpdateMessage(static_cast<RequestAttributeUpdateMessage&>(*_message));
    break;
  case RequestClassAttributeUpdateMessage::OpCode:
    payloadDecoder.readPayloadRequestClassAttributeUpdateMessage(static_cast<RequestClassAttributeUpdateMessage&>(*_message));
    break;
  default:
    break;
  }
}

void
TightBE1MessageEncoding::writeMessage(const AbstractMessage& message)
{
  message.dispatchFunctor(DispatchFunctor(*this));
#ifdef ENABLE_NETWORKSTATISTICS
  GetNetworkStatistics().MessageSent(message.getTypeName());
#endif
}

} // namespace OpenRTI

