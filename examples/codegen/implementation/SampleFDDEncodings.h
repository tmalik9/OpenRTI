
// Code automatically generated by FOMCodeGen version 2.1.0.0 from SampleFDD.xml, do not edit

#pragma once

#include <vector>
#include <cstring>

#include "RTI/encoding/BasicDataElements.h"
#include "RTI/encoding/HLAfixedRecord.h"
#include "RTI/encoding/HLAfixedArray.h"
#include "RTI/encoding/HLAvariableArray.h"

#include "D:\vfs\OpenRTI-private\examples\codegen\interface/SampleFDDDataTypes.h"

namespace NDistSimIB {
namespace NSampleFDDEncoding {



// simple data type NanoSeconds
using NanoSecondsEncoding=rti1516ev::HLAinteger64LE;
// enumerated data type SimulationState
class SimulationStateEncoding : public rti1516ev::HLAoctet
{
  public:
    SimulationStateEncoding() : rti1516ev::HLAoctet() {}
    SimulationStateEncoding(SimulationState value) : rti1516ev::HLAoctet(static_cast<uint8_t>(value)) {}
    SimulationStateEncoding(const SimulationStateEncoding& ref) : rti1516ev::HLAoctet(ref) {}
    using rti1516ev::HLAoctet::get;
    SimulationState get() const { return static_cast<SimulationState>(rti1516ev::HLAoctet::get()); }
    using rti1516ev::HLAoctet::set;
    void set(SimulationState value) { rti1516ev::HLAoctet::set(static_cast<uint8_t>(value)); }
};

} // namespace NDistSimIB
} // namespace NSampleFDDEncoding

