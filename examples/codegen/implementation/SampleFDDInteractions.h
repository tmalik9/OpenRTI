
// Code automatically generated by FOMCodeGen version 2.1.0.0 from SampleFDD.xml, do not edit

#pragma once

#include <vector>
#include "RTI/Handle.h"
#include "RTI/RTIambassador.h"
#include "RTI/encoding/BasicDataElements.h"
#include "RTI/encoding/HLAfixedRecord.h"
#include "RTI/encoding/HLAfixedArray.h"
#include "RTI/encoding/HLAvariableArray.h"


#include "D:\vfs\OpenRTI-private\examples\codegen\interface/SampleFDDInteractionInterfaces.h"
#include "SampleFDDEncodings.h"

namespace NDistSimIB {
namespace NSampleFDDEncoding {

class InteractionClassRegistry;
class ObjectClassRegistry;

class HLAinteractionRoot;
class HLAinteractionRootInteractionClass : public IHLAinteractionRootInteractionClass
{
  public:
    // IHLAinteractionRootInteractionClass
    HLAinteractionRootInteractionClass() = default;
    virtual ~HLAinteractionRootInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    void Unsubscribe() override;
    void send() override;
    void sendWithTime(int64_t time) override;
    ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) override;
    void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAinteractionRootInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry);
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<ReceiveCallbackHandle, ReceiveCallback> mReceiveCallbacks;
    ReceiveCallbackHandle mReceiveCallbacksNextKey = 0;
};

class Start;
class StartInteractionClass : public IStartInteractionClass
{
  public:
    // IStartInteractionClass
    StartInteractionClass() = default;
    virtual ~StartInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    void Unsubscribe() override;
    void send() override;
    void sendWithTime(int64_t time) override;
    ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) override;
    void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    StartInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAinteractionRootInteractionClass* baseClass);
    // parameter Dummy : no data type
    rti1516ev::ParameterHandle GetDummyParameterHandle() const { return mDummyParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Dummy : no data type
    rti1516ev::ParameterHandle mDummyParameterHandle;
    std::map<ReceiveCallbackHandle, ReceiveCallback> mReceiveCallbacks;
    ReceiveCallbackHandle mReceiveCallbacksNextKey = 0;
};

class Stop;
class StopInteractionClass : public IStopInteractionClass
{
  public:
    // IStopInteractionClass
    StopInteractionClass() = default;
    virtual ~StopInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<std::wstring> NextFederationSuffix, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<std::wstring> NextFederationSuffix) override;
    void sendWithTime(optional<std::wstring> NextFederationSuffix, int64_t time) override;
    ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) override;
    void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    StopInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAinteractionRootInteractionClass* baseClass);
    // parameter NextFederationSuffix : HLAunicodeString
    rti1516ev::ParameterHandle GetNextFederationSuffixParameterHandle() const { return mNextFederationSuffixParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter NextFederationSuffix : HLAunicodeString
    rti1516ev::ParameterHandle mNextFederationSuffixParameterHandle;
    std::map<ReceiveCallbackHandle, ReceiveCallback> mReceiveCallbacks;
    ReceiveCallbackHandle mReceiveCallbacksNextKey = 0;
};

 

class ObjectClassRegistry;
class InteractionClassRegistry : public IInteractionClassRegistry
{
  public:
    InteractionClassRegistry(ObjectClassRegistry* objectClassRegistry);
    ~InteractionClassRegistry();
    ObjectClassRegistry* GetObjectClassRegistry() { return mObjectClassRegistry; }
    void Initialize(rti1516ev::RTIambassador* rtiAmbassador);
    void Finalize();

    IHLAinteractionRootInteractionClass* GetHLAinteractionRootInteractionClass() const override { return mHLAinteractionRootInteractionClass.get(); }
    IStartInteractionClass* GetStartInteractionClass() const override { return mStartInteractionClass.get(); }
    IStopInteractionClass* GetStopInteractionClass() const override { return mStopInteractionClass.get(); }

    void ReceiveInteraction(rti1516ev::InteractionClassHandle theInteraction, const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(rti1516ev::InteractionClassHandle theInteraction, const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime&, OrderType orderType);

  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    ObjectClassRegistry* mObjectClassRegistry;
    std::unique_ptr<HLAinteractionRootInteractionClass> mHLAinteractionRootInteractionClass;
    std::unique_ptr<StartInteractionClass> mStartInteractionClass;
    std::unique_ptr<StopInteractionClass> mStopInteractionClass;
    std::map<rti1516ev::InteractionClassHandle, std::function<void(const rti1516ev::ParameterHandleValueMap&)>> mReceiveCallbacks;
    std::map<rti1516ev::InteractionClassHandle, std::function<void(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime&, OrderType)>> mReceiveWithTimeCallbacks;
}; // class InteractionClassRegistry

} // namespace NDistSimIB
} // namespace NSampleFDDEncoding
