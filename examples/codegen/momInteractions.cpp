
// Code automatically generated by FOMCodeGen version 2.1.0.0 from mom.xml, do not edit

#include <vector>
#include <cassert>

#include "RTI/time/HLAinteger64Time.h"

#include "momInteractions.h"
#include "momObjects.h"

namespace OpenRTI {
namespace Mom {

inline std::string to_string(const std::wstring& str)
{
  if (str.empty()) return std::string();
  const std::ctype<wchar_t>& CType = std::use_facet<std::ctype<wchar_t> >(std::locale());
  std::vector<char> stringBuffer(str.length());
  CType.narrow(str.data(), str.data() + str.length(), '_', &stringBuffer[0]);
  return std::string(&stringBuffer[0], stringBuffer.size());
}

HLAinteractionRootInteractionClass::HLAinteractionRootInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAinteractionRootInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAinteractionRootInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAinteractionRootInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAinteractionRootInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLAinteractionRootInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAinteractionRootInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAinteractionRootInteractionClass::sendWithTime(int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAinteractionRootInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(optional<int64_t>(), optional<OrderType>());
  }
}

void HLAinteractionRootInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{

  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAinteractionRootInteractionClass::ReceiveCallbackHandle HLAinteractionRootInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAinteractionRootInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAinteractionRootInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLAmanager'
HLAmanagerInteractionClass::HLAmanagerInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAinteractionRootInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAmanagerInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAmanagerInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAmanagerInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAmanagerInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLAmanagerInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAmanagerInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAmanagerInteractionClass::sendWithTime(int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAmanagerInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(optional<int64_t>(), optional<OrderType>());
  }
}

void HLAmanagerInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{

  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAmanagerInteractionClass::ReceiveCallbackHandle HLAmanagerInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAmanagerInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAmanagerInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLAfederate'
HLAfederateInteractionClass::HLAfederateInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAmanagerInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate");
  // parameter HLAfederate : HLAhandle
  mHLAfederateParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAfederate");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAfederateInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAfederateInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAfederateInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAfederateInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAfederateInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAfederateInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAfederateInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAfederateInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAfederateInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAfederateInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAfederateInteractionClass::ReceiveCallbackHandle HLAfederateInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAfederateInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAfederateInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAadjust'
HLAadjustInteractionClass::HLAadjustInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAfederateInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAadjustInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAadjustInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAadjustInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAadjustInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLAadjustInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAadjustInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAadjustInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAadjustInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAadjustInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAadjustInteractionClass::ReceiveCallbackHandle HLAadjustInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAadjustInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAadjustInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAsetTiming'
HLAsetTimingInteractionClass::HLAsetTimingInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAadjustInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAsetTiming");
  // parameter HLAreportPeriod : HLAseconds
  mHLAreportPeriodParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAreportPeriod");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAsetTimingInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAsetTimingInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsetTimingInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsetTimingInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAsetTimingInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAseconds> HLAreportPeriod, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAreportPeriod)
  {
    rti1516ev::HLAinteger32BE HLAreportPeriodEncoder(*HLAreportPeriod);
    parameters.insert(std::make_pair(GetHLAreportPeriodParameterHandle(), HLAreportPeriodEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAsetTimingInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsetTimingInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAseconds> HLAreportPeriod)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAreportPeriod)
  {
    rti1516ev::HLAinteger32BE HLAreportPeriodEncoder(*HLAreportPeriod);
    parameters.insert(std::make_pair(GetHLAreportPeriodParameterHandle(), HLAreportPeriodEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsetTimingInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAseconds> HLAreportPeriod, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAreportPeriod)
  {
    rti1516ev::HLAinteger32BE HLAreportPeriodEncoder(*HLAreportPeriod);
    parameters.insert(std::make_pair(GetHLAreportPeriodParameterHandle(), HLAreportPeriodEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsetTimingInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAseconds> HLAreportPeriod;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAinteger32BE HLAreportPeriodDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreportPeriodIter = parameters.find(GetHLAreportPeriodParameterHandle());
  if (HLAreportPeriodIter != parameters.end())
  {
    HLAreportPeriodDecoder.decode(HLAreportPeriodIter->second);
    HLAreportPeriod = HLAreportPeriodDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAreportPeriod, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAsetTimingInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAseconds> HLAreportPeriod;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAinteger32BE HLAreportPeriodDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreportPeriodIter = parameters.find(GetHLAreportPeriodParameterHandle());
  if (HLAreportPeriodIter != parameters.end())
  {
    HLAreportPeriodDecoder.decode(HLAreportPeriodIter->second);
    HLAreportPeriod = HLAreportPeriodDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAreportPeriod, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAsetTimingInteractionClass::ReceiveCallbackHandle HLAsetTimingInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAsetTimingInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAsetTimingInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAreportPeriodParameterHandle());
  return result;
}

// object class type 'HLAmodifyAttributeState'
HLAmodifyAttributeStateInteractionClass::HLAmodifyAttributeStateInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAadjustInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAmodifyAttributeState");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
  // parameter HLAattribute : HLAhandle
  mHLAattributeParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattribute");
  // parameter HLAattributeState : HLAownership
  mHLAattributeStateParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeState");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAmodifyAttributeStateInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAmodifyAttributeStateInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAmodifyAttributeStateInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAmodifyAttributeStateInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAmodifyAttributeStateInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<rti1516ev::HLAhandle> HLAattribute, optional<HLAownership> HLAattributeState, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAattribute)
  {
    rti1516ev::HLAhandle HLAattributeEncoder(*HLAattribute);
    parameters.insert(std::make_pair(GetHLAattributeParameterHandle(), HLAattributeEncoder.encode()));
  }
  if (HLAattributeState)
  {
    rti1516ev::HLAinteger32BE HLAattributeStateEncoder(static_cast<int32_t>(*HLAattributeState));
    parameters.insert(std::make_pair(GetHLAattributeStateParameterHandle(), HLAattributeStateEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAmodifyAttributeStateInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAmodifyAttributeStateInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<rti1516ev::HLAhandle> HLAattribute, optional<HLAownership> HLAattributeState)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAattribute)
  {
    rti1516ev::HLAhandle HLAattributeEncoder(*HLAattribute);
    parameters.insert(std::make_pair(GetHLAattributeParameterHandle(), HLAattributeEncoder.encode()));
  }
  if (HLAattributeState)
  {
    rti1516ev::HLAinteger32BE HLAattributeStateEncoder(static_cast<int32_t>(*HLAattributeState));
    parameters.insert(std::make_pair(GetHLAattributeStateParameterHandle(), HLAattributeStateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAmodifyAttributeStateInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<rti1516ev::HLAhandle> HLAattribute, optional<HLAownership> HLAattributeState, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAattribute)
  {
    rti1516ev::HLAhandle HLAattributeEncoder(*HLAattribute);
    parameters.insert(std::make_pair(GetHLAattributeParameterHandle(), HLAattributeEncoder.encode()));
  }
  if (HLAattributeState)
  {
    rti1516ev::HLAinteger32BE HLAattributeStateEncoder(static_cast<int32_t>(*HLAattributeState));
    parameters.insert(std::make_pair(GetHLAattributeStateParameterHandle(), HLAattributeStateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAmodifyAttributeStateInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;
  optional<rti1516ev::HLAhandle> HLAattribute;
  optional<HLAownership> HLAattributeState;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  rti1516ev::HLAhandle HLAattributeDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeIter = parameters.find(GetHLAattributeParameterHandle());
  if (HLAattributeIter != parameters.end())
  {
    HLAattributeDecoder.decode(HLAattributeIter->second);
    HLAattribute = HLAattributeDecoder;
  }
  rti1516ev::HLAinteger32BE HLAattributeStateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeStateIter = parameters.find(GetHLAattributeStateParameterHandle());
  if (HLAattributeStateIter != parameters.end())
  {
    HLAattributeStateDecoder.decode(HLAattributeStateIter->second);
    HLAattributeState = static_cast<HLAownership>(HLAattributeStateDecoder.get());
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, HLAattribute, HLAattributeState, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAmodifyAttributeStateInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;
  optional<rti1516ev::HLAhandle> HLAattribute;
  optional<HLAownership> HLAattributeState;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  rti1516ev::HLAhandle HLAattributeDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeIter = parameters.find(GetHLAattributeParameterHandle());
  if (HLAattributeIter != parameters.end())
  {
    HLAattributeDecoder.decode(HLAattributeIter->second);
    HLAattribute = HLAattributeDecoder;
  }
  rti1516ev::HLAinteger32BE HLAattributeStateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeStateIter = parameters.find(GetHLAattributeStateParameterHandle());
  if (HLAattributeStateIter != parameters.end())
  {
    HLAattributeStateDecoder.decode(HLAattributeStateIter->second);
    HLAattributeState = static_cast<HLAownership>(HLAattributeStateDecoder.get());
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, HLAattribute, HLAattributeState, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAmodifyAttributeStateInteractionClass::ReceiveCallbackHandle HLAmodifyAttributeStateInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAmodifyAttributeStateInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAmodifyAttributeStateInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  result.insert(GetHLAattributeParameterHandle());
  result.insert(GetHLAattributeStateParameterHandle());
  return result;
}

// object class type 'HLAsetServiceReporting'
HLAsetServiceReportingInteractionClass::HLAsetServiceReportingInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAadjustInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAsetServiceReporting");
  // parameter HLAreportingState : HLAboolean
  mHLAreportingStateParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAreportingState");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAsetServiceReportingInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAsetServiceReportingInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsetServiceReportingInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsetServiceReportingInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAsetServiceReportingInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAreportingState, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAreportingState)
  {
    rti1516ev::HLAboolean HLAreportingStateEncoder(*HLAreportingState);
    parameters.insert(std::make_pair(GetHLAreportingStateParameterHandle(), HLAreportingStateEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAsetServiceReportingInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsetServiceReportingInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAreportingState)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAreportingState)
  {
    rti1516ev::HLAboolean HLAreportingStateEncoder(*HLAreportingState);
    parameters.insert(std::make_pair(GetHLAreportingStateParameterHandle(), HLAreportingStateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsetServiceReportingInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAreportingState, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAreportingState)
  {
    rti1516ev::HLAboolean HLAreportingStateEncoder(*HLAreportingState);
    parameters.insert(std::make_pair(GetHLAreportingStateParameterHandle(), HLAreportingStateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsetServiceReportingInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<bool> HLAreportingState;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAboolean HLAreportingStateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreportingStateIter = parameters.find(GetHLAreportingStateParameterHandle());
  if (HLAreportingStateIter != parameters.end())
  {
    HLAreportingStateDecoder.decode(HLAreportingStateIter->second);
    HLAreportingState = HLAreportingStateDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAreportingState, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAsetServiceReportingInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<bool> HLAreportingState;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAboolean HLAreportingStateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreportingStateIter = parameters.find(GetHLAreportingStateParameterHandle());
  if (HLAreportingStateIter != parameters.end())
  {
    HLAreportingStateDecoder.decode(HLAreportingStateIter->second);
    HLAreportingState = HLAreportingStateDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAreportingState, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAsetServiceReportingInteractionClass::ReceiveCallbackHandle HLAsetServiceReportingInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAsetServiceReportingInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAsetServiceReportingInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAreportingStateParameterHandle());
  return result;
}

// object class type 'HLAsetExceptionReporting'
HLAsetExceptionReportingInteractionClass::HLAsetExceptionReportingInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAadjustInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAsetExceptionReporting");
  // parameter HLAreportingState : HLAboolean
  mHLAreportingStateParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAreportingState");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAsetExceptionReportingInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAsetExceptionReportingInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsetExceptionReportingInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsetExceptionReportingInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAsetExceptionReportingInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAreportingState, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAreportingState)
  {
    rti1516ev::HLAboolean HLAreportingStateEncoder(*HLAreportingState);
    parameters.insert(std::make_pair(GetHLAreportingStateParameterHandle(), HLAreportingStateEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAsetExceptionReportingInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsetExceptionReportingInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAreportingState)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAreportingState)
  {
    rti1516ev::HLAboolean HLAreportingStateEncoder(*HLAreportingState);
    parameters.insert(std::make_pair(GetHLAreportingStateParameterHandle(), HLAreportingStateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsetExceptionReportingInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAreportingState, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAreportingState)
  {
    rti1516ev::HLAboolean HLAreportingStateEncoder(*HLAreportingState);
    parameters.insert(std::make_pair(GetHLAreportingStateParameterHandle(), HLAreportingStateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsetExceptionReportingInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<bool> HLAreportingState;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAboolean HLAreportingStateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreportingStateIter = parameters.find(GetHLAreportingStateParameterHandle());
  if (HLAreportingStateIter != parameters.end())
  {
    HLAreportingStateDecoder.decode(HLAreportingStateIter->second);
    HLAreportingState = HLAreportingStateDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAreportingState, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAsetExceptionReportingInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<bool> HLAreportingState;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAboolean HLAreportingStateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreportingStateIter = parameters.find(GetHLAreportingStateParameterHandle());
  if (HLAreportingStateIter != parameters.end())
  {
    HLAreportingStateDecoder.decode(HLAreportingStateIter->second);
    HLAreportingState = HLAreportingStateDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAreportingState, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAsetExceptionReportingInteractionClass::ReceiveCallbackHandle HLAsetExceptionReportingInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAsetExceptionReportingInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAsetExceptionReportingInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAreportingStateParameterHandle());
  return result;
}

// object class type 'HLAsetSwitches'
HLAsetSwitchesInteractionClass::HLAsetSwitchesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAadjustInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAsetSwitches");
  // parameter HLAconveyRegionDesignatorSets : HLAswitch
  mHLAconveyRegionDesignatorSetsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAconveyRegionDesignatorSets");
  // parameter HLAconveyProducingFederate : HLAswitch
  mHLAconveyProducingFederateParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAconveyProducingFederate");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAsetSwitchesInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAsetSwitchesInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsetSwitchesInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsetSwitchesInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAsetSwitchesInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAswitch> HLAconveyRegionDesignatorSets, optional<HLAswitch> HLAconveyProducingFederate, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAconveyRegionDesignatorSets)
  {
    rti1516ev::HLAinteger32BE HLAconveyRegionDesignatorSetsEncoder(static_cast<int32_t>(*HLAconveyRegionDesignatorSets));
    parameters.insert(std::make_pair(GetHLAconveyRegionDesignatorSetsParameterHandle(), HLAconveyRegionDesignatorSetsEncoder.encode()));
  }
  if (HLAconveyProducingFederate)
  {
    rti1516ev::HLAinteger32BE HLAconveyProducingFederateEncoder(static_cast<int32_t>(*HLAconveyProducingFederate));
    parameters.insert(std::make_pair(GetHLAconveyProducingFederateParameterHandle(), HLAconveyProducingFederateEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAsetSwitchesInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsetSwitchesInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAswitch> HLAconveyRegionDesignatorSets, optional<HLAswitch> HLAconveyProducingFederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAconveyRegionDesignatorSets)
  {
    rti1516ev::HLAinteger32BE HLAconveyRegionDesignatorSetsEncoder(static_cast<int32_t>(*HLAconveyRegionDesignatorSets));
    parameters.insert(std::make_pair(GetHLAconveyRegionDesignatorSetsParameterHandle(), HLAconveyRegionDesignatorSetsEncoder.encode()));
  }
  if (HLAconveyProducingFederate)
  {
    rti1516ev::HLAinteger32BE HLAconveyProducingFederateEncoder(static_cast<int32_t>(*HLAconveyProducingFederate));
    parameters.insert(std::make_pair(GetHLAconveyProducingFederateParameterHandle(), HLAconveyProducingFederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsetSwitchesInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAswitch> HLAconveyRegionDesignatorSets, optional<HLAswitch> HLAconveyProducingFederate, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAconveyRegionDesignatorSets)
  {
    rti1516ev::HLAinteger32BE HLAconveyRegionDesignatorSetsEncoder(static_cast<int32_t>(*HLAconveyRegionDesignatorSets));
    parameters.insert(std::make_pair(GetHLAconveyRegionDesignatorSetsParameterHandle(), HLAconveyRegionDesignatorSetsEncoder.encode()));
  }
  if (HLAconveyProducingFederate)
  {
    rti1516ev::HLAinteger32BE HLAconveyProducingFederateEncoder(static_cast<int32_t>(*HLAconveyProducingFederate));
    parameters.insert(std::make_pair(GetHLAconveyProducingFederateParameterHandle(), HLAconveyProducingFederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsetSwitchesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAswitch> HLAconveyRegionDesignatorSets;
  optional<HLAswitch> HLAconveyProducingFederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAinteger32BE HLAconveyRegionDesignatorSetsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAconveyRegionDesignatorSetsIter = parameters.find(GetHLAconveyRegionDesignatorSetsParameterHandle());
  if (HLAconveyRegionDesignatorSetsIter != parameters.end())
  {
    HLAconveyRegionDesignatorSetsDecoder.decode(HLAconveyRegionDesignatorSetsIter->second);
    HLAconveyRegionDesignatorSets = static_cast<HLAswitch>(HLAconveyRegionDesignatorSetsDecoder.get());
  }
  rti1516ev::HLAinteger32BE HLAconveyProducingFederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAconveyProducingFederateIter = parameters.find(GetHLAconveyProducingFederateParameterHandle());
  if (HLAconveyProducingFederateIter != parameters.end())
  {
    HLAconveyProducingFederateDecoder.decode(HLAconveyProducingFederateIter->second);
    HLAconveyProducingFederate = static_cast<HLAswitch>(HLAconveyProducingFederateDecoder.get());
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAconveyRegionDesignatorSets, HLAconveyProducingFederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAsetSwitchesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAswitch> HLAconveyRegionDesignatorSets;
  optional<HLAswitch> HLAconveyProducingFederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAinteger32BE HLAconveyRegionDesignatorSetsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAconveyRegionDesignatorSetsIter = parameters.find(GetHLAconveyRegionDesignatorSetsParameterHandle());
  if (HLAconveyRegionDesignatorSetsIter != parameters.end())
  {
    HLAconveyRegionDesignatorSetsDecoder.decode(HLAconveyRegionDesignatorSetsIter->second);
    HLAconveyRegionDesignatorSets = static_cast<HLAswitch>(HLAconveyRegionDesignatorSetsDecoder.get());
  }
  rti1516ev::HLAinteger32BE HLAconveyProducingFederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAconveyProducingFederateIter = parameters.find(GetHLAconveyProducingFederateParameterHandle());
  if (HLAconveyProducingFederateIter != parameters.end())
  {
    HLAconveyProducingFederateDecoder.decode(HLAconveyProducingFederateIter->second);
    HLAconveyProducingFederate = static_cast<HLAswitch>(HLAconveyProducingFederateDecoder.get());
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAconveyRegionDesignatorSets, HLAconveyProducingFederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAsetSwitchesInteractionClass::ReceiveCallbackHandle HLAsetSwitchesInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAsetSwitchesInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAsetSwitchesInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAconveyRegionDesignatorSetsParameterHandle());
  result.insert(GetHLAconveyProducingFederateParameterHandle());
  return result;
}

// object class type 'HLArequest'
HLArequestInteractionClass::HLArequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAfederateInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLArequestInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestInteractionClass::ReceiveCallbackHandle HLArequestInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestPublications'
HLArequestPublicationsInteractionClass::HLArequestPublicationsInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestPublications");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestPublicationsInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestPublicationsInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestPublicationsInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestPublicationsInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLArequestPublicationsInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestPublicationsInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestPublicationsInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestPublicationsInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestPublicationsInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestPublicationsInteractionClass::ReceiveCallbackHandle HLArequestPublicationsInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestPublicationsInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestPublicationsInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestSubscriptions'
HLArequestSubscriptionsInteractionClass::HLArequestSubscriptionsInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestSubscriptions");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestSubscriptionsInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestSubscriptionsInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestSubscriptionsInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestSubscriptionsInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLArequestSubscriptionsInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestSubscriptionsInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestSubscriptionsInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestSubscriptionsInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestSubscriptionsInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestSubscriptionsInteractionClass::ReceiveCallbackHandle HLArequestSubscriptionsInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestSubscriptionsInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestSubscriptionsInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestObjectInstancesThatCanBeDeleted'
HLArequestObjectInstancesThatCanBeDeletedInteractionClass::HLArequestObjectInstancesThatCanBeDeletedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestObjectInstancesThatCanBeDeleted");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestObjectInstancesThatCanBeDeletedInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestObjectInstancesThatCanBeDeletedInteractionClass::ReceiveCallbackHandle HLArequestObjectInstancesThatCanBeDeletedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestObjectInstancesThatCanBeDeletedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestObjectInstancesUpdated'
HLArequestObjectInstancesUpdatedInteractionClass::HLArequestObjectInstancesUpdatedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestObjectInstancesUpdated");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestObjectInstancesUpdatedInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestObjectInstancesUpdatedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestObjectInstancesUpdatedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestObjectInstancesUpdatedInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLArequestObjectInstancesUpdatedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestObjectInstancesUpdatedInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestObjectInstancesUpdatedInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestObjectInstancesUpdatedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestObjectInstancesUpdatedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestObjectInstancesUpdatedInteractionClass::ReceiveCallbackHandle HLArequestObjectInstancesUpdatedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestObjectInstancesUpdatedInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestObjectInstancesUpdatedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestObjectInstancesReflected'
HLArequestObjectInstancesReflectedInteractionClass::HLArequestObjectInstancesReflectedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestObjectInstancesReflected");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestObjectInstancesReflectedInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestObjectInstancesReflectedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestObjectInstancesReflectedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestObjectInstancesReflectedInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLArequestObjectInstancesReflectedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestObjectInstancesReflectedInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestObjectInstancesReflectedInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestObjectInstancesReflectedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestObjectInstancesReflectedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestObjectInstancesReflectedInteractionClass::ReceiveCallbackHandle HLArequestObjectInstancesReflectedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestObjectInstancesReflectedInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestObjectInstancesReflectedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestUpdatesSent'
HLArequestUpdatesSentInteractionClass::HLArequestUpdatesSentInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestUpdatesSent");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestUpdatesSentInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestUpdatesSentInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestUpdatesSentInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestUpdatesSentInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLArequestUpdatesSentInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestUpdatesSentInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestUpdatesSentInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestUpdatesSentInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestUpdatesSentInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestUpdatesSentInteractionClass::ReceiveCallbackHandle HLArequestUpdatesSentInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestUpdatesSentInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestUpdatesSentInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestInteractionsSent'
HLArequestInteractionsSentInteractionClass::HLArequestInteractionsSentInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestInteractionsSent");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestInteractionsSentInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestInteractionsSentInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestInteractionsSentInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestInteractionsSentInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLArequestInteractionsSentInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestInteractionsSentInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestInteractionsSentInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestInteractionsSentInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestInteractionsSentInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestInteractionsSentInteractionClass::ReceiveCallbackHandle HLArequestInteractionsSentInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestInteractionsSentInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestInteractionsSentInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestReflectionsReceived'
HLArequestReflectionsReceivedInteractionClass::HLArequestReflectionsReceivedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestReflectionsReceived");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestReflectionsReceivedInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestReflectionsReceivedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestReflectionsReceivedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestReflectionsReceivedInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLArequestReflectionsReceivedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestReflectionsReceivedInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestReflectionsReceivedInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestReflectionsReceivedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestReflectionsReceivedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestReflectionsReceivedInteractionClass::ReceiveCallbackHandle HLArequestReflectionsReceivedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestReflectionsReceivedInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestReflectionsReceivedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestInteractionsReceived'
HLArequestInteractionsReceivedInteractionClass::HLArequestInteractionsReceivedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestInteractionsReceived");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestInteractionsReceivedInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestInteractionsReceivedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestInteractionsReceivedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestInteractionsReceivedInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLArequestInteractionsReceivedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestInteractionsReceivedInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestInteractionsReceivedInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestInteractionsReceivedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestInteractionsReceivedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestInteractionsReceivedInteractionClass::ReceiveCallbackHandle HLArequestInteractionsReceivedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestInteractionsReceivedInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestInteractionsReceivedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestObjectInstanceInformation'
HLArequestObjectInstanceInformationInteractionClass::HLArequestObjectInstanceInformationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestObjectInstanceInformation");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestObjectInstanceInformationInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestObjectInstanceInformationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestObjectInstanceInformationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestObjectInstanceInformationInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLArequestObjectInstanceInformationInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLArequestObjectInstanceInformationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestObjectInstanceInformationInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestObjectInstanceInformationInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestObjectInstanceInformationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestObjectInstanceInformationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestObjectInstanceInformationInteractionClass::ReceiveCallbackHandle HLArequestObjectInstanceInformationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestObjectInstanceInformationInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestObjectInstanceInformationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  return result;
}

// object class type 'HLArequestFOMmoduleData'
HLArequestFOMmoduleDataInteractionClass::HLArequestFOMmoduleDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestFOMmoduleData");
  // parameter HLAFOMmoduleIndicator : HLAindex
  mHLAFOMmoduleIndicatorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAFOMmoduleIndicator");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestFOMmoduleDataInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestFOMmoduleDataInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestFOMmoduleDataInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestFOMmoduleDataInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLArequestFOMmoduleDataInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAindex> HLAFOMmoduleIndicator, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAFOMmoduleIndicator)
  {
    rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(*HLAFOMmoduleIndicator);
    parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLArequestFOMmoduleDataInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestFOMmoduleDataInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAindex> HLAFOMmoduleIndicator)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAFOMmoduleIndicator)
  {
    rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(*HLAFOMmoduleIndicator);
    parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestFOMmoduleDataInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAindex> HLAFOMmoduleIndicator, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAFOMmoduleIndicator)
  {
    rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(*HLAFOMmoduleIndicator);
    parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestFOMmoduleDataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAindex> HLAFOMmoduleIndicator;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleIndicatorIter = parameters.find(GetHLAFOMmoduleIndicatorParameterHandle());
  if (HLAFOMmoduleIndicatorIter != parameters.end())
  {
    HLAFOMmoduleIndicatorDecoder.decode(HLAFOMmoduleIndicatorIter->second);
    HLAFOMmoduleIndicator = HLAFOMmoduleIndicatorDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAFOMmoduleIndicator, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestFOMmoduleDataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAindex> HLAFOMmoduleIndicator;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleIndicatorIter = parameters.find(GetHLAFOMmoduleIndicatorParameterHandle());
  if (HLAFOMmoduleIndicatorIter != parameters.end())
  {
    HLAFOMmoduleIndicatorDecoder.decode(HLAFOMmoduleIndicatorIter->second);
    HLAFOMmoduleIndicator = HLAFOMmoduleIndicatorDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAFOMmoduleIndicator, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestFOMmoduleDataInteractionClass::ReceiveCallbackHandle HLArequestFOMmoduleDataInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestFOMmoduleDataInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestFOMmoduleDataInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAFOMmoduleIndicatorParameterHandle());
  return result;
}

// object class type 'HLAreport'
HLAreportInteractionClass::HLAreportInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAfederateInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLAreportInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportInteractionClass::ReceiveCallbackHandle HLAreportInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAreportObjectClassPublication'
HLAreportObjectClassPublicationInteractionClass::HLAreportObjectClassPublicationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectClassPublication");
  // parameter HLAnumberOfClasses : HLAcount
  mHLAnumberOfClassesParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAnumberOfClasses");
  // parameter HLAobjectClass : HLAhandle
  mHLAobjectClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectClass");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportObjectClassPublicationInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportObjectClassPublicationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportObjectClassPublicationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportObjectClassPublicationInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportObjectClassPublicationInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAcount> HLAnumberOfClasses, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAnumberOfClasses)
  {
    rti1516ev::HLAinteger32BE HLAnumberOfClassesEncoder(*HLAnumberOfClasses);
    parameters.insert(std::make_pair(GetHLAnumberOfClassesParameterHandle(), HLAnumberOfClassesEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportObjectClassPublicationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportObjectClassPublicationInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAcount> HLAnumberOfClasses, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAnumberOfClasses)
  {
    rti1516ev::HLAinteger32BE HLAnumberOfClassesEncoder(*HLAnumberOfClasses);
    parameters.insert(std::make_pair(GetHLAnumberOfClassesParameterHandle(), HLAnumberOfClassesEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportObjectClassPublicationInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAcount> HLAnumberOfClasses, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAnumberOfClasses)
  {
    rti1516ev::HLAinteger32BE HLAnumberOfClassesEncoder(*HLAnumberOfClasses);
    parameters.insert(std::make_pair(GetHLAnumberOfClassesParameterHandle(), HLAnumberOfClassesEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportObjectClassPublicationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAcount> HLAnumberOfClasses;
  optional<rti1516ev::HLAhandle> HLAobjectClass;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAinteger32BE HLAnumberOfClassesDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAnumberOfClassesIter = parameters.find(GetHLAnumberOfClassesParameterHandle());
  if (HLAnumberOfClassesIter != parameters.end())
  {
    HLAnumberOfClassesDecoder.decode(HLAnumberOfClassesIter->second);
    HLAnumberOfClasses = HLAnumberOfClassesDecoder.get();
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
    HLAobjectClass = HLAobjectClassDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAnumberOfClasses, HLAobjectClass, HLAattributeList, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportObjectClassPublicationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAcount> HLAnumberOfClasses;
  optional<rti1516ev::HLAhandle> HLAobjectClass;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAinteger32BE HLAnumberOfClassesDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAnumberOfClassesIter = parameters.find(GetHLAnumberOfClassesParameterHandle());
  if (HLAnumberOfClassesIter != parameters.end())
  {
    HLAnumberOfClassesDecoder.decode(HLAnumberOfClassesIter->second);
    HLAnumberOfClasses = HLAnumberOfClassesDecoder.get();
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
    HLAobjectClass = HLAobjectClassDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAnumberOfClasses, HLAobjectClass, HLAattributeList, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportObjectClassPublicationInteractionClass::ReceiveCallbackHandle HLAreportObjectClassPublicationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportObjectClassPublicationInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportObjectClassPublicationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAnumberOfClassesParameterHandle());
  result.insert(GetHLAobjectClassParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  return result;
}

// object class type 'HLAreportInteractionPublication'
HLAreportInteractionPublicationInteractionClass::HLAreportInteractionPublicationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportInteractionPublication");
  // parameter HLAinteractionClassList : HLAhandleList
  mHLAinteractionClassListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClassList");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportInteractionPublicationInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportInteractionPublicationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportInteractionPublicationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportInteractionPublicationInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportInteractionPublicationInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<rti1516ev::HLAhandle>&> HLAinteractionClassList, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClassList)
  {
    const HLAhandleListEncoding& HLAinteractionClassListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAinteractionClassList);
    parameters.insert(std::make_pair(GetHLAinteractionClassListParameterHandle(), HLAinteractionClassListEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportInteractionPublicationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportInteractionPublicationInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<rti1516ev::HLAhandle>&> HLAinteractionClassList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClassList)
  {
    const HLAhandleListEncoding& HLAinteractionClassListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAinteractionClassList);
    parameters.insert(std::make_pair(GetHLAinteractionClassListParameterHandle(), HLAinteractionClassListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportInteractionPublicationInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<rti1516ev::HLAhandle>&> HLAinteractionClassList, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClassList)
  {
    const HLAhandleListEncoding& HLAinteractionClassListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAinteractionClassList);
    parameters.insert(std::make_pair(GetHLAinteractionClassListParameterHandle(), HLAinteractionClassListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportInteractionPublicationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAinteractionClassList;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAhandleListEncoding HLAinteractionClassListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassListIter = parameters.find(GetHLAinteractionClassListParameterHandle());
  if (HLAinteractionClassListIter != parameters.end())
  {
    HLAinteractionClassListDecoder.decode(HLAinteractionClassListIter->second);
    HLAinteractionClassList = HLAinteractionClassListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClassList, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportInteractionPublicationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAinteractionClassList;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAhandleListEncoding HLAinteractionClassListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassListIter = parameters.find(GetHLAinteractionClassListParameterHandle());
  if (HLAinteractionClassListIter != parameters.end())
  {
    HLAinteractionClassListDecoder.decode(HLAinteractionClassListIter->second);
    HLAinteractionClassList = HLAinteractionClassListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClassList, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportInteractionPublicationInteractionClass::ReceiveCallbackHandle HLAreportInteractionPublicationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportInteractionPublicationInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportInteractionPublicationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassListParameterHandle());
  return result;
}

// object class type 'HLAreportObjectClassSubscription'
HLAreportObjectClassSubscriptionInteractionClass::HLAreportObjectClassSubscriptionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectClassSubscription");
  // parameter HLAnumberOfClasses : HLAcount
  mHLAnumberOfClassesParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAnumberOfClasses");
  // parameter HLAobjectClass : HLAhandle
  mHLAobjectClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectClass");
  // parameter HLAactive : HLAboolean
  mHLAactiveParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAactive");
  // parameter HLAmaxUpdateRate : HLAupdateRateName
  mHLAmaxUpdateRateParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAmaxUpdateRate");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportObjectClassSubscriptionInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportObjectClassSubscriptionInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportObjectClassSubscriptionInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportObjectClassSubscriptionInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportObjectClassSubscriptionInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAcount> HLAnumberOfClasses, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<bool> HLAactive, optional<HLAupdateRateName> HLAmaxUpdateRate, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAnumberOfClasses)
  {
    rti1516ev::HLAinteger32BE HLAnumberOfClassesEncoder(*HLAnumberOfClasses);
    parameters.insert(std::make_pair(GetHLAnumberOfClassesParameterHandle(), HLAnumberOfClassesEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAactive)
  {
    rti1516ev::HLAboolean HLAactiveEncoder(*HLAactive);
    parameters.insert(std::make_pair(GetHLAactiveParameterHandle(), HLAactiveEncoder.encode()));
  }
  if (HLAmaxUpdateRate)
  {
    rti1516ev::HLAunicodeString HLAmaxUpdateRateEncoder(*HLAmaxUpdateRate);
    parameters.insert(std::make_pair(GetHLAmaxUpdateRateParameterHandle(), HLAmaxUpdateRateEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportObjectClassSubscriptionInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportObjectClassSubscriptionInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAcount> HLAnumberOfClasses, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<bool> HLAactive, optional<HLAupdateRateName> HLAmaxUpdateRate, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAnumberOfClasses)
  {
    rti1516ev::HLAinteger32BE HLAnumberOfClassesEncoder(*HLAnumberOfClasses);
    parameters.insert(std::make_pair(GetHLAnumberOfClassesParameterHandle(), HLAnumberOfClassesEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAactive)
  {
    rti1516ev::HLAboolean HLAactiveEncoder(*HLAactive);
    parameters.insert(std::make_pair(GetHLAactiveParameterHandle(), HLAactiveEncoder.encode()));
  }
  if (HLAmaxUpdateRate)
  {
    rti1516ev::HLAunicodeString HLAmaxUpdateRateEncoder(*HLAmaxUpdateRate);
    parameters.insert(std::make_pair(GetHLAmaxUpdateRateParameterHandle(), HLAmaxUpdateRateEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportObjectClassSubscriptionInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAcount> HLAnumberOfClasses, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<bool> HLAactive, optional<HLAupdateRateName> HLAmaxUpdateRate, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAnumberOfClasses)
  {
    rti1516ev::HLAinteger32BE HLAnumberOfClassesEncoder(*HLAnumberOfClasses);
    parameters.insert(std::make_pair(GetHLAnumberOfClassesParameterHandle(), HLAnumberOfClassesEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAactive)
  {
    rti1516ev::HLAboolean HLAactiveEncoder(*HLAactive);
    parameters.insert(std::make_pair(GetHLAactiveParameterHandle(), HLAactiveEncoder.encode()));
  }
  if (HLAmaxUpdateRate)
  {
    rti1516ev::HLAunicodeString HLAmaxUpdateRateEncoder(*HLAmaxUpdateRate);
    parameters.insert(std::make_pair(GetHLAmaxUpdateRateParameterHandle(), HLAmaxUpdateRateEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportObjectClassSubscriptionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAcount> HLAnumberOfClasses;
  optional<rti1516ev::HLAhandle> HLAobjectClass;
  optional<bool> HLAactive;
  optional<HLAupdateRateName> HLAmaxUpdateRate;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAinteger32BE HLAnumberOfClassesDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAnumberOfClassesIter = parameters.find(GetHLAnumberOfClassesParameterHandle());
  if (HLAnumberOfClassesIter != parameters.end())
  {
    HLAnumberOfClassesDecoder.decode(HLAnumberOfClassesIter->second);
    HLAnumberOfClasses = HLAnumberOfClassesDecoder.get();
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
    HLAobjectClass = HLAobjectClassDecoder;
  }
  rti1516ev::HLAboolean HLAactiveDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAactiveIter = parameters.find(GetHLAactiveParameterHandle());
  if (HLAactiveIter != parameters.end())
  {
    HLAactiveDecoder.decode(HLAactiveIter->second);
    HLAactive = HLAactiveDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAmaxUpdateRateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAmaxUpdateRateIter = parameters.find(GetHLAmaxUpdateRateParameterHandle());
  if (HLAmaxUpdateRateIter != parameters.end())
  {
    HLAmaxUpdateRateDecoder.decode(HLAmaxUpdateRateIter->second);
    HLAmaxUpdateRate = HLAmaxUpdateRateDecoder.get();
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAnumberOfClasses, HLAobjectClass, HLAactive, HLAmaxUpdateRate, HLAattributeList, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportObjectClassSubscriptionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAcount> HLAnumberOfClasses;
  optional<rti1516ev::HLAhandle> HLAobjectClass;
  optional<bool> HLAactive;
  optional<HLAupdateRateName> HLAmaxUpdateRate;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAinteger32BE HLAnumberOfClassesDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAnumberOfClassesIter = parameters.find(GetHLAnumberOfClassesParameterHandle());
  if (HLAnumberOfClassesIter != parameters.end())
  {
    HLAnumberOfClassesDecoder.decode(HLAnumberOfClassesIter->second);
    HLAnumberOfClasses = HLAnumberOfClassesDecoder.get();
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
    HLAobjectClass = HLAobjectClassDecoder;
  }
  rti1516ev::HLAboolean HLAactiveDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAactiveIter = parameters.find(GetHLAactiveParameterHandle());
  if (HLAactiveIter != parameters.end())
  {
    HLAactiveDecoder.decode(HLAactiveIter->second);
    HLAactive = HLAactiveDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAmaxUpdateRateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAmaxUpdateRateIter = parameters.find(GetHLAmaxUpdateRateParameterHandle());
  if (HLAmaxUpdateRateIter != parameters.end())
  {
    HLAmaxUpdateRateDecoder.decode(HLAmaxUpdateRateIter->second);
    HLAmaxUpdateRate = HLAmaxUpdateRateDecoder.get();
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAnumberOfClasses, HLAobjectClass, HLAactive, HLAmaxUpdateRate, HLAattributeList, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportObjectClassSubscriptionInteractionClass::ReceiveCallbackHandle HLAreportObjectClassSubscriptionInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportObjectClassSubscriptionInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportObjectClassSubscriptionInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAnumberOfClassesParameterHandle());
  result.insert(GetHLAobjectClassParameterHandle());
  result.insert(GetHLAactiveParameterHandle());
  result.insert(GetHLAmaxUpdateRateParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  return result;
}

// object class type 'HLAreportInteractionSubscription'
HLAreportInteractionSubscriptionInteractionClass::HLAreportInteractionSubscriptionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportInteractionSubscription");
  // parameter HLAinteractionClassList : HLAinteractionSubList
  mHLAinteractionClassListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClassList");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportInteractionSubscriptionInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportInteractionSubscriptionInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportInteractionSubscriptionInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportInteractionSubscriptionInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportInteractionSubscriptionInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAinteractionSubscriptionEncoding>&> HLAinteractionClassList, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClassList)
  {
    const HLAinteractionSubListEncoding& HLAinteractionClassListEncoder = static_cast<const HLAinteractionSubListEncoding&>(*HLAinteractionClassList);
    parameters.insert(std::make_pair(GetHLAinteractionClassListParameterHandle(), HLAinteractionClassListEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportInteractionSubscriptionInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportInteractionSubscriptionInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAinteractionSubscriptionEncoding>&> HLAinteractionClassList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClassList)
  {
    const HLAinteractionSubListEncoding& HLAinteractionClassListEncoder = static_cast<const HLAinteractionSubListEncoding&>(*HLAinteractionClassList);
    parameters.insert(std::make_pair(GetHLAinteractionClassListParameterHandle(), HLAinteractionClassListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportInteractionSubscriptionInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAinteractionSubscriptionEncoding>&> HLAinteractionClassList, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClassList)
  {
    const HLAinteractionSubListEncoding& HLAinteractionClassListEncoder = static_cast<const HLAinteractionSubListEncoding&>(*HLAinteractionClassList);
    parameters.insert(std::make_pair(GetHLAinteractionClassListParameterHandle(), HLAinteractionClassListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportInteractionSubscriptionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<HLAinteractionSubscriptionEncoding>&> HLAinteractionClassList;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAinteractionSubListEncoding HLAinteractionClassListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassListIter = parameters.find(GetHLAinteractionClassListParameterHandle());
  if (HLAinteractionClassListIter != parameters.end())
  {
    HLAinteractionClassListDecoder.decode(HLAinteractionClassListIter->second);
    HLAinteractionClassList = HLAinteractionClassListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClassList, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportInteractionSubscriptionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<HLAinteractionSubscriptionEncoding>&> HLAinteractionClassList;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAinteractionSubListEncoding HLAinteractionClassListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassListIter = parameters.find(GetHLAinteractionClassListParameterHandle());
  if (HLAinteractionClassListIter != parameters.end())
  {
    HLAinteractionClassListDecoder.decode(HLAinteractionClassListIter->second);
    HLAinteractionClassList = HLAinteractionClassListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClassList, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportInteractionSubscriptionInteractionClass::ReceiveCallbackHandle HLAreportInteractionSubscriptionInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportInteractionSubscriptionInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportInteractionSubscriptionInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassListParameterHandle());
  return result;
}

// object class type 'HLAreportObjectInstancesThatCanBeDeleted'
HLAreportObjectInstancesThatCanBeDeletedInteractionClass::HLAreportObjectInstancesThatCanBeDeletedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectInstancesThatCanBeDeleted");
  // parameter HLAobjectInstanceCounts : HLAobjectClassBasedCounts
  mHLAobjectInstanceCountsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstanceCounts");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportObjectInstancesThatCanBeDeletedInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstanceCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAobjectInstanceCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAobjectInstanceCounts);
    parameters.insert(std::make_pair(GetHLAobjectInstanceCountsParameterHandle(), HLAobjectInstanceCountsEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstanceCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAobjectInstanceCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAobjectInstanceCounts);
    parameters.insert(std::make_pair(GetHLAobjectInstanceCountsParameterHandle(), HLAobjectInstanceCountsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstanceCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAobjectInstanceCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAobjectInstanceCounts);
    parameters.insert(std::make_pair(GetHLAobjectInstanceCountsParameterHandle(), HLAobjectInstanceCountsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAobjectClassBasedCountsEncoding HLAobjectInstanceCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceCountsIter = parameters.find(GetHLAobjectInstanceCountsParameterHandle());
  if (HLAobjectInstanceCountsIter != parameters.end())
  {
    HLAobjectInstanceCountsDecoder.decode(HLAobjectInstanceCountsIter->second);
    HLAobjectInstanceCounts = HLAobjectInstanceCountsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstanceCounts, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAobjectClassBasedCountsEncoding HLAobjectInstanceCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceCountsIter = parameters.find(GetHLAobjectInstanceCountsParameterHandle());
  if (HLAobjectInstanceCountsIter != parameters.end())
  {
    HLAobjectInstanceCountsDecoder.decode(HLAobjectInstanceCountsIter->second);
    HLAobjectInstanceCounts = HLAobjectInstanceCountsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstanceCounts, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportObjectInstancesThatCanBeDeletedInteractionClass::ReceiveCallbackHandle HLAreportObjectInstancesThatCanBeDeletedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportObjectInstancesThatCanBeDeletedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceCountsParameterHandle());
  return result;
}

// object class type 'HLAreportObjectInstancesUpdated'
HLAreportObjectInstancesUpdatedInteractionClass::HLAreportObjectInstancesUpdatedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectInstancesUpdated");
  // parameter HLAobjectInstanceCounts : HLAobjectClassBasedCounts
  mHLAobjectInstanceCountsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstanceCounts");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportObjectInstancesUpdatedInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportObjectInstancesUpdatedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportObjectInstancesUpdatedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportObjectInstancesUpdatedInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportObjectInstancesUpdatedInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstanceCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAobjectInstanceCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAobjectInstanceCounts);
    parameters.insert(std::make_pair(GetHLAobjectInstanceCountsParameterHandle(), HLAobjectInstanceCountsEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportObjectInstancesUpdatedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportObjectInstancesUpdatedInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstanceCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAobjectInstanceCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAobjectInstanceCounts);
    parameters.insert(std::make_pair(GetHLAobjectInstanceCountsParameterHandle(), HLAobjectInstanceCountsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportObjectInstancesUpdatedInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstanceCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAobjectInstanceCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAobjectInstanceCounts);
    parameters.insert(std::make_pair(GetHLAobjectInstanceCountsParameterHandle(), HLAobjectInstanceCountsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportObjectInstancesUpdatedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAobjectClassBasedCountsEncoding HLAobjectInstanceCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceCountsIter = parameters.find(GetHLAobjectInstanceCountsParameterHandle());
  if (HLAobjectInstanceCountsIter != parameters.end())
  {
    HLAobjectInstanceCountsDecoder.decode(HLAobjectInstanceCountsIter->second);
    HLAobjectInstanceCounts = HLAobjectInstanceCountsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstanceCounts, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportObjectInstancesUpdatedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAobjectClassBasedCountsEncoding HLAobjectInstanceCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceCountsIter = parameters.find(GetHLAobjectInstanceCountsParameterHandle());
  if (HLAobjectInstanceCountsIter != parameters.end())
  {
    HLAobjectInstanceCountsDecoder.decode(HLAobjectInstanceCountsIter->second);
    HLAobjectInstanceCounts = HLAobjectInstanceCountsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstanceCounts, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportObjectInstancesUpdatedInteractionClass::ReceiveCallbackHandle HLAreportObjectInstancesUpdatedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportObjectInstancesUpdatedInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportObjectInstancesUpdatedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceCountsParameterHandle());
  return result;
}

// object class type 'HLAreportObjectInstancesReflected'
HLAreportObjectInstancesReflectedInteractionClass::HLAreportObjectInstancesReflectedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectInstancesReflected");
  // parameter HLAobjectInstanceCounts : HLAobjectClassBasedCounts
  mHLAobjectInstanceCountsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstanceCounts");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportObjectInstancesReflectedInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportObjectInstancesReflectedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportObjectInstancesReflectedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportObjectInstancesReflectedInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportObjectInstancesReflectedInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstanceCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAobjectInstanceCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAobjectInstanceCounts);
    parameters.insert(std::make_pair(GetHLAobjectInstanceCountsParameterHandle(), HLAobjectInstanceCountsEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportObjectInstancesReflectedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportObjectInstancesReflectedInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstanceCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAobjectInstanceCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAobjectInstanceCounts);
    parameters.insert(std::make_pair(GetHLAobjectInstanceCountsParameterHandle(), HLAobjectInstanceCountsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportObjectInstancesReflectedInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstanceCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAobjectInstanceCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAobjectInstanceCounts);
    parameters.insert(std::make_pair(GetHLAobjectInstanceCountsParameterHandle(), HLAobjectInstanceCountsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportObjectInstancesReflectedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAobjectClassBasedCountsEncoding HLAobjectInstanceCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceCountsIter = parameters.find(GetHLAobjectInstanceCountsParameterHandle());
  if (HLAobjectInstanceCountsIter != parameters.end())
  {
    HLAobjectInstanceCountsDecoder.decode(HLAobjectInstanceCountsIter->second);
    HLAobjectInstanceCounts = HLAobjectInstanceCountsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstanceCounts, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportObjectInstancesReflectedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAobjectClassBasedCountsEncoding HLAobjectInstanceCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceCountsIter = parameters.find(GetHLAobjectInstanceCountsParameterHandle());
  if (HLAobjectInstanceCountsIter != parameters.end())
  {
    HLAobjectInstanceCountsDecoder.decode(HLAobjectInstanceCountsIter->second);
    HLAobjectInstanceCounts = HLAobjectInstanceCountsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstanceCounts, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportObjectInstancesReflectedInteractionClass::ReceiveCallbackHandle HLAreportObjectInstancesReflectedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportObjectInstancesReflectedInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportObjectInstancesReflectedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceCountsParameterHandle());
  return result;
}

// object class type 'HLAreportUpdatesSent'
HLAreportUpdatesSentInteractionClass::HLAreportUpdatesSentInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportUpdatesSent");
  // parameter HLAtransportation : HLAtransportationName
  mHLAtransportationParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtransportation");
  // parameter HLAupdateCounts : HLAobjectClassBasedCounts
  mHLAupdateCountsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAupdateCounts");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportUpdatesSentInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportUpdatesSentInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportUpdatesSentInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportUpdatesSentInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportUpdatesSentInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAupdateCounts, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  if (HLAupdateCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAupdateCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAupdateCounts);
    parameters.insert(std::make_pair(GetHLAupdateCountsParameterHandle(), HLAupdateCountsEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportUpdatesSentInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportUpdatesSentInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAupdateCounts)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  if (HLAupdateCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAupdateCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAupdateCounts);
    parameters.insert(std::make_pair(GetHLAupdateCountsParameterHandle(), HLAupdateCountsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportUpdatesSentInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAupdateCounts, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  if (HLAupdateCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAupdateCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAupdateCounts);
    parameters.insert(std::make_pair(GetHLAupdateCountsParameterHandle(), HLAupdateCountsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportUpdatesSentInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAtransportationName> HLAtransportation;
  optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAupdateCounts;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
    HLAtransportation = HLAtransportationDecoder.get();
  }
  HLAobjectClassBasedCountsEncoding HLAupdateCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAupdateCountsIter = parameters.find(GetHLAupdateCountsParameterHandle());
  if (HLAupdateCountsIter != parameters.end())
  {
    HLAupdateCountsDecoder.decode(HLAupdateCountsIter->second);
    HLAupdateCounts = HLAupdateCountsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtransportation, HLAupdateCounts, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportUpdatesSentInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAtransportationName> HLAtransportation;
  optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAupdateCounts;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
    HLAtransportation = HLAtransportationDecoder.get();
  }
  HLAobjectClassBasedCountsEncoding HLAupdateCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAupdateCountsIter = parameters.find(GetHLAupdateCountsParameterHandle());
  if (HLAupdateCountsIter != parameters.end())
  {
    HLAupdateCountsDecoder.decode(HLAupdateCountsIter->second);
    HLAupdateCounts = HLAupdateCountsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtransportation, HLAupdateCounts, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportUpdatesSentInteractionClass::ReceiveCallbackHandle HLAreportUpdatesSentInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportUpdatesSentInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportUpdatesSentInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtransportationParameterHandle());
  result.insert(GetHLAupdateCountsParameterHandle());
  return result;
}

// object class type 'HLAreportReflectionsReceived'
HLAreportReflectionsReceivedInteractionClass::HLAreportReflectionsReceivedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportReflectionsReceived");
  // parameter HLAtransportation : HLAtransportationName
  mHLAtransportationParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtransportation");
  // parameter HLAreflectCounts : HLAobjectClassBasedCounts
  mHLAreflectCountsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAreflectCounts");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportReflectionsReceivedInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportReflectionsReceivedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportReflectionsReceivedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportReflectionsReceivedInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportReflectionsReceivedInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAreflectCounts, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  if (HLAreflectCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAreflectCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAreflectCounts);
    parameters.insert(std::make_pair(GetHLAreflectCountsParameterHandle(), HLAreflectCountsEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportReflectionsReceivedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportReflectionsReceivedInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAreflectCounts)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  if (HLAreflectCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAreflectCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAreflectCounts);
    parameters.insert(std::make_pair(GetHLAreflectCountsParameterHandle(), HLAreflectCountsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportReflectionsReceivedInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAreflectCounts, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  if (HLAreflectCounts)
  {
    const HLAobjectClassBasedCountsEncoding& HLAreflectCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(*HLAreflectCounts);
    parameters.insert(std::make_pair(GetHLAreflectCountsParameterHandle(), HLAreflectCountsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportReflectionsReceivedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAtransportationName> HLAtransportation;
  optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAreflectCounts;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
    HLAtransportation = HLAtransportationDecoder.get();
  }
  HLAobjectClassBasedCountsEncoding HLAreflectCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreflectCountsIter = parameters.find(GetHLAreflectCountsParameterHandle());
  if (HLAreflectCountsIter != parameters.end())
  {
    HLAreflectCountsDecoder.decode(HLAreflectCountsIter->second);
    HLAreflectCounts = HLAreflectCountsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtransportation, HLAreflectCounts, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportReflectionsReceivedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAtransportationName> HLAtransportation;
  optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAreflectCounts;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
    HLAtransportation = HLAtransportationDecoder.get();
  }
  HLAobjectClassBasedCountsEncoding HLAreflectCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreflectCountsIter = parameters.find(GetHLAreflectCountsParameterHandle());
  if (HLAreflectCountsIter != parameters.end())
  {
    HLAreflectCountsDecoder.decode(HLAreflectCountsIter->second);
    HLAreflectCounts = HLAreflectCountsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtransportation, HLAreflectCounts, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportReflectionsReceivedInteractionClass::ReceiveCallbackHandle HLAreportReflectionsReceivedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportReflectionsReceivedInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportReflectionsReceivedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtransportationParameterHandle());
  result.insert(GetHLAreflectCountsParameterHandle());
  return result;
}

// object class type 'HLAreportInteractionsSent'
HLAreportInteractionsSentInteractionClass::HLAreportInteractionsSentInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportInteractionsSent");
  // parameter HLAtransportation : HLAtransportationName
  mHLAtransportationParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtransportation");
  // parameter HLAinteractionCounts : HLAinteractionCounts
  mHLAinteractionCountsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionCounts");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportInteractionsSentInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportInteractionsSentInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportInteractionsSentInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportInteractionsSentInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportInteractionsSentInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCounts, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  if (HLAinteractionCounts)
  {
    const HLAinteractionCountsEncoding& HLAinteractionCountsEncoder = static_cast<const HLAinteractionCountsEncoding&>(*HLAinteractionCounts);
    parameters.insert(std::make_pair(GetHLAinteractionCountsParameterHandle(), HLAinteractionCountsEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportInteractionsSentInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportInteractionsSentInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCounts)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  if (HLAinteractionCounts)
  {
    const HLAinteractionCountsEncoding& HLAinteractionCountsEncoder = static_cast<const HLAinteractionCountsEncoding&>(*HLAinteractionCounts);
    parameters.insert(std::make_pair(GetHLAinteractionCountsParameterHandle(), HLAinteractionCountsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportInteractionsSentInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCounts, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  if (HLAinteractionCounts)
  {
    const HLAinteractionCountsEncoding& HLAinteractionCountsEncoder = static_cast<const HLAinteractionCountsEncoding&>(*HLAinteractionCounts);
    parameters.insert(std::make_pair(GetHLAinteractionCountsParameterHandle(), HLAinteractionCountsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportInteractionsSentInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAtransportationName> HLAtransportation;
  optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCountsP;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
    HLAtransportation = HLAtransportationDecoder.get();
  }
  HLAinteractionCountsEncoding HLAinteractionCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionCountsIter = parameters.find(GetHLAinteractionCountsParameterHandle());
  if (HLAinteractionCountsIter != parameters.end())
  {
    HLAinteractionCountsDecoder.decode(HLAinteractionCountsIter->second);
    HLAinteractionCountsP = HLAinteractionCountsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtransportation, HLAinteractionCountsP, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportInteractionsSentInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAtransportationName> HLAtransportation;
  optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCountsP;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
    HLAtransportation = HLAtransportationDecoder.get();
  }
  HLAinteractionCountsEncoding HLAinteractionCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionCountsIter = parameters.find(GetHLAinteractionCountsParameterHandle());
  if (HLAinteractionCountsIter != parameters.end())
  {
    HLAinteractionCountsDecoder.decode(HLAinteractionCountsIter->second);
    HLAinteractionCountsP = HLAinteractionCountsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtransportation, HLAinteractionCountsP, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportInteractionsSentInteractionClass::ReceiveCallbackHandle HLAreportInteractionsSentInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportInteractionsSentInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportInteractionsSentInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtransportationParameterHandle());
  result.insert(GetHLAinteractionCountsParameterHandle());
  return result;
}

// object class type 'HLAreportInteractionsReceived'
HLAreportInteractionsReceivedInteractionClass::HLAreportInteractionsReceivedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportInteractionsReceived");
  // parameter HLAtransportation : HLAtransportationName
  mHLAtransportationParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtransportation");
  // parameter HLAinteractionCounts : HLAinteractionCounts
  mHLAinteractionCountsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionCounts");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportInteractionsReceivedInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportInteractionsReceivedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportInteractionsReceivedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportInteractionsReceivedInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportInteractionsReceivedInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCounts, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  if (HLAinteractionCounts)
  {
    const HLAinteractionCountsEncoding& HLAinteractionCountsEncoder = static_cast<const HLAinteractionCountsEncoding&>(*HLAinteractionCounts);
    parameters.insert(std::make_pair(GetHLAinteractionCountsParameterHandle(), HLAinteractionCountsEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportInteractionsReceivedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportInteractionsReceivedInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCounts)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  if (HLAinteractionCounts)
  {
    const HLAinteractionCountsEncoding& HLAinteractionCountsEncoder = static_cast<const HLAinteractionCountsEncoding&>(*HLAinteractionCounts);
    parameters.insert(std::make_pair(GetHLAinteractionCountsParameterHandle(), HLAinteractionCountsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportInteractionsReceivedInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCounts, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  if (HLAinteractionCounts)
  {
    const HLAinteractionCountsEncoding& HLAinteractionCountsEncoder = static_cast<const HLAinteractionCountsEncoding&>(*HLAinteractionCounts);
    parameters.insert(std::make_pair(GetHLAinteractionCountsParameterHandle(), HLAinteractionCountsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportInteractionsReceivedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAtransportationName> HLAtransportation;
  optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCountsP;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
    HLAtransportation = HLAtransportationDecoder.get();
  }
  HLAinteractionCountsEncoding HLAinteractionCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionCountsIter = parameters.find(GetHLAinteractionCountsParameterHandle());
  if (HLAinteractionCountsIter != parameters.end())
  {
    HLAinteractionCountsDecoder.decode(HLAinteractionCountsIter->second);
    HLAinteractionCountsP = HLAinteractionCountsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtransportation, HLAinteractionCountsP, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportInteractionsReceivedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAtransportationName> HLAtransportation;
  optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCountsP;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
    HLAtransportation = HLAtransportationDecoder.get();
  }
  HLAinteractionCountsEncoding HLAinteractionCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionCountsIter = parameters.find(GetHLAinteractionCountsParameterHandle());
  if (HLAinteractionCountsIter != parameters.end())
  {
    HLAinteractionCountsDecoder.decode(HLAinteractionCountsIter->second);
    HLAinteractionCountsP = HLAinteractionCountsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtransportation, HLAinteractionCountsP, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportInteractionsReceivedInteractionClass::ReceiveCallbackHandle HLAreportInteractionsReceivedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportInteractionsReceivedInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportInteractionsReceivedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtransportationParameterHandle());
  result.insert(GetHLAinteractionCountsParameterHandle());
  return result;
}

// object class type 'HLAreportObjectInstanceInformation'
HLAreportObjectInstanceInformationInteractionClass::HLAreportObjectInstanceInformationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectInstanceInformation");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
  // parameter HLAownedInstanceAttributeList : HLAhandleList
  mHLAownedInstanceAttributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAownedInstanceAttributeList");
  // parameter HLAregisteredClass : HLAhandle
  mHLAregisteredClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAregisteredClass");
  // parameter HLAknownClass : HLAhandle
  mHLAknownClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAknownClass");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportObjectInstanceInformationInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportObjectInstanceInformationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportObjectInstanceInformationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportObjectInstanceInformationInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportObjectInstanceInformationInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAownedInstanceAttributeList, optional<rti1516ev::HLAhandle> HLAregisteredClass, optional<rti1516ev::HLAhandle> HLAknownClass, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAownedInstanceAttributeList)
  {
    const HLAhandleListEncoding& HLAownedInstanceAttributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAownedInstanceAttributeList);
    parameters.insert(std::make_pair(GetHLAownedInstanceAttributeListParameterHandle(), HLAownedInstanceAttributeListEncoder.encode()));
  }
  if (HLAregisteredClass)
  {
    rti1516ev::HLAhandle HLAregisteredClassEncoder(*HLAregisteredClass);
    parameters.insert(std::make_pair(GetHLAregisteredClassParameterHandle(), HLAregisteredClassEncoder.encode()));
  }
  if (HLAknownClass)
  {
    rti1516ev::HLAhandle HLAknownClassEncoder(*HLAknownClass);
    parameters.insert(std::make_pair(GetHLAknownClassParameterHandle(), HLAknownClassEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportObjectInstanceInformationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportObjectInstanceInformationInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAownedInstanceAttributeList, optional<rti1516ev::HLAhandle> HLAregisteredClass, optional<rti1516ev::HLAhandle> HLAknownClass)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAownedInstanceAttributeList)
  {
    const HLAhandleListEncoding& HLAownedInstanceAttributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAownedInstanceAttributeList);
    parameters.insert(std::make_pair(GetHLAownedInstanceAttributeListParameterHandle(), HLAownedInstanceAttributeListEncoder.encode()));
  }
  if (HLAregisteredClass)
  {
    rti1516ev::HLAhandle HLAregisteredClassEncoder(*HLAregisteredClass);
    parameters.insert(std::make_pair(GetHLAregisteredClassParameterHandle(), HLAregisteredClassEncoder.encode()));
  }
  if (HLAknownClass)
  {
    rti1516ev::HLAhandle HLAknownClassEncoder(*HLAknownClass);
    parameters.insert(std::make_pair(GetHLAknownClassParameterHandle(), HLAknownClassEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportObjectInstanceInformationInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAownedInstanceAttributeList, optional<rti1516ev::HLAhandle> HLAregisteredClass, optional<rti1516ev::HLAhandle> HLAknownClass, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAownedInstanceAttributeList)
  {
    const HLAhandleListEncoding& HLAownedInstanceAttributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAownedInstanceAttributeList);
    parameters.insert(std::make_pair(GetHLAownedInstanceAttributeListParameterHandle(), HLAownedInstanceAttributeListEncoder.encode()));
  }
  if (HLAregisteredClass)
  {
    rti1516ev::HLAhandle HLAregisteredClassEncoder(*HLAregisteredClass);
    parameters.insert(std::make_pair(GetHLAregisteredClassParameterHandle(), HLAregisteredClassEncoder.encode()));
  }
  if (HLAknownClass)
  {
    rti1516ev::HLAhandle HLAknownClassEncoder(*HLAknownClass);
    parameters.insert(std::make_pair(GetHLAknownClassParameterHandle(), HLAknownClassEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportObjectInstanceInformationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAownedInstanceAttributeList;
  optional<rti1516ev::HLAhandle> HLAregisteredClass;
  optional<rti1516ev::HLAhandle> HLAknownClass;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  HLAhandleListEncoding HLAownedInstanceAttributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAownedInstanceAttributeListIter = parameters.find(GetHLAownedInstanceAttributeListParameterHandle());
  if (HLAownedInstanceAttributeListIter != parameters.end())
  {
    HLAownedInstanceAttributeListDecoder.decode(HLAownedInstanceAttributeListIter->second);
    HLAownedInstanceAttributeList = HLAownedInstanceAttributeListDecoder.get();
  }
  rti1516ev::HLAhandle HLAregisteredClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAregisteredClassIter = parameters.find(GetHLAregisteredClassParameterHandle());
  if (HLAregisteredClassIter != parameters.end())
  {
    HLAregisteredClassDecoder.decode(HLAregisteredClassIter->second);
    HLAregisteredClass = HLAregisteredClassDecoder;
  }
  rti1516ev::HLAhandle HLAknownClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAknownClassIter = parameters.find(GetHLAknownClassParameterHandle());
  if (HLAknownClassIter != parameters.end())
  {
    HLAknownClassDecoder.decode(HLAknownClassIter->second);
    HLAknownClass = HLAknownClassDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, HLAownedInstanceAttributeList, HLAregisteredClass, HLAknownClass, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportObjectInstanceInformationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAownedInstanceAttributeList;
  optional<rti1516ev::HLAhandle> HLAregisteredClass;
  optional<rti1516ev::HLAhandle> HLAknownClass;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  HLAhandleListEncoding HLAownedInstanceAttributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAownedInstanceAttributeListIter = parameters.find(GetHLAownedInstanceAttributeListParameterHandle());
  if (HLAownedInstanceAttributeListIter != parameters.end())
  {
    HLAownedInstanceAttributeListDecoder.decode(HLAownedInstanceAttributeListIter->second);
    HLAownedInstanceAttributeList = HLAownedInstanceAttributeListDecoder.get();
  }
  rti1516ev::HLAhandle HLAregisteredClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAregisteredClassIter = parameters.find(GetHLAregisteredClassParameterHandle());
  if (HLAregisteredClassIter != parameters.end())
  {
    HLAregisteredClassDecoder.decode(HLAregisteredClassIter->second);
    HLAregisteredClass = HLAregisteredClassDecoder;
  }
  rti1516ev::HLAhandle HLAknownClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAknownClassIter = parameters.find(GetHLAknownClassParameterHandle());
  if (HLAknownClassIter != parameters.end())
  {
    HLAknownClassDecoder.decode(HLAknownClassIter->second);
    HLAknownClass = HLAknownClassDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, HLAownedInstanceAttributeList, HLAregisteredClass, HLAknownClass, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportObjectInstanceInformationInteractionClass::ReceiveCallbackHandle HLAreportObjectInstanceInformationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportObjectInstanceInformationInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportObjectInstanceInformationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  result.insert(GetHLAownedInstanceAttributeListParameterHandle());
  result.insert(GetHLAregisteredClassParameterHandle());
  result.insert(GetHLAknownClassParameterHandle());
  return result;
}

// object class type 'HLAreportException'
HLAreportExceptionInteractionClass::HLAreportExceptionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportException");
  // parameter HLAservice : HLAunicodeString
  mHLAserviceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAservice");
  // parameter HLAexception : HLAunicodeString
  mHLAexceptionParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAexception");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportExceptionInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportExceptionInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportExceptionInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportExceptionInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportExceptionInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<std::wstring> HLAexception, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAservice)
  {
    rti1516ev::HLAunicodeString HLAserviceEncoder(*HLAservice);
    parameters.insert(std::make_pair(GetHLAserviceParameterHandle(), HLAserviceEncoder.encode()));
  }
  if (HLAexception)
  {
    rti1516ev::HLAunicodeString HLAexceptionEncoder(*HLAexception);
    parameters.insert(std::make_pair(GetHLAexceptionParameterHandle(), HLAexceptionEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportExceptionInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportExceptionInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<std::wstring> HLAexception)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAservice)
  {
    rti1516ev::HLAunicodeString HLAserviceEncoder(*HLAservice);
    parameters.insert(std::make_pair(GetHLAserviceParameterHandle(), HLAserviceEncoder.encode()));
  }
  if (HLAexception)
  {
    rti1516ev::HLAunicodeString HLAexceptionEncoder(*HLAexception);
    parameters.insert(std::make_pair(GetHLAexceptionParameterHandle(), HLAexceptionEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportExceptionInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<std::wstring> HLAexception, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAservice)
  {
    rti1516ev::HLAunicodeString HLAserviceEncoder(*HLAservice);
    parameters.insert(std::make_pair(GetHLAserviceParameterHandle(), HLAserviceEncoder.encode()));
  }
  if (HLAexception)
  {
    rti1516ev::HLAunicodeString HLAexceptionEncoder(*HLAexception);
    parameters.insert(std::make_pair(GetHLAexceptionParameterHandle(), HLAexceptionEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportExceptionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<std::wstring> HLAservice;
  optional<std::wstring> HLAexception;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAserviceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAserviceIter = parameters.find(GetHLAserviceParameterHandle());
  if (HLAserviceIter != parameters.end())
  {
    HLAserviceDecoder.decode(HLAserviceIter->second);
    HLAservice = HLAserviceDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAexceptionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAexceptionIter = parameters.find(GetHLAexceptionParameterHandle());
  if (HLAexceptionIter != parameters.end())
  {
    HLAexceptionDecoder.decode(HLAexceptionIter->second);
    HLAexception = HLAexceptionDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAservice, HLAexception, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportExceptionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<std::wstring> HLAservice;
  optional<std::wstring> HLAexception;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAserviceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAserviceIter = parameters.find(GetHLAserviceParameterHandle());
  if (HLAserviceIter != parameters.end())
  {
    HLAserviceDecoder.decode(HLAserviceIter->second);
    HLAservice = HLAserviceDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAexceptionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAexceptionIter = parameters.find(GetHLAexceptionParameterHandle());
  if (HLAexceptionIter != parameters.end())
  {
    HLAexceptionDecoder.decode(HLAexceptionIter->second);
    HLAexception = HLAexceptionDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAservice, HLAexception, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportExceptionInteractionClass::ReceiveCallbackHandle HLAreportExceptionInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportExceptionInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportExceptionInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAserviceParameterHandle());
  result.insert(GetHLAexceptionParameterHandle());
  return result;
}

// object class type 'HLAreportServiceInvocation'
HLAreportServiceInvocationInteractionClass::HLAreportServiceInvocationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportServiceInvocation");
  // parameter HLAservice : HLAunicodeString
  mHLAserviceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAservice");
  // parameter HLAsuccessIndicator : HLAboolean
  mHLAsuccessIndicatorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsuccessIndicator");
  // parameter HLAsuppliedArguments : HLAargumentList
  mHLAsuppliedArgumentsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsuppliedArguments");
  // parameter HLAreturnedArguments : HLAargumentList
  mHLAreturnedArgumentsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAreturnedArguments");
  // parameter HLAexception : HLAunicodeString
  mHLAexceptionParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAexception");
  // parameter HLAserialNumber : HLAcount
  mHLAserialNumberParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAserialNumber");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportServiceInvocationInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportServiceInvocationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportServiceInvocationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportServiceInvocationInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportServiceInvocationInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<bool> HLAsuccessIndicator, optional<const std::vector<std::wstring>&> HLAsuppliedArguments, optional<const std::vector<std::wstring>&> HLAreturnedArguments, optional<std::wstring> HLAexception, optional<HLAcount> HLAserialNumber, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAservice)
  {
    rti1516ev::HLAunicodeString HLAserviceEncoder(*HLAservice);
    parameters.insert(std::make_pair(GetHLAserviceParameterHandle(), HLAserviceEncoder.encode()));
  }
  if (HLAsuccessIndicator)
  {
    rti1516ev::HLAboolean HLAsuccessIndicatorEncoder(*HLAsuccessIndicator);
    parameters.insert(std::make_pair(GetHLAsuccessIndicatorParameterHandle(), HLAsuccessIndicatorEncoder.encode()));
  }
  if (HLAsuppliedArguments)
  {
    const HLAargumentListEncoding& HLAsuppliedArgumentsEncoder = static_cast<const HLAargumentListEncoding&>(*HLAsuppliedArguments);
    parameters.insert(std::make_pair(GetHLAsuppliedArgumentsParameterHandle(), HLAsuppliedArgumentsEncoder.encode()));
  }
  if (HLAreturnedArguments)
  {
    const HLAargumentListEncoding& HLAreturnedArgumentsEncoder = static_cast<const HLAargumentListEncoding&>(*HLAreturnedArguments);
    parameters.insert(std::make_pair(GetHLAreturnedArgumentsParameterHandle(), HLAreturnedArgumentsEncoder.encode()));
  }
  if (HLAexception)
  {
    rti1516ev::HLAunicodeString HLAexceptionEncoder(*HLAexception);
    parameters.insert(std::make_pair(GetHLAexceptionParameterHandle(), HLAexceptionEncoder.encode()));
  }
  if (HLAserialNumber)
  {
    rti1516ev::HLAinteger32BE HLAserialNumberEncoder(*HLAserialNumber);
    parameters.insert(std::make_pair(GetHLAserialNumberParameterHandle(), HLAserialNumberEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportServiceInvocationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportServiceInvocationInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<bool> HLAsuccessIndicator, optional<const std::vector<std::wstring>&> HLAsuppliedArguments, optional<const std::vector<std::wstring>&> HLAreturnedArguments, optional<std::wstring> HLAexception, optional<HLAcount> HLAserialNumber)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAservice)
  {
    rti1516ev::HLAunicodeString HLAserviceEncoder(*HLAservice);
    parameters.insert(std::make_pair(GetHLAserviceParameterHandle(), HLAserviceEncoder.encode()));
  }
  if (HLAsuccessIndicator)
  {
    rti1516ev::HLAboolean HLAsuccessIndicatorEncoder(*HLAsuccessIndicator);
    parameters.insert(std::make_pair(GetHLAsuccessIndicatorParameterHandle(), HLAsuccessIndicatorEncoder.encode()));
  }
  if (HLAsuppliedArguments)
  {
    const HLAargumentListEncoding& HLAsuppliedArgumentsEncoder = static_cast<const HLAargumentListEncoding&>(*HLAsuppliedArguments);
    parameters.insert(std::make_pair(GetHLAsuppliedArgumentsParameterHandle(), HLAsuppliedArgumentsEncoder.encode()));
  }
  if (HLAreturnedArguments)
  {
    const HLAargumentListEncoding& HLAreturnedArgumentsEncoder = static_cast<const HLAargumentListEncoding&>(*HLAreturnedArguments);
    parameters.insert(std::make_pair(GetHLAreturnedArgumentsParameterHandle(), HLAreturnedArgumentsEncoder.encode()));
  }
  if (HLAexception)
  {
    rti1516ev::HLAunicodeString HLAexceptionEncoder(*HLAexception);
    parameters.insert(std::make_pair(GetHLAexceptionParameterHandle(), HLAexceptionEncoder.encode()));
  }
  if (HLAserialNumber)
  {
    rti1516ev::HLAinteger32BE HLAserialNumberEncoder(*HLAserialNumber);
    parameters.insert(std::make_pair(GetHLAserialNumberParameterHandle(), HLAserialNumberEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportServiceInvocationInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<bool> HLAsuccessIndicator, optional<const std::vector<std::wstring>&> HLAsuppliedArguments, optional<const std::vector<std::wstring>&> HLAreturnedArguments, optional<std::wstring> HLAexception, optional<HLAcount> HLAserialNumber, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAservice)
  {
    rti1516ev::HLAunicodeString HLAserviceEncoder(*HLAservice);
    parameters.insert(std::make_pair(GetHLAserviceParameterHandle(), HLAserviceEncoder.encode()));
  }
  if (HLAsuccessIndicator)
  {
    rti1516ev::HLAboolean HLAsuccessIndicatorEncoder(*HLAsuccessIndicator);
    parameters.insert(std::make_pair(GetHLAsuccessIndicatorParameterHandle(), HLAsuccessIndicatorEncoder.encode()));
  }
  if (HLAsuppliedArguments)
  {
    const HLAargumentListEncoding& HLAsuppliedArgumentsEncoder = static_cast<const HLAargumentListEncoding&>(*HLAsuppliedArguments);
    parameters.insert(std::make_pair(GetHLAsuppliedArgumentsParameterHandle(), HLAsuppliedArgumentsEncoder.encode()));
  }
  if (HLAreturnedArguments)
  {
    const HLAargumentListEncoding& HLAreturnedArgumentsEncoder = static_cast<const HLAargumentListEncoding&>(*HLAreturnedArguments);
    parameters.insert(std::make_pair(GetHLAreturnedArgumentsParameterHandle(), HLAreturnedArgumentsEncoder.encode()));
  }
  if (HLAexception)
  {
    rti1516ev::HLAunicodeString HLAexceptionEncoder(*HLAexception);
    parameters.insert(std::make_pair(GetHLAexceptionParameterHandle(), HLAexceptionEncoder.encode()));
  }
  if (HLAserialNumber)
  {
    rti1516ev::HLAinteger32BE HLAserialNumberEncoder(*HLAserialNumber);
    parameters.insert(std::make_pair(GetHLAserialNumberParameterHandle(), HLAserialNumberEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportServiceInvocationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<std::wstring> HLAservice;
  optional<bool> HLAsuccessIndicator;
  optional<const std::vector<std::wstring>&> HLAsuppliedArguments;
  optional<const std::vector<std::wstring>&> HLAreturnedArguments;
  optional<std::wstring> HLAexception;
  optional<HLAcount> HLAserialNumber;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAserviceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAserviceIter = parameters.find(GetHLAserviceParameterHandle());
  if (HLAserviceIter != parameters.end())
  {
    HLAserviceDecoder.decode(HLAserviceIter->second);
    HLAservice = HLAserviceDecoder.get();
  }
  rti1516ev::HLAboolean HLAsuccessIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsuccessIndicatorIter = parameters.find(GetHLAsuccessIndicatorParameterHandle());
  if (HLAsuccessIndicatorIter != parameters.end())
  {
    HLAsuccessIndicatorDecoder.decode(HLAsuccessIndicatorIter->second);
    HLAsuccessIndicator = HLAsuccessIndicatorDecoder.get();
  }
  HLAargumentListEncoding HLAsuppliedArgumentsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsuppliedArgumentsIter = parameters.find(GetHLAsuppliedArgumentsParameterHandle());
  if (HLAsuppliedArgumentsIter != parameters.end())
  {
    HLAsuppliedArgumentsDecoder.decode(HLAsuppliedArgumentsIter->second);
    HLAsuppliedArguments = HLAsuppliedArgumentsDecoder.get();
  }
  HLAargumentListEncoding HLAreturnedArgumentsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreturnedArgumentsIter = parameters.find(GetHLAreturnedArgumentsParameterHandle());
  if (HLAreturnedArgumentsIter != parameters.end())
  {
    HLAreturnedArgumentsDecoder.decode(HLAreturnedArgumentsIter->second);
    HLAreturnedArguments = HLAreturnedArgumentsDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAexceptionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAexceptionIter = parameters.find(GetHLAexceptionParameterHandle());
  if (HLAexceptionIter != parameters.end())
  {
    HLAexceptionDecoder.decode(HLAexceptionIter->second);
    HLAexception = HLAexceptionDecoder.get();
  }
  rti1516ev::HLAinteger32BE HLAserialNumberDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAserialNumberIter = parameters.find(GetHLAserialNumberParameterHandle());
  if (HLAserialNumberIter != parameters.end())
  {
    HLAserialNumberDecoder.decode(HLAserialNumberIter->second);
    HLAserialNumber = HLAserialNumberDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAservice, HLAsuccessIndicator, HLAsuppliedArguments, HLAreturnedArguments, HLAexception, HLAserialNumber, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportServiceInvocationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<std::wstring> HLAservice;
  optional<bool> HLAsuccessIndicator;
  optional<const std::vector<std::wstring>&> HLAsuppliedArguments;
  optional<const std::vector<std::wstring>&> HLAreturnedArguments;
  optional<std::wstring> HLAexception;
  optional<HLAcount> HLAserialNumber;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAserviceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAserviceIter = parameters.find(GetHLAserviceParameterHandle());
  if (HLAserviceIter != parameters.end())
  {
    HLAserviceDecoder.decode(HLAserviceIter->second);
    HLAservice = HLAserviceDecoder.get();
  }
  rti1516ev::HLAboolean HLAsuccessIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsuccessIndicatorIter = parameters.find(GetHLAsuccessIndicatorParameterHandle());
  if (HLAsuccessIndicatorIter != parameters.end())
  {
    HLAsuccessIndicatorDecoder.decode(HLAsuccessIndicatorIter->second);
    HLAsuccessIndicator = HLAsuccessIndicatorDecoder.get();
  }
  HLAargumentListEncoding HLAsuppliedArgumentsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsuppliedArgumentsIter = parameters.find(GetHLAsuppliedArgumentsParameterHandle());
  if (HLAsuppliedArgumentsIter != parameters.end())
  {
    HLAsuppliedArgumentsDecoder.decode(HLAsuppliedArgumentsIter->second);
    HLAsuppliedArguments = HLAsuppliedArgumentsDecoder.get();
  }
  HLAargumentListEncoding HLAreturnedArgumentsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreturnedArgumentsIter = parameters.find(GetHLAreturnedArgumentsParameterHandle());
  if (HLAreturnedArgumentsIter != parameters.end())
  {
    HLAreturnedArgumentsDecoder.decode(HLAreturnedArgumentsIter->second);
    HLAreturnedArguments = HLAreturnedArgumentsDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAexceptionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAexceptionIter = parameters.find(GetHLAexceptionParameterHandle());
  if (HLAexceptionIter != parameters.end())
  {
    HLAexceptionDecoder.decode(HLAexceptionIter->second);
    HLAexception = HLAexceptionDecoder.get();
  }
  rti1516ev::HLAinteger32BE HLAserialNumberDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAserialNumberIter = parameters.find(GetHLAserialNumberParameterHandle());
  if (HLAserialNumberIter != parameters.end())
  {
    HLAserialNumberDecoder.decode(HLAserialNumberIter->second);
    HLAserialNumber = HLAserialNumberDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAservice, HLAsuccessIndicator, HLAsuppliedArguments, HLAreturnedArguments, HLAexception, HLAserialNumber, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportServiceInvocationInteractionClass::ReceiveCallbackHandle HLAreportServiceInvocationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportServiceInvocationInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportServiceInvocationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAserviceParameterHandle());
  result.insert(GetHLAsuccessIndicatorParameterHandle());
  result.insert(GetHLAsuppliedArgumentsParameterHandle());
  result.insert(GetHLAreturnedArgumentsParameterHandle());
  result.insert(GetHLAexceptionParameterHandle());
  result.insert(GetHLAserialNumberParameterHandle());
  return result;
}

// object class type 'HLAreportMOMexception'
HLAreportMOMexceptionInteractionClass::HLAreportMOMexceptionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportMOMexception");
  // parameter HLAservice : HLAunicodeString
  mHLAserviceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAservice");
  // parameter HLAexception : HLAunicodeString
  mHLAexceptionParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAexception");
  // parameter HLAparameterError : HLAboolean
  mHLAparameterErrorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAparameterError");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportMOMexceptionInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportMOMexceptionInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportMOMexceptionInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportMOMexceptionInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportMOMexceptionInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<std::wstring> HLAexception, optional<bool> HLAparameterError, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAservice)
  {
    rti1516ev::HLAunicodeString HLAserviceEncoder(*HLAservice);
    parameters.insert(std::make_pair(GetHLAserviceParameterHandle(), HLAserviceEncoder.encode()));
  }
  if (HLAexception)
  {
    rti1516ev::HLAunicodeString HLAexceptionEncoder(*HLAexception);
    parameters.insert(std::make_pair(GetHLAexceptionParameterHandle(), HLAexceptionEncoder.encode()));
  }
  if (HLAparameterError)
  {
    rti1516ev::HLAboolean HLAparameterErrorEncoder(*HLAparameterError);
    parameters.insert(std::make_pair(GetHLAparameterErrorParameterHandle(), HLAparameterErrorEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportMOMexceptionInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportMOMexceptionInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<std::wstring> HLAexception, optional<bool> HLAparameterError)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAservice)
  {
    rti1516ev::HLAunicodeString HLAserviceEncoder(*HLAservice);
    parameters.insert(std::make_pair(GetHLAserviceParameterHandle(), HLAserviceEncoder.encode()));
  }
  if (HLAexception)
  {
    rti1516ev::HLAunicodeString HLAexceptionEncoder(*HLAexception);
    parameters.insert(std::make_pair(GetHLAexceptionParameterHandle(), HLAexceptionEncoder.encode()));
  }
  if (HLAparameterError)
  {
    rti1516ev::HLAboolean HLAparameterErrorEncoder(*HLAparameterError);
    parameters.insert(std::make_pair(GetHLAparameterErrorParameterHandle(), HLAparameterErrorEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportMOMexceptionInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<std::wstring> HLAexception, optional<bool> HLAparameterError, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAservice)
  {
    rti1516ev::HLAunicodeString HLAserviceEncoder(*HLAservice);
    parameters.insert(std::make_pair(GetHLAserviceParameterHandle(), HLAserviceEncoder.encode()));
  }
  if (HLAexception)
  {
    rti1516ev::HLAunicodeString HLAexceptionEncoder(*HLAexception);
    parameters.insert(std::make_pair(GetHLAexceptionParameterHandle(), HLAexceptionEncoder.encode()));
  }
  if (HLAparameterError)
  {
    rti1516ev::HLAboolean HLAparameterErrorEncoder(*HLAparameterError);
    parameters.insert(std::make_pair(GetHLAparameterErrorParameterHandle(), HLAparameterErrorEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportMOMexceptionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<std::wstring> HLAservice;
  optional<std::wstring> HLAexception;
  optional<bool> HLAparameterError;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAserviceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAserviceIter = parameters.find(GetHLAserviceParameterHandle());
  if (HLAserviceIter != parameters.end())
  {
    HLAserviceDecoder.decode(HLAserviceIter->second);
    HLAservice = HLAserviceDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAexceptionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAexceptionIter = parameters.find(GetHLAexceptionParameterHandle());
  if (HLAexceptionIter != parameters.end())
  {
    HLAexceptionDecoder.decode(HLAexceptionIter->second);
    HLAexception = HLAexceptionDecoder.get();
  }
  rti1516ev::HLAboolean HLAparameterErrorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAparameterErrorIter = parameters.find(GetHLAparameterErrorParameterHandle());
  if (HLAparameterErrorIter != parameters.end())
  {
    HLAparameterErrorDecoder.decode(HLAparameterErrorIter->second);
    HLAparameterError = HLAparameterErrorDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAservice, HLAexception, HLAparameterError, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportMOMexceptionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<std::wstring> HLAservice;
  optional<std::wstring> HLAexception;
  optional<bool> HLAparameterError;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAserviceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAserviceIter = parameters.find(GetHLAserviceParameterHandle());
  if (HLAserviceIter != parameters.end())
  {
    HLAserviceDecoder.decode(HLAserviceIter->second);
    HLAservice = HLAserviceDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAexceptionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAexceptionIter = parameters.find(GetHLAexceptionParameterHandle());
  if (HLAexceptionIter != parameters.end())
  {
    HLAexceptionDecoder.decode(HLAexceptionIter->second);
    HLAexception = HLAexceptionDecoder.get();
  }
  rti1516ev::HLAboolean HLAparameterErrorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAparameterErrorIter = parameters.find(GetHLAparameterErrorParameterHandle());
  if (HLAparameterErrorIter != parameters.end())
  {
    HLAparameterErrorDecoder.decode(HLAparameterErrorIter->second);
    HLAparameterError = HLAparameterErrorDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAservice, HLAexception, HLAparameterError, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportMOMexceptionInteractionClass::ReceiveCallbackHandle HLAreportMOMexceptionInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportMOMexceptionInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportMOMexceptionInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAserviceParameterHandle());
  result.insert(GetHLAexceptionParameterHandle());
  result.insert(GetHLAparameterErrorParameterHandle());
  return result;
}

// object class type 'HLAreportFederateLost'
HLAreportFederateLostInteractionClass::HLAreportFederateLostInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportFederateLost");
  // parameter HLAfederateName : HLAunicodeString
  mHLAfederateNameParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAfederateName");
  // parameter HLAtimeStamp : HLAlogicalTime
  mHLAtimeStampParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtimeStamp");
  // parameter HLAfaultDescription : HLAunicodeString
  mHLAfaultDescriptionParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAfaultDescription");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportFederateLostInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportFederateLostInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportFederateLostInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportFederateLostInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportFederateLostInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAfederateName, optional<const std::vector<uint8_t>&> HLAtimeStamp, optional<std::wstring> HLAfaultDescription, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAfederateName)
  {
    rti1516ev::HLAunicodeString HLAfederateNameEncoder(*HLAfederateName);
    parameters.insert(std::make_pair(GetHLAfederateNameParameterHandle(), HLAfederateNameEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  if (HLAfaultDescription)
  {
    rti1516ev::HLAunicodeString HLAfaultDescriptionEncoder(*HLAfaultDescription);
    parameters.insert(std::make_pair(GetHLAfaultDescriptionParameterHandle(), HLAfaultDescriptionEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportFederateLostInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportFederateLostInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAfederateName, optional<const std::vector<uint8_t>&> HLAtimeStamp, optional<std::wstring> HLAfaultDescription)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAfederateName)
  {
    rti1516ev::HLAunicodeString HLAfederateNameEncoder(*HLAfederateName);
    parameters.insert(std::make_pair(GetHLAfederateNameParameterHandle(), HLAfederateNameEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  if (HLAfaultDescription)
  {
    rti1516ev::HLAunicodeString HLAfaultDescriptionEncoder(*HLAfaultDescription);
    parameters.insert(std::make_pair(GetHLAfaultDescriptionParameterHandle(), HLAfaultDescriptionEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportFederateLostInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAfederateName, optional<const std::vector<uint8_t>&> HLAtimeStamp, optional<std::wstring> HLAfaultDescription, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAfederateName)
  {
    rti1516ev::HLAunicodeString HLAfederateNameEncoder(*HLAfederateName);
    parameters.insert(std::make_pair(GetHLAfederateNameParameterHandle(), HLAfederateNameEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  if (HLAfaultDescription)
  {
    rti1516ev::HLAunicodeString HLAfaultDescriptionEncoder(*HLAfaultDescription);
    parameters.insert(std::make_pair(GetHLAfaultDescriptionParameterHandle(), HLAfaultDescriptionEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportFederateLostInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<std::wstring> HLAfederateName;
  optional<const std::vector<uint8_t>&> HLAtimeStamp;
  optional<std::wstring> HLAfaultDescription;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAfederateNameDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateNameIter = parameters.find(GetHLAfederateNameParameterHandle());
  if (HLAfederateNameIter != parameters.end())
  {
    HLAfederateNameDecoder.decode(HLAfederateNameIter->second);
    HLAfederateName = HLAfederateNameDecoder.get();
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
    HLAtimeStamp = HLAtimeStampDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAfaultDescriptionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfaultDescriptionIter = parameters.find(GetHLAfaultDescriptionParameterHandle());
  if (HLAfaultDescriptionIter != parameters.end())
  {
    HLAfaultDescriptionDecoder.decode(HLAfaultDescriptionIter->second);
    HLAfaultDescription = HLAfaultDescriptionDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAfederateName, HLAtimeStamp, HLAfaultDescription, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportFederateLostInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<std::wstring> HLAfederateName;
  optional<const std::vector<uint8_t>&> HLAtimeStamp;
  optional<std::wstring> HLAfaultDescription;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAfederateNameDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateNameIter = parameters.find(GetHLAfederateNameParameterHandle());
  if (HLAfederateNameIter != parameters.end())
  {
    HLAfederateNameDecoder.decode(HLAfederateNameIter->second);
    HLAfederateName = HLAfederateNameDecoder.get();
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
    HLAtimeStamp = HLAtimeStampDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAfaultDescriptionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfaultDescriptionIter = parameters.find(GetHLAfaultDescriptionParameterHandle());
  if (HLAfaultDescriptionIter != parameters.end())
  {
    HLAfaultDescriptionDecoder.decode(HLAfaultDescriptionIter->second);
    HLAfaultDescription = HLAfaultDescriptionDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAfederateName, HLAtimeStamp, HLAfaultDescription, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportFederateLostInteractionClass::ReceiveCallbackHandle HLAreportFederateLostInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportFederateLostInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportFederateLostInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAfederateNameParameterHandle());
  result.insert(GetHLAtimeStampParameterHandle());
  result.insert(GetHLAfaultDescriptionParameterHandle());
  return result;
}

// object class type 'HLAreportFOMmoduleData'
HLAreportFOMmoduleDataInteractionClass::HLAreportFOMmoduleDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportFOMmoduleData");
  // parameter HLAFOMmoduleIndicator : HLAindex
  mHLAFOMmoduleIndicatorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAFOMmoduleIndicator");
  // parameter HLAFOMmoduleData : HLAunicodeString
  mHLAFOMmoduleDataParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAFOMmoduleData");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportFOMmoduleDataInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportFOMmoduleDataInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportFOMmoduleDataInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportFOMmoduleDataInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportFOMmoduleDataInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAindex> HLAFOMmoduleIndicator, optional<std::wstring> HLAFOMmoduleData, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAFOMmoduleIndicator)
  {
    rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(*HLAFOMmoduleIndicator);
    parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  }
  if (HLAFOMmoduleData)
  {
    rti1516ev::HLAunicodeString HLAFOMmoduleDataEncoder(*HLAFOMmoduleData);
    parameters.insert(std::make_pair(GetHLAFOMmoduleDataParameterHandle(), HLAFOMmoduleDataEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportFOMmoduleDataInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportFOMmoduleDataInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAindex> HLAFOMmoduleIndicator, optional<std::wstring> HLAFOMmoduleData)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAFOMmoduleIndicator)
  {
    rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(*HLAFOMmoduleIndicator);
    parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  }
  if (HLAFOMmoduleData)
  {
    rti1516ev::HLAunicodeString HLAFOMmoduleDataEncoder(*HLAFOMmoduleData);
    parameters.insert(std::make_pair(GetHLAFOMmoduleDataParameterHandle(), HLAFOMmoduleDataEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportFOMmoduleDataInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAindex> HLAFOMmoduleIndicator, optional<std::wstring> HLAFOMmoduleData, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAFOMmoduleIndicator)
  {
    rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(*HLAFOMmoduleIndicator);
    parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  }
  if (HLAFOMmoduleData)
  {
    rti1516ev::HLAunicodeString HLAFOMmoduleDataEncoder(*HLAFOMmoduleData);
    parameters.insert(std::make_pair(GetHLAFOMmoduleDataParameterHandle(), HLAFOMmoduleDataEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportFOMmoduleDataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAindex> HLAFOMmoduleIndicator;
  optional<std::wstring> HLAFOMmoduleData;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleIndicatorIter = parameters.find(GetHLAFOMmoduleIndicatorParameterHandle());
  if (HLAFOMmoduleIndicatorIter != parameters.end())
  {
    HLAFOMmoduleIndicatorDecoder.decode(HLAFOMmoduleIndicatorIter->second);
    HLAFOMmoduleIndicator = HLAFOMmoduleIndicatorDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAFOMmoduleDataDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleDataIter = parameters.find(GetHLAFOMmoduleDataParameterHandle());
  if (HLAFOMmoduleDataIter != parameters.end())
  {
    HLAFOMmoduleDataDecoder.decode(HLAFOMmoduleDataIter->second);
    HLAFOMmoduleData = HLAFOMmoduleDataDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAFOMmoduleIndicator, HLAFOMmoduleData, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportFOMmoduleDataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAindex> HLAFOMmoduleIndicator;
  optional<std::wstring> HLAFOMmoduleData;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleIndicatorIter = parameters.find(GetHLAFOMmoduleIndicatorParameterHandle());
  if (HLAFOMmoduleIndicatorIter != parameters.end())
  {
    HLAFOMmoduleIndicatorDecoder.decode(HLAFOMmoduleIndicatorIter->second);
    HLAFOMmoduleIndicator = HLAFOMmoduleIndicatorDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAFOMmoduleDataDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleDataIter = parameters.find(GetHLAFOMmoduleDataParameterHandle());
  if (HLAFOMmoduleDataIter != parameters.end())
  {
    HLAFOMmoduleDataDecoder.decode(HLAFOMmoduleDataIter->second);
    HLAFOMmoduleData = HLAFOMmoduleDataDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAFOMmoduleIndicator, HLAFOMmoduleData, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportFOMmoduleDataInteractionClass::ReceiveCallbackHandle HLAreportFOMmoduleDataInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportFOMmoduleDataInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportFOMmoduleDataInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAFOMmoduleIndicatorParameterHandle());
  result.insert(GetHLAFOMmoduleDataParameterHandle());
  return result;
}

// object class type 'HLAservice'
HLAserviceInteractionClass::HLAserviceInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAfederateInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAserviceInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAserviceInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAserviceInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAserviceInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLAserviceInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAserviceInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAserviceInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAserviceInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAserviceInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAserviceInteractionClass::ReceiveCallbackHandle HLAserviceInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAserviceInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAserviceInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAresignFederationExecution'
HLAresignFederationExecutionInteractionClass::HLAresignFederationExecutionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAresignFederationExecution");
  // parameter HLAresignAction : HLAresignAction
  mHLAresignActionParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAresignAction");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAresignFederationExecutionInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAresignFederationExecutionInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAresignFederationExecutionInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAresignFederationExecutionInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAresignFederationExecutionInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAresignAction> HLAresignAction, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAresignAction)
  {
    rti1516ev::HLAinteger32BE HLAresignActionEncoder(static_cast<int32_t>(*HLAresignAction));
    parameters.insert(std::make_pair(GetHLAresignActionParameterHandle(), HLAresignActionEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAresignFederationExecutionInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAresignFederationExecutionInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAresignAction> HLAresignAction)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAresignAction)
  {
    rti1516ev::HLAinteger32BE HLAresignActionEncoder(static_cast<int32_t>(*HLAresignAction));
    parameters.insert(std::make_pair(GetHLAresignActionParameterHandle(), HLAresignActionEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAresignFederationExecutionInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAresignAction> HLAresignAction, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAresignAction)
  {
    rti1516ev::HLAinteger32BE HLAresignActionEncoder(static_cast<int32_t>(*HLAresignAction));
    parameters.insert(std::make_pair(GetHLAresignActionParameterHandle(), HLAresignActionEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAresignFederationExecutionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAresignAction> HLAresignActionP;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAinteger32BE HLAresignActionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAresignActionIter = parameters.find(GetHLAresignActionParameterHandle());
  if (HLAresignActionIter != parameters.end())
  {
    HLAresignActionDecoder.decode(HLAresignActionIter->second);
    HLAresignActionP = static_cast<HLAresignAction>(HLAresignActionDecoder.get());
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAresignActionP, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAresignFederationExecutionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<HLAresignAction> HLAresignActionP;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAinteger32BE HLAresignActionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAresignActionIter = parameters.find(GetHLAresignActionParameterHandle());
  if (HLAresignActionIter != parameters.end())
  {
    HLAresignActionDecoder.decode(HLAresignActionIter->second);
    HLAresignActionP = static_cast<HLAresignAction>(HLAresignActionDecoder.get());
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAresignActionP, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAresignFederationExecutionInteractionClass::ReceiveCallbackHandle HLAresignFederationExecutionInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAresignFederationExecutionInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAresignFederationExecutionInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAresignActionParameterHandle());
  return result;
}

// object class type 'HLAsynchronizationPointAchieved'
HLAsynchronizationPointAchievedInteractionClass::HLAsynchronizationPointAchievedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAsynchronizationPointAchieved");
  // parameter HLAlabel : HLAunicodeString
  mHLAlabelParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAlabel");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAsynchronizationPointAchievedInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAsynchronizationPointAchievedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsynchronizationPointAchievedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsynchronizationPointAchievedInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAsynchronizationPointAchievedInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAlabel, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAlabel)
  {
    rti1516ev::HLAunicodeString HLAlabelEncoder(*HLAlabel);
    parameters.insert(std::make_pair(GetHLAlabelParameterHandle(), HLAlabelEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAsynchronizationPointAchievedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsynchronizationPointAchievedInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAlabel)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAlabel)
  {
    rti1516ev::HLAunicodeString HLAlabelEncoder(*HLAlabel);
    parameters.insert(std::make_pair(GetHLAlabelParameterHandle(), HLAlabelEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsynchronizationPointAchievedInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAlabel, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAlabel)
  {
    rti1516ev::HLAunicodeString HLAlabelEncoder(*HLAlabel);
    parameters.insert(std::make_pair(GetHLAlabelParameterHandle(), HLAlabelEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsynchronizationPointAchievedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<std::wstring> HLAlabel;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAlabelDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAlabelIter = parameters.find(GetHLAlabelParameterHandle());
  if (HLAlabelIter != parameters.end())
  {
    HLAlabelDecoder.decode(HLAlabelIter->second);
    HLAlabel = HLAlabelDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAlabel, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAsynchronizationPointAchievedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<std::wstring> HLAlabel;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAunicodeString HLAlabelDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAlabelIter = parameters.find(GetHLAlabelParameterHandle());
  if (HLAlabelIter != parameters.end())
  {
    HLAlabelDecoder.decode(HLAlabelIter->second);
    HLAlabel = HLAlabelDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAlabel, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAsynchronizationPointAchievedInteractionClass::ReceiveCallbackHandle HLAsynchronizationPointAchievedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAsynchronizationPointAchievedInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAsynchronizationPointAchievedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAlabelParameterHandle());
  return result;
}

// object class type 'HLAfederateSaveBegun'
HLAfederateSaveBegunInteractionClass::HLAfederateSaveBegunInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAfederateSaveBegun");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAfederateSaveBegunInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAfederateSaveBegunInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAfederateSaveBegunInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAfederateSaveBegunInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLAfederateSaveBegunInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAfederateSaveBegunInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAfederateSaveBegunInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAfederateSaveBegunInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAfederateSaveBegunInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAfederateSaveBegunInteractionClass::ReceiveCallbackHandle HLAfederateSaveBegunInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAfederateSaveBegunInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAfederateSaveBegunInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAfederateSaveComplete'
HLAfederateSaveCompleteInteractionClass::HLAfederateSaveCompleteInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAfederateSaveComplete");
  // parameter HLAsuccessIndicator : HLAboolean
  mHLAsuccessIndicatorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsuccessIndicator");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAfederateSaveCompleteInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAfederateSaveCompleteInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAfederateSaveCompleteInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAfederateSaveCompleteInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAfederateSaveCompleteInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAsuccessIndicator, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAsuccessIndicator)
  {
    rti1516ev::HLAboolean HLAsuccessIndicatorEncoder(*HLAsuccessIndicator);
    parameters.insert(std::make_pair(GetHLAsuccessIndicatorParameterHandle(), HLAsuccessIndicatorEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAfederateSaveCompleteInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAfederateSaveCompleteInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAsuccessIndicator)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAsuccessIndicator)
  {
    rti1516ev::HLAboolean HLAsuccessIndicatorEncoder(*HLAsuccessIndicator);
    parameters.insert(std::make_pair(GetHLAsuccessIndicatorParameterHandle(), HLAsuccessIndicatorEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAfederateSaveCompleteInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAsuccessIndicator, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAsuccessIndicator)
  {
    rti1516ev::HLAboolean HLAsuccessIndicatorEncoder(*HLAsuccessIndicator);
    parameters.insert(std::make_pair(GetHLAsuccessIndicatorParameterHandle(), HLAsuccessIndicatorEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAfederateSaveCompleteInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<bool> HLAsuccessIndicator;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAboolean HLAsuccessIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsuccessIndicatorIter = parameters.find(GetHLAsuccessIndicatorParameterHandle());
  if (HLAsuccessIndicatorIter != parameters.end())
  {
    HLAsuccessIndicatorDecoder.decode(HLAsuccessIndicatorIter->second);
    HLAsuccessIndicator = HLAsuccessIndicatorDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAsuccessIndicator, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAfederateSaveCompleteInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<bool> HLAsuccessIndicator;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAboolean HLAsuccessIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsuccessIndicatorIter = parameters.find(GetHLAsuccessIndicatorParameterHandle());
  if (HLAsuccessIndicatorIter != parameters.end())
  {
    HLAsuccessIndicatorDecoder.decode(HLAsuccessIndicatorIter->second);
    HLAsuccessIndicator = HLAsuccessIndicatorDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAsuccessIndicator, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAfederateSaveCompleteInteractionClass::ReceiveCallbackHandle HLAfederateSaveCompleteInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAfederateSaveCompleteInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAfederateSaveCompleteInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAsuccessIndicatorParameterHandle());
  return result;
}

// object class type 'HLAfederateRestoreComplete'
HLAfederateRestoreCompleteInteractionClass::HLAfederateRestoreCompleteInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAfederateRestoreComplete");
  // parameter HLAsuccessIndicator : HLAboolean
  mHLAsuccessIndicatorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsuccessIndicator");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAfederateRestoreCompleteInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAfederateRestoreCompleteInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAfederateRestoreCompleteInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAfederateRestoreCompleteInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAfederateRestoreCompleteInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAsuccessIndicator, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAsuccessIndicator)
  {
    rti1516ev::HLAboolean HLAsuccessIndicatorEncoder(*HLAsuccessIndicator);
    parameters.insert(std::make_pair(GetHLAsuccessIndicatorParameterHandle(), HLAsuccessIndicatorEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAfederateRestoreCompleteInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAfederateRestoreCompleteInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAsuccessIndicator)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAsuccessIndicator)
  {
    rti1516ev::HLAboolean HLAsuccessIndicatorEncoder(*HLAsuccessIndicator);
    parameters.insert(std::make_pair(GetHLAsuccessIndicatorParameterHandle(), HLAsuccessIndicatorEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAfederateRestoreCompleteInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAsuccessIndicator, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAsuccessIndicator)
  {
    rti1516ev::HLAboolean HLAsuccessIndicatorEncoder(*HLAsuccessIndicator);
    parameters.insert(std::make_pair(GetHLAsuccessIndicatorParameterHandle(), HLAsuccessIndicatorEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAfederateRestoreCompleteInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<bool> HLAsuccessIndicator;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAboolean HLAsuccessIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsuccessIndicatorIter = parameters.find(GetHLAsuccessIndicatorParameterHandle());
  if (HLAsuccessIndicatorIter != parameters.end())
  {
    HLAsuccessIndicatorDecoder.decode(HLAsuccessIndicatorIter->second);
    HLAsuccessIndicator = HLAsuccessIndicatorDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAsuccessIndicator, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAfederateRestoreCompleteInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<bool> HLAsuccessIndicator;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAboolean HLAsuccessIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsuccessIndicatorIter = parameters.find(GetHLAsuccessIndicatorParameterHandle());
  if (HLAsuccessIndicatorIter != parameters.end())
  {
    HLAsuccessIndicatorDecoder.decode(HLAsuccessIndicatorIter->second);
    HLAsuccessIndicator = HLAsuccessIndicatorDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAsuccessIndicator, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAfederateRestoreCompleteInteractionClass::ReceiveCallbackHandle HLAfederateRestoreCompleteInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAfederateRestoreCompleteInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAfederateRestoreCompleteInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAsuccessIndicatorParameterHandle());
  return result;
}

// object class type 'HLApublishObjectClassAttributes'
HLApublishObjectClassAttributesInteractionClass::HLApublishObjectClassAttributesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLApublishObjectClassAttributes");
  // parameter HLAobjectClass : HLAhandle
  mHLAobjectClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectClass");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLApublishObjectClassAttributesInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLApublishObjectClassAttributesInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLApublishObjectClassAttributesInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLApublishObjectClassAttributesInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLApublishObjectClassAttributesInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLApublishObjectClassAttributesInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLApublishObjectClassAttributesInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLApublishObjectClassAttributesInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLApublishObjectClassAttributesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectClass;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
    HLAobjectClass = HLAobjectClassDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectClass, HLAattributeList, optional<int64_t>(), optional<OrderType>());
  }
}

void HLApublishObjectClassAttributesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectClass;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
    HLAobjectClass = HLAobjectClassDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectClass, HLAattributeList, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLApublishObjectClassAttributesInteractionClass::ReceiveCallbackHandle HLApublishObjectClassAttributesInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLApublishObjectClassAttributesInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLApublishObjectClassAttributesInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectClassParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  return result;
}

// object class type 'HLAunpublishObjectClassAttributes'
HLAunpublishObjectClassAttributesInteractionClass::HLAunpublishObjectClassAttributesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunpublishObjectClassAttributes");
  // parameter HLAobjectClass : HLAhandle
  mHLAobjectClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectClass");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAunpublishObjectClassAttributesInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAunpublishObjectClassAttributesInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAunpublishObjectClassAttributesInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAunpublishObjectClassAttributesInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAunpublishObjectClassAttributesInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAunpublishObjectClassAttributesInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAunpublishObjectClassAttributesInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAunpublishObjectClassAttributesInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAunpublishObjectClassAttributesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectClass;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
    HLAobjectClass = HLAobjectClassDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectClass, HLAattributeList, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAunpublishObjectClassAttributesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectClass;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
    HLAobjectClass = HLAobjectClassDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectClass, HLAattributeList, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAunpublishObjectClassAttributesInteractionClass::ReceiveCallbackHandle HLAunpublishObjectClassAttributesInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAunpublishObjectClassAttributesInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAunpublishObjectClassAttributesInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectClassParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  return result;
}

// object class type 'HLApublishInteractionClass'
HLApublishInteractionClassInteractionClass::HLApublishInteractionClassInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLApublishInteractionClass");
  // parameter HLAinteractionClass : HLAhandle
  mHLAinteractionClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClass");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLApublishInteractionClassInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLApublishInteractionClassInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLApublishInteractionClassInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLApublishInteractionClassInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLApublishInteractionClassInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLApublishInteractionClassInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLApublishInteractionClassInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLApublishInteractionClassInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLApublishInteractionClassInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAinteractionClass;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
    HLAinteractionClass = HLAinteractionClassDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClass, optional<int64_t>(), optional<OrderType>());
  }
}

void HLApublishInteractionClassInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAinteractionClass;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
    HLAinteractionClass = HLAinteractionClassDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClass, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLApublishInteractionClassInteractionClass::ReceiveCallbackHandle HLApublishInteractionClassInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLApublishInteractionClassInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLApublishInteractionClassInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassParameterHandle());
  return result;
}

// object class type 'HLAunpublishInteractionClass'
HLAunpublishInteractionClassInteractionClass::HLAunpublishInteractionClassInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunpublishInteractionClass");
  // parameter HLAinteractionClass : HLAhandle
  mHLAinteractionClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClass");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAunpublishInteractionClassInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAunpublishInteractionClassInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAunpublishInteractionClassInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAunpublishInteractionClassInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAunpublishInteractionClassInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAunpublishInteractionClassInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAunpublishInteractionClassInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAunpublishInteractionClassInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAunpublishInteractionClassInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAinteractionClass;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
    HLAinteractionClass = HLAinteractionClassDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClass, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAunpublishInteractionClassInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAinteractionClass;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
    HLAinteractionClass = HLAinteractionClassDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClass, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAunpublishInteractionClassInteractionClass::ReceiveCallbackHandle HLAunpublishInteractionClassInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAunpublishInteractionClassInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAunpublishInteractionClassInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassParameterHandle());
  return result;
}

// object class type 'HLAsubscribeObjectClassAttributes'
HLAsubscribeObjectClassAttributesInteractionClass::HLAsubscribeObjectClassAttributesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAsubscribeObjectClassAttributes");
  // parameter HLAobjectClass : HLAhandle
  mHLAobjectClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectClass");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
  // parameter HLAactive : HLAboolean
  mHLAactiveParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAactive");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAsubscribeObjectClassAttributesInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAsubscribeObjectClassAttributesInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsubscribeObjectClassAttributesInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsubscribeObjectClassAttributesInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAsubscribeObjectClassAttributesInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<bool> HLAactive, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  if (HLAactive)
  {
    rti1516ev::HLAboolean HLAactiveEncoder(*HLAactive);
    parameters.insert(std::make_pair(GetHLAactiveParameterHandle(), HLAactiveEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAsubscribeObjectClassAttributesInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsubscribeObjectClassAttributesInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<bool> HLAactive)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  if (HLAactive)
  {
    rti1516ev::HLAboolean HLAactiveEncoder(*HLAactive);
    parameters.insert(std::make_pair(GetHLAactiveParameterHandle(), HLAactiveEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsubscribeObjectClassAttributesInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<bool> HLAactive, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  if (HLAactive)
  {
    rti1516ev::HLAboolean HLAactiveEncoder(*HLAactive);
    parameters.insert(std::make_pair(GetHLAactiveParameterHandle(), HLAactiveEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsubscribeObjectClassAttributesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectClass;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;
  optional<bool> HLAactive;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
    HLAobjectClass = HLAobjectClassDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  rti1516ev::HLAboolean HLAactiveDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAactiveIter = parameters.find(GetHLAactiveParameterHandle());
  if (HLAactiveIter != parameters.end())
  {
    HLAactiveDecoder.decode(HLAactiveIter->second);
    HLAactive = HLAactiveDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectClass, HLAattributeList, HLAactive, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAsubscribeObjectClassAttributesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectClass;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;
  optional<bool> HLAactive;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
    HLAobjectClass = HLAobjectClassDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  rti1516ev::HLAboolean HLAactiveDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAactiveIter = parameters.find(GetHLAactiveParameterHandle());
  if (HLAactiveIter != parameters.end())
  {
    HLAactiveDecoder.decode(HLAactiveIter->second);
    HLAactive = HLAactiveDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectClass, HLAattributeList, HLAactive, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAsubscribeObjectClassAttributesInteractionClass::ReceiveCallbackHandle HLAsubscribeObjectClassAttributesInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAsubscribeObjectClassAttributesInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAsubscribeObjectClassAttributesInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectClassParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  result.insert(GetHLAactiveParameterHandle());
  return result;
}

// object class type 'HLAunsubscribeObjectClassAttributes'
HLAunsubscribeObjectClassAttributesInteractionClass::HLAunsubscribeObjectClassAttributesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunsubscribeObjectClassAttributes");
  // parameter HLAobjectClass : HLAhandle
  mHLAobjectClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectClass");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAunsubscribeObjectClassAttributesInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAunsubscribeObjectClassAttributesInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAunsubscribeObjectClassAttributesInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAunsubscribeObjectClassAttributesInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAunsubscribeObjectClassAttributesInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAunsubscribeObjectClassAttributesInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAunsubscribeObjectClassAttributesInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAunsubscribeObjectClassAttributesInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectClass)
  {
    rti1516ev::HLAhandle HLAobjectClassEncoder(*HLAobjectClass);
    parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAunsubscribeObjectClassAttributesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectClass;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
    HLAobjectClass = HLAobjectClassDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectClass, HLAattributeList, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAunsubscribeObjectClassAttributesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectClass;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
    HLAobjectClass = HLAobjectClassDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectClass, HLAattributeList, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAunsubscribeObjectClassAttributesInteractionClass::ReceiveCallbackHandle HLAunsubscribeObjectClassAttributesInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAunsubscribeObjectClassAttributesInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAunsubscribeObjectClassAttributesInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectClassParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  return result;
}

// object class type 'HLAsubscribeInteractionClass'
HLAsubscribeInteractionClassInteractionClass::HLAsubscribeInteractionClassInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAsubscribeInteractionClass");
  // parameter HLAinteractionClass : HLAhandle
  mHLAinteractionClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClass");
  // parameter HLAactive : HLAboolean
  mHLAactiveParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAactive");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAsubscribeInteractionClassInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAsubscribeInteractionClassInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsubscribeInteractionClassInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsubscribeInteractionClassInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAsubscribeInteractionClassInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<bool> HLAactive, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  if (HLAactive)
  {
    rti1516ev::HLAboolean HLAactiveEncoder(*HLAactive);
    parameters.insert(std::make_pair(GetHLAactiveParameterHandle(), HLAactiveEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAsubscribeInteractionClassInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsubscribeInteractionClassInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<bool> HLAactive)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  if (HLAactive)
  {
    rti1516ev::HLAboolean HLAactiveEncoder(*HLAactive);
    parameters.insert(std::make_pair(GetHLAactiveParameterHandle(), HLAactiveEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsubscribeInteractionClassInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<bool> HLAactive, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  if (HLAactive)
  {
    rti1516ev::HLAboolean HLAactiveEncoder(*HLAactive);
    parameters.insert(std::make_pair(GetHLAactiveParameterHandle(), HLAactiveEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsubscribeInteractionClassInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAinteractionClass;
  optional<bool> HLAactive;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
    HLAinteractionClass = HLAinteractionClassDecoder;
  }
  rti1516ev::HLAboolean HLAactiveDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAactiveIter = parameters.find(GetHLAactiveParameterHandle());
  if (HLAactiveIter != parameters.end())
  {
    HLAactiveDecoder.decode(HLAactiveIter->second);
    HLAactive = HLAactiveDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClass, HLAactive, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAsubscribeInteractionClassInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAinteractionClass;
  optional<bool> HLAactive;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
    HLAinteractionClass = HLAinteractionClassDecoder;
  }
  rti1516ev::HLAboolean HLAactiveDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAactiveIter = parameters.find(GetHLAactiveParameterHandle());
  if (HLAactiveIter != parameters.end())
  {
    HLAactiveDecoder.decode(HLAactiveIter->second);
    HLAactive = HLAactiveDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClass, HLAactive, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAsubscribeInteractionClassInteractionClass::ReceiveCallbackHandle HLAsubscribeInteractionClassInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAsubscribeInteractionClassInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAsubscribeInteractionClassInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassParameterHandle());
  result.insert(GetHLAactiveParameterHandle());
  return result;
}

// object class type 'HLAunsubscribeInteractionClass'
HLAunsubscribeInteractionClassInteractionClass::HLAunsubscribeInteractionClassInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunsubscribeInteractionClass");
  // parameter HLAinteractionClass : HLAhandle
  mHLAinteractionClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClass");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAunsubscribeInteractionClassInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAunsubscribeInteractionClassInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAunsubscribeInteractionClassInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAunsubscribeInteractionClassInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAunsubscribeInteractionClassInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAunsubscribeInteractionClassInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAunsubscribeInteractionClassInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAunsubscribeInteractionClassInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAunsubscribeInteractionClassInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAinteractionClass;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
    HLAinteractionClass = HLAinteractionClassDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClass, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAunsubscribeInteractionClassInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAinteractionClass;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
    HLAinteractionClass = HLAinteractionClassDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClass, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAunsubscribeInteractionClassInteractionClass::ReceiveCallbackHandle HLAunsubscribeInteractionClassInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAunsubscribeInteractionClassInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAunsubscribeInteractionClassInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassParameterHandle());
  return result;
}

// object class type 'HLAdeleteObjectInstance'
HLAdeleteObjectInstanceInteractionClass::HLAdeleteObjectInstanceInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAdeleteObjectInstance");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
  // parameter HLAtag : HLAopaqueData
  mHLAtagParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtag");
  // parameter HLAtimeStamp : HLAlogicalTime
  mHLAtimeStampParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtimeStamp");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAdeleteObjectInstanceInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAdeleteObjectInstanceInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAdeleteObjectInstanceInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAdeleteObjectInstanceInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAdeleteObjectInstanceInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<uint8_t>&> HLAtag, optional<const std::vector<uint8_t>&> HLAtimeStamp, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAtag)
  {
    rti1516ev::HLAopaqueData HLAtagEncoder(*HLAtag);
    parameters.insert(std::make_pair(GetHLAtagParameterHandle(), HLAtagEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAdeleteObjectInstanceInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAdeleteObjectInstanceInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<uint8_t>&> HLAtag, optional<const std::vector<uint8_t>&> HLAtimeStamp)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAtag)
  {
    rti1516ev::HLAopaqueData HLAtagEncoder(*HLAtag);
    parameters.insert(std::make_pair(GetHLAtagParameterHandle(), HLAtagEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAdeleteObjectInstanceInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<uint8_t>&> HLAtag, optional<const std::vector<uint8_t>&> HLAtimeStamp, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAtag)
  {
    rti1516ev::HLAopaqueData HLAtagEncoder(*HLAtag);
    parameters.insert(std::make_pair(GetHLAtagParameterHandle(), HLAtagEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAdeleteObjectInstanceInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;
  optional<const std::vector<uint8_t>&> HLAtag;
  optional<const std::vector<uint8_t>&> HLAtimeStamp;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  rti1516ev::HLAopaqueData HLAtagDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtagIter = parameters.find(GetHLAtagParameterHandle());
  if (HLAtagIter != parameters.end())
  {
    HLAtagDecoder.decode(HLAtagIter->second);
    HLAtag = HLAtagDecoder.get();
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
    HLAtimeStamp = HLAtimeStampDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, HLAtag, HLAtimeStamp, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAdeleteObjectInstanceInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;
  optional<const std::vector<uint8_t>&> HLAtag;
  optional<const std::vector<uint8_t>&> HLAtimeStamp;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  rti1516ev::HLAopaqueData HLAtagDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtagIter = parameters.find(GetHLAtagParameterHandle());
  if (HLAtagIter != parameters.end())
  {
    HLAtagDecoder.decode(HLAtagIter->second);
    HLAtag = HLAtagDecoder.get();
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
    HLAtimeStamp = HLAtimeStampDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, HLAtag, HLAtimeStamp, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAdeleteObjectInstanceInteractionClass::ReceiveCallbackHandle HLAdeleteObjectInstanceInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAdeleteObjectInstanceInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAdeleteObjectInstanceInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  result.insert(GetHLAtagParameterHandle());
  result.insert(GetHLAtimeStampParameterHandle());
  return result;
}

// object class type 'HLAlocalDeleteObjectInstance'
HLAlocalDeleteObjectInstanceInteractionClass::HLAlocalDeleteObjectInstanceInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAlocalDeleteObjectInstance");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAlocalDeleteObjectInstanceInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAlocalDeleteObjectInstanceInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAlocalDeleteObjectInstanceInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAlocalDeleteObjectInstanceInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAlocalDeleteObjectInstanceInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAlocalDeleteObjectInstanceInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAlocalDeleteObjectInstanceInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAlocalDeleteObjectInstanceInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAlocalDeleteObjectInstanceInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAlocalDeleteObjectInstanceInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAlocalDeleteObjectInstanceInteractionClass::ReceiveCallbackHandle HLAlocalDeleteObjectInstanceInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAlocalDeleteObjectInstanceInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAlocalDeleteObjectInstanceInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  return result;
}

// object class type 'HLArequestAttributeTransportationTypeChange'
HLArequestAttributeTransportationTypeChangeInteractionClass::HLArequestAttributeTransportationTypeChangeInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLArequestAttributeTransportationTypeChange");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
  // parameter HLAtransportation : HLAtransportationName
  mHLAtransportationParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtransportation");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestAttributeTransportationTypeChangeInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<HLAtransportationName> HLAtransportation, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<HLAtransportationName> HLAtransportation)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<HLAtransportationName> HLAtransportation, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;
  optional<HLAtransportationName> HLAtransportation;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
    HLAtransportation = HLAtransportationDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, HLAattributeList, HLAtransportation, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;
  optional<HLAtransportationName> HLAtransportation;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
    HLAtransportation = HLAtransportationDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, HLAattributeList, HLAtransportation, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestAttributeTransportationTypeChangeInteractionClass::ReceiveCallbackHandle HLArequestAttributeTransportationTypeChangeInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestAttributeTransportationTypeChangeInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  result.insert(GetHLAtransportationParameterHandle());
  return result;
}

// object class type 'HLArequestInteractionTransportationTypeChange'
HLArequestInteractionTransportationTypeChangeInteractionClass::HLArequestInteractionTransportationTypeChangeInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLArequestInteractionTransportationTypeChange");
  // parameter HLAinteractionClass : HLAhandle
  mHLAinteractionClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClass");
  // parameter HLAtransportation : HLAtransportationName
  mHLAtransportationParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtransportation");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestInteractionTransportationTypeChangeInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<HLAtransportationName> HLAtransportation, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<HLAtransportationName> HLAtransportation)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<HLAtransportationName> HLAtransportation, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  if (HLAtransportation)
  {
    rti1516ev::HLAunicodeString HLAtransportationEncoder(*HLAtransportation);
    parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAinteractionClass;
  optional<HLAtransportationName> HLAtransportation;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
    HLAinteractionClass = HLAinteractionClassDecoder;
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
    HLAtransportation = HLAtransportationDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClass, HLAtransportation, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAinteractionClass;
  optional<HLAtransportationName> HLAtransportation;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
    HLAinteractionClass = HLAinteractionClassDecoder;
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
    HLAtransportation = HLAtransportationDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClass, HLAtransportation, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestInteractionTransportationTypeChangeInteractionClass::ReceiveCallbackHandle HLArequestInteractionTransportationTypeChangeInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestInteractionTransportationTypeChangeInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassParameterHandle());
  result.insert(GetHLAtransportationParameterHandle());
  return result;
}

// object class type 'HLAunconditionalAttributeOwnershipDivestiture'
HLAunconditionalAttributeOwnershipDivestitureInteractionClass::HLAunconditionalAttributeOwnershipDivestitureInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunconditionalAttributeOwnershipDivestiture");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAunconditionalAttributeOwnershipDivestitureInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, HLAattributeList, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, HLAattributeList, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAunconditionalAttributeOwnershipDivestitureInteractionClass::ReceiveCallbackHandle HLAunconditionalAttributeOwnershipDivestitureInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAunconditionalAttributeOwnershipDivestitureInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  return result;
}

// object class type 'HLAenableTimeRegulation'
HLAenableTimeRegulationInteractionClass::HLAenableTimeRegulationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAenableTimeRegulation");
  // parameter HLAlookahead : HLAtimeInterval
  mHLAlookaheadParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAlookahead");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAenableTimeRegulationInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAenableTimeRegulationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAenableTimeRegulationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAenableTimeRegulationInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAenableTimeRegulationInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAlookahead, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAlookahead)
  {
    const HLAtimeIntervalEncoding& HLAlookaheadEncoder = static_cast<const HLAtimeIntervalEncoding&>(*HLAlookahead);
    parameters.insert(std::make_pair(GetHLAlookaheadParameterHandle(), HLAlookaheadEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAenableTimeRegulationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAenableTimeRegulationInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAlookahead)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAlookahead)
  {
    const HLAtimeIntervalEncoding& HLAlookaheadEncoder = static_cast<const HLAtimeIntervalEncoding&>(*HLAlookahead);
    parameters.insert(std::make_pair(GetHLAlookaheadParameterHandle(), HLAlookaheadEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAenableTimeRegulationInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAlookahead, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAlookahead)
  {
    const HLAtimeIntervalEncoding& HLAlookaheadEncoder = static_cast<const HLAtimeIntervalEncoding&>(*HLAlookahead);
    parameters.insert(std::make_pair(GetHLAlookaheadParameterHandle(), HLAlookaheadEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAenableTimeRegulationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<uint8_t>&> HLAlookahead;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAtimeIntervalEncoding HLAlookaheadDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAlookaheadIter = parameters.find(GetHLAlookaheadParameterHandle());
  if (HLAlookaheadIter != parameters.end())
  {
    HLAlookaheadDecoder.decode(HLAlookaheadIter->second);
    HLAlookahead = HLAlookaheadDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAlookahead, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAenableTimeRegulationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<uint8_t>&> HLAlookahead;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAtimeIntervalEncoding HLAlookaheadDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAlookaheadIter = parameters.find(GetHLAlookaheadParameterHandle());
  if (HLAlookaheadIter != parameters.end())
  {
    HLAlookaheadDecoder.decode(HLAlookaheadIter->second);
    HLAlookahead = HLAlookaheadDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAlookahead, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAenableTimeRegulationInteractionClass::ReceiveCallbackHandle HLAenableTimeRegulationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAenableTimeRegulationInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAenableTimeRegulationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAlookaheadParameterHandle());
  return result;
}

// object class type 'HLAdisableTimeRegulation'
HLAdisableTimeRegulationInteractionClass::HLAdisableTimeRegulationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAdisableTimeRegulation");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAdisableTimeRegulationInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAdisableTimeRegulationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAdisableTimeRegulationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAdisableTimeRegulationInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLAdisableTimeRegulationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAdisableTimeRegulationInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAdisableTimeRegulationInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAdisableTimeRegulationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAdisableTimeRegulationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAdisableTimeRegulationInteractionClass::ReceiveCallbackHandle HLAdisableTimeRegulationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAdisableTimeRegulationInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAdisableTimeRegulationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAenableTimeConstrained'
HLAenableTimeConstrainedInteractionClass::HLAenableTimeConstrainedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAenableTimeConstrained");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAenableTimeConstrainedInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAenableTimeConstrainedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAenableTimeConstrainedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAenableTimeConstrainedInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLAenableTimeConstrainedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAenableTimeConstrainedInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAenableTimeConstrainedInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAenableTimeConstrainedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAenableTimeConstrainedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAenableTimeConstrainedInteractionClass::ReceiveCallbackHandle HLAenableTimeConstrainedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAenableTimeConstrainedInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAenableTimeConstrainedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAdisableTimeConstrained'
HLAdisableTimeConstrainedInteractionClass::HLAdisableTimeConstrainedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAdisableTimeConstrained");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAdisableTimeConstrainedInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAdisableTimeConstrainedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAdisableTimeConstrainedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAdisableTimeConstrainedInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLAdisableTimeConstrainedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAdisableTimeConstrainedInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAdisableTimeConstrainedInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAdisableTimeConstrainedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAdisableTimeConstrainedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAdisableTimeConstrainedInteractionClass::ReceiveCallbackHandle HLAdisableTimeConstrainedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAdisableTimeConstrainedInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAdisableTimeConstrainedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAtimeAdvanceRequest'
HLAtimeAdvanceRequestInteractionClass::HLAtimeAdvanceRequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAtimeAdvanceRequest");
  // parameter HLAtimeStamp : HLAlogicalTime
  mHLAtimeStampParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtimeStamp");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAtimeAdvanceRequestInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAtimeAdvanceRequestInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAtimeAdvanceRequestInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAtimeAdvanceRequestInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAtimeAdvanceRequestInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAtimeAdvanceRequestInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAtimeAdvanceRequestInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAtimeAdvanceRequestInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAtimeAdvanceRequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<uint8_t>&> HLAtimeStamp;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
    HLAtimeStamp = HLAtimeStampDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtimeStamp, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAtimeAdvanceRequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<uint8_t>&> HLAtimeStamp;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
    HLAtimeStamp = HLAtimeStampDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtimeStamp, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAtimeAdvanceRequestInteractionClass::ReceiveCallbackHandle HLAtimeAdvanceRequestInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAtimeAdvanceRequestInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAtimeAdvanceRequestInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtimeStampParameterHandle());
  return result;
}

// object class type 'HLAtimeAdvanceRequestAvailable'
HLAtimeAdvanceRequestAvailableInteractionClass::HLAtimeAdvanceRequestAvailableInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAtimeAdvanceRequestAvailable");
  // parameter HLAtimeStamp : HLAlogicalTime
  mHLAtimeStampParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtimeStamp");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAtimeAdvanceRequestAvailableInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAtimeAdvanceRequestAvailableInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAtimeAdvanceRequestAvailableInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAtimeAdvanceRequestAvailableInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAtimeAdvanceRequestAvailableInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAtimeAdvanceRequestAvailableInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAtimeAdvanceRequestAvailableInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAtimeAdvanceRequestAvailableInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAtimeAdvanceRequestAvailableInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<uint8_t>&> HLAtimeStamp;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
    HLAtimeStamp = HLAtimeStampDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtimeStamp, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAtimeAdvanceRequestAvailableInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<uint8_t>&> HLAtimeStamp;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
    HLAtimeStamp = HLAtimeStampDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtimeStamp, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAtimeAdvanceRequestAvailableInteractionClass::ReceiveCallbackHandle HLAtimeAdvanceRequestAvailableInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAtimeAdvanceRequestAvailableInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAtimeAdvanceRequestAvailableInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtimeStampParameterHandle());
  return result;
}

// object class type 'HLAnextMessageRequest'
HLAnextMessageRequestInteractionClass::HLAnextMessageRequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAnextMessageRequest");
  // parameter HLAtimeStamp : HLAlogicalTime
  mHLAtimeStampParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtimeStamp");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAnextMessageRequestInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAnextMessageRequestInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAnextMessageRequestInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAnextMessageRequestInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAnextMessageRequestInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAnextMessageRequestInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAnextMessageRequestInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAnextMessageRequestInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAnextMessageRequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<uint8_t>&> HLAtimeStamp;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
    HLAtimeStamp = HLAtimeStampDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtimeStamp, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAnextMessageRequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<uint8_t>&> HLAtimeStamp;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
    HLAtimeStamp = HLAtimeStampDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtimeStamp, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAnextMessageRequestInteractionClass::ReceiveCallbackHandle HLAnextMessageRequestInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAnextMessageRequestInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAnextMessageRequestInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtimeStampParameterHandle());
  return result;
}

// object class type 'HLAnextMessageRequestAvailable'
HLAnextMessageRequestAvailableInteractionClass::HLAnextMessageRequestAvailableInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAnextMessageRequestAvailable");
  // parameter HLAtimeStamp : HLAlogicalTime
  mHLAtimeStampParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtimeStamp");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAnextMessageRequestAvailableInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAnextMessageRequestAvailableInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAnextMessageRequestAvailableInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAnextMessageRequestAvailableInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAnextMessageRequestAvailableInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAnextMessageRequestAvailableInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAnextMessageRequestAvailableInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAnextMessageRequestAvailableInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAnextMessageRequestAvailableInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<uint8_t>&> HLAtimeStamp;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
    HLAtimeStamp = HLAtimeStampDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtimeStamp, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAnextMessageRequestAvailableInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<uint8_t>&> HLAtimeStamp;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
    HLAtimeStamp = HLAtimeStampDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtimeStamp, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAnextMessageRequestAvailableInteractionClass::ReceiveCallbackHandle HLAnextMessageRequestAvailableInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAnextMessageRequestAvailableInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAnextMessageRequestAvailableInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtimeStampParameterHandle());
  return result;
}

// object class type 'HLAflushQueueRequest'
HLAflushQueueRequestInteractionClass::HLAflushQueueRequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAflushQueueRequest");
  // parameter HLAtimeStamp : HLAlogicalTime
  mHLAtimeStampParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtimeStamp");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAflushQueueRequestInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAflushQueueRequestInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAflushQueueRequestInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAflushQueueRequestInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAflushQueueRequestInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAflushQueueRequestInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAflushQueueRequestInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAflushQueueRequestInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAtimeStamp)
  {
    const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(*HLAtimeStamp);
    parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAflushQueueRequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<uint8_t>&> HLAtimeStamp;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
    HLAtimeStamp = HLAtimeStampDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtimeStamp, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAflushQueueRequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<uint8_t>&> HLAtimeStamp;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
    HLAtimeStamp = HLAtimeStampDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAtimeStamp, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAflushQueueRequestInteractionClass::ReceiveCallbackHandle HLAflushQueueRequestInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAflushQueueRequestInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAflushQueueRequestInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtimeStampParameterHandle());
  return result;
}

// object class type 'HLAenableAsynchronousDelivery'
HLAenableAsynchronousDeliveryInteractionClass::HLAenableAsynchronousDeliveryInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAenableAsynchronousDelivery");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAenableAsynchronousDeliveryInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAenableAsynchronousDeliveryInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAenableAsynchronousDeliveryInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAenableAsynchronousDeliveryInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLAenableAsynchronousDeliveryInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAenableAsynchronousDeliveryInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAenableAsynchronousDeliveryInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAenableAsynchronousDeliveryInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAenableAsynchronousDeliveryInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAenableAsynchronousDeliveryInteractionClass::ReceiveCallbackHandle HLAenableAsynchronousDeliveryInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAenableAsynchronousDeliveryInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAenableAsynchronousDeliveryInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAdisableAsynchronousDelivery'
HLAdisableAsynchronousDeliveryInteractionClass::HLAdisableAsynchronousDeliveryInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAdisableAsynchronousDelivery");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAdisableAsynchronousDeliveryInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAdisableAsynchronousDeliveryInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAdisableAsynchronousDeliveryInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAdisableAsynchronousDeliveryInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLAdisableAsynchronousDeliveryInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAdisableAsynchronousDeliveryInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAdisableAsynchronousDeliveryInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAdisableAsynchronousDeliveryInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAdisableAsynchronousDeliveryInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAdisableAsynchronousDeliveryInteractionClass::ReceiveCallbackHandle HLAdisableAsynchronousDeliveryInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAdisableAsynchronousDeliveryInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAdisableAsynchronousDeliveryInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAmodifyLookahead'
HLAmodifyLookaheadInteractionClass::HLAmodifyLookaheadInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAmodifyLookahead");
  // parameter HLAlookahead : HLAtimeInterval
  mHLAlookaheadParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAlookahead");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAmodifyLookaheadInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAmodifyLookaheadInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAmodifyLookaheadInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAmodifyLookaheadInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAmodifyLookaheadInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAlookahead, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAlookahead)
  {
    const HLAtimeIntervalEncoding& HLAlookaheadEncoder = static_cast<const HLAtimeIntervalEncoding&>(*HLAlookahead);
    parameters.insert(std::make_pair(GetHLAlookaheadParameterHandle(), HLAlookaheadEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAmodifyLookaheadInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAmodifyLookaheadInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAlookahead)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAlookahead)
  {
    const HLAtimeIntervalEncoding& HLAlookaheadEncoder = static_cast<const HLAtimeIntervalEncoding&>(*HLAlookahead);
    parameters.insert(std::make_pair(GetHLAlookaheadParameterHandle(), HLAlookaheadEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAmodifyLookaheadInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAlookahead, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAlookahead)
  {
    const HLAtimeIntervalEncoding& HLAlookaheadEncoder = static_cast<const HLAtimeIntervalEncoding&>(*HLAlookahead);
    parameters.insert(std::make_pair(GetHLAlookaheadParameterHandle(), HLAlookaheadEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAmodifyLookaheadInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<uint8_t>&> HLAlookahead;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAtimeIntervalEncoding HLAlookaheadDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAlookaheadIter = parameters.find(GetHLAlookaheadParameterHandle());
  if (HLAlookaheadIter != parameters.end())
  {
    HLAlookaheadDecoder.decode(HLAlookaheadIter->second);
    HLAlookahead = HLAlookaheadDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAlookahead, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAmodifyLookaheadInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<const std::vector<uint8_t>&> HLAlookahead;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  HLAtimeIntervalEncoding HLAlookaheadDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAlookaheadIter = parameters.find(GetHLAlookaheadParameterHandle());
  if (HLAlookaheadIter != parameters.end())
  {
    HLAlookaheadDecoder.decode(HLAlookaheadIter->second);
    HLAlookahead = HLAlookaheadDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAlookahead, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAmodifyLookaheadInteractionClass::ReceiveCallbackHandle HLAmodifyLookaheadInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAmodifyLookaheadInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAmodifyLookaheadInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAlookaheadParameterHandle());
  return result;
}

// object class type 'HLAchangeAttributeOrderType'
HLAchangeAttributeOrderTypeInteractionClass::HLAchangeAttributeOrderTypeInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAchangeAttributeOrderType");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
  // parameter HLAsendOrder : HLAorderType
  mHLAsendOrderParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsendOrder");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAchangeAttributeOrderTypeInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAchangeAttributeOrderTypeInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAchangeAttributeOrderTypeInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAchangeAttributeOrderTypeInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAchangeAttributeOrderTypeInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<HLAorderType> HLAsendOrder, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  if (HLAsendOrder)
  {
    rti1516ev::HLAinteger32BE HLAsendOrderEncoder(static_cast<int32_t>(*HLAsendOrder));
    parameters.insert(std::make_pair(GetHLAsendOrderParameterHandle(), HLAsendOrderEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAchangeAttributeOrderTypeInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAchangeAttributeOrderTypeInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<HLAorderType> HLAsendOrder)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  if (HLAsendOrder)
  {
    rti1516ev::HLAinteger32BE HLAsendOrderEncoder(static_cast<int32_t>(*HLAsendOrder));
    parameters.insert(std::make_pair(GetHLAsendOrderParameterHandle(), HLAsendOrderEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAchangeAttributeOrderTypeInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<HLAorderType> HLAsendOrder, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAobjectInstance)
  {
    rti1516ev::HLAhandle HLAobjectInstanceEncoder(*HLAobjectInstance);
    parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  }
  if (HLAattributeList)
  {
    const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(*HLAattributeList);
    parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  }
  if (HLAsendOrder)
  {
    rti1516ev::HLAinteger32BE HLAsendOrderEncoder(static_cast<int32_t>(*HLAsendOrder));
    parameters.insert(std::make_pair(GetHLAsendOrderParameterHandle(), HLAsendOrderEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAchangeAttributeOrderTypeInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;
  optional<HLAorderType> HLAsendOrder;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  rti1516ev::HLAinteger32BE HLAsendOrderDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsendOrderIter = parameters.find(GetHLAsendOrderParameterHandle());
  if (HLAsendOrderIter != parameters.end())
  {
    HLAsendOrderDecoder.decode(HLAsendOrderIter->second);
    HLAsendOrder = static_cast<HLAorderType>(HLAsendOrderDecoder.get());
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, HLAattributeList, HLAsendOrder, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAchangeAttributeOrderTypeInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAobjectInstance;
  optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList;
  optional<HLAorderType> HLAsendOrder;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
    HLAobjectInstance = HLAobjectInstanceDecoder;
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
    HLAattributeList = HLAattributeListDecoder.get();
  }
  rti1516ev::HLAinteger32BE HLAsendOrderDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsendOrderIter = parameters.find(GetHLAsendOrderParameterHandle());
  if (HLAsendOrderIter != parameters.end())
  {
    HLAsendOrderDecoder.decode(HLAsendOrderIter->second);
    HLAsendOrder = static_cast<HLAorderType>(HLAsendOrderDecoder.get());
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAobjectInstance, HLAattributeList, HLAsendOrder, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAchangeAttributeOrderTypeInteractionClass::ReceiveCallbackHandle HLAchangeAttributeOrderTypeInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAchangeAttributeOrderTypeInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAchangeAttributeOrderTypeInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  result.insert(GetHLAsendOrderParameterHandle());
  return result;
}

// object class type 'HLAchangeInteractionOrderType'
HLAchangeInteractionOrderTypeInteractionClass::HLAchangeInteractionOrderTypeInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAserviceInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAchangeInteractionOrderType");
  // parameter HLAinteractionClass : HLAhandle
  mHLAinteractionClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClass");
  // parameter HLAsendOrder : HLAorderType
  mHLAsendOrderParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsendOrder");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAchangeInteractionOrderTypeInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAchangeInteractionOrderTypeInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAchangeInteractionOrderTypeInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAchangeInteractionOrderTypeInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAchangeInteractionOrderTypeInteractionClass::Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<HLAorderType> HLAsendOrder, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  if (HLAsendOrder)
  {
    rti1516ev::HLAinteger32BE HLAsendOrderEncoder(static_cast<int32_t>(*HLAsendOrder));
    parameters.insert(std::make_pair(GetHLAsendOrderParameterHandle(), HLAsendOrderEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAchangeInteractionOrderTypeInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAchangeInteractionOrderTypeInteractionClass::send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<HLAorderType> HLAsendOrder)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  if (HLAsendOrder)
  {
    rti1516ev::HLAinteger32BE HLAsendOrderEncoder(static_cast<int32_t>(*HLAsendOrder));
    parameters.insert(std::make_pair(GetHLAsendOrderParameterHandle(), HLAsendOrderEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAchangeInteractionOrderTypeInteractionClass::sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<HLAorderType> HLAsendOrder, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAfederate)
  {
    rti1516ev::HLAhandle HLAfederateEncoder(*HLAfederate);
    parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  }
  if (HLAinteractionClass)
  {
    rti1516ev::HLAhandle HLAinteractionClassEncoder(*HLAinteractionClass);
    parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  }
  if (HLAsendOrder)
  {
    rti1516ev::HLAinteger32BE HLAsendOrderEncoder(static_cast<int32_t>(*HLAsendOrder));
    parameters.insert(std::make_pair(GetHLAsendOrderParameterHandle(), HLAsendOrderEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAchangeInteractionOrderTypeInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAinteractionClass;
  optional<HLAorderType> HLAsendOrder;
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
    HLAinteractionClass = HLAinteractionClassDecoder;
  }
  rti1516ev::HLAinteger32BE HLAsendOrderDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsendOrderIter = parameters.find(GetHLAsendOrderParameterHandle());
  if (HLAsendOrderIter != parameters.end())
  {
    HLAsendOrderDecoder.decode(HLAsendOrderIter->second);
    HLAsendOrder = static_cast<HLAorderType>(HLAsendOrderDecoder.get());
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClass, HLAsendOrder, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAchangeInteractionOrderTypeInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<rti1516ev::HLAhandle> HLAfederate;
  optional<rti1516ev::HLAhandle> HLAinteractionClass;
  optional<HLAorderType> HLAsendOrder;

  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
    HLAfederate = HLAfederateDecoder;
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
    HLAinteractionClass = HLAinteractionClassDecoder;
  }
  rti1516ev::HLAinteger32BE HLAsendOrderDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsendOrderIter = parameters.find(GetHLAsendOrderParameterHandle());
  if (HLAsendOrderIter != parameters.end())
  {
    HLAsendOrderDecoder.decode(HLAsendOrderIter->second);
    HLAsendOrder = static_cast<HLAorderType>(HLAsendOrderDecoder.get());
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederate, HLAinteractionClass, HLAsendOrder, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAchangeInteractionOrderTypeInteractionClass::ReceiveCallbackHandle HLAchangeInteractionOrderTypeInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAchangeInteractionOrderTypeInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAchangeInteractionOrderTypeInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassParameterHandle());
  result.insert(GetHLAsendOrderParameterHandle());
  return result;
}

// object class type 'HLAfederation'
HLAfederationInteractionClass::HLAfederationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAmanagerInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAfederationInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAfederationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAfederationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAfederationInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLAfederationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAfederationInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAfederationInteractionClass::sendWithTime(int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAfederationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(optional<int64_t>(), optional<OrderType>());
  }
}

void HLAfederationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{

  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAfederationInteractionClass::ReceiveCallbackHandle HLAfederationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAfederationInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAfederationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLAadjust'
HLAadjustInteractionClass::HLAadjustInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAfederationInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLAadjust");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAadjustInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAadjustInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAadjustInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAadjustInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLAadjustInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAadjustInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAadjustInteractionClass::sendWithTime(int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAadjustInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(optional<int64_t>(), optional<OrderType>());
  }
}

void HLAadjustInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{

  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAadjustInteractionClass::ReceiveCallbackHandle HLAadjustInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAadjustInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAadjustInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLAsetSwitches'
HLAsetSwitchesInteractionClass::HLAsetSwitchesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAadjustInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLAadjust.HLAsetSwitches");
  // parameter HLAautoProvide : HLAswitch
  mHLAautoProvideParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAautoProvide");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAsetSwitchesInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAsetSwitchesInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsetSwitchesInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsetSwitchesInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAsetSwitchesInteractionClass::Subscribe(optional<HLAswitch> HLAautoProvide, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAautoProvide)
  {
    rti1516ev::HLAinteger32BE HLAautoProvideEncoder(static_cast<int32_t>(*HLAautoProvide));
    parameters.insert(std::make_pair(GetHLAautoProvideParameterHandle(), HLAautoProvideEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAsetSwitchesInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsetSwitchesInteractionClass::send(optional<HLAswitch> HLAautoProvide)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAautoProvide)
  {
    rti1516ev::HLAinteger32BE HLAautoProvideEncoder(static_cast<int32_t>(*HLAautoProvide));
    parameters.insert(std::make_pair(GetHLAautoProvideParameterHandle(), HLAautoProvideEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsetSwitchesInteractionClass::sendWithTime(optional<HLAswitch> HLAautoProvide, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAautoProvide)
  {
    rti1516ev::HLAinteger32BE HLAautoProvideEncoder(static_cast<int32_t>(*HLAautoProvide));
    parameters.insert(std::make_pair(GetHLAautoProvideParameterHandle(), HLAautoProvideEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAsetSwitchesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<HLAswitch> HLAautoProvide;
  rti1516ev::HLAinteger32BE HLAautoProvideDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAautoProvideIter = parameters.find(GetHLAautoProvideParameterHandle());
  if (HLAautoProvideIter != parameters.end())
  {
    HLAautoProvideDecoder.decode(HLAautoProvideIter->second);
    HLAautoProvide = static_cast<HLAswitch>(HLAautoProvideDecoder.get());
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAautoProvide, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAsetSwitchesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<HLAswitch> HLAautoProvide;

  rti1516ev::HLAinteger32BE HLAautoProvideDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAautoProvideIter = parameters.find(GetHLAautoProvideParameterHandle());
  if (HLAautoProvideIter != parameters.end())
  {
    HLAautoProvideDecoder.decode(HLAautoProvideIter->second);
    HLAautoProvide = static_cast<HLAswitch>(HLAautoProvideDecoder.get());
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAautoProvide, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAsetSwitchesInteractionClass::ReceiveCallbackHandle HLAsetSwitchesInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAsetSwitchesInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAsetSwitchesInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAautoProvideParameterHandle());
  return result;
}

// object class type 'HLArequest'
HLArequestInteractionClass::HLArequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAfederationInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLArequestInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestInteractionClass::sendWithTime(int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{

  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestInteractionClass::ReceiveCallbackHandle HLArequestInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLArequestSynchronizationPoints'
HLArequestSynchronizationPointsInteractionClass::HLArequestSynchronizationPointsInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest.HLArequestSynchronizationPoints");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestSynchronizationPointsInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestSynchronizationPointsInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestSynchronizationPointsInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestSynchronizationPointsInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLArequestSynchronizationPointsInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestSynchronizationPointsInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestSynchronizationPointsInteractionClass::sendWithTime(int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestSynchronizationPointsInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestSynchronizationPointsInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{

  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestSynchronizationPointsInteractionClass::ReceiveCallbackHandle HLArequestSynchronizationPointsInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestSynchronizationPointsInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestSynchronizationPointsInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLArequestSynchronizationPointStatus'
HLArequestSynchronizationPointStatusInteractionClass::HLArequestSynchronizationPointStatusInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest.HLArequestSynchronizationPointStatus");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestSynchronizationPointStatusInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestSynchronizationPointStatusInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestSynchronizationPointStatusInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestSynchronizationPointStatusInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLArequestSynchronizationPointStatusInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestSynchronizationPointStatusInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestSynchronizationPointStatusInteractionClass::sendWithTime(int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestSynchronizationPointStatusInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestSynchronizationPointStatusInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{

  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestSynchronizationPointStatusInteractionClass::ReceiveCallbackHandle HLArequestSynchronizationPointStatusInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestSynchronizationPointStatusInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestSynchronizationPointStatusInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLArequestFOMmoduleData'
HLArequestFOMmoduleDataInteractionClass::HLArequestFOMmoduleDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest.HLArequestFOMmoduleData");
  // parameter HLAFOMmoduleIndicator : HLAindex
  mHLAFOMmoduleIndicatorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAFOMmoduleIndicator");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestFOMmoduleDataInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestFOMmoduleDataInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestFOMmoduleDataInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestFOMmoduleDataInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLArequestFOMmoduleDataInteractionClass::Subscribe(optional<HLAindex> HLAFOMmoduleIndicator, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAFOMmoduleIndicator)
  {
    rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(*HLAFOMmoduleIndicator);
    parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLArequestFOMmoduleDataInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestFOMmoduleDataInteractionClass::send(optional<HLAindex> HLAFOMmoduleIndicator)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAFOMmoduleIndicator)
  {
    rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(*HLAFOMmoduleIndicator);
    parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestFOMmoduleDataInteractionClass::sendWithTime(optional<HLAindex> HLAFOMmoduleIndicator, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAFOMmoduleIndicator)
  {
    rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(*HLAFOMmoduleIndicator);
    parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestFOMmoduleDataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<HLAindex> HLAFOMmoduleIndicator;
  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleIndicatorIter = parameters.find(GetHLAFOMmoduleIndicatorParameterHandle());
  if (HLAFOMmoduleIndicatorIter != parameters.end())
  {
    HLAFOMmoduleIndicatorDecoder.decode(HLAFOMmoduleIndicatorIter->second);
    HLAFOMmoduleIndicator = HLAFOMmoduleIndicatorDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAFOMmoduleIndicator, optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestFOMmoduleDataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<HLAindex> HLAFOMmoduleIndicator;

  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleIndicatorIter = parameters.find(GetHLAFOMmoduleIndicatorParameterHandle());
  if (HLAFOMmoduleIndicatorIter != parameters.end())
  {
    HLAFOMmoduleIndicatorDecoder.decode(HLAFOMmoduleIndicatorIter->second);
    HLAFOMmoduleIndicator = HLAFOMmoduleIndicatorDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAFOMmoduleIndicator, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestFOMmoduleDataInteractionClass::ReceiveCallbackHandle HLArequestFOMmoduleDataInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestFOMmoduleDataInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestFOMmoduleDataInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAFOMmoduleIndicatorParameterHandle());
  return result;
}

// object class type 'HLArequestMIMdata'
HLArequestMIMdataInteractionClass::HLArequestMIMdataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLArequestInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest.HLArequestMIMdata");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLArequestMIMdataInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLArequestMIMdataInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestMIMdataInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestMIMdataInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLArequestMIMdataInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestMIMdataInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestMIMdataInteractionClass::sendWithTime(int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLArequestMIMdataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(optional<int64_t>(), optional<OrderType>());
  }
}

void HLArequestMIMdataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{

  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLArequestMIMdataInteractionClass::ReceiveCallbackHandle HLArequestMIMdataInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLArequestMIMdataInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLArequestMIMdataInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLAreport'
HLAreportInteractionClass::HLAreportInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAfederationInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}


void HLAreportInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportInteractionClass::sendWithTime(int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, OrderType orderType)
{

  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportInteractionClass::ReceiveCallbackHandle HLAreportInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLAreportSynchronizationPoints'
HLAreportSynchronizationPointsInteractionClass::HLAreportSynchronizationPointsInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport.HLAreportSynchronizationPoints");
  // parameter HLAsyncPoints : HLAsynchPointList
  mHLAsyncPointsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsyncPoints");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportSynchronizationPointsInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportSynchronizationPointsInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportSynchronizationPointsInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportSynchronizationPointsInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportSynchronizationPointsInteractionClass::Subscribe(optional<const std::vector<std::wstring>&> HLAsyncPoints, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAsyncPoints)
  {
    const HLAsynchPointListEncoding& HLAsyncPointsEncoder = static_cast<const HLAsynchPointListEncoding&>(*HLAsyncPoints);
    parameters.insert(std::make_pair(GetHLAsyncPointsParameterHandle(), HLAsyncPointsEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportSynchronizationPointsInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportSynchronizationPointsInteractionClass::send(optional<const std::vector<std::wstring>&> HLAsyncPoints)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAsyncPoints)
  {
    const HLAsynchPointListEncoding& HLAsyncPointsEncoder = static_cast<const HLAsynchPointListEncoding&>(*HLAsyncPoints);
    parameters.insert(std::make_pair(GetHLAsyncPointsParameterHandle(), HLAsyncPointsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportSynchronizationPointsInteractionClass::sendWithTime(optional<const std::vector<std::wstring>&> HLAsyncPoints, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAsyncPoints)
  {
    const HLAsynchPointListEncoding& HLAsyncPointsEncoder = static_cast<const HLAsynchPointListEncoding&>(*HLAsyncPoints);
    parameters.insert(std::make_pair(GetHLAsyncPointsParameterHandle(), HLAsyncPointsEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportSynchronizationPointsInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<const std::vector<std::wstring>&> HLAsyncPoints;
  HLAsynchPointListEncoding HLAsyncPointsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsyncPointsIter = parameters.find(GetHLAsyncPointsParameterHandle());
  if (HLAsyncPointsIter != parameters.end())
  {
    HLAsyncPointsDecoder.decode(HLAsyncPointsIter->second);
    HLAsyncPoints = HLAsyncPointsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAsyncPoints, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportSynchronizationPointsInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<const std::vector<std::wstring>&> HLAsyncPoints;

  HLAsynchPointListEncoding HLAsyncPointsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsyncPointsIter = parameters.find(GetHLAsyncPointsParameterHandle());
  if (HLAsyncPointsIter != parameters.end())
  {
    HLAsyncPointsDecoder.decode(HLAsyncPointsIter->second);
    HLAsyncPoints = HLAsyncPointsDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAsyncPoints, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportSynchronizationPointsInteractionClass::ReceiveCallbackHandle HLAreportSynchronizationPointsInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportSynchronizationPointsInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportSynchronizationPointsInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAsyncPointsParameterHandle());
  return result;
}

// object class type 'HLAreportSynchronizationPointStatus'
HLAreportSynchronizationPointStatusInteractionClass::HLAreportSynchronizationPointStatusInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport.HLAreportSynchronizationPointStatus");
  // parameter HLAsyncPointName : HLAunicodeString
  mHLAsyncPointNameParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsyncPointName");
  // parameter HLAsyncPointFederates : HLAsynchPointFederateList
  mHLAsyncPointFederatesParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsyncPointFederates");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportSynchronizationPointStatusInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportSynchronizationPointStatusInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportSynchronizationPointStatusInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportSynchronizationPointStatusInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportSynchronizationPointStatusInteractionClass::Subscribe(optional<std::wstring> HLAsyncPointName, optional<const std::vector<HLAsynchPointFederateEncoding>&> HLAsyncPointFederates, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAsyncPointName)
  {
    rti1516ev::HLAunicodeString HLAsyncPointNameEncoder(*HLAsyncPointName);
    parameters.insert(std::make_pair(GetHLAsyncPointNameParameterHandle(), HLAsyncPointNameEncoder.encode()));
  }
  if (HLAsyncPointFederates)
  {
    const HLAsynchPointFederateListEncoding& HLAsyncPointFederatesEncoder = static_cast<const HLAsynchPointFederateListEncoding&>(*HLAsyncPointFederates);
    parameters.insert(std::make_pair(GetHLAsyncPointFederatesParameterHandle(), HLAsyncPointFederatesEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportSynchronizationPointStatusInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportSynchronizationPointStatusInteractionClass::send(optional<std::wstring> HLAsyncPointName, optional<const std::vector<HLAsynchPointFederateEncoding>&> HLAsyncPointFederates)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAsyncPointName)
  {
    rti1516ev::HLAunicodeString HLAsyncPointNameEncoder(*HLAsyncPointName);
    parameters.insert(std::make_pair(GetHLAsyncPointNameParameterHandle(), HLAsyncPointNameEncoder.encode()));
  }
  if (HLAsyncPointFederates)
  {
    const HLAsynchPointFederateListEncoding& HLAsyncPointFederatesEncoder = static_cast<const HLAsynchPointFederateListEncoding&>(*HLAsyncPointFederates);
    parameters.insert(std::make_pair(GetHLAsyncPointFederatesParameterHandle(), HLAsyncPointFederatesEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportSynchronizationPointStatusInteractionClass::sendWithTime(optional<std::wstring> HLAsyncPointName, optional<const std::vector<HLAsynchPointFederateEncoding>&> HLAsyncPointFederates, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAsyncPointName)
  {
    rti1516ev::HLAunicodeString HLAsyncPointNameEncoder(*HLAsyncPointName);
    parameters.insert(std::make_pair(GetHLAsyncPointNameParameterHandle(), HLAsyncPointNameEncoder.encode()));
  }
  if (HLAsyncPointFederates)
  {
    const HLAsynchPointFederateListEncoding& HLAsyncPointFederatesEncoder = static_cast<const HLAsynchPointFederateListEncoding&>(*HLAsyncPointFederates);
    parameters.insert(std::make_pair(GetHLAsyncPointFederatesParameterHandle(), HLAsyncPointFederatesEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportSynchronizationPointStatusInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<std::wstring> HLAsyncPointName;
  optional<const std::vector<HLAsynchPointFederateEncoding>&> HLAsyncPointFederates;
  rti1516ev::HLAunicodeString HLAsyncPointNameDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsyncPointNameIter = parameters.find(GetHLAsyncPointNameParameterHandle());
  if (HLAsyncPointNameIter != parameters.end())
  {
    HLAsyncPointNameDecoder.decode(HLAsyncPointNameIter->second);
    HLAsyncPointName = HLAsyncPointNameDecoder.get();
  }
  HLAsynchPointFederateListEncoding HLAsyncPointFederatesDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsyncPointFederatesIter = parameters.find(GetHLAsyncPointFederatesParameterHandle());
  if (HLAsyncPointFederatesIter != parameters.end())
  {
    HLAsyncPointFederatesDecoder.decode(HLAsyncPointFederatesIter->second);
    HLAsyncPointFederates = HLAsyncPointFederatesDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAsyncPointName, HLAsyncPointFederates, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportSynchronizationPointStatusInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<std::wstring> HLAsyncPointName;
  optional<const std::vector<HLAsynchPointFederateEncoding>&> HLAsyncPointFederates;

  rti1516ev::HLAunicodeString HLAsyncPointNameDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsyncPointNameIter = parameters.find(GetHLAsyncPointNameParameterHandle());
  if (HLAsyncPointNameIter != parameters.end())
  {
    HLAsyncPointNameDecoder.decode(HLAsyncPointNameIter->second);
    HLAsyncPointName = HLAsyncPointNameDecoder.get();
  }
  HLAsynchPointFederateListEncoding HLAsyncPointFederatesDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsyncPointFederatesIter = parameters.find(GetHLAsyncPointFederatesParameterHandle());
  if (HLAsyncPointFederatesIter != parameters.end())
  {
    HLAsyncPointFederatesDecoder.decode(HLAsyncPointFederatesIter->second);
    HLAsyncPointFederates = HLAsyncPointFederatesDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAsyncPointName, HLAsyncPointFederates, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportSynchronizationPointStatusInteractionClass::ReceiveCallbackHandle HLAreportSynchronizationPointStatusInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportSynchronizationPointStatusInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportSynchronizationPointStatusInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAsyncPointNameParameterHandle());
  result.insert(GetHLAsyncPointFederatesParameterHandle());
  return result;
}

// object class type 'HLAreportFOMmoduleData'
HLAreportFOMmoduleDataInteractionClass::HLAreportFOMmoduleDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport.HLAreportFOMmoduleData");
  // parameter HLAFOMmoduleIndicator : HLAindex
  mHLAFOMmoduleIndicatorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAFOMmoduleIndicator");
  // parameter HLAFOMmoduleData : HLAunicodeString
  mHLAFOMmoduleDataParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAFOMmoduleData");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportFOMmoduleDataInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportFOMmoduleDataInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportFOMmoduleDataInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportFOMmoduleDataInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportFOMmoduleDataInteractionClass::Subscribe(optional<HLAindex> HLAFOMmoduleIndicator, optional<std::wstring> HLAFOMmoduleData, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAFOMmoduleIndicator)
  {
    rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(*HLAFOMmoduleIndicator);
    parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  }
  if (HLAFOMmoduleData)
  {
    rti1516ev::HLAunicodeString HLAFOMmoduleDataEncoder(*HLAFOMmoduleData);
    parameters.insert(std::make_pair(GetHLAFOMmoduleDataParameterHandle(), HLAFOMmoduleDataEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportFOMmoduleDataInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportFOMmoduleDataInteractionClass::send(optional<HLAindex> HLAFOMmoduleIndicator, optional<std::wstring> HLAFOMmoduleData)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAFOMmoduleIndicator)
  {
    rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(*HLAFOMmoduleIndicator);
    parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  }
  if (HLAFOMmoduleData)
  {
    rti1516ev::HLAunicodeString HLAFOMmoduleDataEncoder(*HLAFOMmoduleData);
    parameters.insert(std::make_pair(GetHLAFOMmoduleDataParameterHandle(), HLAFOMmoduleDataEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportFOMmoduleDataInteractionClass::sendWithTime(optional<HLAindex> HLAFOMmoduleIndicator, optional<std::wstring> HLAFOMmoduleData, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAFOMmoduleIndicator)
  {
    rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(*HLAFOMmoduleIndicator);
    parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  }
  if (HLAFOMmoduleData)
  {
    rti1516ev::HLAunicodeString HLAFOMmoduleDataEncoder(*HLAFOMmoduleData);
    parameters.insert(std::make_pair(GetHLAFOMmoduleDataParameterHandle(), HLAFOMmoduleDataEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportFOMmoduleDataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<HLAindex> HLAFOMmoduleIndicator;
  optional<std::wstring> HLAFOMmoduleData;
  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleIndicatorIter = parameters.find(GetHLAFOMmoduleIndicatorParameterHandle());
  if (HLAFOMmoduleIndicatorIter != parameters.end())
  {
    HLAFOMmoduleIndicatorDecoder.decode(HLAFOMmoduleIndicatorIter->second);
    HLAFOMmoduleIndicator = HLAFOMmoduleIndicatorDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAFOMmoduleDataDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleDataIter = parameters.find(GetHLAFOMmoduleDataParameterHandle());
  if (HLAFOMmoduleDataIter != parameters.end())
  {
    HLAFOMmoduleDataDecoder.decode(HLAFOMmoduleDataIter->second);
    HLAFOMmoduleData = HLAFOMmoduleDataDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAFOMmoduleIndicator, HLAFOMmoduleData, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportFOMmoduleDataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<HLAindex> HLAFOMmoduleIndicator;
  optional<std::wstring> HLAFOMmoduleData;

  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleIndicatorIter = parameters.find(GetHLAFOMmoduleIndicatorParameterHandle());
  if (HLAFOMmoduleIndicatorIter != parameters.end())
  {
    HLAFOMmoduleIndicatorDecoder.decode(HLAFOMmoduleIndicatorIter->second);
    HLAFOMmoduleIndicator = HLAFOMmoduleIndicatorDecoder.get();
  }
  rti1516ev::HLAunicodeString HLAFOMmoduleDataDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleDataIter = parameters.find(GetHLAFOMmoduleDataParameterHandle());
  if (HLAFOMmoduleDataIter != parameters.end())
  {
    HLAFOMmoduleDataDecoder.decode(HLAFOMmoduleDataIter->second);
    HLAFOMmoduleData = HLAFOMmoduleDataDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAFOMmoduleIndicator, HLAFOMmoduleData, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportFOMmoduleDataInteractionClass::ReceiveCallbackHandle HLAreportFOMmoduleDataInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportFOMmoduleDataInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportFOMmoduleDataInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAFOMmoduleIndicatorParameterHandle());
  result.insert(GetHLAFOMmoduleDataParameterHandle());
  return result;
}

// object class type 'HLAreportMIMdata'
HLAreportMIMdataInteractionClass::HLAreportMIMdataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAreportInteractionClass* baseClass)
{
  mInteractionClassRegistry = interactionClassRegistry;
  mRtiAmbassador = rtiAmbassador;

  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport.HLAreportMIMdata");
  // parameter HLAMIMdata : HLAunicodeString
  mHLAMIMdataParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAMIMdata");
}

// get the corresponding *object* class registry, for access to objects sent as parameters
ObjectClassRegistry* HLAreportMIMdataInteractionClass::GetObjectClassRegistry()
{
  return mInteractionClassRegistry->GetObjectClassRegistry();
}

void HLAreportMIMdataInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportMIMdataInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportMIMdataInteractionClass::Subscribe(bool deliverToSelf)
{
  mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  mSubscribed = true;
}

void HLAreportMIMdataInteractionClass::Subscribe(optional<std::wstring> HLAMIMdata, bool deliverToSelf)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAMIMdata)
  {
    rti1516ev::HLAunicodeString HLAMIMdataEncoder(*HLAMIMdata);
    parameters.insert(std::make_pair(GetHLAMIMdataParameterHandle(), HLAMIMdataEncoder.encode()));
  }
  mRtiAmbassador->subscribeInteractionClassWithFilter(mInteractionClassHandle, parameters);
  mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, deliverToSelf);
  // we must always set mSubscribed, otherwise we can't unsubscribe
  mSubscribed = true;
}

void HLAreportMIMdataInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportMIMdataInteractionClass::send(optional<std::wstring> HLAMIMdata)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAMIMdata)
  {
    rti1516ev::HLAunicodeString HLAMIMdataEncoder(*HLAMIMdata);
    parameters.insert(std::make_pair(GetHLAMIMdataParameterHandle(), HLAMIMdataEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportMIMdataInteractionClass::sendWithTime(optional<std::wstring> HLAMIMdata, int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  if (HLAMIMdata)
  {
    rti1516ev::HLAunicodeString HLAMIMdataEncoder(*HLAMIMdata);
    parameters.insert(std::make_pair(GetHLAMIMdataParameterHandle(), HLAMIMdataEncoder.encode()));
  }
  try {
    mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
  }
  catch (const rti1516ev::InvalidLogicalTime& e)
  {
    throw InvalidLogicalTime(to_string(e.what()));
  }
  catch (const rti1516ev::Exception& e)
  {
    throw std::runtime_error(to_string(e.what()));
  }
}

void HLAreportMIMdataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  optional<std::wstring> HLAMIMdata;
  rti1516ev::HLAunicodeString HLAMIMdataDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAMIMdataIter = parameters.find(GetHLAMIMdataParameterHandle());
  if (HLAMIMdataIter != parameters.end())
  {
    HLAMIMdataDecoder.decode(HLAMIMdataIter->second);
    HLAMIMdata = HLAMIMdataDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAMIMdata, optional<int64_t>(), optional<OrderType>());
  }
}

void HLAreportMIMdataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters , const rti1516ev::LogicalTime& time, OrderType orderType)
{
  optional<std::wstring> HLAMIMdata;

  rti1516ev::HLAunicodeString HLAMIMdataDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAMIMdataIter = parameters.find(GetHLAMIMdataParameterHandle());
  if (HLAMIMdataIter != parameters.end())
  {
    HLAMIMdataDecoder.decode(HLAMIMdataIter->second);
    HLAMIMdata = HLAMIMdataDecoder.get();
  }
  for (auto& entry : mReceiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAMIMdata, static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime(), orderType);
  }
}

HLAreportMIMdataInteractionClass::ReceiveCallbackHandle HLAreportMIMdataInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  ReceiveCallbackHandle key = mReceiveCallbacksNextKey++;
  mReceiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

void HLAreportMIMdataInteractionClass::UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle)
{
  auto iter = mReceiveCallbacks.find(callbackHandle);
  if (iter != mReceiveCallbacks.end())
  {
    mReceiveCallbacks.erase(iter);
  }
}

rti1516ev::ParameterHandleSet HLAreportMIMdataInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAMIMdataParameterHandle());
  return result;
}

 

InteractionClassRegistry::InteractionClassRegistry(ObjectClassRegistry* objectClassRegistry)
  : mRtiAmbassador(nullptr), mObjectClassRegistry(objectClassRegistry)
{
}

InteractionClassRegistry::~InteractionClassRegistry()
{
}

void InteractionClassRegistry::Initialize(rti1516ev::RTIambassador* rtiAmbassador)
{
  mRtiAmbassador = rtiAmbassador;
  try
  {
    mHLAinteractionRootInteractionClass = std::unique_ptr<HLAinteractionRootInteractionClass>(new HLAinteractionRootInteractionClass(mRtiAmbassador, this));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAinteractionRootInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAinteractionRootInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAinteractionRootInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAinteractionRootInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAinteractionRootInteractionClass.get() != nullptr);
    mHLAmanagerInteractionClass = std::unique_ptr<HLAmanagerInteractionClass>(new HLAmanagerInteractionClass(mRtiAmbassador, this, mHLAinteractionRootInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAmanagerInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAmanagerInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAmanagerInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAmanagerInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAmanagerInteractionClass.get() != nullptr);
    mHLAfederateInteractionClass = std::unique_ptr<HLAfederateInteractionClass>(new HLAfederateInteractionClass(mRtiAmbassador, this, mHLAmanagerInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAfederateInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAfederateInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAfederateInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAfederateInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAfederateInteractionClass.get() != nullptr);
    mHLAadjustInteractionClass = std::unique_ptr<HLAadjustInteractionClass>(new HLAadjustInteractionClass(mRtiAmbassador, this, mHLAfederateInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAadjustInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAadjustInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAadjustInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAadjustInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAadjustInteractionClass.get() != nullptr);
    mHLAsetTimingInteractionClass = std::unique_ptr<HLAsetTimingInteractionClass>(new HLAsetTimingInteractionClass(mRtiAmbassador, this, mHLAadjustInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAsetTimingInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAsetTimingInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAsetTimingInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAsetTimingInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAadjustInteractionClass.get() != nullptr);
    mHLAmodifyAttributeStateInteractionClass = std::unique_ptr<HLAmodifyAttributeStateInteractionClass>(new HLAmodifyAttributeStateInteractionClass(mRtiAmbassador, this, mHLAadjustInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAmodifyAttributeStateInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAmodifyAttributeStateInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAmodifyAttributeStateInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAmodifyAttributeStateInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAadjustInteractionClass.get() != nullptr);
    mHLAsetServiceReportingInteractionClass = std::unique_ptr<HLAsetServiceReportingInteractionClass>(new HLAsetServiceReportingInteractionClass(mRtiAmbassador, this, mHLAadjustInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAsetServiceReportingInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAsetServiceReportingInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAsetServiceReportingInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAsetServiceReportingInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAadjustInteractionClass.get() != nullptr);
    mHLAsetExceptionReportingInteractionClass = std::unique_ptr<HLAsetExceptionReportingInteractionClass>(new HLAsetExceptionReportingInteractionClass(mRtiAmbassador, this, mHLAadjustInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAsetExceptionReportingInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAsetExceptionReportingInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAsetExceptionReportingInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAsetExceptionReportingInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAadjustInteractionClass.get() != nullptr);
    mHLAsetSwitchesInteractionClass = std::unique_ptr<HLAsetSwitchesInteractionClass>(new HLAsetSwitchesInteractionClass(mRtiAmbassador, this, mHLAadjustInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAsetSwitchesInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAsetSwitchesInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAsetSwitchesInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAsetSwitchesInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAfederateInteractionClass.get() != nullptr);
    mHLArequestInteractionClass = std::unique_ptr<HLArequestInteractionClass>(new HLArequestInteractionClass(mRtiAmbassador, this, mHLAfederateInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestPublicationsInteractionClass = std::unique_ptr<HLArequestPublicationsInteractionClass>(new HLArequestPublicationsInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestPublicationsInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestPublicationsInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestPublicationsInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestPublicationsInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestSubscriptionsInteractionClass = std::unique_ptr<HLArequestSubscriptionsInteractionClass>(new HLArequestSubscriptionsInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestSubscriptionsInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestSubscriptionsInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestSubscriptionsInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestSubscriptionsInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestObjectInstancesThatCanBeDeletedInteractionClass = std::unique_ptr<HLArequestObjectInstancesThatCanBeDeletedInteractionClass>(new HLArequestObjectInstancesThatCanBeDeletedInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestObjectInstancesThatCanBeDeletedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestObjectInstancesThatCanBeDeletedInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestObjectInstancesThatCanBeDeletedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestObjectInstancesThatCanBeDeletedInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestObjectInstancesUpdatedInteractionClass = std::unique_ptr<HLArequestObjectInstancesUpdatedInteractionClass>(new HLArequestObjectInstancesUpdatedInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestObjectInstancesUpdatedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestObjectInstancesUpdatedInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestObjectInstancesUpdatedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestObjectInstancesUpdatedInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestObjectInstancesReflectedInteractionClass = std::unique_ptr<HLArequestObjectInstancesReflectedInteractionClass>(new HLArequestObjectInstancesReflectedInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestObjectInstancesReflectedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestObjectInstancesReflectedInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestObjectInstancesReflectedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestObjectInstancesReflectedInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestUpdatesSentInteractionClass = std::unique_ptr<HLArequestUpdatesSentInteractionClass>(new HLArequestUpdatesSentInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestUpdatesSentInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestUpdatesSentInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestUpdatesSentInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestUpdatesSentInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestInteractionsSentInteractionClass = std::unique_ptr<HLArequestInteractionsSentInteractionClass>(new HLArequestInteractionsSentInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestInteractionsSentInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestInteractionsSentInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestInteractionsSentInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestInteractionsSentInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestReflectionsReceivedInteractionClass = std::unique_ptr<HLArequestReflectionsReceivedInteractionClass>(new HLArequestReflectionsReceivedInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestReflectionsReceivedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestReflectionsReceivedInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestReflectionsReceivedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestReflectionsReceivedInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestInteractionsReceivedInteractionClass = std::unique_ptr<HLArequestInteractionsReceivedInteractionClass>(new HLArequestInteractionsReceivedInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestInteractionsReceivedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestInteractionsReceivedInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestInteractionsReceivedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestInteractionsReceivedInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestObjectInstanceInformationInteractionClass = std::unique_ptr<HLArequestObjectInstanceInformationInteractionClass>(new HLArequestObjectInstanceInformationInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestObjectInstanceInformationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestObjectInstanceInformationInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestObjectInstanceInformationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestObjectInstanceInformationInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestFOMmoduleDataInteractionClass = std::unique_ptr<HLArequestFOMmoduleDataInteractionClass>(new HLArequestFOMmoduleDataInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestFOMmoduleDataInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestFOMmoduleDataInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestFOMmoduleDataInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestFOMmoduleDataInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAfederateInteractionClass.get() != nullptr);
    mHLAreportInteractionClass = std::unique_ptr<HLAreportInteractionClass>(new HLAreportInteractionClass(mRtiAmbassador, this, mHLAfederateInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportObjectClassPublicationInteractionClass = std::unique_ptr<HLAreportObjectClassPublicationInteractionClass>(new HLAreportObjectClassPublicationInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportObjectClassPublicationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportObjectClassPublicationInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportObjectClassPublicationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportObjectClassPublicationInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportInteractionPublicationInteractionClass = std::unique_ptr<HLAreportInteractionPublicationInteractionClass>(new HLAreportInteractionPublicationInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportInteractionPublicationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportInteractionPublicationInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportInteractionPublicationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportInteractionPublicationInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportObjectClassSubscriptionInteractionClass = std::unique_ptr<HLAreportObjectClassSubscriptionInteractionClass>(new HLAreportObjectClassSubscriptionInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportObjectClassSubscriptionInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportObjectClassSubscriptionInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportObjectClassSubscriptionInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportObjectClassSubscriptionInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportInteractionSubscriptionInteractionClass = std::unique_ptr<HLAreportInteractionSubscriptionInteractionClass>(new HLAreportInteractionSubscriptionInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportInteractionSubscriptionInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportInteractionSubscriptionInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportInteractionSubscriptionInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportInteractionSubscriptionInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportObjectInstancesThatCanBeDeletedInteractionClass = std::unique_ptr<HLAreportObjectInstancesThatCanBeDeletedInteractionClass>(new HLAreportObjectInstancesThatCanBeDeletedInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportObjectInstancesThatCanBeDeletedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportObjectInstancesThatCanBeDeletedInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportObjectInstancesThatCanBeDeletedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportObjectInstancesThatCanBeDeletedInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportObjectInstancesUpdatedInteractionClass = std::unique_ptr<HLAreportObjectInstancesUpdatedInteractionClass>(new HLAreportObjectInstancesUpdatedInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportObjectInstancesUpdatedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportObjectInstancesUpdatedInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportObjectInstancesUpdatedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportObjectInstancesUpdatedInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportObjectInstancesReflectedInteractionClass = std::unique_ptr<HLAreportObjectInstancesReflectedInteractionClass>(new HLAreportObjectInstancesReflectedInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportObjectInstancesReflectedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportObjectInstancesReflectedInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportObjectInstancesReflectedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportObjectInstancesReflectedInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportUpdatesSentInteractionClass = std::unique_ptr<HLAreportUpdatesSentInteractionClass>(new HLAreportUpdatesSentInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportUpdatesSentInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportUpdatesSentInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportUpdatesSentInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportUpdatesSentInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportReflectionsReceivedInteractionClass = std::unique_ptr<HLAreportReflectionsReceivedInteractionClass>(new HLAreportReflectionsReceivedInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportReflectionsReceivedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportReflectionsReceivedInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportReflectionsReceivedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportReflectionsReceivedInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportInteractionsSentInteractionClass = std::unique_ptr<HLAreportInteractionsSentInteractionClass>(new HLAreportInteractionsSentInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportInteractionsSentInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportInteractionsSentInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportInteractionsSentInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportInteractionsSentInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportInteractionsReceivedInteractionClass = std::unique_ptr<HLAreportInteractionsReceivedInteractionClass>(new HLAreportInteractionsReceivedInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportInteractionsReceivedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportInteractionsReceivedInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportInteractionsReceivedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportInteractionsReceivedInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportObjectInstanceInformationInteractionClass = std::unique_ptr<HLAreportObjectInstanceInformationInteractionClass>(new HLAreportObjectInstanceInformationInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportObjectInstanceInformationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportObjectInstanceInformationInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportObjectInstanceInformationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportObjectInstanceInformationInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportExceptionInteractionClass = std::unique_ptr<HLAreportExceptionInteractionClass>(new HLAreportExceptionInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportExceptionInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportExceptionInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportExceptionInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportExceptionInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportServiceInvocationInteractionClass = std::unique_ptr<HLAreportServiceInvocationInteractionClass>(new HLAreportServiceInvocationInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportServiceInvocationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportServiceInvocationInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportServiceInvocationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportServiceInvocationInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportMOMexceptionInteractionClass = std::unique_ptr<HLAreportMOMexceptionInteractionClass>(new HLAreportMOMexceptionInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportMOMexceptionInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportMOMexceptionInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportMOMexceptionInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportMOMexceptionInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportFederateLostInteractionClass = std::unique_ptr<HLAreportFederateLostInteractionClass>(new HLAreportFederateLostInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportFederateLostInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportFederateLostInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportFederateLostInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportFederateLostInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportFOMmoduleDataInteractionClass = std::unique_ptr<HLAreportFOMmoduleDataInteractionClass>(new HLAreportFOMmoduleDataInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportFOMmoduleDataInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportFOMmoduleDataInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportFOMmoduleDataInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportFOMmoduleDataInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAfederateInteractionClass.get() != nullptr);
    mHLAserviceInteractionClass = std::unique_ptr<HLAserviceInteractionClass>(new HLAserviceInteractionClass(mRtiAmbassador, this, mHLAfederateInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAserviceInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAserviceInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAserviceInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAserviceInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAresignFederationExecutionInteractionClass = std::unique_ptr<HLAresignFederationExecutionInteractionClass>(new HLAresignFederationExecutionInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAresignFederationExecutionInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAresignFederationExecutionInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAresignFederationExecutionInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAresignFederationExecutionInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAsynchronizationPointAchievedInteractionClass = std::unique_ptr<HLAsynchronizationPointAchievedInteractionClass>(new HLAsynchronizationPointAchievedInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAsynchronizationPointAchievedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAsynchronizationPointAchievedInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAsynchronizationPointAchievedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAsynchronizationPointAchievedInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAfederateSaveBegunInteractionClass = std::unique_ptr<HLAfederateSaveBegunInteractionClass>(new HLAfederateSaveBegunInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAfederateSaveBegunInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAfederateSaveBegunInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAfederateSaveBegunInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAfederateSaveBegunInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAfederateSaveCompleteInteractionClass = std::unique_ptr<HLAfederateSaveCompleteInteractionClass>(new HLAfederateSaveCompleteInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAfederateSaveCompleteInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAfederateSaveCompleteInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAfederateSaveCompleteInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAfederateSaveCompleteInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAfederateRestoreCompleteInteractionClass = std::unique_ptr<HLAfederateRestoreCompleteInteractionClass>(new HLAfederateRestoreCompleteInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAfederateRestoreCompleteInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAfederateRestoreCompleteInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAfederateRestoreCompleteInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAfederateRestoreCompleteInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLApublishObjectClassAttributesInteractionClass = std::unique_ptr<HLApublishObjectClassAttributesInteractionClass>(new HLApublishObjectClassAttributesInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLApublishObjectClassAttributesInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLApublishObjectClassAttributesInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLApublishObjectClassAttributesInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLApublishObjectClassAttributesInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAunpublishObjectClassAttributesInteractionClass = std::unique_ptr<HLAunpublishObjectClassAttributesInteractionClass>(new HLAunpublishObjectClassAttributesInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAunpublishObjectClassAttributesInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAunpublishObjectClassAttributesInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAunpublishObjectClassAttributesInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAunpublishObjectClassAttributesInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLApublishInteractionClassInteractionClass = std::unique_ptr<HLApublishInteractionClassInteractionClass>(new HLApublishInteractionClassInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLApublishInteractionClassInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLApublishInteractionClassInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLApublishInteractionClassInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLApublishInteractionClassInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAunpublishInteractionClassInteractionClass = std::unique_ptr<HLAunpublishInteractionClassInteractionClass>(new HLAunpublishInteractionClassInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAunpublishInteractionClassInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAunpublishInteractionClassInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAunpublishInteractionClassInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAunpublishInteractionClassInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAsubscribeObjectClassAttributesInteractionClass = std::unique_ptr<HLAsubscribeObjectClassAttributesInteractionClass>(new HLAsubscribeObjectClassAttributesInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAsubscribeObjectClassAttributesInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAsubscribeObjectClassAttributesInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAsubscribeObjectClassAttributesInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAsubscribeObjectClassAttributesInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAunsubscribeObjectClassAttributesInteractionClass = std::unique_ptr<HLAunsubscribeObjectClassAttributesInteractionClass>(new HLAunsubscribeObjectClassAttributesInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAunsubscribeObjectClassAttributesInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAunsubscribeObjectClassAttributesInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAunsubscribeObjectClassAttributesInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAunsubscribeObjectClassAttributesInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAsubscribeInteractionClassInteractionClass = std::unique_ptr<HLAsubscribeInteractionClassInteractionClass>(new HLAsubscribeInteractionClassInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAsubscribeInteractionClassInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAsubscribeInteractionClassInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAsubscribeInteractionClassInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAsubscribeInteractionClassInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAunsubscribeInteractionClassInteractionClass = std::unique_ptr<HLAunsubscribeInteractionClassInteractionClass>(new HLAunsubscribeInteractionClassInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAunsubscribeInteractionClassInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAunsubscribeInteractionClassInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAunsubscribeInteractionClassInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAunsubscribeInteractionClassInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAdeleteObjectInstanceInteractionClass = std::unique_ptr<HLAdeleteObjectInstanceInteractionClass>(new HLAdeleteObjectInstanceInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAdeleteObjectInstanceInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAdeleteObjectInstanceInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAdeleteObjectInstanceInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAdeleteObjectInstanceInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAlocalDeleteObjectInstanceInteractionClass = std::unique_ptr<HLAlocalDeleteObjectInstanceInteractionClass>(new HLAlocalDeleteObjectInstanceInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAlocalDeleteObjectInstanceInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAlocalDeleteObjectInstanceInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAlocalDeleteObjectInstanceInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAlocalDeleteObjectInstanceInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLArequestAttributeTransportationTypeChangeInteractionClass = std::unique_ptr<HLArequestAttributeTransportationTypeChangeInteractionClass>(new HLArequestAttributeTransportationTypeChangeInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestAttributeTransportationTypeChangeInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestAttributeTransportationTypeChangeInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestAttributeTransportationTypeChangeInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestAttributeTransportationTypeChangeInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLArequestInteractionTransportationTypeChangeInteractionClass = std::unique_ptr<HLArequestInteractionTransportationTypeChangeInteractionClass>(new HLArequestInteractionTransportationTypeChangeInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestInteractionTransportationTypeChangeInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestInteractionTransportationTypeChangeInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestInteractionTransportationTypeChangeInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestInteractionTransportationTypeChangeInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAunconditionalAttributeOwnershipDivestitureInteractionClass = std::unique_ptr<HLAunconditionalAttributeOwnershipDivestitureInteractionClass>(new HLAunconditionalAttributeOwnershipDivestitureInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAunconditionalAttributeOwnershipDivestitureInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAunconditionalAttributeOwnershipDivestitureInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAunconditionalAttributeOwnershipDivestitureInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAunconditionalAttributeOwnershipDivestitureInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAenableTimeRegulationInteractionClass = std::unique_ptr<HLAenableTimeRegulationInteractionClass>(new HLAenableTimeRegulationInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAenableTimeRegulationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAenableTimeRegulationInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAenableTimeRegulationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAenableTimeRegulationInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAdisableTimeRegulationInteractionClass = std::unique_ptr<HLAdisableTimeRegulationInteractionClass>(new HLAdisableTimeRegulationInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAdisableTimeRegulationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAdisableTimeRegulationInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAdisableTimeRegulationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAdisableTimeRegulationInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAenableTimeConstrainedInteractionClass = std::unique_ptr<HLAenableTimeConstrainedInteractionClass>(new HLAenableTimeConstrainedInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAenableTimeConstrainedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAenableTimeConstrainedInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAenableTimeConstrainedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAenableTimeConstrainedInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAdisableTimeConstrainedInteractionClass = std::unique_ptr<HLAdisableTimeConstrainedInteractionClass>(new HLAdisableTimeConstrainedInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAdisableTimeConstrainedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAdisableTimeConstrainedInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAdisableTimeConstrainedInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAdisableTimeConstrainedInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAtimeAdvanceRequestInteractionClass = std::unique_ptr<HLAtimeAdvanceRequestInteractionClass>(new HLAtimeAdvanceRequestInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAtimeAdvanceRequestInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAtimeAdvanceRequestInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAtimeAdvanceRequestInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAtimeAdvanceRequestInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAtimeAdvanceRequestAvailableInteractionClass = std::unique_ptr<HLAtimeAdvanceRequestAvailableInteractionClass>(new HLAtimeAdvanceRequestAvailableInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAtimeAdvanceRequestAvailableInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAtimeAdvanceRequestAvailableInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAtimeAdvanceRequestAvailableInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAtimeAdvanceRequestAvailableInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAnextMessageRequestInteractionClass = std::unique_ptr<HLAnextMessageRequestInteractionClass>(new HLAnextMessageRequestInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAnextMessageRequestInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAnextMessageRequestInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAnextMessageRequestInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAnextMessageRequestInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAnextMessageRequestAvailableInteractionClass = std::unique_ptr<HLAnextMessageRequestAvailableInteractionClass>(new HLAnextMessageRequestAvailableInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAnextMessageRequestAvailableInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAnextMessageRequestAvailableInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAnextMessageRequestAvailableInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAnextMessageRequestAvailableInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAflushQueueRequestInteractionClass = std::unique_ptr<HLAflushQueueRequestInteractionClass>(new HLAflushQueueRequestInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAflushQueueRequestInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAflushQueueRequestInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAflushQueueRequestInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAflushQueueRequestInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAenableAsynchronousDeliveryInteractionClass = std::unique_ptr<HLAenableAsynchronousDeliveryInteractionClass>(new HLAenableAsynchronousDeliveryInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAenableAsynchronousDeliveryInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAenableAsynchronousDeliveryInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAenableAsynchronousDeliveryInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAenableAsynchronousDeliveryInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAdisableAsynchronousDeliveryInteractionClass = std::unique_ptr<HLAdisableAsynchronousDeliveryInteractionClass>(new HLAdisableAsynchronousDeliveryInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAdisableAsynchronousDeliveryInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAdisableAsynchronousDeliveryInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAdisableAsynchronousDeliveryInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAdisableAsynchronousDeliveryInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAmodifyLookaheadInteractionClass = std::unique_ptr<HLAmodifyLookaheadInteractionClass>(new HLAmodifyLookaheadInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAmodifyLookaheadInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAmodifyLookaheadInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAmodifyLookaheadInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAmodifyLookaheadInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAchangeAttributeOrderTypeInteractionClass = std::unique_ptr<HLAchangeAttributeOrderTypeInteractionClass>(new HLAchangeAttributeOrderTypeInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAchangeAttributeOrderTypeInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAchangeAttributeOrderTypeInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAchangeAttributeOrderTypeInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAchangeAttributeOrderTypeInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAserviceInteractionClass.get() != nullptr);
    mHLAchangeInteractionOrderTypeInteractionClass = std::unique_ptr<HLAchangeInteractionOrderTypeInteractionClass>(new HLAchangeInteractionOrderTypeInteractionClass(mRtiAmbassador, this, mHLAserviceInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAchangeInteractionOrderTypeInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAchangeInteractionOrderTypeInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAchangeInteractionOrderTypeInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAchangeInteractionOrderTypeInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAmanagerInteractionClass.get() != nullptr);
    mHLAfederationInteractionClass = std::unique_ptr<HLAfederationInteractionClass>(new HLAfederationInteractionClass(mRtiAmbassador, this, mHLAmanagerInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAfederationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAfederationInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAfederationInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAfederationInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAfederationInteractionClass.get() != nullptr);
    mHLAadjustInteractionClass = std::unique_ptr<HLAadjustInteractionClass>(new HLAadjustInteractionClass(mRtiAmbassador, this, mHLAfederationInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAadjustInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAadjustInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAadjustInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAadjustInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAadjustInteractionClass.get() != nullptr);
    mHLAsetSwitchesInteractionClass = std::unique_ptr<HLAsetSwitchesInteractionClass>(new HLAsetSwitchesInteractionClass(mRtiAmbassador, this, mHLAadjustInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAsetSwitchesInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAsetSwitchesInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAsetSwitchesInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAsetSwitchesInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAfederationInteractionClass.get() != nullptr);
    mHLArequestInteractionClass = std::unique_ptr<HLArequestInteractionClass>(new HLArequestInteractionClass(mRtiAmbassador, this, mHLAfederationInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestSynchronizationPointsInteractionClass = std::unique_ptr<HLArequestSynchronizationPointsInteractionClass>(new HLArequestSynchronizationPointsInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestSynchronizationPointsInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestSynchronizationPointsInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestSynchronizationPointsInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestSynchronizationPointsInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestSynchronizationPointStatusInteractionClass = std::unique_ptr<HLArequestSynchronizationPointStatusInteractionClass>(new HLArequestSynchronizationPointStatusInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestSynchronizationPointStatusInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestSynchronizationPointStatusInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestSynchronizationPointStatusInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestSynchronizationPointStatusInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestFOMmoduleDataInteractionClass = std::unique_ptr<HLArequestFOMmoduleDataInteractionClass>(new HLArequestFOMmoduleDataInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestFOMmoduleDataInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestFOMmoduleDataInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestFOMmoduleDataInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestFOMmoduleDataInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLArequestInteractionClass.get() != nullptr);
    mHLArequestMIMdataInteractionClass = std::unique_ptr<HLArequestMIMdataInteractionClass>(new HLArequestMIMdataInteractionClass(mRtiAmbassador, this, mHLArequestInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLArequestMIMdataInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLArequestMIMdataInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLArequestMIMdataInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLArequestMIMdataInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAfederationInteractionClass.get() != nullptr);
    mHLAreportInteractionClass = std::unique_ptr<HLAreportInteractionClass>(new HLAreportInteractionClass(mRtiAmbassador, this, mHLAfederationInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportSynchronizationPointsInteractionClass = std::unique_ptr<HLAreportSynchronizationPointsInteractionClass>(new HLAreportSynchronizationPointsInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportSynchronizationPointsInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportSynchronizationPointsInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportSynchronizationPointsInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportSynchronizationPointsInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportSynchronizationPointStatusInteractionClass = std::unique_ptr<HLAreportSynchronizationPointStatusInteractionClass>(new HLAreportSynchronizationPointStatusInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportSynchronizationPointStatusInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportSynchronizationPointStatusInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportSynchronizationPointStatusInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportSynchronizationPointStatusInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportFOMmoduleDataInteractionClass = std::unique_ptr<HLAreportFOMmoduleDataInteractionClass>(new HLAreportFOMmoduleDataInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportFOMmoduleDataInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportFOMmoduleDataInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportFOMmoduleDataInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportFOMmoduleDataInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
  try
  {
    assert(mHLAreportInteractionClass.get() != nullptr);
    mHLAreportMIMdataInteractionClass = std::unique_ptr<HLAreportMIMdataInteractionClass>(new HLAreportMIMdataInteractionClass(mRtiAmbassador, this, mHLAreportInteractionClass.get()));
    mReceiveCallbacks.insert(std::make_pair(
      mHLAreportMIMdataInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters) {
        mHLAreportMIMdataInteractionClass->ReceiveInteraction(parameters);
      }));
    mReceiveWithTimeCallbacks.insert(std::make_pair(
      mHLAreportMIMdataInteractionClass->GetInteractionClassHandle(),
      [this](const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType orderType) {
        mHLAreportMIMdataInteractionClass->ReceiveInteraction(parameters, time, orderType);
      }));
  }
  catch (const rti1516ev::NameNotFound&)
  {
  }
} // Initialize

void InteractionClassRegistry::Finalize()
{
  mHLAinteractionRootInteractionClass.reset();
  mHLAmanagerInteractionClass.reset();
  mHLAfederateInteractionClass.reset();
  mHLAadjustInteractionClass.reset();
  mHLAsetTimingInteractionClass.reset();
  mHLAmodifyAttributeStateInteractionClass.reset();
  mHLAsetServiceReportingInteractionClass.reset();
  mHLAsetExceptionReportingInteractionClass.reset();
  mHLAsetSwitchesInteractionClass.reset();
  mHLArequestInteractionClass.reset();
  mHLArequestPublicationsInteractionClass.reset();
  mHLArequestSubscriptionsInteractionClass.reset();
  mHLArequestObjectInstancesThatCanBeDeletedInteractionClass.reset();
  mHLArequestObjectInstancesUpdatedInteractionClass.reset();
  mHLArequestObjectInstancesReflectedInteractionClass.reset();
  mHLArequestUpdatesSentInteractionClass.reset();
  mHLArequestInteractionsSentInteractionClass.reset();
  mHLArequestReflectionsReceivedInteractionClass.reset();
  mHLArequestInteractionsReceivedInteractionClass.reset();
  mHLArequestObjectInstanceInformationInteractionClass.reset();
  mHLArequestFOMmoduleDataInteractionClass.reset();
  mHLAreportInteractionClass.reset();
  mHLAreportObjectClassPublicationInteractionClass.reset();
  mHLAreportInteractionPublicationInteractionClass.reset();
  mHLAreportObjectClassSubscriptionInteractionClass.reset();
  mHLAreportInteractionSubscriptionInteractionClass.reset();
  mHLAreportObjectInstancesThatCanBeDeletedInteractionClass.reset();
  mHLAreportObjectInstancesUpdatedInteractionClass.reset();
  mHLAreportObjectInstancesReflectedInteractionClass.reset();
  mHLAreportUpdatesSentInteractionClass.reset();
  mHLAreportReflectionsReceivedInteractionClass.reset();
  mHLAreportInteractionsSentInteractionClass.reset();
  mHLAreportInteractionsReceivedInteractionClass.reset();
  mHLAreportObjectInstanceInformationInteractionClass.reset();
  mHLAreportExceptionInteractionClass.reset();
  mHLAreportServiceInvocationInteractionClass.reset();
  mHLAreportMOMexceptionInteractionClass.reset();
  mHLAreportFederateLostInteractionClass.reset();
  mHLAreportFOMmoduleDataInteractionClass.reset();
  mHLAserviceInteractionClass.reset();
  mHLAresignFederationExecutionInteractionClass.reset();
  mHLAsynchronizationPointAchievedInteractionClass.reset();
  mHLAfederateSaveBegunInteractionClass.reset();
  mHLAfederateSaveCompleteInteractionClass.reset();
  mHLAfederateRestoreCompleteInteractionClass.reset();
  mHLApublishObjectClassAttributesInteractionClass.reset();
  mHLAunpublishObjectClassAttributesInteractionClass.reset();
  mHLApublishInteractionClassInteractionClass.reset();
  mHLAunpublishInteractionClassInteractionClass.reset();
  mHLAsubscribeObjectClassAttributesInteractionClass.reset();
  mHLAunsubscribeObjectClassAttributesInteractionClass.reset();
  mHLAsubscribeInteractionClassInteractionClass.reset();
  mHLAunsubscribeInteractionClassInteractionClass.reset();
  mHLAdeleteObjectInstanceInteractionClass.reset();
  mHLAlocalDeleteObjectInstanceInteractionClass.reset();
  mHLArequestAttributeTransportationTypeChangeInteractionClass.reset();
  mHLArequestInteractionTransportationTypeChangeInteractionClass.reset();
  mHLAunconditionalAttributeOwnershipDivestitureInteractionClass.reset();
  mHLAenableTimeRegulationInteractionClass.reset();
  mHLAdisableTimeRegulationInteractionClass.reset();
  mHLAenableTimeConstrainedInteractionClass.reset();
  mHLAdisableTimeConstrainedInteractionClass.reset();
  mHLAtimeAdvanceRequestInteractionClass.reset();
  mHLAtimeAdvanceRequestAvailableInteractionClass.reset();
  mHLAnextMessageRequestInteractionClass.reset();
  mHLAnextMessageRequestAvailableInteractionClass.reset();
  mHLAflushQueueRequestInteractionClass.reset();
  mHLAenableAsynchronousDeliveryInteractionClass.reset();
  mHLAdisableAsynchronousDeliveryInteractionClass.reset();
  mHLAmodifyLookaheadInteractionClass.reset();
  mHLAchangeAttributeOrderTypeInteractionClass.reset();
  mHLAchangeInteractionOrderTypeInteractionClass.reset();
  mHLAfederationInteractionClass.reset();
  mHLAadjustInteractionClass.reset();
  mHLAsetSwitchesInteractionClass.reset();
  mHLArequestInteractionClass.reset();
  mHLArequestSynchronizationPointsInteractionClass.reset();
  mHLArequestSynchronizationPointStatusInteractionClass.reset();
  mHLArequestFOMmoduleDataInteractionClass.reset();
  mHLArequestMIMdataInteractionClass.reset();
  mHLAreportInteractionClass.reset();
  mHLAreportSynchronizationPointsInteractionClass.reset();
  mHLAreportSynchronizationPointStatusInteractionClass.reset();
  mHLAreportFOMmoduleDataInteractionClass.reset();
  mHLAreportMIMdataInteractionClass.reset();
  mRtiAmbassador = nullptr;
} // Initialize

void InteractionClassRegistry::ReceiveInteraction(rti1516ev::InteractionClassHandle theInteractionClass, const rti1516ev::ParameterHandleValueMap & parameters)
{
  if (mRtiAmbassador == nullptr)
  {
    throw NotInitialized();
  }
  auto iter = mReceiveCallbacks.find(theInteractionClass);
  if (iter != mReceiveCallbacks.end())
  {
    iter->second(parameters);
  }
}

void InteractionClassRegistry::ReceiveInteraction(rti1516ev::InteractionClassHandle theInteractionClass,
                                                  const rti1516ev::ParameterHandleValueMap & parameters,
                                                  const rti1516ev::LogicalTime& time,
                                                  OrderType orderType)
{
  if (mRtiAmbassador == nullptr)
  {
    throw NotInitialized();
  }
  auto iter = mReceiveWithTimeCallbacks.find(theInteractionClass);
  if (iter != mReceiveWithTimeCallbacks.end())
  {
    iter->second(parameters, time, orderType);
  }
}

} // namespace OpenRTI
} // namespace Mom
