
// Code automatically generated by FOMCodeGen version 2.1.0.0 from mom.xml, do not edit

// Name: Standard MOM and Initialization Module (MIM) for HLA IEEE 1516-2010
// Version: 1.0
// Description: The MOM Object Classes and Interaction Classes of this object model may be extended.
// Purpose: Standard MOM and Initialization Module for HLA IEEE 1516-2010

#pragma once

#include <vector>
#include <functional>

#include "RTI/encoding/HLAhandle.h"
#include "momDataTypes.h"
#include "momObjectInterfaces.h"

namespace OpenRTI {
namespace Mom {

// IHLAinteractionRootInteractionClass represents the HLA interaction class HLAinteractionRoot.
class IHLAinteractionRootInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send() = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAmanagerInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.
class IHLAmanagerInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send() = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAfederateInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.
class IHLAfederateInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAadjustInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.
class IHLAadjustInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAsetTimingInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAsetTiming.
class IHLAsetTimingInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAseconds> HLAreportPeriod, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAseconds> HLAreportPeriod) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAseconds> HLAreportPeriod, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAseconds> HLAreportPeriod, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAmodifyAttributeStateInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAmodifyAttributeState.
class IHLAmodifyAttributeStateInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<rti1516ev::HLAhandle> HLAattribute, optional<HLAownership> HLAattributeState, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<rti1516ev::HLAhandle> HLAattribute, optional<HLAownership> HLAattributeState) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<rti1516ev::HLAhandle> HLAattribute, optional<HLAownership> HLAattributeState, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<rti1516ev::HLAhandle> HLAattribute, optional<HLAownership> HLAattributeState, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAsetServiceReportingInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAsetServiceReporting.
class IHLAsetServiceReportingInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAreportingState, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAreportingState) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAreportingState, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAreportingState, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAsetExceptionReportingInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAsetExceptionReporting.
class IHLAsetExceptionReportingInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAreportingState, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAreportingState) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAreportingState, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAreportingState, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAsetSwitchesInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAsetSwitches.
class IHLAsetSwitchesInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAswitch> HLAconveyRegionDesignatorSets, optional<HLAswitch> HLAconveyProducingFederate, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAswitch> HLAconveyRegionDesignatorSets, optional<HLAswitch> HLAconveyProducingFederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAswitch> HLAconveyRegionDesignatorSets, optional<HLAswitch> HLAconveyProducingFederate, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAswitch> HLAconveyRegionDesignatorSets, optional<HLAswitch> HLAconveyProducingFederate, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.
class IHLArequestInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestPublicationsInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestPublications.
class IHLArequestPublicationsInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestSubscriptionsInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestSubscriptions.
class IHLArequestSubscriptionsInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestObjectInstancesThatCanBeDeletedInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestObjectInstancesThatCanBeDeleted.
class IHLArequestObjectInstancesThatCanBeDeletedInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestObjectInstancesUpdatedInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestObjectInstancesUpdated.
class IHLArequestObjectInstancesUpdatedInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestObjectInstancesReflectedInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestObjectInstancesReflected.
class IHLArequestObjectInstancesReflectedInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestUpdatesSentInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestUpdatesSent.
class IHLArequestUpdatesSentInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestInteractionsSentInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestInteractionsSent.
class IHLArequestInteractionsSentInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestReflectionsReceivedInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestReflectionsReceived.
class IHLArequestReflectionsReceivedInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestInteractionsReceivedInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestInteractionsReceived.
class IHLArequestInteractionsReceivedInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestObjectInstanceInformationInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestObjectInstanceInformation.
class IHLArequestObjectInstanceInformationInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestFOMmoduleDataInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestFOMmoduleData.
class IHLArequestFOMmoduleDataInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAindex> HLAFOMmoduleIndicator, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAindex> HLAFOMmoduleIndicator) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAindex> HLAFOMmoduleIndicator, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAindex> HLAFOMmoduleIndicator, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.
class IHLAreportInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportObjectClassPublicationInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectClassPublication.
class IHLAreportObjectClassPublicationInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAcount> HLAnumberOfClasses, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAcount> HLAnumberOfClasses, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAcount> HLAnumberOfClasses, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAcount> HLAnumberOfClasses, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportInteractionPublicationInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportInteractionPublication.
class IHLAreportInteractionPublicationInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<rti1516ev::HLAhandle>&> HLAinteractionClassList, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<rti1516ev::HLAhandle>&> HLAinteractionClassList) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<rti1516ev::HLAhandle>&> HLAinteractionClassList, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<rti1516ev::HLAhandle>&> HLAinteractionClassList, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportObjectClassSubscriptionInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectClassSubscription.
class IHLAreportObjectClassSubscriptionInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAcount> HLAnumberOfClasses, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<bool> HLAactive, optional<HLAupdateRateName> HLAmaxUpdateRate, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAcount> HLAnumberOfClasses, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<bool> HLAactive, optional<HLAupdateRateName> HLAmaxUpdateRate, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAcount> HLAnumberOfClasses, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<bool> HLAactive, optional<HLAupdateRateName> HLAmaxUpdateRate, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAcount> HLAnumberOfClasses, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<bool> HLAactive, optional<HLAupdateRateName> HLAmaxUpdateRate, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportInteractionSubscriptionInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportInteractionSubscription.
class IHLAreportInteractionSubscriptionInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAinteractionSubscriptionEncoding>&> HLAinteractionClassList, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAinteractionSubscriptionEncoding>&> HLAinteractionClassList) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAinteractionSubscriptionEncoding>&> HLAinteractionClassList, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAinteractionSubscriptionEncoding>&> HLAinteractionClassList, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportObjectInstancesThatCanBeDeletedInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectInstancesThatCanBeDeleted.
class IHLAreportObjectInstancesThatCanBeDeletedInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportObjectInstancesUpdatedInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectInstancesUpdated.
class IHLAreportObjectInstancesUpdatedInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportObjectInstancesReflectedInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectInstancesReflected.
class IHLAreportObjectInstancesReflectedInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAobjectInstanceCounts, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportUpdatesSentInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportUpdatesSent.
class IHLAreportUpdatesSentInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAupdateCounts, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAupdateCounts) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAupdateCounts, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAupdateCounts, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportReflectionsReceivedInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportReflectionsReceived.
class IHLAreportReflectionsReceivedInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAreflectCounts, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAreflectCounts) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAreflectCounts, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAobjectClassBasedCountEncoding>&> HLAreflectCounts, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportInteractionsSentInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportInteractionsSent.
class IHLAreportInteractionsSentInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCounts, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCounts) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCounts, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCounts, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportInteractionsReceivedInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportInteractionsReceived.
class IHLAreportInteractionsReceivedInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCounts, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCounts) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCounts, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAtransportationName> HLAtransportation, optional<const std::vector<HLAinteractionCountEncoding>&> HLAinteractionCounts, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportObjectInstanceInformationInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectInstanceInformation.
class IHLAreportObjectInstanceInformationInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAownedInstanceAttributeList, optional<rti1516ev::HLAhandle> HLAregisteredClass, optional<rti1516ev::HLAhandle> HLAknownClass, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAownedInstanceAttributeList, optional<rti1516ev::HLAhandle> HLAregisteredClass, optional<rti1516ev::HLAhandle> HLAknownClass) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAownedInstanceAttributeList, optional<rti1516ev::HLAhandle> HLAregisteredClass, optional<rti1516ev::HLAhandle> HLAknownClass, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAownedInstanceAttributeList, optional<rti1516ev::HLAhandle> HLAregisteredClass, optional<rti1516ev::HLAhandle> HLAknownClass, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportExceptionInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportException.
class IHLAreportExceptionInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<std::wstring> HLAexception, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<std::wstring> HLAexception) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<std::wstring> HLAexception, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<std::wstring> HLAexception, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportServiceInvocationInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportServiceInvocation.
class IHLAreportServiceInvocationInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<bool> HLAsuccessIndicator, optional<const std::vector<std::wstring>&> HLAsuppliedArguments, optional<const std::vector<std::wstring>&> HLAreturnedArguments, optional<std::wstring> HLAexception, optional<HLAcount> HLAserialNumber, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<bool> HLAsuccessIndicator, optional<const std::vector<std::wstring>&> HLAsuppliedArguments, optional<const std::vector<std::wstring>&> HLAreturnedArguments, optional<std::wstring> HLAexception, optional<HLAcount> HLAserialNumber) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<bool> HLAsuccessIndicator, optional<const std::vector<std::wstring>&> HLAsuppliedArguments, optional<const std::vector<std::wstring>&> HLAreturnedArguments, optional<std::wstring> HLAexception, optional<HLAcount> HLAserialNumber, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<bool> HLAsuccessIndicator, optional<const std::vector<std::wstring>&> HLAsuppliedArguments, optional<const std::vector<std::wstring>&> HLAreturnedArguments, optional<std::wstring> HLAexception, optional<HLAcount> HLAserialNumber, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportMOMexceptionInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportMOMexception.
class IHLAreportMOMexceptionInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<std::wstring> HLAexception, optional<bool> HLAparameterError, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<std::wstring> HLAexception, optional<bool> HLAparameterError) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<std::wstring> HLAexception, optional<bool> HLAparameterError, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAservice, optional<std::wstring> HLAexception, optional<bool> HLAparameterError, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportFederateLostInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportFederateLost.
class IHLAreportFederateLostInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAfederateName, optional<const std::vector<uint8_t>&> HLAtimeStamp, optional<std::wstring> HLAfaultDescription, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAfederateName, optional<const std::vector<uint8_t>&> HLAtimeStamp, optional<std::wstring> HLAfaultDescription) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAfederateName, optional<const std::vector<uint8_t>&> HLAtimeStamp, optional<std::wstring> HLAfaultDescription, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAfederateName, optional<const std::vector<uint8_t>&> HLAtimeStamp, optional<std::wstring> HLAfaultDescription, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportFOMmoduleDataInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportFOMmoduleData.
class IHLAreportFOMmoduleDataInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAindex> HLAFOMmoduleIndicator, optional<std::wstring> HLAFOMmoduleData, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAindex> HLAFOMmoduleIndicator, optional<std::wstring> HLAFOMmoduleData) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAindex> HLAFOMmoduleIndicator, optional<std::wstring> HLAFOMmoduleData, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAindex> HLAFOMmoduleIndicator, optional<std::wstring> HLAFOMmoduleData, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAserviceInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.
class IHLAserviceInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAresignFederationExecutionInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAresignFederationExecution.
class IHLAresignFederationExecutionInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAresignAction> HLAresignAction, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAresignAction> HLAresignAction) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAresignAction> HLAresignAction, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<HLAresignAction> HLAresignAction, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAsynchronizationPointAchievedInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAsynchronizationPointAchieved.
class IHLAsynchronizationPointAchievedInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAlabel, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAlabel) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAlabel, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<std::wstring> HLAlabel, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAfederateSaveBegunInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAfederateSaveBegun.
class IHLAfederateSaveBegunInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAfederateSaveCompleteInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAfederateSaveComplete.
class IHLAfederateSaveCompleteInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAsuccessIndicator, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAsuccessIndicator) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAsuccessIndicator, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAsuccessIndicator, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAfederateRestoreCompleteInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAfederateRestoreComplete.
class IHLAfederateRestoreCompleteInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAsuccessIndicator, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAsuccessIndicator) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAsuccessIndicator, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<bool> HLAsuccessIndicator, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLApublishObjectClassAttributesInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLApublishObjectClassAttributes.
class IHLApublishObjectClassAttributesInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAunpublishObjectClassAttributesInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunpublishObjectClassAttributes.
class IHLAunpublishObjectClassAttributesInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLApublishInteractionClassInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLApublishInteractionClass.
class IHLApublishInteractionClassInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAunpublishInteractionClassInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunpublishInteractionClass.
class IHLAunpublishInteractionClassInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAsubscribeObjectClassAttributesInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAsubscribeObjectClassAttributes.
class IHLAsubscribeObjectClassAttributesInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<bool> HLAactive, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<bool> HLAactive) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<bool> HLAactive, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<bool> HLAactive, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAunsubscribeObjectClassAttributesInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunsubscribeObjectClassAttributes.
class IHLAunsubscribeObjectClassAttributesInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectClass, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAsubscribeInteractionClassInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAsubscribeInteractionClass.
class IHLAsubscribeInteractionClassInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<bool> HLAactive, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<bool> HLAactive) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<bool> HLAactive, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<bool> HLAactive, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAunsubscribeInteractionClassInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunsubscribeInteractionClass.
class IHLAunsubscribeInteractionClassInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAdeleteObjectInstanceInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAdeleteObjectInstance.
class IHLAdeleteObjectInstanceInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<uint8_t>&> HLAtag, optional<const std::vector<uint8_t>&> HLAtimeStamp, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<uint8_t>&> HLAtag, optional<const std::vector<uint8_t>&> HLAtimeStamp) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<uint8_t>&> HLAtag, optional<const std::vector<uint8_t>&> HLAtimeStamp, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<uint8_t>&> HLAtag, optional<const std::vector<uint8_t>&> HLAtimeStamp, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAlocalDeleteObjectInstanceInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAlocalDeleteObjectInstance.
class IHLAlocalDeleteObjectInstanceInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestAttributeTransportationTypeChangeInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLArequestAttributeTransportationTypeChange.
class IHLArequestAttributeTransportationTypeChangeInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<HLAtransportationName> HLAtransportation, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<HLAtransportationName> HLAtransportation) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<HLAtransportationName> HLAtransportation, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<HLAtransportationName> HLAtransportation, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestInteractionTransportationTypeChangeInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLArequestInteractionTransportationTypeChange.
class IHLArequestInteractionTransportationTypeChangeInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<HLAtransportationName> HLAtransportation, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<HLAtransportationName> HLAtransportation) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<HLAtransportationName> HLAtransportation, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<HLAtransportationName> HLAtransportation, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAunconditionalAttributeOwnershipDivestitureInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunconditionalAttributeOwnershipDivestiture.
class IHLAunconditionalAttributeOwnershipDivestitureInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAenableTimeRegulationInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAenableTimeRegulation.
class IHLAenableTimeRegulationInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAlookahead, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAlookahead) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAlookahead, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAlookahead, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAdisableTimeRegulationInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAdisableTimeRegulation.
class IHLAdisableTimeRegulationInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAenableTimeConstrainedInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAenableTimeConstrained.
class IHLAenableTimeConstrainedInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAdisableTimeConstrainedInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAdisableTimeConstrained.
class IHLAdisableTimeConstrainedInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAtimeAdvanceRequestInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAtimeAdvanceRequest.
class IHLAtimeAdvanceRequestInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAtimeAdvanceRequestAvailableInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAtimeAdvanceRequestAvailable.
class IHLAtimeAdvanceRequestAvailableInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAnextMessageRequestInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAnextMessageRequest.
class IHLAnextMessageRequestInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAnextMessageRequestAvailableInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAnextMessageRequestAvailable.
class IHLAnextMessageRequestAvailableInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAflushQueueRequestInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAflushQueueRequest.
class IHLAflushQueueRequestInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAtimeStamp, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAenableAsynchronousDeliveryInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAenableAsynchronousDelivery.
class IHLAenableAsynchronousDeliveryInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAdisableAsynchronousDeliveryInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAdisableAsynchronousDelivery.
class IHLAdisableAsynchronousDeliveryInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederateint64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederateoptional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAmodifyLookaheadInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAmodifyLookahead.
class IHLAmodifyLookaheadInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAlookahead, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAlookahead) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAlookahead, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<const std::vector<uint8_t>&> HLAlookahead, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAchangeAttributeOrderTypeInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAchangeAttributeOrderType.
class IHLAchangeAttributeOrderTypeInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<HLAorderType> HLAsendOrder, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<HLAorderType> HLAsendOrder) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<HLAorderType> HLAsendOrder, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAobjectInstance, optional<const std::vector<rti1516ev::HLAhandle>&> HLAattributeList, optional<HLAorderType> HLAsendOrder, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAchangeInteractionOrderTypeInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAchangeInteractionOrderType.
class IHLAchangeInteractionOrderTypeInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<HLAorderType> HLAsendOrder, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<HLAorderType> HLAsendOrder) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<HLAorderType> HLAsendOrder, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<rti1516ev::HLAhandle> HLAfederate, optional<rti1516ev::HLAhandle> HLAinteractionClass, optional<HLAorderType> HLAsendOrder, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAfederationInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederation.
class IHLAfederationInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send() = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAadjustInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederation.HLAadjust.
class IHLAadjustInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send() = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAsetSwitchesInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederation.HLAadjust.HLAsetSwitches.
class IHLAsetSwitchesInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<HLAswitch> HLAautoProvide, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<HLAswitch> HLAautoProvide) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<HLAswitch> HLAautoProvide, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<HLAswitch> HLAautoProvide, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest.
class IHLArequestInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send() = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestSynchronizationPointsInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest.HLArequestSynchronizationPoints.
class IHLArequestSynchronizationPointsInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send() = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestSynchronizationPointStatusInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest.HLArequestSynchronizationPointStatus.
class IHLArequestSynchronizationPointStatusInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send() = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestFOMmoduleDataInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest.HLArequestFOMmoduleData.
class IHLArequestFOMmoduleDataInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<HLAindex> HLAFOMmoduleIndicator, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<HLAindex> HLAFOMmoduleIndicator) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<HLAindex> HLAFOMmoduleIndicator, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<HLAindex> HLAFOMmoduleIndicator, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLArequestMIMdataInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest.HLArequestMIMdata.
class IHLArequestMIMdataInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send() = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport.
class IHLAreportInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send() = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportSynchronizationPointsInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport.HLAreportSynchronizationPoints.
class IHLAreportSynchronizationPointsInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<const std::vector<std::wstring>&> HLAsyncPoints, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<const std::vector<std::wstring>&> HLAsyncPoints) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<const std::vector<std::wstring>&> HLAsyncPoints, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<const std::vector<std::wstring>&> HLAsyncPoints, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportSynchronizationPointStatusInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport.HLAreportSynchronizationPointStatus.
class IHLAreportSynchronizationPointStatusInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<std::wstring> HLAsyncPointName, optional<const std::vector<HLAsynchPointFederateEncoding>&> HLAsyncPointFederates, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<std::wstring> HLAsyncPointName, optional<const std::vector<HLAsynchPointFederateEncoding>&> HLAsyncPointFederates) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<std::wstring> HLAsyncPointName, optional<const std::vector<HLAsynchPointFederateEncoding>&> HLAsyncPointFederates, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<std::wstring> HLAsyncPointName, optional<const std::vector<HLAsynchPointFederateEncoding>&> HLAsyncPointFederates, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportFOMmoduleDataInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport.HLAreportFOMmoduleData.
class IHLAreportFOMmoduleDataInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<HLAindex> HLAFOMmoduleIndicator, optional<std::wstring> HLAFOMmoduleData, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<HLAindex> HLAFOMmoduleIndicator, optional<std::wstring> HLAFOMmoduleData) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<HLAindex> HLAFOMmoduleIndicator, optional<std::wstring> HLAFOMmoduleData, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<HLAindex> HLAFOMmoduleIndicator, optional<std::wstring> HLAFOMmoduleData, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};

// IHLAreportMIMdataInteractionClass represents the HLA interaction class HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport.HLAreportMIMdata.
class IHLAreportMIMdataInteractionClass
{
  public:
    // Publish/unpublish the interaction class. Sending an interaction of this class requires publishing the interaction class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe the interaction class. Receiving interactions requires having subscribed to this interaction class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the interaction class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    // Subscribe the interaction class with filter values. Only interactions with parameters matching the given values will be received.
    // Filtered subscriptions may be issued several times with differing value tuples. 'nullopt' may be used as a wildcard, matching
    // any incoming value.
    virtual void Subscribe(optional<std::wstring> HLAMIMdata, bool deliverToSelf) = 0;
    // Unsubscribe the interaction class, cancelling reception of interactions. Calling Unsubscribe will also clear all filtered subscriptions, if any.
    virtual void Unsubscribe() = 0;
    // Send an interaction as receive order message.
    virtual void send(optional<std::wstring> HLAMIMdata) = 0;
    // Send a time stamped interaction.
    virtual void sendWithTime(optional<std::wstring> HLAMIMdata, int64_t time) = 0;
    // Register an interaction callback. The optional time stamp will be delivered by the application. When the time stamp is valid,
    // the optional order type will indicate the source of the time stamp.
    using ReceiveCallback = std::function<void(optional<std::wstring> HLAMIMdata, optional<int64_t> time, optional<OrderType> orderType)>;
    using ReceiveCallbackHandle = uint32_t;
    constexpr static ReceiveCallbackHandle kInvalidCallbackHandle = 0xffffffff;
    virtual ReceiveCallbackHandle RegisterReceiveCallback(ReceiveCallback callback) = 0;
    virtual void UnregisterReceiveCallback(ReceiveCallbackHandle callbackHandle) = 0;
};


class IInteractionClassRegistry
{
  public:
    virtual IHLAinteractionRootInteractionClass* GetHLAinteractionRootInteractionClass() const = 0;
    virtual IHLAmanagerInteractionClass* GetHLAmanagerInteractionClass() const = 0;
    virtual IHLAfederateInteractionClass* GetHLAfederateInteractionClass() const = 0;
    virtual IHLAadjustInteractionClass* GetHLAadjustInteractionClass() const = 0;
    virtual IHLAsetTimingInteractionClass* GetHLAsetTimingInteractionClass() const = 0;
    virtual IHLAmodifyAttributeStateInteractionClass* GetHLAmodifyAttributeStateInteractionClass() const = 0;
    virtual IHLAsetServiceReportingInteractionClass* GetHLAsetServiceReportingInteractionClass() const = 0;
    virtual IHLAsetExceptionReportingInteractionClass* GetHLAsetExceptionReportingInteractionClass() const = 0;
    virtual IHLAsetSwitchesInteractionClass* GetHLAsetSwitchesInteractionClass() const = 0;
    virtual IHLArequestInteractionClass* GetHLArequestInteractionClass() const = 0;
    virtual IHLArequestPublicationsInteractionClass* GetHLArequestPublicationsInteractionClass() const = 0;
    virtual IHLArequestSubscriptionsInteractionClass* GetHLArequestSubscriptionsInteractionClass() const = 0;
    virtual IHLArequestObjectInstancesThatCanBeDeletedInteractionClass* GetHLArequestObjectInstancesThatCanBeDeletedInteractionClass() const = 0;
    virtual IHLArequestObjectInstancesUpdatedInteractionClass* GetHLArequestObjectInstancesUpdatedInteractionClass() const = 0;
    virtual IHLArequestObjectInstancesReflectedInteractionClass* GetHLArequestObjectInstancesReflectedInteractionClass() const = 0;
    virtual IHLArequestUpdatesSentInteractionClass* GetHLArequestUpdatesSentInteractionClass() const = 0;
    virtual IHLArequestInteractionsSentInteractionClass* GetHLArequestInteractionsSentInteractionClass() const = 0;
    virtual IHLArequestReflectionsReceivedInteractionClass* GetHLArequestReflectionsReceivedInteractionClass() const = 0;
    virtual IHLArequestInteractionsReceivedInteractionClass* GetHLArequestInteractionsReceivedInteractionClass() const = 0;
    virtual IHLArequestObjectInstanceInformationInteractionClass* GetHLArequestObjectInstanceInformationInteractionClass() const = 0;
    virtual IHLArequestFOMmoduleDataInteractionClass* GetHLArequestFOMmoduleDataInteractionClass() const = 0;
    virtual IHLAreportInteractionClass* GetHLAreportInteractionClass() const = 0;
    virtual IHLAreportObjectClassPublicationInteractionClass* GetHLAreportObjectClassPublicationInteractionClass() const = 0;
    virtual IHLAreportInteractionPublicationInteractionClass* GetHLAreportInteractionPublicationInteractionClass() const = 0;
    virtual IHLAreportObjectClassSubscriptionInteractionClass* GetHLAreportObjectClassSubscriptionInteractionClass() const = 0;
    virtual IHLAreportInteractionSubscriptionInteractionClass* GetHLAreportInteractionSubscriptionInteractionClass() const = 0;
    virtual IHLAreportObjectInstancesThatCanBeDeletedInteractionClass* GetHLAreportObjectInstancesThatCanBeDeletedInteractionClass() const = 0;
    virtual IHLAreportObjectInstancesUpdatedInteractionClass* GetHLAreportObjectInstancesUpdatedInteractionClass() const = 0;
    virtual IHLAreportObjectInstancesReflectedInteractionClass* GetHLAreportObjectInstancesReflectedInteractionClass() const = 0;
    virtual IHLAreportUpdatesSentInteractionClass* GetHLAreportUpdatesSentInteractionClass() const = 0;
    virtual IHLAreportReflectionsReceivedInteractionClass* GetHLAreportReflectionsReceivedInteractionClass() const = 0;
    virtual IHLAreportInteractionsSentInteractionClass* GetHLAreportInteractionsSentInteractionClass() const = 0;
    virtual IHLAreportInteractionsReceivedInteractionClass* GetHLAreportInteractionsReceivedInteractionClass() const = 0;
    virtual IHLAreportObjectInstanceInformationInteractionClass* GetHLAreportObjectInstanceInformationInteractionClass() const = 0;
    virtual IHLAreportExceptionInteractionClass* GetHLAreportExceptionInteractionClass() const = 0;
    virtual IHLAreportServiceInvocationInteractionClass* GetHLAreportServiceInvocationInteractionClass() const = 0;
    virtual IHLAreportMOMexceptionInteractionClass* GetHLAreportMOMexceptionInteractionClass() const = 0;
    virtual IHLAreportFederateLostInteractionClass* GetHLAreportFederateLostInteractionClass() const = 0;
    virtual IHLAreportFOMmoduleDataInteractionClass* GetHLAreportFOMmoduleDataInteractionClass() const = 0;
    virtual IHLAserviceInteractionClass* GetHLAserviceInteractionClass() const = 0;
    virtual IHLAresignFederationExecutionInteractionClass* GetHLAresignFederationExecutionInteractionClass() const = 0;
    virtual IHLAsynchronizationPointAchievedInteractionClass* GetHLAsynchronizationPointAchievedInteractionClass() const = 0;
    virtual IHLAfederateSaveBegunInteractionClass* GetHLAfederateSaveBegunInteractionClass() const = 0;
    virtual IHLAfederateSaveCompleteInteractionClass* GetHLAfederateSaveCompleteInteractionClass() const = 0;
    virtual IHLAfederateRestoreCompleteInteractionClass* GetHLAfederateRestoreCompleteInteractionClass() const = 0;
    virtual IHLApublishObjectClassAttributesInteractionClass* GetHLApublishObjectClassAttributesInteractionClass() const = 0;
    virtual IHLAunpublishObjectClassAttributesInteractionClass* GetHLAunpublishObjectClassAttributesInteractionClass() const = 0;
    virtual IHLApublishInteractionClassInteractionClass* GetHLApublishInteractionClassInteractionClass() const = 0;
    virtual IHLAunpublishInteractionClassInteractionClass* GetHLAunpublishInteractionClassInteractionClass() const = 0;
    virtual IHLAsubscribeObjectClassAttributesInteractionClass* GetHLAsubscribeObjectClassAttributesInteractionClass() const = 0;
    virtual IHLAunsubscribeObjectClassAttributesInteractionClass* GetHLAunsubscribeObjectClassAttributesInteractionClass() const = 0;
    virtual IHLAsubscribeInteractionClassInteractionClass* GetHLAsubscribeInteractionClassInteractionClass() const = 0;
    virtual IHLAunsubscribeInteractionClassInteractionClass* GetHLAunsubscribeInteractionClassInteractionClass() const = 0;
    virtual IHLAdeleteObjectInstanceInteractionClass* GetHLAdeleteObjectInstanceInteractionClass() const = 0;
    virtual IHLAlocalDeleteObjectInstanceInteractionClass* GetHLAlocalDeleteObjectInstanceInteractionClass() const = 0;
    virtual IHLArequestAttributeTransportationTypeChangeInteractionClass* GetHLArequestAttributeTransportationTypeChangeInteractionClass() const = 0;
    virtual IHLArequestInteractionTransportationTypeChangeInteractionClass* GetHLArequestInteractionTransportationTypeChangeInteractionClass() const = 0;
    virtual IHLAunconditionalAttributeOwnershipDivestitureInteractionClass* GetHLAunconditionalAttributeOwnershipDivestitureInteractionClass() const = 0;
    virtual IHLAenableTimeRegulationInteractionClass* GetHLAenableTimeRegulationInteractionClass() const = 0;
    virtual IHLAdisableTimeRegulationInteractionClass* GetHLAdisableTimeRegulationInteractionClass() const = 0;
    virtual IHLAenableTimeConstrainedInteractionClass* GetHLAenableTimeConstrainedInteractionClass() const = 0;
    virtual IHLAdisableTimeConstrainedInteractionClass* GetHLAdisableTimeConstrainedInteractionClass() const = 0;
    virtual IHLAtimeAdvanceRequestInteractionClass* GetHLAtimeAdvanceRequestInteractionClass() const = 0;
    virtual IHLAtimeAdvanceRequestAvailableInteractionClass* GetHLAtimeAdvanceRequestAvailableInteractionClass() const = 0;
    virtual IHLAnextMessageRequestInteractionClass* GetHLAnextMessageRequestInteractionClass() const = 0;
    virtual IHLAnextMessageRequestAvailableInteractionClass* GetHLAnextMessageRequestAvailableInteractionClass() const = 0;
    virtual IHLAflushQueueRequestInteractionClass* GetHLAflushQueueRequestInteractionClass() const = 0;
    virtual IHLAenableAsynchronousDeliveryInteractionClass* GetHLAenableAsynchronousDeliveryInteractionClass() const = 0;
    virtual IHLAdisableAsynchronousDeliveryInteractionClass* GetHLAdisableAsynchronousDeliveryInteractionClass() const = 0;
    virtual IHLAmodifyLookaheadInteractionClass* GetHLAmodifyLookaheadInteractionClass() const = 0;
    virtual IHLAchangeAttributeOrderTypeInteractionClass* GetHLAchangeAttributeOrderTypeInteractionClass() const = 0;
    virtual IHLAchangeInteractionOrderTypeInteractionClass* GetHLAchangeInteractionOrderTypeInteractionClass() const = 0;
    virtual IHLAfederationInteractionClass* GetHLAfederationInteractionClass() const = 0;
    virtual IHLAadjustInteractionClass* GetHLAadjustInteractionClass() const = 0;
    virtual IHLAsetSwitchesInteractionClass* GetHLAsetSwitchesInteractionClass() const = 0;
    virtual IHLArequestInteractionClass* GetHLArequestInteractionClass() const = 0;
    virtual IHLArequestSynchronizationPointsInteractionClass* GetHLArequestSynchronizationPointsInteractionClass() const = 0;
    virtual IHLArequestSynchronizationPointStatusInteractionClass* GetHLArequestSynchronizationPointStatusInteractionClass() const = 0;
    virtual IHLArequestFOMmoduleDataInteractionClass* GetHLArequestFOMmoduleDataInteractionClass() const = 0;
    virtual IHLArequestMIMdataInteractionClass* GetHLArequestMIMdataInteractionClass() const = 0;
    virtual IHLAreportInteractionClass* GetHLAreportInteractionClass() const = 0;
    virtual IHLAreportSynchronizationPointsInteractionClass* GetHLAreportSynchronizationPointsInteractionClass() const = 0;
    virtual IHLAreportSynchronizationPointStatusInteractionClass* GetHLAreportSynchronizationPointStatusInteractionClass() const = 0;
    virtual IHLAreportFOMmoduleDataInteractionClass* GetHLAreportFOMmoduleDataInteractionClass() const = 0;
    virtual IHLAreportMIMdataInteractionClass* GetHLAreportMIMdataInteractionClass() const = 0;
  protected:
    virtual ~IInteractionClassRegistry() {}
}; // class IInteractionClassRegistry

} // namespace OpenRTI
} // namespace Mom
