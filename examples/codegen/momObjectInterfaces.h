
// Code automatically generated by FOMCodeGen version 2.1.0.0 from mom.xml, do not edit

// Name: Standard MOM and Initialization Module (MIM) for HLA IEEE 1516-2010
// Version: 1.0
// Description: The MOM Object Classes and Interaction Classes of this object model may be extended.
// Purpose: Standard MOM and Initialization Module for HLA IEEE 1516-2010

#pragma once

#include <vector>
#include <functional>
#include <memory>

#include "RTI/encoding/HLAhandle.h"
#include "momDataTypes.h"

namespace OpenRTI {
namespace Mom {

class IHLAobjectRoot;
// IHLAobjectRootObjectClass represents the HLA object class HLAobjectRoot.
// Instances of IHLAobjectRoot represent the corresponding HLA object instances.
class IHLAobjectRootObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IHLAobjectRoot>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IHLAobjectRoot>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IHLAobjectRoot>, bool success)>;
    // Publish/unpublish this object class. Creating object instances requires publishing the object class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe/unsubscribe this object class. Taking part in object discovery and receiving attribute updates requires subscribing the object class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the object class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    // Return an existing object instance by name, or nullptr if not existant.
    virtual std::shared_ptr<IHLAobjectRoot> GetObjectInstance(const std::wstring& instanceName) = 0;
    // Create an instance of IHLAobjectRoot. Returns nullptr if the object instance already exists.
    // If another federate has already created an object instance with the same name and the same object class,
    // the discover object instance mechanism will reuse the object returned by 'create object instance'.
    // A discover object instance callback should be installed by the application to appropriately handle this case.
    virtual std::shared_ptr<IHLAobjectRoot> CreateObjectInstance(const std::wstring& instanceName) = 0;
    // Create an instance of IHLAobjectRoot, and notify the application about having completed the HLA object registration.
    // The callback's 'success' parameter indicates whether the object instance name could successfully be reserved for the object.
    virtual std::shared_ptr<IHLAobjectRoot> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;
    // Restore a 'dead' instance of IHLAobjectRoot. Returns nullptr if the object instance already exists.
    // If another federate has already created an object instance with the same name and the same object class,
    // the discover object instance mechanism will reuse the object returned by 'create object instance'.
    // A discover object instance callback should be installed by the application to appropriately handle this case.
    virtual std::shared_ptr<IHLAobjectRoot> RestoreObjectInstance(std::shared_ptr<IHLAobjectRoot> existingObject) = 0;
    // Restore a 'dead' instance of IHLAobjectRoot, and notify the application about having completed the HLA object registration.
    // The callback's 'success' parameter indicates whether the object instance name could successfully be reserved for the object.
    virtual std::shared_ptr<IHLAobjectRoot> RestoreObjectInstance(std::shared_ptr<IHLAobjectRoot> existingObject, ObjectCreatedCallbackType createdCallback) = 0;

    // install a discover object instance callback for this HLA object class
    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    // install a remove object instance callback for the HLA object class
    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IHLAobjectRoot : public std::enable_shared_from_this<IHLAobjectRoot>
{
  public:
    using AttributeBits = uint32_t;
    static const AttributeBits kNone = 0x0;
    static const AttributeBits kHLAprivilegeToDeleteObjectBit = 0x1;

    IHLAobjectRoot() {}
    virtual ~IHLAobjectRoot() {}
    // copying and moving an object instance is not allowed
    IHLAobjectRoot(const IHLAobjectRoot&) = delete;
    IHLAobjectRoot(IHLAobjectRoot&&) = delete;
    IHLAobjectRoot& operator=(const IHLAobjectRoot&) = delete;
    IHLAobjectRoot& operator=(IHLAobjectRoot&&) = delete;

    virtual std::wstring GetObjectInstanceName() const = 0;
    // has this object a valid HLA object instance handle?
    virtual bool IsValid() const = 0;
    // After having called CreateObjectInstance, wait until object registration completed.
    // Returns false if the object registration failed.
    virtual bool WaitForObjectValid() = 0;
    // has this object been created by this federate?
    virtual bool IsOwner() const = 0;
    // Delete the object from HLA and the class registry.
    // Be careful to keep a shared_ptr to the object while executing Release!
    virtual void Release() = 0;
    // attribute HLAprivilegeToDeleteObject : HLAtoken
    virtual const std::vector<uint8_t>& GetHLAprivilegeToDeleteObject() const = 0;
    virtual void SetHLAprivilegeToDeleteObject(const std::vector<uint8_t>& newValue) = 0;
};

class IHLAmanager;
// IHLAmanagerObjectClass represents the HLA object class HLAobjectRoot.HLAmanager.
// Instances of IHLAmanager represent the corresponding HLA object instances.
class IHLAmanagerObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IHLAmanager>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IHLAmanager>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IHLAmanager>, bool success)>;
    // Publish/unpublish this object class. Creating object instances requires publishing the object class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe/unsubscribe this object class. Taking part in object discovery and receiving attribute updates requires subscribing the object class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the object class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    // Return an existing object instance by name, or nullptr if not existant.
    virtual std::shared_ptr<IHLAmanager> GetObjectInstance(const std::wstring& instanceName) = 0;
    // Create an instance of IHLAmanager. Returns nullptr if the object instance already exists.
    // If another federate has already created an object instance with the same name and the same object class,
    // the discover object instance mechanism will reuse the object returned by 'create object instance'.
    // A discover object instance callback should be installed by the application to appropriately handle this case.
    virtual std::shared_ptr<IHLAmanager> CreateObjectInstance(const std::wstring& instanceName) = 0;
    // Create an instance of IHLAmanager, and notify the application about having completed the HLA object registration.
    // The callback's 'success' parameter indicates whether the object instance name could successfully be reserved for the object.
    virtual std::shared_ptr<IHLAmanager> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;
    // Restore a 'dead' instance of IHLAmanager. Returns nullptr if the object instance already exists.
    // If another federate has already created an object instance with the same name and the same object class,
    // the discover object instance mechanism will reuse the object returned by 'create object instance'.
    // A discover object instance callback should be installed by the application to appropriately handle this case.
    virtual std::shared_ptr<IHLAmanager> RestoreObjectInstance(std::shared_ptr<IHLAmanager> existingObject) = 0;
    // Restore a 'dead' instance of IHLAmanager, and notify the application about having completed the HLA object registration.
    // The callback's 'success' parameter indicates whether the object instance name could successfully be reserved for the object.
    virtual std::shared_ptr<IHLAmanager> RestoreObjectInstance(std::shared_ptr<IHLAmanager> existingObject, ObjectCreatedCallbackType createdCallback) = 0;

    // install a discover object instance callback for this HLA object class
    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    // install a remove object instance callback for the HLA object class
    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IHLAmanager : public IHLAobjectRoot
{
  public:

    IHLAmanager() {}
    ~IHLAmanager() {}
    // copying and moving an object instance is not allowed
    IHLAmanager(const IHLAmanager&) = delete;
    IHLAmanager(IHLAmanager&&) = delete;
    IHLAmanager& operator=(const IHLAmanager&) = delete;
    IHLAmanager& operator=(IHLAmanager&&) = delete;

};

class IHLAfederate;
// IHLAfederateObjectClass represents the HLA object class HLAobjectRoot.HLAmanager.HLAfederate.
// Instances of IHLAfederate represent the corresponding HLA object instances.
class IHLAfederateObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IHLAfederate>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IHLAfederate>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IHLAfederate>, bool success)>;
    // Publish/unpublish this object class. Creating object instances requires publishing the object class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe/unsubscribe this object class. Taking part in object discovery and receiving attribute updates requires subscribing the object class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the object class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    // Return an existing object instance by name, or nullptr if not existant.
    virtual std::shared_ptr<IHLAfederate> GetObjectInstance(const std::wstring& instanceName) = 0;
    // Create an instance of IHLAfederate. Returns nullptr if the object instance already exists.
    // If another federate has already created an object instance with the same name and the same object class,
    // the discover object instance mechanism will reuse the object returned by 'create object instance'.
    // A discover object instance callback should be installed by the application to appropriately handle this case.
    virtual std::shared_ptr<IHLAfederate> CreateObjectInstance(const std::wstring& instanceName) = 0;
    // Create an instance of IHLAfederate, and notify the application about having completed the HLA object registration.
    // The callback's 'success' parameter indicates whether the object instance name could successfully be reserved for the object.
    virtual std::shared_ptr<IHLAfederate> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;
    // Restore a 'dead' instance of IHLAfederate. Returns nullptr if the object instance already exists.
    // If another federate has already created an object instance with the same name and the same object class,
    // the discover object instance mechanism will reuse the object returned by 'create object instance'.
    // A discover object instance callback should be installed by the application to appropriately handle this case.
    virtual std::shared_ptr<IHLAfederate> RestoreObjectInstance(std::shared_ptr<IHLAfederate> existingObject) = 0;
    // Restore a 'dead' instance of IHLAfederate, and notify the application about having completed the HLA object registration.
    // The callback's 'success' parameter indicates whether the object instance name could successfully be reserved for the object.
    virtual std::shared_ptr<IHLAfederate> RestoreObjectInstance(std::shared_ptr<IHLAfederate> existingObject, ObjectCreatedCallbackType createdCallback) = 0;

    // install a discover object instance callback for this HLA object class
    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    // install a remove object instance callback for the HLA object class
    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IHLAfederate : public IHLAmanager
{
  public:
    static const AttributeBits kHLAfederateHandleBit = 0x2;
    static const AttributeBits kHLAfederateNameBit = 0x4;
    static const AttributeBits kHLAfederateTypeBit = 0x8;
    static const AttributeBits kHLAfederateHostBit = 0x10;
    static const AttributeBits kHLARTIversionBit = 0x20;
    static const AttributeBits kHLAFOMmoduleDesignatorListBit = 0x40;
    static const AttributeBits kHLAtimeConstrainedBit = 0x80;
    static const AttributeBits kHLAtimeRegulatingBit = 0x100;
    static const AttributeBits kHLAasynchronousDeliveryBit = 0x200;
    static const AttributeBits kHLAfederateStateBit = 0x400;
    static const AttributeBits kHLAtimeManagerStateBit = 0x800;
    static const AttributeBits kHLAlogicalTimeBit = 0x1000;
    static const AttributeBits kHLAlookaheadBit = 0x2000;
    static const AttributeBits kHLAGALTBit = 0x4000;
    static const AttributeBits kHLALITSBit = 0x8000;
    static const AttributeBits kHLAROlengthBit = 0x10000;
    static const AttributeBits kHLATSOlengthBit = 0x20000;
    static const AttributeBits kHLAreflectionsReceivedBit = 0x40000;
    static const AttributeBits kHLAupdatesSentBit = 0x80000;
    static const AttributeBits kHLAinteractionsReceivedBit = 0x100000;
    static const AttributeBits kHLAinteractionsSentBit = 0x200000;
    static const AttributeBits kHLAobjectInstancesThatCanBeDeletedBit = 0x400000;
    static const AttributeBits kHLAobjectInstancesUpdatedBit = 0x800000;
    static const AttributeBits kHLAobjectInstancesReflectedBit = 0x1000000;
    static const AttributeBits kHLAobjectInstancesDeletedBit = 0x2000000;
    static const AttributeBits kHLAobjectInstancesRemovedBit = 0x4000000;
    static const AttributeBits kHLAobjectInstancesRegisteredBit = 0x8000000;
    static const AttributeBits kHLAobjectInstancesDiscoveredBit = 0x10000000;
    static const AttributeBits kHLAtimeGrantedTimeBit = 0x20000000;
    static const AttributeBits kHLAtimeAdvancingTimeBit = 0x40000000;
    static const AttributeBits kHLAconveyRegionDesignatorSetsBit = 0x80000000;
    static const AttributeBits kHLAconveyProducingFederateBit = 0x100000000;

    IHLAfederate() {}
    ~IHLAfederate() {}
    // copying and moving an object instance is not allowed
    IHLAfederate(const IHLAfederate&) = delete;
    IHLAfederate(IHLAfederate&&) = delete;
    IHLAfederate& operator=(const IHLAfederate&) = delete;
    IHLAfederate& operator=(IHLAfederate&&) = delete;

    // attribute HLAfederateHandle : HLAhandle
    virtual rti1516ev::HLAhandle GetHLAfederateHandle() const = 0;
    virtual void SetHLAfederateHandle(rti1516ev::HLAhandle newValue) = 0;
    // attribute HLAfederateName : HLAunicodeString
    virtual std::wstring GetHLAfederateName() const = 0;
    virtual void SetHLAfederateName(std::wstring newValue) = 0;
    // attribute HLAfederateType : HLAunicodeString
    virtual std::wstring GetHLAfederateType() const = 0;
    virtual void SetHLAfederateType(std::wstring newValue) = 0;
    // attribute HLAfederateHost : HLAunicodeString
    virtual std::wstring GetHLAfederateHost() const = 0;
    virtual void SetHLAfederateHost(std::wstring newValue) = 0;
    // attribute HLARTIversion : HLAunicodeString
    virtual std::wstring GetHLARTIversion() const = 0;
    virtual void SetHLARTIversion(std::wstring newValue) = 0;
    // attribute HLAFOMmoduleDesignatorList : HLAmoduleDesignatorList
    virtual const std::vector<std::wstring>& GetHLAFOMmoduleDesignatorList() const = 0;
    virtual void SetHLAFOMmoduleDesignatorList(const std::vector<std::wstring>& newValue) = 0;
    // attribute HLAtimeConstrained : HLAboolean
    virtual bool GetHLAtimeConstrained() const = 0;
    virtual void SetHLAtimeConstrained(bool newValue) = 0;
    // attribute HLAtimeRegulating : HLAboolean
    virtual bool GetHLAtimeRegulating() const = 0;
    virtual void SetHLAtimeRegulating(bool newValue) = 0;
    // attribute HLAasynchronousDelivery : HLAboolean
    virtual bool GetHLAasynchronousDelivery() const = 0;
    virtual void SetHLAasynchronousDelivery(bool newValue) = 0;
    // attribute HLAfederateState : HLAfederateState
    virtual HLAfederateState GetHLAfederateState() const = 0;
    virtual void SetHLAfederateState(HLAfederateState newValue) = 0;
    // attribute HLAtimeManagerState : HLAtimeState
    virtual HLAtimeState GetHLAtimeManagerState() const = 0;
    virtual void SetHLAtimeManagerState(HLAtimeState newValue) = 0;
    // attribute HLAlogicalTime : HLAlogicalTime
    virtual const std::vector<uint8_t>& GetHLAlogicalTime() const = 0;
    virtual void SetHLAlogicalTime(const std::vector<uint8_t>& newValue) = 0;
    // attribute HLAlookahead : HLAtimeInterval
    virtual const std::vector<uint8_t>& GetHLAlookahead() const = 0;
    virtual void SetHLAlookahead(const std::vector<uint8_t>& newValue) = 0;
    // attribute HLAGALT : HLAlogicalTime
    virtual const std::vector<uint8_t>& GetHLAGALT() const = 0;
    virtual void SetHLAGALT(const std::vector<uint8_t>& newValue) = 0;
    // attribute HLALITS : HLAlogicalTime
    virtual const std::vector<uint8_t>& GetHLALITS() const = 0;
    virtual void SetHLALITS(const std::vector<uint8_t>& newValue) = 0;
    // attribute HLAROlength : HLAcount
    virtual HLAcount GetHLAROlength() const = 0;
    virtual void SetHLAROlength(HLAcount newValue) = 0;
    // attribute HLATSOlength : HLAcount
    virtual HLAcount GetHLATSOlength() const = 0;
    virtual void SetHLATSOlength(HLAcount newValue) = 0;
    // attribute HLAreflectionsReceived : HLAcount
    virtual HLAcount GetHLAreflectionsReceived() const = 0;
    virtual void SetHLAreflectionsReceived(HLAcount newValue) = 0;
    // attribute HLAupdatesSent : HLAcount
    virtual HLAcount GetHLAupdatesSent() const = 0;
    virtual void SetHLAupdatesSent(HLAcount newValue) = 0;
    // attribute HLAinteractionsReceived : HLAcount
    virtual HLAcount GetHLAinteractionsReceived() const = 0;
    virtual void SetHLAinteractionsReceived(HLAcount newValue) = 0;
    // attribute HLAinteractionsSent : HLAcount
    virtual HLAcount GetHLAinteractionsSent() const = 0;
    virtual void SetHLAinteractionsSent(HLAcount newValue) = 0;
    // attribute HLAobjectInstancesThatCanBeDeleted : HLAcount
    virtual HLAcount GetHLAobjectInstancesThatCanBeDeleted() const = 0;
    virtual void SetHLAobjectInstancesThatCanBeDeleted(HLAcount newValue) = 0;
    // attribute HLAobjectInstancesUpdated : HLAcount
    virtual HLAcount GetHLAobjectInstancesUpdated() const = 0;
    virtual void SetHLAobjectInstancesUpdated(HLAcount newValue) = 0;
    // attribute HLAobjectInstancesReflected : HLAcount
    virtual HLAcount GetHLAobjectInstancesReflected() const = 0;
    virtual void SetHLAobjectInstancesReflected(HLAcount newValue) = 0;
    // attribute HLAobjectInstancesDeleted : HLAcount
    virtual HLAcount GetHLAobjectInstancesDeleted() const = 0;
    virtual void SetHLAobjectInstancesDeleted(HLAcount newValue) = 0;
    // attribute HLAobjectInstancesRemoved : HLAcount
    virtual HLAcount GetHLAobjectInstancesRemoved() const = 0;
    virtual void SetHLAobjectInstancesRemoved(HLAcount newValue) = 0;
    // attribute HLAobjectInstancesRegistered : HLAcount
    virtual HLAcount GetHLAobjectInstancesRegistered() const = 0;
    virtual void SetHLAobjectInstancesRegistered(HLAcount newValue) = 0;
    // attribute HLAobjectInstancesDiscovered : HLAcount
    virtual HLAcount GetHLAobjectInstancesDiscovered() const = 0;
    virtual void SetHLAobjectInstancesDiscovered(HLAcount newValue) = 0;
    // attribute HLAtimeGrantedTime : HLAmsec
    virtual HLAmsec GetHLAtimeGrantedTime() const = 0;
    virtual void SetHLAtimeGrantedTime(HLAmsec newValue) = 0;
    // attribute HLAtimeAdvancingTime : HLAmsec
    virtual HLAmsec GetHLAtimeAdvancingTime() const = 0;
    virtual void SetHLAtimeAdvancingTime(HLAmsec newValue) = 0;
    // attribute HLAconveyRegionDesignatorSets : HLAswitch
    virtual HLAswitch GetHLAconveyRegionDesignatorSets() const = 0;
    virtual void SetHLAconveyRegionDesignatorSets(HLAswitch newValue) = 0;
    // attribute HLAconveyProducingFederate : HLAswitch
    virtual HLAswitch GetHLAconveyProducingFederate() const = 0;
    virtual void SetHLAconveyProducingFederate(HLAswitch newValue) = 0;
    // send all attribute values
    virtual void UpdateAllAttributeValues() = 0;
    // send all attribute values, as TSO message
    virtual void UpdateAllAttributeValues(int64_t time) = 0;
    // send attribute values which have been modified since last call
    virtual void UpdateModifiedAttributeValues() = 0;
    // send attribute values which have been modified since last call, as TSO message
    virtual void UpdateModifiedAttributeValues(int64_t time) = 0;
    // bitmask of attributes ever received
    virtual AttributeBits GetReceivedAttributes() const = 0;
    // bitmask of attributes received in last update (cleared after update callbacks executed)
    virtual AttributeBits GetUpdatedAttributes() const = 0;
    // bitmask of attributes ever modified
    virtual AttributeBits GetInitializedAttributes() const = 0;
    // bitmask of attributes modified since last updateAttributeValues/provideAttributeValues
    // (cleared by UpdateAttributeValues or ProvideAttributeValues)
    virtual AttributeBits GetModifiedAttributes() const = 0;
    // request attribute values which haven't been updated in last reflectAttributeValues
    virtual void RequestAttributeValues() = 0;
    // request all attribute values
    virtual void RequestAllAttributeValues() = 0;
    using UpdateCallback = std::function<void(std::shared_ptr<IHLAfederate>, optional<int64_t> time, optional<OrderType> orderType)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallback callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
};

class IHLAfederation;
// IHLAfederationObjectClass represents the HLA object class HLAobjectRoot.HLAmanager.HLAfederation.
// Instances of IHLAfederation represent the corresponding HLA object instances.
class IHLAfederationObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IHLAfederation>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IHLAfederation>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IHLAfederation>, bool success)>;
    // Publish/unpublish this object class. Creating object instances requires publishing the object class.
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    // Subscribe/unsubscribe this object class. Taking part in object discovery and receiving attribute updates requires subscribing the object class.
    // Note that the appropriate callbacks should have been registered *before* subscribing to the object class.
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    // Return an existing object instance by name, or nullptr if not existant.
    virtual std::shared_ptr<IHLAfederation> GetObjectInstance(const std::wstring& instanceName) = 0;
    // Create an instance of IHLAfederation. Returns nullptr if the object instance already exists.
    // If another federate has already created an object instance with the same name and the same object class,
    // the discover object instance mechanism will reuse the object returned by 'create object instance'.
    // A discover object instance callback should be installed by the application to appropriately handle this case.
    virtual std::shared_ptr<IHLAfederation> CreateObjectInstance(const std::wstring& instanceName) = 0;
    // Create an instance of IHLAfederation, and notify the application about having completed the HLA object registration.
    // The callback's 'success' parameter indicates whether the object instance name could successfully be reserved for the object.
    virtual std::shared_ptr<IHLAfederation> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;
    // Restore a 'dead' instance of IHLAfederation. Returns nullptr if the object instance already exists.
    // If another federate has already created an object instance with the same name and the same object class,
    // the discover object instance mechanism will reuse the object returned by 'create object instance'.
    // A discover object instance callback should be installed by the application to appropriately handle this case.
    virtual std::shared_ptr<IHLAfederation> RestoreObjectInstance(std::shared_ptr<IHLAfederation> existingObject) = 0;
    // Restore a 'dead' instance of IHLAfederation, and notify the application about having completed the HLA object registration.
    // The callback's 'success' parameter indicates whether the object instance name could successfully be reserved for the object.
    virtual std::shared_ptr<IHLAfederation> RestoreObjectInstance(std::shared_ptr<IHLAfederation> existingObject, ObjectCreatedCallbackType createdCallback) = 0;

    // install a discover object instance callback for this HLA object class
    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    // install a remove object instance callback for the HLA object class
    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IHLAfederation : public IHLAmanager
{
  public:
    static const AttributeBits kHLAfederationNameBit = 0x2;
    static const AttributeBits kHLAfederatesInFederationBit = 0x4;
    static const AttributeBits kHLARTIversionBit = 0x8;
    static const AttributeBits kHLAMIMdesignatorBit = 0x10;
    static const AttributeBits kHLAFOMmoduleDesignatorListBit = 0x20;
    static const AttributeBits kHLAcurrentFDDBit = 0x40;
    static const AttributeBits kHLAtimeImplementationNameBit = 0x80;
    static const AttributeBits kHLAlastSaveNameBit = 0x100;
    static const AttributeBits kHLAlastSaveTimeBit = 0x200;
    static const AttributeBits kHLAnextSaveNameBit = 0x400;
    static const AttributeBits kHLAnextSaveTimeBit = 0x800;
    static const AttributeBits kHLAautoProvideBit = 0x1000;

    IHLAfederation() {}
    ~IHLAfederation() {}
    // copying and moving an object instance is not allowed
    IHLAfederation(const IHLAfederation&) = delete;
    IHLAfederation(IHLAfederation&&) = delete;
    IHLAfederation& operator=(const IHLAfederation&) = delete;
    IHLAfederation& operator=(IHLAfederation&&) = delete;

    // attribute HLAfederationName : HLAunicodeString
    virtual std::wstring GetHLAfederationName() const = 0;
    virtual void SetHLAfederationName(std::wstring newValue) = 0;
    // attribute HLAfederatesInFederation : HLAhandleList
    virtual const std::vector<rti1516ev::HLAhandle>& GetHLAfederatesInFederation() const = 0;
    virtual void SetHLAfederatesInFederation(const std::vector<rti1516ev::HLAhandle>& newValue) = 0;
    // attribute HLARTIversion : HLAunicodeString
    virtual std::wstring GetHLARTIversion() const = 0;
    virtual void SetHLARTIversion(std::wstring newValue) = 0;
    // attribute HLAMIMdesignator : HLAunicodeString
    virtual std::wstring GetHLAMIMdesignator() const = 0;
    virtual void SetHLAMIMdesignator(std::wstring newValue) = 0;
    // attribute HLAFOMmoduleDesignatorList : HLAmoduleDesignatorList
    virtual const std::vector<std::wstring>& GetHLAFOMmoduleDesignatorList() const = 0;
    virtual void SetHLAFOMmoduleDesignatorList(const std::vector<std::wstring>& newValue) = 0;
    // attribute HLAcurrentFDD : HLAunicodeString
    virtual std::wstring GetHLAcurrentFDD() const = 0;
    virtual void SetHLAcurrentFDD(std::wstring newValue) = 0;
    // attribute HLAtimeImplementationName : HLAunicodeString
    virtual std::wstring GetHLAtimeImplementationName() const = 0;
    virtual void SetHLAtimeImplementationName(std::wstring newValue) = 0;
    // attribute HLAlastSaveName : HLAunicodeString
    virtual std::wstring GetHLAlastSaveName() const = 0;
    virtual void SetHLAlastSaveName(std::wstring newValue) = 0;
    // attribute HLAlastSaveTime : HLAlogicalTime
    virtual const std::vector<uint8_t>& GetHLAlastSaveTime() const = 0;
    virtual void SetHLAlastSaveTime(const std::vector<uint8_t>& newValue) = 0;
    // attribute HLAnextSaveName : HLAunicodeString
    virtual std::wstring GetHLAnextSaveName() const = 0;
    virtual void SetHLAnextSaveName(std::wstring newValue) = 0;
    // attribute HLAnextSaveTime : HLAlogicalTime
    virtual const std::vector<uint8_t>& GetHLAnextSaveTime() const = 0;
    virtual void SetHLAnextSaveTime(const std::vector<uint8_t>& newValue) = 0;
    // attribute HLAautoProvide : HLAswitch
    virtual HLAswitch GetHLAautoProvide() const = 0;
    virtual void SetHLAautoProvide(HLAswitch newValue) = 0;
    // send all attribute values
    virtual void UpdateAllAttributeValues() = 0;
    // send all attribute values, as TSO message
    virtual void UpdateAllAttributeValues(int64_t time) = 0;
    // send attribute values which have been modified since last call
    virtual void UpdateModifiedAttributeValues() = 0;
    // send attribute values which have been modified since last call, as TSO message
    virtual void UpdateModifiedAttributeValues(int64_t time) = 0;
    // bitmask of attributes ever received
    virtual AttributeBits GetReceivedAttributes() const = 0;
    // bitmask of attributes received in last update (cleared after update callbacks executed)
    virtual AttributeBits GetUpdatedAttributes() const = 0;
    // bitmask of attributes ever modified
    virtual AttributeBits GetInitializedAttributes() const = 0;
    // bitmask of attributes modified since last updateAttributeValues/provideAttributeValues
    // (cleared by UpdateAttributeValues or ProvideAttributeValues)
    virtual AttributeBits GetModifiedAttributes() const = 0;
    // request attribute values which haven't been updated in last reflectAttributeValues
    virtual void RequestAttributeValues() = 0;
    // request all attribute values
    virtual void RequestAllAttributeValues() = 0;
    using UpdateCallback = std::function<void(std::shared_ptr<IHLAfederation>, optional<int64_t> time, optional<OrderType> orderType)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallback callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
};


class IObjectClassRegistry
{
  public:
    virtual IHLAobjectRootObjectClass* GetHLAobjectRootObjectClass() const = 0;
    virtual IHLAmanagerObjectClass* GetHLAmanagerObjectClass() const = 0;
    virtual IHLAfederateObjectClass* GetHLAfederateObjectClass() const = 0;
    virtual IHLAfederationObjectClass* GetHLAfederationObjectClass() const = 0;
  protected:
    virtual ~IObjectClassRegistry() {}
}; // class IObjectClassRegistry

} // namespace OpenRTI
} // namespace Mom
