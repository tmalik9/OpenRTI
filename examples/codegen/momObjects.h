
// Code automatically generated by FOMCodeGen version 2.1.0.0 from mom.xml, do not edit
#pragma once

#include <vector>
#include <mutex>
#include <future>

#include "RTI/Handle.h"
#include "RTI/RTIambassador.h"
#include "RTI/encoding/BasicDataElements.h"
#include "RTI/encoding/HLAfixedRecord.h"
#include "RTI/encoding/HLAfixedArray.h"
#include "RTI/encoding/HLAvariableArray.h"
#include "RTI/time/HLAinteger64Time.h"

#include "RTI/encoding/HLAhandle.h"
#include "D:\vfs\OpenRTI-private\examples\codegen/momObjectInterfaces.h"
#include "momEncodings.h"

class ObjectClassRegistry;

namespace OpenRTI {
namespace Mom {

class ObjectClassRegistry;

// The instance implementation classes are disjunct inheritance-wise.
// So we need some common, internal functions, aggregated in an internal interface.
class IObjectImplBase
{
  public:
    virtual rti1516ev::ObjectInstanceHandle GetObjectInstanceHandle() const = 0;
};

class HLAobjectRoot;
class HLAobjectRootObjectClass : public IHLAobjectRootObjectClass
{
  public:
    // IHLAobjectRootObjectClass
    HLAobjectRootObjectClass() = default;
    virtual ~HLAobjectRootObjectClass();
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    void Unsubscribe() override;
    std::shared_ptr<IHLAobjectRoot> GetObjectInstance(const std::wstring& instanceName) override;
    std::shared_ptr<IHLAobjectRoot> CreateObjectInstance(const std::wstring& instanceName) override;
    std::shared_ptr<IHLAobjectRoot> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) override;
    std::shared_ptr<IHLAobjectRoot> RestoreObjectInstance(std::shared_ptr<IHLAobjectRoot>) override;
    std::shared_ptr<IHLAobjectRoot> RestoreObjectInstance(std::shared_ptr<IHLAobjectRoot>, ObjectCreatedCallbackType createdCallback) override;
    uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) override;
    void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) override;
    void ExecuteDiscoverObjectInstanceCallbacks(std::shared_ptr<IHLAobjectRoot> newObjectInstance);

    uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) override;
    void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) override;
    void ExecuteRemoveObjectInstanceCallbacks(std::shared_ptr<IHLAobjectRoot> newObjectInstance);
    // Set a user-defined creator function, which returns subclasses of HLAobjectRoot
    using ObjectInstanceCreatorFunction = std::function<HLAobjectRoot*(HLAobjectRootObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* rtiAmbassador)>;
    // When using custom object instance classes, don't forget to set the creator function *before* subscribing to the object class.
    void SetObjectInstanceCreator(ObjectInstanceCreatorFunction creatorFunction) { mCreatorFunction = creatorFunction; }
    // internal
    HLAobjectRootObjectClass(rti1516ev::RTIambassador* rtiAmbassador, ObjectClassRegistry* registry);
    // attribute HLAprivilegeToDeleteObject : HLAtoken
    rti1516ev::AttributeHandle GetHLAprivilegeToDeleteObjectAttributeHandle() const { return mHLAprivilegeToDeleteObjectAttributeHandle; }
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    std::shared_ptr<IHLAobjectRoot> GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    rti1516ev::AttributeHandleSet GetAllAttributeHandles();
    ObjectClassRegistry* GetObjectClassRegistry() const { return mRegistry; }

    // add object instance to maps (and to maps of base classes)
    void InsertObjectInstanceName(std::shared_ptr<IHLAobjectRoot> objectInstance, const std::wstring& objectInstanceName);
    void InsertObjectInstanceHandle(std::shared_ptr<IHLAobjectRoot> objectInstance, rti1516ev::ObjectInstanceHandle objectInstanceHandle);
    // remove object instance from maps (and from maps of base classes)
    void EraseObjectInstance(rti1516ev::ObjectInstanceHandle objectInstanceHandle, const std::wstring& objectInstanceName);
  private:
    ObjectClassRegistry* mRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    ObjectInstanceCreatorFunction mCreatorFunction;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute HLAprivilegeToDeleteObject : HLAtoken
    rti1516ev::AttributeHandle mHLAprivilegeToDeleteObjectAttributeHandle;
    // this mutex guards the data structures below
    mutable std::recursive_mutex mMutex;
    std::map<std::wstring, std::shared_ptr<IHLAobjectRoot>> mObjectInstancesByName;
    std::map<rti1516ev::ObjectInstanceHandle, std::shared_ptr<IHLAobjectRoot>> mObjectInstancesByHandle;

    mutable std::mutex mCallbackListMutex;
    std::map<uint32_t, DiscoverObjectInstanceCallback> mDiscoverCallbacks;
    uint32_t mLastDiscoverObjectInstanceCallbackToken = 0;
    std::map<uint32_t, RemoveObjectInstanceCallback> mRemoveObjectInstanceCallbacks;
    uint32_t mLastRemoveObjectInstanceCallbackToken = 0;
};


class HLAobjectRoot : public virtual IHLAobjectRoot, public IObjectImplBase
{
  public:

    virtual ~HLAobjectRoot();
    HLAobjectRoot(const HLAobjectRoot&) = delete;
    HLAobjectRoot(HLAobjectRoot&&) = delete;
    HLAobjectRoot& operator=(const HLAobjectRoot&) = delete;
    HLAobjectRoot& operator=(HLAobjectRoot&&) = delete;
    IHLAobjectRootObjectClass* GetObjectClass() const { return mObjectClass; }
    ObjectClassRegistry* GetObjectClassRegistry() const { return mObjectClass->GetObjectClassRegistry(); }
    std::wstring GetObjectInstanceName() const override { return mObjectInstanceName; }
    rti1516ev::ObjectInstanceHandle GetObjectInstanceHandle() const override { return mObjectInstanceHandle; }
    bool IsValid() const override;
    bool WaitForObjectValid() override;
    bool IsOwner() const override;
    void Release() override;
    // attribute HLAprivilegeToDeleteObject : HLAtoken
    const std::vector<uint8_t>& GetHLAprivilegeToDeleteObject() const override;
    void SetHLAprivilegeToDeleteObject(const std::vector<uint8_t>& newValue) override;
    // IHLAobjectRoot
    void UpdateAllAttributeValues() override;
    void UpdateAllAttributeValues(int64_t time) override;
    void UpdateModifiedAttributeValues() override;
    void UpdateModifiedAttributeValues(int64_t time) override;
    void RequestAttributeValues() override;
    void RequestAllAttributeValues() override;

    // bitmask of attributes ever received
    AttributeBits GetReceivedAttributes() const override;
    // bitmask of attributes received in last update (cleared after update callbacks executed)
    AttributeBits GetUpdatedAttributes() const override;
    // bitmask of attributes ever modified
    AttributeBits GetInitializedAttributes() const override;
    // bitmask of attributes modified since last updateAttributeValues/provideAttributeValues
    AttributeBits GetModifiedAttributes() const override;
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes, const rti1516ev::LogicalTime& theTime, OrderType orderType);
    void ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributes, optional<int64_t> time);
  protected:
    friend class HLAobjectRootObjectClass;

    HLAobjectRoot();
    HLAobjectRoot(HLAobjectRootObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* ambassador);


    // get attribute handle/value map of all attributes
    rti1516ev::AttributeHandleValueMap GetAllAttributeValues() const;
    // get attribute handle/value map of attributes which have been modified since last call to UpdateModifiedAttributeValues
    rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;

    rti1516ev::RTIambassador* mRtiAmbassador;
    // this mutex guards all of the fields below
    mutable std::recursive_mutex mMutex;

    HLAobjectRootObjectClass* mObjectClass;
    std::wstring mObjectInstanceName;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    bool mIsOwner = false;
    std::promise<bool> mCreatedPromise;
    std::future<bool>  mCreatedFuture;
    // modified by any ReflectAttributeValues in the past
    AttributeBits mValuesReceived = kNone;
    // modified by any attribute setter
    AttributeBits mValuesSet = kNone;
    // modified by last ReflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next UpdateModifiedAttributeValues
    AttributeBits mDirty = kNone;
    // Attribute value encoders
    // attribute HLAprivilegeToDeleteObject : HLAtoken
    HLAtokenEncoding mHLAprivilegeToDeleteObject;
};

class HLAmanager;
class HLAmanagerObjectClass : public IHLAmanagerObjectClass
{
  public:
    // IHLAmanagerObjectClass
    HLAmanagerObjectClass() = default;
    virtual ~HLAmanagerObjectClass();
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    void Unsubscribe() override;
    std::shared_ptr<IHLAmanager> GetObjectInstance(const std::wstring& instanceName) override;
    std::shared_ptr<IHLAmanager> CreateObjectInstance(const std::wstring& instanceName) override;
    std::shared_ptr<IHLAmanager> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) override;
    std::shared_ptr<IHLAmanager> RestoreObjectInstance(std::shared_ptr<IHLAmanager>) override;
    std::shared_ptr<IHLAmanager> RestoreObjectInstance(std::shared_ptr<IHLAmanager>, ObjectCreatedCallbackType createdCallback) override;
    uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) override;
    void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) override;
    void ExecuteDiscoverObjectInstanceCallbacks(std::shared_ptr<IHLAmanager> newObjectInstance);

    uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) override;
    void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) override;
    void ExecuteRemoveObjectInstanceCallbacks(std::shared_ptr<IHLAmanager> newObjectInstance);
    // Set a user-defined creator function, which returns subclasses of HLAmanager
    using ObjectInstanceCreatorFunction = std::function<HLAmanager*(HLAmanagerObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* rtiAmbassador)>;
    // When using custom object instance classes, don't forget to set the creator function *before* subscribing to the object class.
    void SetObjectInstanceCreator(ObjectInstanceCreatorFunction creatorFunction) { mCreatorFunction = creatorFunction; }
    // internal
    HLAmanagerObjectClass(rti1516ev::RTIambassador* rtiAmbassador, ObjectClassRegistry* registry, HLAobjectRootObjectClass* baseClass);

    // attribute HLAprivilegeToDeleteObject : HLAtoken
    rti1516ev::AttributeHandle GetHLAprivilegeToDeleteObjectAttributeHandle() const { return mBaseClass->GetHLAprivilegeToDeleteObjectAttributeHandle(); }
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    std::shared_ptr<IHLAmanager> GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    rti1516ev::AttributeHandleSet GetAllAttributeHandles();
    ObjectClassRegistry* GetObjectClassRegistry() const { return mRegistry; }

    // add object instance to maps (and to maps of base classes)
    void InsertObjectInstanceName(std::shared_ptr<IHLAmanager> objectInstance, const std::wstring& objectInstanceName);
    void InsertObjectInstanceHandle(std::shared_ptr<IHLAmanager> objectInstance, rti1516ev::ObjectInstanceHandle objectInstanceHandle);
    // remove object instance from maps (and from maps of base classes)
    void EraseObjectInstance(rti1516ev::ObjectInstanceHandle objectInstanceHandle, const std::wstring& objectInstanceName);
  private:
    ObjectClassRegistry* mRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAobjectRootObjectClass* mBaseClass;
    ObjectInstanceCreatorFunction mCreatorFunction;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // this mutex guards the data structures below
    mutable std::recursive_mutex mMutex;
    std::map<std::wstring, std::shared_ptr<IHLAmanager>> mObjectInstancesByName;
    std::map<rti1516ev::ObjectInstanceHandle, std::shared_ptr<IHLAmanager>> mObjectInstancesByHandle;

    mutable std::mutex mCallbackListMutex;
    std::map<uint32_t, DiscoverObjectInstanceCallback> mDiscoverCallbacks;
    uint32_t mLastDiscoverObjectInstanceCallbackToken = 0;
    std::map<uint32_t, RemoveObjectInstanceCallback> mRemoveObjectInstanceCallbacks;
    uint32_t mLastRemoveObjectInstanceCallbackToken = 0;
};


class HLAmanager : public virtual IHLAmanager, public IObjectImplBase
{
  public:

    virtual ~HLAmanager();
    HLAmanager(const HLAmanager&) = delete;
    HLAmanager(HLAmanager&&) = delete;
    HLAmanager& operator=(const HLAmanager&) = delete;
    HLAmanager& operator=(HLAmanager&&) = delete;
    IHLAmanagerObjectClass* GetObjectClass() const { return mObjectClass; }
    ObjectClassRegistry* GetObjectClassRegistry() const { return mObjectClass->GetObjectClassRegistry(); }
    std::wstring GetObjectInstanceName() const override { return mObjectInstanceName; }
    rti1516ev::ObjectInstanceHandle GetObjectInstanceHandle() const override { return mObjectInstanceHandle; }
    bool IsValid() const override;
    bool WaitForObjectValid() override;
    bool IsOwner() const override;
    void Release() override;
    // attribute HLAprivilegeToDeleteObject : HLAtoken
    const std::vector<uint8_t>& GetHLAprivilegeToDeleteObject() const override;
    void SetHLAprivilegeToDeleteObject(const std::vector<uint8_t>& newValue) override;
    // IHLAmanager

  protected:
    friend class HLAmanagerObjectClass;

    HLAmanager();
    HLAmanager(HLAmanagerObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* ambassador);


    // get attribute handle/value map of all attributes
    rti1516ev::AttributeHandleValueMap GetAllAttributeValues() const;
    // get attribute handle/value map of attributes which have been modified since last call to UpdateModifiedAttributeValues
    rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;

    rti1516ev::RTIambassador* mRtiAmbassador;
    // this mutex guards all of the fields below
    mutable std::recursive_mutex mMutex;

    HLAmanagerObjectClass* mObjectClass;
    std::wstring mObjectInstanceName;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    bool mIsOwner = false;
    std::promise<bool> mCreatedPromise;
    std::future<bool>  mCreatedFuture;
    // Attribute value encoders
    // attribute HLAprivilegeToDeleteObject : HLAtoken
    HLAtokenEncoding mHLAprivilegeToDeleteObject;
};

class HLAfederate;
class HLAfederateObjectClass : public IHLAfederateObjectClass
{
  public:
    // IHLAfederateObjectClass
    HLAfederateObjectClass() = default;
    virtual ~HLAfederateObjectClass();
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    void Unsubscribe() override;
    std::shared_ptr<IHLAfederate> GetObjectInstance(const std::wstring& instanceName) override;
    std::shared_ptr<IHLAfederate> CreateObjectInstance(const std::wstring& instanceName) override;
    std::shared_ptr<IHLAfederate> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) override;
    std::shared_ptr<IHLAfederate> RestoreObjectInstance(std::shared_ptr<IHLAfederate>) override;
    std::shared_ptr<IHLAfederate> RestoreObjectInstance(std::shared_ptr<IHLAfederate>, ObjectCreatedCallbackType createdCallback) override;
    uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) override;
    void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) override;
    void ExecuteDiscoverObjectInstanceCallbacks(std::shared_ptr<IHLAfederate> newObjectInstance);

    uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) override;
    void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) override;
    void ExecuteRemoveObjectInstanceCallbacks(std::shared_ptr<IHLAfederate> newObjectInstance);
    // Set a user-defined creator function, which returns subclasses of HLAfederate
    using ObjectInstanceCreatorFunction = std::function<HLAfederate*(HLAfederateObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* rtiAmbassador)>;
    // When using custom object instance classes, don't forget to set the creator function *before* subscribing to the object class.
    void SetObjectInstanceCreator(ObjectInstanceCreatorFunction creatorFunction) { mCreatorFunction = creatorFunction; }
    // internal
    HLAfederateObjectClass(rti1516ev::RTIambassador* rtiAmbassador, ObjectClassRegistry* registry, HLAmanagerObjectClass* baseClass);

    // attribute HLAprivilegeToDeleteObject : HLAtoken
    rti1516ev::AttributeHandle GetHLAprivilegeToDeleteObjectAttributeHandle() const { return mBaseClass->GetHLAprivilegeToDeleteObjectAttributeHandle(); }
    // attribute HLAfederateHandle : HLAhandle
    rti1516ev::AttributeHandle GetHLAfederateHandleAttributeHandle() const { return mHLAfederateHandleAttributeHandle; }
    // attribute HLAfederateName : HLAunicodeString
    rti1516ev::AttributeHandle GetHLAfederateNameAttributeHandle() const { return mHLAfederateNameAttributeHandle; }
    // attribute HLAfederateType : HLAunicodeString
    rti1516ev::AttributeHandle GetHLAfederateTypeAttributeHandle() const { return mHLAfederateTypeAttributeHandle; }
    // attribute HLAfederateHost : HLAunicodeString
    rti1516ev::AttributeHandle GetHLAfederateHostAttributeHandle() const { return mHLAfederateHostAttributeHandle; }
    // attribute HLARTIversion : HLAunicodeString
    rti1516ev::AttributeHandle GetHLARTIversionAttributeHandle() const { return mHLARTIversionAttributeHandle; }
    // attribute HLAFOMmoduleDesignatorList : HLAmoduleDesignatorList
    rti1516ev::AttributeHandle GetHLAFOMmoduleDesignatorListAttributeHandle() const { return mHLAFOMmoduleDesignatorListAttributeHandle; }
    // attribute HLAtimeConstrained : HLAboolean
    rti1516ev::AttributeHandle GetHLAtimeConstrainedAttributeHandle() const { return mHLAtimeConstrainedAttributeHandle; }
    // attribute HLAtimeRegulating : HLAboolean
    rti1516ev::AttributeHandle GetHLAtimeRegulatingAttributeHandle() const { return mHLAtimeRegulatingAttributeHandle; }
    // attribute HLAasynchronousDelivery : HLAboolean
    rti1516ev::AttributeHandle GetHLAasynchronousDeliveryAttributeHandle() const { return mHLAasynchronousDeliveryAttributeHandle; }
    // attribute HLAfederateState : HLAfederateState
    rti1516ev::AttributeHandle GetHLAfederateStateAttributeHandle() const { return mHLAfederateStateAttributeHandle; }
    // attribute HLAtimeManagerState : HLAtimeState
    rti1516ev::AttributeHandle GetHLAtimeManagerStateAttributeHandle() const { return mHLAtimeManagerStateAttributeHandle; }
    // attribute HLAlogicalTime : HLAlogicalTime
    rti1516ev::AttributeHandle GetHLAlogicalTimeAttributeHandle() const { return mHLAlogicalTimeAttributeHandle; }
    // attribute HLAlookahead : HLAtimeInterval
    rti1516ev::AttributeHandle GetHLAlookaheadAttributeHandle() const { return mHLAlookaheadAttributeHandle; }
    // attribute HLAGALT : HLAlogicalTime
    rti1516ev::AttributeHandle GetHLAGALTAttributeHandle() const { return mHLAGALTAttributeHandle; }
    // attribute HLALITS : HLAlogicalTime
    rti1516ev::AttributeHandle GetHLALITSAttributeHandle() const { return mHLALITSAttributeHandle; }
    // attribute HLAROlength : HLAcount
    rti1516ev::AttributeHandle GetHLAROlengthAttributeHandle() const { return mHLAROlengthAttributeHandle; }
    // attribute HLATSOlength : HLAcount
    rti1516ev::AttributeHandle GetHLATSOlengthAttributeHandle() const { return mHLATSOlengthAttributeHandle; }
    // attribute HLAreflectionsReceived : HLAcount
    rti1516ev::AttributeHandle GetHLAreflectionsReceivedAttributeHandle() const { return mHLAreflectionsReceivedAttributeHandle; }
    // attribute HLAupdatesSent : HLAcount
    rti1516ev::AttributeHandle GetHLAupdatesSentAttributeHandle() const { return mHLAupdatesSentAttributeHandle; }
    // attribute HLAinteractionsReceived : HLAcount
    rti1516ev::AttributeHandle GetHLAinteractionsReceivedAttributeHandle() const { return mHLAinteractionsReceivedAttributeHandle; }
    // attribute HLAinteractionsSent : HLAcount
    rti1516ev::AttributeHandle GetHLAinteractionsSentAttributeHandle() const { return mHLAinteractionsSentAttributeHandle; }
    // attribute HLAobjectInstancesThatCanBeDeleted : HLAcount
    rti1516ev::AttributeHandle GetHLAobjectInstancesThatCanBeDeletedAttributeHandle() const { return mHLAobjectInstancesThatCanBeDeletedAttributeHandle; }
    // attribute HLAobjectInstancesUpdated : HLAcount
    rti1516ev::AttributeHandle GetHLAobjectInstancesUpdatedAttributeHandle() const { return mHLAobjectInstancesUpdatedAttributeHandle; }
    // attribute HLAobjectInstancesReflected : HLAcount
    rti1516ev::AttributeHandle GetHLAobjectInstancesReflectedAttributeHandle() const { return mHLAobjectInstancesReflectedAttributeHandle; }
    // attribute HLAobjectInstancesDeleted : HLAcount
    rti1516ev::AttributeHandle GetHLAobjectInstancesDeletedAttributeHandle() const { return mHLAobjectInstancesDeletedAttributeHandle; }
    // attribute HLAobjectInstancesRemoved : HLAcount
    rti1516ev::AttributeHandle GetHLAobjectInstancesRemovedAttributeHandle() const { return mHLAobjectInstancesRemovedAttributeHandle; }
    // attribute HLAobjectInstancesRegistered : HLAcount
    rti1516ev::AttributeHandle GetHLAobjectInstancesRegisteredAttributeHandle() const { return mHLAobjectInstancesRegisteredAttributeHandle; }
    // attribute HLAobjectInstancesDiscovered : HLAcount
    rti1516ev::AttributeHandle GetHLAobjectInstancesDiscoveredAttributeHandle() const { return mHLAobjectInstancesDiscoveredAttributeHandle; }
    // attribute HLAtimeGrantedTime : HLAmsec
    rti1516ev::AttributeHandle GetHLAtimeGrantedTimeAttributeHandle() const { return mHLAtimeGrantedTimeAttributeHandle; }
    // attribute HLAtimeAdvancingTime : HLAmsec
    rti1516ev::AttributeHandle GetHLAtimeAdvancingTimeAttributeHandle() const { return mHLAtimeAdvancingTimeAttributeHandle; }
    // attribute HLAconveyRegionDesignatorSets : HLAswitch
    rti1516ev::AttributeHandle GetHLAconveyRegionDesignatorSetsAttributeHandle() const { return mHLAconveyRegionDesignatorSetsAttributeHandle; }
    // attribute HLAconveyProducingFederate : HLAswitch
    rti1516ev::AttributeHandle GetHLAconveyProducingFederateAttributeHandle() const { return mHLAconveyProducingFederateAttributeHandle; }
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    std::shared_ptr<IHLAfederate> GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    rti1516ev::AttributeHandleSet GetAllAttributeHandles();
    ObjectClassRegistry* GetObjectClassRegistry() const { return mRegistry; }

    // add object instance to maps (and to maps of base classes)
    void InsertObjectInstanceName(std::shared_ptr<IHLAfederate> objectInstance, const std::wstring& objectInstanceName);
    void InsertObjectInstanceHandle(std::shared_ptr<IHLAfederate> objectInstance, rti1516ev::ObjectInstanceHandle objectInstanceHandle);
    // remove object instance from maps (and from maps of base classes)
    void EraseObjectInstance(rti1516ev::ObjectInstanceHandle objectInstanceHandle, const std::wstring& objectInstanceName);
  private:
    ObjectClassRegistry* mRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAmanagerObjectClass* mBaseClass;
    ObjectInstanceCreatorFunction mCreatorFunction;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute HLAfederateHandle : HLAhandle
    rti1516ev::AttributeHandle mHLAfederateHandleAttributeHandle;
    // attribute HLAfederateName : HLAunicodeString
    rti1516ev::AttributeHandle mHLAfederateNameAttributeHandle;
    // attribute HLAfederateType : HLAunicodeString
    rti1516ev::AttributeHandle mHLAfederateTypeAttributeHandle;
    // attribute HLAfederateHost : HLAunicodeString
    rti1516ev::AttributeHandle mHLAfederateHostAttributeHandle;
    // attribute HLARTIversion : HLAunicodeString
    rti1516ev::AttributeHandle mHLARTIversionAttributeHandle;
    // attribute HLAFOMmoduleDesignatorList : HLAmoduleDesignatorList
    rti1516ev::AttributeHandle mHLAFOMmoduleDesignatorListAttributeHandle;
    // attribute HLAtimeConstrained : HLAboolean
    rti1516ev::AttributeHandle mHLAtimeConstrainedAttributeHandle;
    // attribute HLAtimeRegulating : HLAboolean
    rti1516ev::AttributeHandle mHLAtimeRegulatingAttributeHandle;
    // attribute HLAasynchronousDelivery : HLAboolean
    rti1516ev::AttributeHandle mHLAasynchronousDeliveryAttributeHandle;
    // attribute HLAfederateState : HLAfederateState
    rti1516ev::AttributeHandle mHLAfederateStateAttributeHandle;
    // attribute HLAtimeManagerState : HLAtimeState
    rti1516ev::AttributeHandle mHLAtimeManagerStateAttributeHandle;
    // attribute HLAlogicalTime : HLAlogicalTime
    rti1516ev::AttributeHandle mHLAlogicalTimeAttributeHandle;
    // attribute HLAlookahead : HLAtimeInterval
    rti1516ev::AttributeHandle mHLAlookaheadAttributeHandle;
    // attribute HLAGALT : HLAlogicalTime
    rti1516ev::AttributeHandle mHLAGALTAttributeHandle;
    // attribute HLALITS : HLAlogicalTime
    rti1516ev::AttributeHandle mHLALITSAttributeHandle;
    // attribute HLAROlength : HLAcount
    rti1516ev::AttributeHandle mHLAROlengthAttributeHandle;
    // attribute HLATSOlength : HLAcount
    rti1516ev::AttributeHandle mHLATSOlengthAttributeHandle;
    // attribute HLAreflectionsReceived : HLAcount
    rti1516ev::AttributeHandle mHLAreflectionsReceivedAttributeHandle;
    // attribute HLAupdatesSent : HLAcount
    rti1516ev::AttributeHandle mHLAupdatesSentAttributeHandle;
    // attribute HLAinteractionsReceived : HLAcount
    rti1516ev::AttributeHandle mHLAinteractionsReceivedAttributeHandle;
    // attribute HLAinteractionsSent : HLAcount
    rti1516ev::AttributeHandle mHLAinteractionsSentAttributeHandle;
    // attribute HLAobjectInstancesThatCanBeDeleted : HLAcount
    rti1516ev::AttributeHandle mHLAobjectInstancesThatCanBeDeletedAttributeHandle;
    // attribute HLAobjectInstancesUpdated : HLAcount
    rti1516ev::AttributeHandle mHLAobjectInstancesUpdatedAttributeHandle;
    // attribute HLAobjectInstancesReflected : HLAcount
    rti1516ev::AttributeHandle mHLAobjectInstancesReflectedAttributeHandle;
    // attribute HLAobjectInstancesDeleted : HLAcount
    rti1516ev::AttributeHandle mHLAobjectInstancesDeletedAttributeHandle;
    // attribute HLAobjectInstancesRemoved : HLAcount
    rti1516ev::AttributeHandle mHLAobjectInstancesRemovedAttributeHandle;
    // attribute HLAobjectInstancesRegistered : HLAcount
    rti1516ev::AttributeHandle mHLAobjectInstancesRegisteredAttributeHandle;
    // attribute HLAobjectInstancesDiscovered : HLAcount
    rti1516ev::AttributeHandle mHLAobjectInstancesDiscoveredAttributeHandle;
    // attribute HLAtimeGrantedTime : HLAmsec
    rti1516ev::AttributeHandle mHLAtimeGrantedTimeAttributeHandle;
    // attribute HLAtimeAdvancingTime : HLAmsec
    rti1516ev::AttributeHandle mHLAtimeAdvancingTimeAttributeHandle;
    // attribute HLAconveyRegionDesignatorSets : HLAswitch
    rti1516ev::AttributeHandle mHLAconveyRegionDesignatorSetsAttributeHandle;
    // attribute HLAconveyProducingFederate : HLAswitch
    rti1516ev::AttributeHandle mHLAconveyProducingFederateAttributeHandle;
    // this mutex guards the data structures below
    mutable std::recursive_mutex mMutex;
    std::map<std::wstring, std::shared_ptr<IHLAfederate>> mObjectInstancesByName;
    std::map<rti1516ev::ObjectInstanceHandle, std::shared_ptr<IHLAfederate>> mObjectInstancesByHandle;

    mutable std::mutex mCallbackListMutex;
    std::map<uint32_t, DiscoverObjectInstanceCallback> mDiscoverCallbacks;
    uint32_t mLastDiscoverObjectInstanceCallbackToken = 0;
    std::map<uint32_t, RemoveObjectInstanceCallback> mRemoveObjectInstanceCallbacks;
    uint32_t mLastRemoveObjectInstanceCallbackToken = 0;
};


class HLAfederate : public virtual IHLAfederate, public IObjectImplBase
{
  public:

    virtual ~HLAfederate();
    HLAfederate(const HLAfederate&) = delete;
    HLAfederate(HLAfederate&&) = delete;
    HLAfederate& operator=(const HLAfederate&) = delete;
    HLAfederate& operator=(HLAfederate&&) = delete;
    IHLAfederateObjectClass* GetObjectClass() const { return mObjectClass; }
    ObjectClassRegistry* GetObjectClassRegistry() const { return mObjectClass->GetObjectClassRegistry(); }
    std::wstring GetObjectInstanceName() const override { return mObjectInstanceName; }
    rti1516ev::ObjectInstanceHandle GetObjectInstanceHandle() const override { return mObjectInstanceHandle; }
    bool IsValid() const override;
    bool WaitForObjectValid() override;
    bool IsOwner() const override;
    void Release() override;
    // attribute HLAprivilegeToDeleteObject : HLAtoken
    const std::vector<uint8_t>& GetHLAprivilegeToDeleteObject() const override;
    void SetHLAprivilegeToDeleteObject(const std::vector<uint8_t>& newValue) override;
    // attribute HLAfederateHandle : HLAhandle
    rti1516ev::HLAhandle GetHLAfederateHandle() const override;
    void SetHLAfederateHandle(rti1516ev::HLAhandle newValue) override;
    // attribute HLAfederateName : HLAunicodeString
    std::wstring GetHLAfederateName() const override;
    void SetHLAfederateName(std::wstring newValue) override;
    // attribute HLAfederateType : HLAunicodeString
    std::wstring GetHLAfederateType() const override;
    void SetHLAfederateType(std::wstring newValue) override;
    // attribute HLAfederateHost : HLAunicodeString
    std::wstring GetHLAfederateHost() const override;
    void SetHLAfederateHost(std::wstring newValue) override;
    // attribute HLARTIversion : HLAunicodeString
    std::wstring GetHLARTIversion() const override;
    void SetHLARTIversion(std::wstring newValue) override;
    // attribute HLAFOMmoduleDesignatorList : HLAmoduleDesignatorList
    const std::vector<std::wstring>& GetHLAFOMmoduleDesignatorList() const override;
    void SetHLAFOMmoduleDesignatorList(const std::vector<std::wstring>& newValue) override;
    // attribute HLAtimeConstrained : HLAboolean
    bool GetHLAtimeConstrained() const override;
    void SetHLAtimeConstrained(bool newValue) override;
    // attribute HLAtimeRegulating : HLAboolean
    bool GetHLAtimeRegulating() const override;
    void SetHLAtimeRegulating(bool newValue) override;
    // attribute HLAasynchronousDelivery : HLAboolean
    bool GetHLAasynchronousDelivery() const override;
    void SetHLAasynchronousDelivery(bool newValue) override;
    // attribute HLAfederateState : HLAfederateState
    HLAfederateState GetHLAfederateState() const override;
    void SetHLAfederateState(HLAfederateState newValue) override;
    // attribute HLAtimeManagerState : HLAtimeState
    HLAtimeState GetHLAtimeManagerState() const override;
    void SetHLAtimeManagerState(HLAtimeState newValue) override;
    // attribute HLAlogicalTime : HLAlogicalTime
    const std::vector<uint8_t>& GetHLAlogicalTime() const override;
    void SetHLAlogicalTime(const std::vector<uint8_t>& newValue) override;
    // attribute HLAlookahead : HLAtimeInterval
    const std::vector<uint8_t>& GetHLAlookahead() const override;
    void SetHLAlookahead(const std::vector<uint8_t>& newValue) override;
    // attribute HLAGALT : HLAlogicalTime
    const std::vector<uint8_t>& GetHLAGALT() const override;
    void SetHLAGALT(const std::vector<uint8_t>& newValue) override;
    // attribute HLALITS : HLAlogicalTime
    const std::vector<uint8_t>& GetHLALITS() const override;
    void SetHLALITS(const std::vector<uint8_t>& newValue) override;
    // attribute HLAROlength : HLAcount
    HLAcount GetHLAROlength() const override;
    void SetHLAROlength(HLAcount newValue) override;
    // attribute HLATSOlength : HLAcount
    HLAcount GetHLATSOlength() const override;
    void SetHLATSOlength(HLAcount newValue) override;
    // attribute HLAreflectionsReceived : HLAcount
    HLAcount GetHLAreflectionsReceived() const override;
    void SetHLAreflectionsReceived(HLAcount newValue) override;
    // attribute HLAupdatesSent : HLAcount
    HLAcount GetHLAupdatesSent() const override;
    void SetHLAupdatesSent(HLAcount newValue) override;
    // attribute HLAinteractionsReceived : HLAcount
    HLAcount GetHLAinteractionsReceived() const override;
    void SetHLAinteractionsReceived(HLAcount newValue) override;
    // attribute HLAinteractionsSent : HLAcount
    HLAcount GetHLAinteractionsSent() const override;
    void SetHLAinteractionsSent(HLAcount newValue) override;
    // attribute HLAobjectInstancesThatCanBeDeleted : HLAcount
    HLAcount GetHLAobjectInstancesThatCanBeDeleted() const override;
    void SetHLAobjectInstancesThatCanBeDeleted(HLAcount newValue) override;
    // attribute HLAobjectInstancesUpdated : HLAcount
    HLAcount GetHLAobjectInstancesUpdated() const override;
    void SetHLAobjectInstancesUpdated(HLAcount newValue) override;
    // attribute HLAobjectInstancesReflected : HLAcount
    HLAcount GetHLAobjectInstancesReflected() const override;
    void SetHLAobjectInstancesReflected(HLAcount newValue) override;
    // attribute HLAobjectInstancesDeleted : HLAcount
    HLAcount GetHLAobjectInstancesDeleted() const override;
    void SetHLAobjectInstancesDeleted(HLAcount newValue) override;
    // attribute HLAobjectInstancesRemoved : HLAcount
    HLAcount GetHLAobjectInstancesRemoved() const override;
    void SetHLAobjectInstancesRemoved(HLAcount newValue) override;
    // attribute HLAobjectInstancesRegistered : HLAcount
    HLAcount GetHLAobjectInstancesRegistered() const override;
    void SetHLAobjectInstancesRegistered(HLAcount newValue) override;
    // attribute HLAobjectInstancesDiscovered : HLAcount
    HLAcount GetHLAobjectInstancesDiscovered() const override;
    void SetHLAobjectInstancesDiscovered(HLAcount newValue) override;
    // attribute HLAtimeGrantedTime : HLAmsec
    HLAmsec GetHLAtimeGrantedTime() const override;
    void SetHLAtimeGrantedTime(HLAmsec newValue) override;
    // attribute HLAtimeAdvancingTime : HLAmsec
    HLAmsec GetHLAtimeAdvancingTime() const override;
    void SetHLAtimeAdvancingTime(HLAmsec newValue) override;
    // attribute HLAconveyRegionDesignatorSets : HLAswitch
    HLAswitch GetHLAconveyRegionDesignatorSets() const override;
    void SetHLAconveyRegionDesignatorSets(HLAswitch newValue) override;
    // attribute HLAconveyProducingFederate : HLAswitch
    HLAswitch GetHLAconveyProducingFederate() const override;
    void SetHLAconveyProducingFederate(HLAswitch newValue) override;
    // IHLAfederate
    void UpdateAllAttributeValues() override;
    void UpdateAllAttributeValues(int64_t time) override;
    void UpdateModifiedAttributeValues() override;
    void UpdateModifiedAttributeValues(int64_t time) override;
    void RequestAttributeValues() override;
    void RequestAllAttributeValues() override;
    uint32_t RegisterUpdateCallback(UpdateCallback callback) override;
    void UnregisterUpdateCallback(uint32_t callbackToken) override;

    // bitmask of attributes ever received
    AttributeBits GetReceivedAttributes() const override;
    // bitmask of attributes received in last update (cleared after update callbacks executed)
    AttributeBits GetUpdatedAttributes() const override;
    // bitmask of attributes ever modified
    AttributeBits GetInitializedAttributes() const override;
    // bitmask of attributes modified since last updateAttributeValues/provideAttributeValues
    AttributeBits GetModifiedAttributes() const override;
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes, const rti1516ev::LogicalTime& theTime, OrderType orderType);
    void ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributes, optional<int64_t> time);
  protected:
    friend class HLAfederateObjectClass;

    HLAfederate();
    HLAfederate(HLAfederateObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* ambassador);

    void ExecuteUpdateCallbacks(optional<int64_t> time, optional<OrderType> orderType);

    // get attribute handle/value map of all attributes
    rti1516ev::AttributeHandleValueMap GetAllAttributeValues() const;
    // get attribute handle/value map of attributes which have been modified since last call to UpdateModifiedAttributeValues
    rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;

    rti1516ev::RTIambassador* mRtiAmbassador;
    // this mutex guards all of the fields below
    mutable std::recursive_mutex mMutex;

    HLAfederateObjectClass* mObjectClass;
    std::wstring mObjectInstanceName;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    bool mIsOwner = false;
    std::promise<bool> mCreatedPromise;
    std::future<bool>  mCreatedFuture;
    // modified by any ReflectAttributeValues in the past
    AttributeBits mValuesReceived = kNone;
    // modified by any attribute setter
    AttributeBits mValuesSet = kNone;
    // modified by last ReflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next UpdateModifiedAttributeValues
    AttributeBits mDirty = kNone;
    mutable std::mutex mCallbackListMutex;
    std::map<uint32_t, UpdateCallback> mUpdateCallbacks;
    uint32_t mLastCallbackToken = 0;
    // Attribute value encoders
    // attribute HLAprivilegeToDeleteObject : HLAtoken
    HLAtokenEncoding mHLAprivilegeToDeleteObject;
    // attribute HLAfederateHandle : HLAhandle
    rti1516ev::HLAhandle mHLAfederateHandle;
    // attribute HLAfederateName : HLAunicodeString
    rti1516ev::HLAunicodeString mHLAfederateName;
    // attribute HLAfederateType : HLAunicodeString
    rti1516ev::HLAunicodeString mHLAfederateType;
    // attribute HLAfederateHost : HLAunicodeString
    rti1516ev::HLAunicodeString mHLAfederateHost;
    // attribute HLARTIversion : HLAunicodeString
    rti1516ev::HLAunicodeString mHLARTIversion;
    // attribute HLAFOMmoduleDesignatorList : HLAmoduleDesignatorList
    HLAmoduleDesignatorListEncoding mHLAFOMmoduleDesignatorList;
    // attribute HLAtimeConstrained : HLAboolean
    rti1516ev::HLAboolean mHLAtimeConstrained;
    // attribute HLAtimeRegulating : HLAboolean
    rti1516ev::HLAboolean mHLAtimeRegulating;
    // attribute HLAasynchronousDelivery : HLAboolean
    rti1516ev::HLAboolean mHLAasynchronousDelivery;
    // attribute HLAfederateState : HLAfederateState
    rti1516ev::HLAinteger32BE mHLAfederateState;
    // attribute HLAtimeManagerState : HLAtimeState
    rti1516ev::HLAinteger32BE mHLAtimeManagerState;
    // attribute HLAlogicalTime : HLAlogicalTime
    HLAlogicalTimeEncoding mHLAlogicalTime;
    // attribute HLAlookahead : HLAtimeInterval
    HLAtimeIntervalEncoding mHLAlookahead;
    // attribute HLAGALT : HLAlogicalTime
    HLAlogicalTimeEncoding mHLAGALT;
    // attribute HLALITS : HLAlogicalTime
    HLAlogicalTimeEncoding mHLALITS;
    // attribute HLAROlength : HLAcount
    rti1516ev::HLAinteger32BE mHLAROlength;
    // attribute HLATSOlength : HLAcount
    rti1516ev::HLAinteger32BE mHLATSOlength;
    // attribute HLAreflectionsReceived : HLAcount
    rti1516ev::HLAinteger32BE mHLAreflectionsReceived;
    // attribute HLAupdatesSent : HLAcount
    rti1516ev::HLAinteger32BE mHLAupdatesSent;
    // attribute HLAinteractionsReceived : HLAcount
    rti1516ev::HLAinteger32BE mHLAinteractionsReceived;
    // attribute HLAinteractionsSent : HLAcount
    rti1516ev::HLAinteger32BE mHLAinteractionsSent;
    // attribute HLAobjectInstancesThatCanBeDeleted : HLAcount
    rti1516ev::HLAinteger32BE mHLAobjectInstancesThatCanBeDeleted;
    // attribute HLAobjectInstancesUpdated : HLAcount
    rti1516ev::HLAinteger32BE mHLAobjectInstancesUpdated;
    // attribute HLAobjectInstancesReflected : HLAcount
    rti1516ev::HLAinteger32BE mHLAobjectInstancesReflected;
    // attribute HLAobjectInstancesDeleted : HLAcount
    rti1516ev::HLAinteger32BE mHLAobjectInstancesDeleted;
    // attribute HLAobjectInstancesRemoved : HLAcount
    rti1516ev::HLAinteger32BE mHLAobjectInstancesRemoved;
    // attribute HLAobjectInstancesRegistered : HLAcount
    rti1516ev::HLAinteger32BE mHLAobjectInstancesRegistered;
    // attribute HLAobjectInstancesDiscovered : HLAcount
    rti1516ev::HLAinteger32BE mHLAobjectInstancesDiscovered;
    // attribute HLAtimeGrantedTime : HLAmsec
    rti1516ev::HLAinteger32BE mHLAtimeGrantedTime;
    // attribute HLAtimeAdvancingTime : HLAmsec
    rti1516ev::HLAinteger32BE mHLAtimeAdvancingTime;
    // attribute HLAconveyRegionDesignatorSets : HLAswitch
    rti1516ev::HLAinteger32BE mHLAconveyRegionDesignatorSets;
    // attribute HLAconveyProducingFederate : HLAswitch
    rti1516ev::HLAinteger32BE mHLAconveyProducingFederate;
};

class HLAfederation;
class HLAfederationObjectClass : public IHLAfederationObjectClass
{
  public:
    // IHLAfederationObjectClass
    HLAfederationObjectClass() = default;
    virtual ~HLAfederationObjectClass();
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    void Unsubscribe() override;
    std::shared_ptr<IHLAfederation> GetObjectInstance(const std::wstring& instanceName) override;
    std::shared_ptr<IHLAfederation> CreateObjectInstance(const std::wstring& instanceName) override;
    std::shared_ptr<IHLAfederation> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) override;
    std::shared_ptr<IHLAfederation> RestoreObjectInstance(std::shared_ptr<IHLAfederation>) override;
    std::shared_ptr<IHLAfederation> RestoreObjectInstance(std::shared_ptr<IHLAfederation>, ObjectCreatedCallbackType createdCallback) override;
    uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) override;
    void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) override;
    void ExecuteDiscoverObjectInstanceCallbacks(std::shared_ptr<IHLAfederation> newObjectInstance);

    uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) override;
    void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) override;
    void ExecuteRemoveObjectInstanceCallbacks(std::shared_ptr<IHLAfederation> newObjectInstance);
    // Set a user-defined creator function, which returns subclasses of HLAfederation
    using ObjectInstanceCreatorFunction = std::function<HLAfederation*(HLAfederationObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* rtiAmbassador)>;
    // When using custom object instance classes, don't forget to set the creator function *before* subscribing to the object class.
    void SetObjectInstanceCreator(ObjectInstanceCreatorFunction creatorFunction) { mCreatorFunction = creatorFunction; }
    // internal
    HLAfederationObjectClass(rti1516ev::RTIambassador* rtiAmbassador, ObjectClassRegistry* registry, HLAmanagerObjectClass* baseClass);

    // attribute HLAprivilegeToDeleteObject : HLAtoken
    rti1516ev::AttributeHandle GetHLAprivilegeToDeleteObjectAttributeHandle() const { return mBaseClass->GetHLAprivilegeToDeleteObjectAttributeHandle(); }
    // attribute HLAfederationName : HLAunicodeString
    rti1516ev::AttributeHandle GetHLAfederationNameAttributeHandle() const { return mHLAfederationNameAttributeHandle; }
    // attribute HLAfederatesInFederation : HLAhandleList
    rti1516ev::AttributeHandle GetHLAfederatesInFederationAttributeHandle() const { return mHLAfederatesInFederationAttributeHandle; }
    // attribute HLARTIversion : HLAunicodeString
    rti1516ev::AttributeHandle GetHLARTIversionAttributeHandle() const { return mHLARTIversionAttributeHandle; }
    // attribute HLAMIMdesignator : HLAunicodeString
    rti1516ev::AttributeHandle GetHLAMIMdesignatorAttributeHandle() const { return mHLAMIMdesignatorAttributeHandle; }
    // attribute HLAFOMmoduleDesignatorList : HLAmoduleDesignatorList
    rti1516ev::AttributeHandle GetHLAFOMmoduleDesignatorListAttributeHandle() const { return mHLAFOMmoduleDesignatorListAttributeHandle; }
    // attribute HLAcurrentFDD : HLAunicodeString
    rti1516ev::AttributeHandle GetHLAcurrentFDDAttributeHandle() const { return mHLAcurrentFDDAttributeHandle; }
    // attribute HLAtimeImplementationName : HLAunicodeString
    rti1516ev::AttributeHandle GetHLAtimeImplementationNameAttributeHandle() const { return mHLAtimeImplementationNameAttributeHandle; }
    // attribute HLAlastSaveName : HLAunicodeString
    rti1516ev::AttributeHandle GetHLAlastSaveNameAttributeHandle() const { return mHLAlastSaveNameAttributeHandle; }
    // attribute HLAlastSaveTime : HLAlogicalTime
    rti1516ev::AttributeHandle GetHLAlastSaveTimeAttributeHandle() const { return mHLAlastSaveTimeAttributeHandle; }
    // attribute HLAnextSaveName : HLAunicodeString
    rti1516ev::AttributeHandle GetHLAnextSaveNameAttributeHandle() const { return mHLAnextSaveNameAttributeHandle; }
    // attribute HLAnextSaveTime : HLAlogicalTime
    rti1516ev::AttributeHandle GetHLAnextSaveTimeAttributeHandle() const { return mHLAnextSaveTimeAttributeHandle; }
    // attribute HLAautoProvide : HLAswitch
    rti1516ev::AttributeHandle GetHLAautoProvideAttributeHandle() const { return mHLAautoProvideAttributeHandle; }
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    std::shared_ptr<IHLAfederation> GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    rti1516ev::AttributeHandleSet GetAllAttributeHandles();
    ObjectClassRegistry* GetObjectClassRegistry() const { return mRegistry; }

    // add object instance to maps (and to maps of base classes)
    void InsertObjectInstanceName(std::shared_ptr<IHLAfederation> objectInstance, const std::wstring& objectInstanceName);
    void InsertObjectInstanceHandle(std::shared_ptr<IHLAfederation> objectInstance, rti1516ev::ObjectInstanceHandle objectInstanceHandle);
    // remove object instance from maps (and from maps of base classes)
    void EraseObjectInstance(rti1516ev::ObjectInstanceHandle objectInstanceHandle, const std::wstring& objectInstanceName);
  private:
    ObjectClassRegistry* mRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAmanagerObjectClass* mBaseClass;
    ObjectInstanceCreatorFunction mCreatorFunction;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute HLAfederationName : HLAunicodeString
    rti1516ev::AttributeHandle mHLAfederationNameAttributeHandle;
    // attribute HLAfederatesInFederation : HLAhandleList
    rti1516ev::AttributeHandle mHLAfederatesInFederationAttributeHandle;
    // attribute HLARTIversion : HLAunicodeString
    rti1516ev::AttributeHandle mHLARTIversionAttributeHandle;
    // attribute HLAMIMdesignator : HLAunicodeString
    rti1516ev::AttributeHandle mHLAMIMdesignatorAttributeHandle;
    // attribute HLAFOMmoduleDesignatorList : HLAmoduleDesignatorList
    rti1516ev::AttributeHandle mHLAFOMmoduleDesignatorListAttributeHandle;
    // attribute HLAcurrentFDD : HLAunicodeString
    rti1516ev::AttributeHandle mHLAcurrentFDDAttributeHandle;
    // attribute HLAtimeImplementationName : HLAunicodeString
    rti1516ev::AttributeHandle mHLAtimeImplementationNameAttributeHandle;
    // attribute HLAlastSaveName : HLAunicodeString
    rti1516ev::AttributeHandle mHLAlastSaveNameAttributeHandle;
    // attribute HLAlastSaveTime : HLAlogicalTime
    rti1516ev::AttributeHandle mHLAlastSaveTimeAttributeHandle;
    // attribute HLAnextSaveName : HLAunicodeString
    rti1516ev::AttributeHandle mHLAnextSaveNameAttributeHandle;
    // attribute HLAnextSaveTime : HLAlogicalTime
    rti1516ev::AttributeHandle mHLAnextSaveTimeAttributeHandle;
    // attribute HLAautoProvide : HLAswitch
    rti1516ev::AttributeHandle mHLAautoProvideAttributeHandle;
    // this mutex guards the data structures below
    mutable std::recursive_mutex mMutex;
    std::map<std::wstring, std::shared_ptr<IHLAfederation>> mObjectInstancesByName;
    std::map<rti1516ev::ObjectInstanceHandle, std::shared_ptr<IHLAfederation>> mObjectInstancesByHandle;

    mutable std::mutex mCallbackListMutex;
    std::map<uint32_t, DiscoverObjectInstanceCallback> mDiscoverCallbacks;
    uint32_t mLastDiscoverObjectInstanceCallbackToken = 0;
    std::map<uint32_t, RemoveObjectInstanceCallback> mRemoveObjectInstanceCallbacks;
    uint32_t mLastRemoveObjectInstanceCallbackToken = 0;
};


class HLAfederation : public virtual IHLAfederation, public IObjectImplBase
{
  public:

    virtual ~HLAfederation();
    HLAfederation(const HLAfederation&) = delete;
    HLAfederation(HLAfederation&&) = delete;
    HLAfederation& operator=(const HLAfederation&) = delete;
    HLAfederation& operator=(HLAfederation&&) = delete;
    IHLAfederationObjectClass* GetObjectClass() const { return mObjectClass; }
    ObjectClassRegistry* GetObjectClassRegistry() const { return mObjectClass->GetObjectClassRegistry(); }
    std::wstring GetObjectInstanceName() const override { return mObjectInstanceName; }
    rti1516ev::ObjectInstanceHandle GetObjectInstanceHandle() const override { return mObjectInstanceHandle; }
    bool IsValid() const override;
    bool WaitForObjectValid() override;
    bool IsOwner() const override;
    void Release() override;
    // attribute HLAprivilegeToDeleteObject : HLAtoken
    const std::vector<uint8_t>& GetHLAprivilegeToDeleteObject() const override;
    void SetHLAprivilegeToDeleteObject(const std::vector<uint8_t>& newValue) override;
    // attribute HLAfederationName : HLAunicodeString
    std::wstring GetHLAfederationName() const override;
    void SetHLAfederationName(std::wstring newValue) override;
    // attribute HLAfederatesInFederation : HLAhandleList
    const std::vector<rti1516ev::HLAhandle>& GetHLAfederatesInFederation() const override;
    void SetHLAfederatesInFederation(const std::vector<rti1516ev::HLAhandle>& newValue) override;
    // attribute HLARTIversion : HLAunicodeString
    std::wstring GetHLARTIversion() const override;
    void SetHLARTIversion(std::wstring newValue) override;
    // attribute HLAMIMdesignator : HLAunicodeString
    std::wstring GetHLAMIMdesignator() const override;
    void SetHLAMIMdesignator(std::wstring newValue) override;
    // attribute HLAFOMmoduleDesignatorList : HLAmoduleDesignatorList
    const std::vector<std::wstring>& GetHLAFOMmoduleDesignatorList() const override;
    void SetHLAFOMmoduleDesignatorList(const std::vector<std::wstring>& newValue) override;
    // attribute HLAcurrentFDD : HLAunicodeString
    std::wstring GetHLAcurrentFDD() const override;
    void SetHLAcurrentFDD(std::wstring newValue) override;
    // attribute HLAtimeImplementationName : HLAunicodeString
    std::wstring GetHLAtimeImplementationName() const override;
    void SetHLAtimeImplementationName(std::wstring newValue) override;
    // attribute HLAlastSaveName : HLAunicodeString
    std::wstring GetHLAlastSaveName() const override;
    void SetHLAlastSaveName(std::wstring newValue) override;
    // attribute HLAlastSaveTime : HLAlogicalTime
    const std::vector<uint8_t>& GetHLAlastSaveTime() const override;
    void SetHLAlastSaveTime(const std::vector<uint8_t>& newValue) override;
    // attribute HLAnextSaveName : HLAunicodeString
    std::wstring GetHLAnextSaveName() const override;
    void SetHLAnextSaveName(std::wstring newValue) override;
    // attribute HLAnextSaveTime : HLAlogicalTime
    const std::vector<uint8_t>& GetHLAnextSaveTime() const override;
    void SetHLAnextSaveTime(const std::vector<uint8_t>& newValue) override;
    // attribute HLAautoProvide : HLAswitch
    HLAswitch GetHLAautoProvide() const override;
    void SetHLAautoProvide(HLAswitch newValue) override;
    // IHLAfederation
    void UpdateAllAttributeValues() override;
    void UpdateAllAttributeValues(int64_t time) override;
    void UpdateModifiedAttributeValues() override;
    void UpdateModifiedAttributeValues(int64_t time) override;
    void RequestAttributeValues() override;
    void RequestAllAttributeValues() override;
    uint32_t RegisterUpdateCallback(UpdateCallback callback) override;
    void UnregisterUpdateCallback(uint32_t callbackToken) override;

    // bitmask of attributes ever received
    AttributeBits GetReceivedAttributes() const override;
    // bitmask of attributes received in last update (cleared after update callbacks executed)
    AttributeBits GetUpdatedAttributes() const override;
    // bitmask of attributes ever modified
    AttributeBits GetInitializedAttributes() const override;
    // bitmask of attributes modified since last updateAttributeValues/provideAttributeValues
    AttributeBits GetModifiedAttributes() const override;
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes, const rti1516ev::LogicalTime& theTime, OrderType orderType);
    void ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributes, optional<int64_t> time);
  protected:
    friend class HLAfederationObjectClass;

    HLAfederation();
    HLAfederation(HLAfederationObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* ambassador);

    void ExecuteUpdateCallbacks(optional<int64_t> time, optional<OrderType> orderType);

    // get attribute handle/value map of all attributes
    rti1516ev::AttributeHandleValueMap GetAllAttributeValues() const;
    // get attribute handle/value map of attributes which have been modified since last call to UpdateModifiedAttributeValues
    rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;

    rti1516ev::RTIambassador* mRtiAmbassador;
    // this mutex guards all of the fields below
    mutable std::recursive_mutex mMutex;

    HLAfederationObjectClass* mObjectClass;
    std::wstring mObjectInstanceName;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    bool mIsOwner = false;
    std::promise<bool> mCreatedPromise;
    std::future<bool>  mCreatedFuture;
    // modified by any ReflectAttributeValues in the past
    AttributeBits mValuesReceived = kNone;
    // modified by any attribute setter
    AttributeBits mValuesSet = kNone;
    // modified by last ReflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next UpdateModifiedAttributeValues
    AttributeBits mDirty = kNone;
    mutable std::mutex mCallbackListMutex;
    std::map<uint32_t, UpdateCallback> mUpdateCallbacks;
    uint32_t mLastCallbackToken = 0;
    // Attribute value encoders
    // attribute HLAprivilegeToDeleteObject : HLAtoken
    HLAtokenEncoding mHLAprivilegeToDeleteObject;
    // attribute HLAfederationName : HLAunicodeString
    rti1516ev::HLAunicodeString mHLAfederationName;
    // attribute HLAfederatesInFederation : HLAhandleList
    HLAhandleListEncoding mHLAfederatesInFederation;
    // attribute HLARTIversion : HLAunicodeString
    rti1516ev::HLAunicodeString mHLARTIversion;
    // attribute HLAMIMdesignator : HLAunicodeString
    rti1516ev::HLAunicodeString mHLAMIMdesignator;
    // attribute HLAFOMmoduleDesignatorList : HLAmoduleDesignatorList
    HLAmoduleDesignatorListEncoding mHLAFOMmoduleDesignatorList;
    // attribute HLAcurrentFDD : HLAunicodeString
    rti1516ev::HLAunicodeString mHLAcurrentFDD;
    // attribute HLAtimeImplementationName : HLAunicodeString
    rti1516ev::HLAunicodeString mHLAtimeImplementationName;
    // attribute HLAlastSaveName : HLAunicodeString
    rti1516ev::HLAunicodeString mHLAlastSaveName;
    // attribute HLAlastSaveTime : HLAlogicalTime
    HLAlogicalTimeEncoding mHLAlastSaveTime;
    // attribute HLAnextSaveName : HLAunicodeString
    rti1516ev::HLAunicodeString mHLAnextSaveName;
    // attribute HLAnextSaveTime : HLAlogicalTime
    HLAlogicalTimeEncoding mHLAnextSaveTime;
    // attribute HLAautoProvide : HLAswitch
    rti1516ev::HLAinteger32BE mHLAautoProvide;
};

 

class ObjectClassRegistry : public IObjectClassRegistry
{
  public:
    ObjectClassRegistry();
    ~ObjectClassRegistry();
    void Initialize(rti1516ev::RTIambassador* rtiAmbassador);
    void Finalize();

    IHLAobjectRootObjectClass* GetHLAobjectRootObjectClass() const override { return mHLAobjectRootObjectClass.get(); }
    IHLAmanagerObjectClass* GetHLAmanagerObjectClass() const override { return mHLAmanagerObjectClass.get(); }
    IHLAfederateObjectClass* GetHLAfederateObjectClass() const override { return mHLAfederateObjectClass.get(); }
    IHLAfederationObjectClass* GetHLAfederationObjectClass() const override { return mHLAfederationObjectClass.get(); }

    void DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    void ReflectAttributeValues(rti1516ev::ObjectInstanceHandle theObject, const rti1516ev::AttributeHandleValueMap & attributes);
    void ReflectAttributeValues(rti1516ev::ObjectInstanceHandle theObject, const rti1516ev::AttributeHandleValueMap & attributes, const rti1516ev::LogicalTime& theTime, OrderType orderType);
    void ProvideAttributeValues(rti1516ev::ObjectClassHandle theObjectClass, rti1516ev::ObjectInstanceHandle theObject, const rti1516ev::AttributeHandleSet& attributeHandles, optional<int64_t> time);
    void ObjectInstanceNameReservationSucceeded(std::wstring const & theObjectInstanceName);
    void ObjectInstanceNameReservationFailed(std::wstring const & theObjectInstanceName);
    void RegisterObjectInstanceName(const std::wstring& theObjectInstanceName, std::function<void(bool)> completionCallback);

  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    std::unique_ptr<HLAobjectRootObjectClass> mHLAobjectRootObjectClass;
    std::unique_ptr<HLAmanagerObjectClass> mHLAmanagerObjectClass;
    std::unique_ptr<HLAfederateObjectClass> mHLAfederateObjectClass;
    std::unique_ptr<HLAfederationObjectClass> mHLAfederationObjectClass;
    std::map<std::wstring, std::function<void(bool)> > mObjectInstanceNameReservationCallbacks;
    std::map<rti1516ev::ObjectClassHandle, std::function<void(rti1516ev::ObjectInstanceHandle, const std::wstring&)>> mDiscoverCallbacks;
    std::map<rti1516ev::ObjectClassHandle, std::function<void(rti1516ev::ObjectInstanceHandle)>> mRemoveCallbacks;
    std::map<rti1516ev::ObjectClassHandle, std::function<void(rti1516ev::ObjectInstanceHandle, const rti1516ev::AttributeHandleValueMap&)>> mReflectCallbacks;
    std::map<rti1516ev::ObjectClassHandle, std::function<void(rti1516ev::ObjectInstanceHandle, const rti1516ev::AttributeHandleValueMap&, const rti1516ev::LogicalTime&, OrderType)>> mReflectWithTimeCallbacks;
    std::map<rti1516ev::ObjectClassHandle, std::function<void(rti1516ev::ObjectInstanceHandle, const rti1516ev::AttributeHandleSet&, optional<int64_t>)>> mProvideCallbacks;
}; // class ObjectClassRegistry

} // namespace OpenRTI
} // namespace Mom
