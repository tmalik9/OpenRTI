/***********************************************************************
   The IEEE hereby grants a general, royalty-free license to copy, distribute,
   display and make derivative works from this material, for all purposes,
   provided that any use of the material contains the following
   attribution: "Reprinted with permission from IEEE 1516.1(TM)-2010".
   Should you require additional information, contact the Manager, Standards
   Intellectual Property, IEEE Standards Association (stds-ipr@ieee.org).
***********************************************************************/
/***********************************************************************
   IEEE 1516.1 High Level Architecture Interface Specification C++ API
   File: RTI/Handle.h
***********************************************************************/

#ifndef RTI_Handle_h
#define RTI_Handle_h

#include <RTI/SpecificConfig.h>
#include <RTI/Exception.h>
#include <RTI/VariableLengthData.h>
#include <string>

/* Each handle class generated by this macro provides the    */
/* following interface                                       */
namespace rti1516e
{

template <typename HandleKind> class HandleImplementation;
template <typename HandleKind> class HandleImplementationHelper;

template <typename HandleKind>
class RTI_EXPORT Handle
{
  public:

    /* Constructs an invalid handle                           */
    Handle();
    ~Handle() throw();
    Handle(Handle const& rhs);
    Handle& operator= (Handle const& rhs);
    /* Indicates whether this handle is valid                 */
    bool isValid() const;
    /* All invalid handles are equivalent                     */
    bool operator== (Handle const& rhs) const;
    bool operator!= (Handle const& rhs) const;
    bool operator< (Handle const& rhs) const;

    /* Generate a hash value for use in storing handles in a  */
    /* in a hash table.                                       */
    /* Note: The hash value may not be unique across two      */
    /* separate handle values but it will be equal given two  */
    /* separate instances of the same handle value.           */
    /* H1 == H2 implies H1.hash() == H2.hash()                */
    /* H1 != H2 does not imply H1.hash() != H2.hash()         */
    long hash() const;

    /* Generate an encoded value that can be used to send     */
    /* handles to other federates in updates or interactions. */
    VariableLengthData encode() const;

    /* Encode into an existing VariableLengthData             */
    void encode(VariableLengthData& buffer) const;

    /* Alternate encode for directly filling a buffer         */
    size_t encode(void* buffer, size_t bufferSize) const;

    size_t encodedLength() const;

    std::wstring toString() const;

  protected:

    /* Friend declaration for an RTI-internal class that      */
    /* can access the implementation of a handle.             */
    friend class HandleImplementationHelper<HandleKind>;

    const HandleImplementation<HandleKind>* getImplementation () const;

    HandleImplementation<HandleKind>* getImplementation ();

    explicit Handle(HandleImplementation<HandleKind>* impl);

    explicit Handle(VariableLengthData const& encodedValue);

    HandleImplementation<HandleKind>* _impl;

};

/* Output operator for Handles                               */
template <class HandleKind>
std::wostream RTI_EXPORT& operator<< (std::wostream&, Handle<HandleKind> const&);

// discriminators for different handle classes
struct FederateHandleKind {};
struct ObjectClassHandleKind {};
struct InteractionClassHandleKind {};
struct ObjectInstanceHandleKind {};
struct AttributeHandleKind {};
struct ParameterHandleKind {};
struct DimensionHandleKind {};
struct MessageRetractionHandleKind {};
struct RegionHandleKind {};

typedef Handle<FederateHandleKind> FederateHandle;

#define DEFINE_HANDLE_CLASS(HandleKind) typedef Handle<HandleKind##Kind> HandleKind;

DEFINE_HANDLE_CLASS(FederateHandle)
DEFINE_HANDLE_CLASS(ObjectClassHandle)
DEFINE_HANDLE_CLASS(InteractionClassHandle)
DEFINE_HANDLE_CLASS(ObjectInstanceHandle)
DEFINE_HANDLE_CLASS(AttributeHandle)
DEFINE_HANDLE_CLASS(ParameterHandle)
DEFINE_HANDLE_CLASS(DimensionHandle)
DEFINE_HANDLE_CLASS(MessageRetractionHandle)
DEFINE_HANDLE_CLASS(RegionHandle)

}

#endif // RTI_Handle_h

