
// Code automatically generated by FOMCodeGen version 2.0.1.16 from RTFederate.xml, do not edit

#pragma once

#include <vector>
#include "RTI/Handle.h"
#include "RTI/RTIambassador.h"
#include "RTI/encoding/BasicDataElements.h"
#include "RTI/encoding/HLAfixedRecord.h"
#include "RTI/encoding/HLAfixedArray.h"
#include "RTI/encoding/HLAvariableArray.h"


#include "interface/RTFederateInteractionInterfaces.h"
#include "RTFederateEncodings.h"

namespace NDistSimIB {
namespace NRTFederateEncoding {

class InteractionClassRegistry;
class ObjectClassRegistry;

class HLAinteractionRoot;
class HLAinteractionRootInteractionClass : public IHLAinteractionRootInteractionClass
{
  public:
    // IHLAinteractionRootInteractionClass
    HLAinteractionRootInteractionClass() = default;
    virtual ~HLAinteractionRootInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    void Unsubscribe() override;
    void send() override;
    void sendWithTime(int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAinteractionRootInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry);
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class MeasurementInit;
class MeasurementInitInteractionClass : public IMeasurementInitInteractionClass
{
  public:
    // IMeasurementInitInteractionClass
    MeasurementInitInteractionClass() = default;
    virtual ~MeasurementInitInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    void Unsubscribe() override;
    void send() override;
    void sendWithTime(int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    MeasurementInitInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAinteractionRootInteractionClass* baseClass);
    // parameter Dummy : no data type
    rti1516ev::ParameterHandle GetDummyParameterHandle() const { return mDummyParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Dummy : no data type
    rti1516ev::ParameterHandle mDummyParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class MeasurementStop;
class MeasurementStopInteractionClass : public IMeasurementStopInteractionClass
{
  public:
    // IMeasurementStopInteractionClass
    MeasurementStopInteractionClass() = default;
    virtual ~MeasurementStopInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<std::wstring> NextFederationSuffix, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<std::wstring> NextFederationSuffix) override;
    void sendWithTime(optional<std::wstring> NextFederationSuffix, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    MeasurementStopInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAinteractionRootInteractionClass* baseClass);
    // parameter NextFederationSuffix : HLAunicodeString
    rti1516ev::ParameterHandle GetNextFederationSuffixParameterHandle() const { return mNextFederationSuffixParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter NextFederationSuffix : HLAunicodeString
    rti1516ev::ParameterHandle mNextFederationSuffixParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class KeyEvent;
class KeyEventInteractionClass : public IKeyEventInteractionClass
{
  public:
    // IKeyEventInteractionClass
    KeyEventInteractionClass() = default;
    virtual ~KeyEventInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<int32_t> KeyCode, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<int32_t> KeyCode) override;
    void sendWithTime(optional<int32_t> KeyCode, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    KeyEventInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAinteractionRootInteractionClass* baseClass);
    // parameter KeyCode : HLAinteger32LE
    rti1516ev::ParameterHandle GetKeyCodeParameterHandle() const { return mKeyCodeParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter KeyCode : HLAinteger32LE
    rti1516ev::ParameterHandle mKeyCodeParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class TextLog;
class TextLogInteractionClass : public ITextLogInteractionClass
{
  public:
    // ITextLogInteractionClass
    TextLogInteractionClass() = default;
    virtual ~TextLogInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<std::wstring> Sender, optional<std::wstring> Text, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<std::wstring> Sender, optional<std::wstring> Text) override;
    void sendWithTime(optional<std::wstring> Sender, optional<std::wstring> Text, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    TextLogInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAinteractionRootInteractionClass* baseClass);
    // parameter Sender : HLAunicodeString
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mSenderParameterHandle; }
    // parameter Text : HLAunicodeString
    rti1516ev::ParameterHandle GetTextParameterHandle() const { return mTextParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Sender : HLAunicodeString
    rti1516ev::ParameterHandle mSenderParameterHandle;
    // parameter Text : HLAunicodeString
    rti1516ev::ParameterHandle mTextParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class DOMemberTransmitData;
class DOMemberTransmitDataInteractionClass : public IDOMemberTransmitDataInteractionClass
{
  public:
    // IDOMemberTransmitDataInteractionClass
    DOMemberTransmitDataInteractionClass() = default;
    virtual ~DOMemberTransmitDataInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<IDOMemberSource*> ObjInstanceHandle, optional<std::string> ConnectionType, optional<const std::vector<uint8_t>&> DataBytes, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<IDOMemberSource*> ObjInstanceHandle, optional<std::string> ConnectionType, optional<const std::vector<uint8_t>&> DataBytes) override;
    void sendWithTime(optional<IDOMemberSource*> ObjInstanceHandle, optional<std::string> ConnectionType, optional<const std::vector<uint8_t>&> DataBytes, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    DOMemberTransmitDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAinteractionRootInteractionClass* baseClass);
    // parameter ObjInstanceHandle : HLAobjectInstanceHandle.DOMemberSource
    rti1516ev::ParameterHandle GetObjInstanceHandleParameterHandle() const { return mObjInstanceHandleParameterHandle; }
    // parameter ConnectionType : HLAASCIIstring
    rti1516ev::ParameterHandle GetConnectionTypeParameterHandle() const { return mConnectionTypeParameterHandle; }
    // parameter DataBytes : HLAopaqueData
    rti1516ev::ParameterHandle GetDataBytesParameterHandle() const { return mDataBytesParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter ObjInstanceHandle : HLAobjectInstanceHandle.DOMemberSource
    rti1516ev::ParameterHandle mObjInstanceHandleParameterHandle;
    // parameter ConnectionType : HLAASCIIstring
    rti1516ev::ParameterHandle mConnectionTypeParameterHandle;
    // parameter DataBytes : HLAopaqueData
    rti1516ev::ParameterHandle mDataBytesParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class SystemVariableUpdate;
class SystemVariableUpdateInteractionClass : public ISystemVariableUpdateInteractionClass
{
  public:
    // ISystemVariableUpdateInteractionClass
    SystemVariableUpdateInteractionClass() = default;
    virtual ~SystemVariableUpdateInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<std::string> Id, optional<const std::vector<uint8_t>&> Value, optional<int32_t> Client, optional<bool> HasChanged, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<std::string> Id, optional<const std::vector<uint8_t>&> Value, optional<int32_t> Client, optional<bool> HasChanged) override;
    void sendWithTime(optional<std::string> Id, optional<const std::vector<uint8_t>&> Value, optional<int32_t> Client, optional<bool> HasChanged, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    SystemVariableUpdateInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAinteractionRootInteractionClass* baseClass);
    // parameter Id : HLAASCIIstring
    rti1516ev::ParameterHandle GetIdParameterHandle() const { return mIdParameterHandle; }
    // parameter Value : HLAopaqueData
    rti1516ev::ParameterHandle GetValueParameterHandle() const { return mValueParameterHandle; }
    // parameter Client : HLAinteger32LE
    rti1516ev::ParameterHandle GetClientParameterHandle() const { return mClientParameterHandle; }
    // parameter HasChanged : HLAboolean
    rti1516ev::ParameterHandle GetHasChangedParameterHandle() const { return mHasChangedParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Id : HLAASCIIstring
    rti1516ev::ParameterHandle mIdParameterHandle;
    // parameter Value : HLAopaqueData
    rti1516ev::ParameterHandle mValueParameterHandle;
    // parameter Client : HLAinteger32LE
    rti1516ev::ParameterHandle mClientParameterHandle;
    // parameter HasChanged : HLAboolean
    rti1516ev::ParameterHandle mHasChangedParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class SystemVariableModification;
class SystemVariableModificationInteractionClass : public ISystemVariableModificationInteractionClass
{
  public:
    // ISystemVariableModificationInteractionClass
    SystemVariableModificationInteractionClass() = default;
    virtual ~SystemVariableModificationInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<const std::vector<uint8_t>&> Value, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<const std::vector<uint8_t>&> Value) override;
    void sendWithTime(optional<const std::vector<uint8_t>&> Value, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    SystemVariableModificationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAinteractionRootInteractionClass* baseClass);
    // parameter Value : HLAopaqueData
    rti1516ev::ParameterHandle GetValueParameterHandle() const { return mValueParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Value : HLAopaqueData
    rti1516ev::ParameterHandle mValueParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class ValueEntityUpdate;
class ValueEntityUpdateInteractionClass : public IValueEntityUpdateInteractionClass
{
  public:
    // IValueEntityUpdateInteractionClass
    ValueEntityUpdateInteractionClass() = default;
    virtual ~ValueEntityUpdateInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<const std::vector<uint8_t>&> Id, optional<const std::vector<uint8_t>&> Value, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<const std::vector<uint8_t>&> Id, optional<const std::vector<uint8_t>&> Value) override;
    void sendWithTime(optional<const std::vector<uint8_t>&> Id, optional<const std::vector<uint8_t>&> Value, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    ValueEntityUpdateInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAinteractionRootInteractionClass* baseClass);
    // parameter Id : HLAopaqueData
    rti1516ev::ParameterHandle GetIdParameterHandle() const { return mIdParameterHandle; }
    // parameter Value : HLAopaqueData
    rti1516ev::ParameterHandle GetValueParameterHandle() const { return mValueParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Id : HLAopaqueData
    rti1516ev::ParameterHandle mIdParameterHandle;
    // parameter Value : HLAopaqueData
    rti1516ev::ParameterHandle mValueParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class BusMessage;
class BusMessageInteractionClass : public IBusMessageInteractionClass
{
  public:
    // IBusMessageInteractionClass
    BusMessageInteractionClass() = default;
    virtual ~BusMessageInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver) override;
    void sendWithTime(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    BusMessageInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAinteractionRootInteractionClass* baseClass);
    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mIsRequestParameterHandle; }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mChannelNameParameterHandle; }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBusTypeParameterHandle; }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mRequestingFederateParameterHandle; }
    // parameter Sender : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mSenderParameterHandle; }
    // parameter Receiver : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mReceiverParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle mIsRequestParameterHandle;
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle mChannelNameParameterHandle;
    // parameter BusType : BusType
    rti1516ev::ParameterHandle mBusTypeParameterHandle;
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle mRequestingFederateParameterHandle;
    // parameter Sender : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle mSenderParameterHandle;
    // parameter Receiver : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle mReceiverParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class EthPacket;
class EthPacketInteractionClass : public IEthPacketInteractionClass
{
  public:
    // IEthPacketInteractionClass
    EthPacketInteractionClass() = default;
    virtual ~EthPacketInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetPacket&> Frame, optional<std::string> PortName, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetPacket&> Frame, optional<std::string> PortName) override;
    void sendWithTime(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetPacket&> Frame, optional<std::string> PortName, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    EthPacketInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, BusMessageInteractionClass* baseClass);
    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Frame : EthernetPacket
    rti1516ev::ParameterHandle GetFrameParameterHandle() const { return mFrameParameterHandle; }
    // parameter PortName : HLAASCIIstring
    rti1516ev::ParameterHandle GetPortNameParameterHandle() const { return mPortNameParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Frame : EthernetPacket
    rti1516ev::ParameterHandle mFrameParameterHandle;
    // parameter PortName : HLAASCIIstring
    rti1516ev::ParameterHandle mPortNameParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class EthPacketError;
class EthPacketErrorInteractionClass : public IEthPacketErrorInteractionClass
{
  public:
    // IEthPacketErrorInteractionClass
    EthPacketErrorInteractionClass() = default;
    virtual ~EthPacketErrorInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetPacketError&> Frame, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetPacketError&> Frame) override;
    void sendWithTime(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetPacketError&> Frame, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    EthPacketErrorInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, BusMessageInteractionClass* baseClass);
    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Frame : EthernetPacketError
    rti1516ev::ParameterHandle GetFrameParameterHandle() const { return mFrameParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Frame : EthernetPacketError
    rti1516ev::ParameterHandle mFrameParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class EthPacketErrorForwarded;
class EthPacketErrorForwardedInteractionClass : public IEthPacketErrorForwardedInteractionClass
{
  public:
    // IEthPacketErrorForwardedInteractionClass
    EthPacketErrorForwardedInteractionClass() = default;
    virtual ~EthPacketErrorForwardedInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetPacketErrorForwarded&> Frame, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetPacketErrorForwarded&> Frame) override;
    void sendWithTime(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetPacketErrorForwarded&> Frame, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    EthPacketErrorForwardedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, BusMessageInteractionClass* baseClass);
    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Frame : EthernetPacketErrorForwarded
    rti1516ev::ParameterHandle GetFrameParameterHandle() const { return mFrameParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Frame : EthernetPacketErrorForwarded
    rti1516ev::ParameterHandle mFrameParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class EthForwardedPacket;
class EthForwardedPacketInteractionClass : public IEthForwardedPacketInteractionClass
{
  public:
    // IEthForwardedPacketInteractionClass
    EthForwardedPacketInteractionClass() = default;
    virtual ~EthForwardedPacketInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetPacketForwarded&> Frame, optional<std::string> PortName, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetPacketForwarded&> Frame, optional<std::string> PortName) override;
    void sendWithTime(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetPacketForwarded&> Frame, optional<std::string> PortName, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    EthForwardedPacketInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, BusMessageInteractionClass* baseClass);
    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Frame : EthernetPacketForwarded
    rti1516ev::ParameterHandle GetFrameParameterHandle() const { return mFrameParameterHandle; }
    // parameter PortName : HLAASCIIstring
    rti1516ev::ParameterHandle GetPortNameParameterHandle() const { return mPortNameParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Frame : EthernetPacketForwarded
    rti1516ev::ParameterHandle mFrameParameterHandle;
    // parameter PortName : HLAASCIIstring
    rti1516ev::ParameterHandle mPortNameParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class EthStatus;
class EthStatusInteractionClass : public IEthStatusInteractionClass
{
  public:
    // IEthStatusInteractionClass
    EthStatusInteractionClass() = default;
    virtual ~EthStatusInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetStatus&> Frame, optional<std::string> PortName, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetStatus&> Frame, optional<std::string> PortName) override;
    void sendWithTime(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const EthernetStatus&> Frame, optional<std::string> PortName, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    EthStatusInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, BusMessageInteractionClass* baseClass);
    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Frame : EthernetStatus
    rti1516ev::ParameterHandle GetFrameParameterHandle() const { return mFrameParameterHandle; }
    // parameter PortName : HLAASCIIstring
    rti1516ev::ParameterHandle GetPortNameParameterHandle() const { return mPortNameParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Frame : EthernetStatus
    rti1516ev::ParameterHandle mFrameParameterHandle;
    // parameter PortName : HLAASCIIstring
    rti1516ev::ParameterHandle mPortNameParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class CANMessage;
class CANMessageInteractionClass : public ICANMessageInteractionClass
{
  public:
    // ICANMessageInteractionClass
    CANMessageInteractionClass() = default;
    virtual ~CANMessageInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<int32_t> Id, optional<const CANFrame&> Frame, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<int32_t> Id, optional<const CANFrame&> Frame) override;
    void sendWithTime(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<int32_t> Id, optional<const CANFrame&> Frame, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    CANMessageInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, BusMessageInteractionClass* baseClass);
    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Id : HLAinteger32LE
    rti1516ev::ParameterHandle GetIdParameterHandle() const { return mIdParameterHandle; }
    // parameter Frame : CANFrame
    rti1516ev::ParameterHandle GetFrameParameterHandle() const { return mFrameParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Id : HLAinteger32LE
    rti1516ev::ParameterHandle mIdParameterHandle;
    // parameter Frame : CANFrame
    rti1516ev::ParameterHandle mFrameParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class CANErrorFrame;
class CANErrorFrameInteractionClass : public ICANErrorFrameInteractionClass
{
  public:
    // ICANErrorFrameInteractionClass
    CANErrorFrameInteractionClass() = default;
    virtual ~CANErrorFrameInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const std::vector<uint8_t>&> Frame, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const std::vector<uint8_t>&> Frame) override;
    void sendWithTime(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<const std::vector<uint8_t>&> Frame, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    CANErrorFrameInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, BusMessageInteractionClass* baseClass);
    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Frame : HLAopaqueData
    rti1516ev::ParameterHandle GetFrameParameterHandle() const { return mFrameParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Frame : HLAopaqueData
    rti1516ev::ParameterHandle mFrameParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class FlexRaySymbol;
class FlexRaySymbolInteractionClass : public IFlexRaySymbolInteractionClass
{
  public:
    // IFlexRaySymbolInteractionClass
    FlexRaySymbolInteractionClass() = default;
    virtual ~FlexRaySymbolInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<FlexRaySymbolPattern> SymbolPattern, optional<FlexRayChannel> FlexRayChannel, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<FlexRaySymbolPattern> SymbolPattern, optional<FlexRayChannel> FlexRayChannel) override;
    void sendWithTime(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<FlexRaySymbolPattern> SymbolPattern, optional<FlexRayChannel> FlexRayChannel, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    FlexRaySymbolInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, BusMessageInteractionClass* baseClass);
    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter SymbolPattern : FlexRaySymbolPattern
    rti1516ev::ParameterHandle GetSymbolPatternParameterHandle() const { return mSymbolPatternParameterHandle; }
    // parameter FlexRayChannel : FlexRayChannel
    rti1516ev::ParameterHandle GetFlexRayChannelParameterHandle() const { return mFlexRayChannelParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter SymbolPattern : FlexRaySymbolPattern
    rti1516ev::ParameterHandle mSymbolPatternParameterHandle;
    // parameter FlexRayChannel : FlexRayChannel
    rti1516ev::ParameterHandle mFlexRayChannelParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class FlexRayCycleStart;
class FlexRayCycleStartInteractionClass : public IFlexRayCycleStartInteractionClass
{
  public:
    // IFlexRayCycleStartInteractionClass
    FlexRayCycleStartInteractionClass() = default;
    virtual ~FlexRayCycleStartInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<uint8_t> Cycle, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<uint8_t> Cycle) override;
    void sendWithTime(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<uint8_t> Cycle, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    FlexRayCycleStartInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, BusMessageInteractionClass* baseClass);
    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Cycle : HLAoctet
    rti1516ev::ParameterHandle GetCycleParameterHandle() const { return mCycleParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Cycle : HLAoctet
    rti1516ev::ParameterHandle mCycleParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class FlexRayFrame;
class FlexRayFrameInteractionClass : public IFlexRayFrameInteractionClass
{
  public:
    // IFlexRayFrameInteractionClass
    FlexRayFrameInteractionClass() = default;
    virtual ~FlexRayFrameInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<int16_t> FrameID, optional<bool> PayloadPreambleIndicator, optional<const FlexRayHeader&> Header, optional<const FlexRayPayload&> Payload, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<int16_t> FrameID, optional<bool> PayloadPreambleIndicator, optional<const FlexRayHeader&> Header, optional<const FlexRayPayload&> Payload) override;
    void sendWithTime(optional<bool> IsRequest, optional<std::string> ChannelName, optional<BusType> BusType, optional<rti1516ev::HLAhandle> RequestingFederate, optional<IBusController*> Sender, optional<IBusController*> Receiver, optional<int16_t> FrameID, optional<bool> PayloadPreambleIndicator, optional<const FlexRayHeader&> Header, optional<const FlexRayPayload&> Payload, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    FlexRayFrameInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, BusMessageInteractionClass* baseClass);
    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAobjectInstanceHandle.BusController
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter FrameID : HLAinteger16LE
    rti1516ev::ParameterHandle GetFrameIDParameterHandle() const { return mFrameIDParameterHandle; }
    // parameter PayloadPreambleIndicator : HLAboolean
    rti1516ev::ParameterHandle GetPayloadPreambleIndicatorParameterHandle() const { return mPayloadPreambleIndicatorParameterHandle; }
    // parameter Header : FlexRayHeader
    rti1516ev::ParameterHandle GetHeaderParameterHandle() const { return mHeaderParameterHandle; }
    // parameter Payload : FlexRayPayload
    rti1516ev::ParameterHandle GetPayloadParameterHandle() const { return mPayloadParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter FrameID : HLAinteger16LE
    rti1516ev::ParameterHandle mFrameIDParameterHandle;
    // parameter PayloadPreambleIndicator : HLAboolean
    rti1516ev::ParameterHandle mPayloadPreambleIndicatorParameterHandle;
    // parameter Header : FlexRayHeader
    rti1516ev::ParameterHandle mHeaderParameterHandle;
    // parameter Payload : FlexRayPayload
    rti1516ev::ParameterHandle mPayloadParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

class PythonCommand;
class PythonCommandInteractionClass : public IPythonCommandInteractionClass
{
  public:
    // IPythonCommandInteractionClass
    PythonCommandInteractionClass() = default;
    virtual ~PythonCommandInteractionClass() = default;
    ObjectClassRegistry* GetObjectClassRegistry();
    InteractionClassRegistry* GetInteractionClassRegistry() { return mInteractionClassRegistry; }
    void Publish() override;
    void Unpublish() override;
    void Subscribe(bool deliverToSelf) override;
    virtual void Subscribe(optional<const std::vector<uint8_t>&> Code, optional<const std::vector<uint8_t>&> Target, optional<const std::vector<uint8_t>&> RefID, bool deliverToSelf) override;
    void Unsubscribe() override;
    void send(optional<const std::vector<uint8_t>&> Code, optional<const std::vector<uint8_t>&> Target, optional<const std::vector<uint8_t>&> RefID) override;
    void sendWithTime(optional<const std::vector<uint8_t>&> Code, optional<const std::vector<uint8_t>&> Target, optional<const std::vector<uint8_t>&> RefID, int64_t time) override;
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, OrderType receivedOrder);
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    PythonCommandInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, InteractionClassRegistry* interactionClassRegistry, HLAinteractionRootInteractionClass* baseClass);
    // parameter Code : HLAopaqueData
    rti1516ev::ParameterHandle GetCodeParameterHandle() const { return mCodeParameterHandle; }
    // parameter Target : HLAopaqueData
    rti1516ev::ParameterHandle GetTargetParameterHandle() const { return mTargetParameterHandle; }
    // parameter RefID : HLAopaqueData
    rti1516ev::ParameterHandle GetRefIDParameterHandle() const { return mRefIDParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    InteractionClassRegistry* mInteractionClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Code : HLAopaqueData
    rti1516ev::ParameterHandle mCodeParameterHandle;
    // parameter Target : HLAopaqueData
    rti1516ev::ParameterHandle mTargetParameterHandle;
    // parameter RefID : HLAopaqueData
    rti1516ev::ParameterHandle mRefIDParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};

 

class ObjectClassRegistry;
class InteractionClassRegistry : public IInteractionClassRegistry
{
  public:
    InteractionClassRegistry(ObjectClassRegistry* objectClassRegistry);
    ~InteractionClassRegistry();
    ObjectClassRegistry* GetObjectClassRegistry() { return mObjectClassRegistry; }
    void Initialize(rti1516ev::RTIambassador* rtiAmbassador);
    void Finalize();

    IHLAinteractionRootInteractionClass* GetHLAinteractionRootInteractionClass() const override { return mHLAinteractionRootInteractionClass.get(); }
    IMeasurementInitInteractionClass* GetMeasurementInitInteractionClass() const override { return mMeasurementInitInteractionClass.get(); }
    IMeasurementStopInteractionClass* GetMeasurementStopInteractionClass() const override { return mMeasurementStopInteractionClass.get(); }
    IKeyEventInteractionClass* GetKeyEventInteractionClass() const override { return mKeyEventInteractionClass.get(); }
    ITextLogInteractionClass* GetTextLogInteractionClass() const override { return mTextLogInteractionClass.get(); }
    IDOMemberTransmitDataInteractionClass* GetDOMemberTransmitDataInteractionClass() const override { return mDOMemberTransmitDataInteractionClass.get(); }
    ISystemVariableUpdateInteractionClass* GetSystemVariableUpdateInteractionClass() const override { return mSystemVariableUpdateInteractionClass.get(); }
    ISystemVariableModificationInteractionClass* GetSystemVariableModificationInteractionClass() const override { return mSystemVariableModificationInteractionClass.get(); }
    IValueEntityUpdateInteractionClass* GetValueEntityUpdateInteractionClass() const override { return mValueEntityUpdateInteractionClass.get(); }
    IBusMessageInteractionClass* GetBusMessageInteractionClass() const override { return mBusMessageInteractionClass.get(); }
    IEthPacketInteractionClass* GetEthPacketInteractionClass() const override { return mEthPacketInteractionClass.get(); }
    IEthPacketErrorInteractionClass* GetEthPacketErrorInteractionClass() const override { return mEthPacketErrorInteractionClass.get(); }
    IEthPacketErrorForwardedInteractionClass* GetEthPacketErrorForwardedInteractionClass() const override { return mEthPacketErrorForwardedInteractionClass.get(); }
    IEthForwardedPacketInteractionClass* GetEthForwardedPacketInteractionClass() const override { return mEthForwardedPacketInteractionClass.get(); }
    IEthStatusInteractionClass* GetEthStatusInteractionClass() const override { return mEthStatusInteractionClass.get(); }
    ICANMessageInteractionClass* GetCANMessageInteractionClass() const override { return mCANMessageInteractionClass.get(); }
    ICANErrorFrameInteractionClass* GetCANErrorFrameInteractionClass() const override { return mCANErrorFrameInteractionClass.get(); }
    IFlexRaySymbolInteractionClass* GetFlexRaySymbolInteractionClass() const override { return mFlexRaySymbolInteractionClass.get(); }
    IFlexRayCycleStartInteractionClass* GetFlexRayCycleStartInteractionClass() const override { return mFlexRayCycleStartInteractionClass.get(); }
    IFlexRayFrameInteractionClass* GetFlexRayFrameInteractionClass() const override { return mFlexRayFrameInteractionClass.get(); }
    IPythonCommandInteractionClass* GetPythonCommandInteractionClass() const override { return mPythonCommandInteractionClass.get(); }

    void ReceiveInteraction(rti1516ev::InteractionClassHandle theInteraction, const rti1516ev::ParameterHandleValueMap & parameters);
    void ReceiveInteraction(rti1516ev::InteractionClassHandle theInteraction, const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime&, OrderType orderType);

  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    ObjectClassRegistry* mObjectClassRegistry;
    std::unique_ptr<HLAinteractionRootInteractionClass> mHLAinteractionRootInteractionClass;
    std::unique_ptr<MeasurementInitInteractionClass> mMeasurementInitInteractionClass;
    std::unique_ptr<MeasurementStopInteractionClass> mMeasurementStopInteractionClass;
    std::unique_ptr<KeyEventInteractionClass> mKeyEventInteractionClass;
    std::unique_ptr<TextLogInteractionClass> mTextLogInteractionClass;
    std::unique_ptr<DOMemberTransmitDataInteractionClass> mDOMemberTransmitDataInteractionClass;
    std::unique_ptr<SystemVariableUpdateInteractionClass> mSystemVariableUpdateInteractionClass;
    std::unique_ptr<SystemVariableModificationInteractionClass> mSystemVariableModificationInteractionClass;
    std::unique_ptr<ValueEntityUpdateInteractionClass> mValueEntityUpdateInteractionClass;
    std::unique_ptr<BusMessageInteractionClass> mBusMessageInteractionClass;
    std::unique_ptr<EthPacketInteractionClass> mEthPacketInteractionClass;
    std::unique_ptr<EthPacketErrorInteractionClass> mEthPacketErrorInteractionClass;
    std::unique_ptr<EthPacketErrorForwardedInteractionClass> mEthPacketErrorForwardedInteractionClass;
    std::unique_ptr<EthForwardedPacketInteractionClass> mEthForwardedPacketInteractionClass;
    std::unique_ptr<EthStatusInteractionClass> mEthStatusInteractionClass;
    std::unique_ptr<CANMessageInteractionClass> mCANMessageInteractionClass;
    std::unique_ptr<CANErrorFrameInteractionClass> mCANErrorFrameInteractionClass;
    std::unique_ptr<FlexRaySymbolInteractionClass> mFlexRaySymbolInteractionClass;
    std::unique_ptr<FlexRayCycleStartInteractionClass> mFlexRayCycleStartInteractionClass;
    std::unique_ptr<FlexRayFrameInteractionClass> mFlexRayFrameInteractionClass;
    std::unique_ptr<PythonCommandInteractionClass> mPythonCommandInteractionClass;
}; // class InteractionClassRegistry

} // namespace NDistSimIB
} // namespace NRTFederateEncoding
