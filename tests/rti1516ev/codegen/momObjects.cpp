
// Code automatically generated by T4 template from D:\vfs\CANoe\release\15.2\Projects_Source\OpenRTI-master\tests\rti1516ev\codegen\\mom.xml, do not edit

#include <vector>
#include <cassert>

#include "RTI/encoding/HLAhandle.h"
#include "RTI/encoding/HLAopaqueData.h"

#include "momObjects.h"

namespace OpenRTI {
namespace Mom {
HLAobjectRootObjectClass::HLAobjectRootObjectClass(rti1516ev::RTIambassador* rtiAmbassador)
{
  mRtiAmbassador = rtiAmbassador;
  mObjectClassHandle = rtiAmbassador->getObjectClassHandle(L"HLAobjectRoot");
  // attribute HLAprivilegeToDeleteObject : HLAtoken
  mHLAprivilegeToDeleteObjectAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAprivilegeToDeleteObject");
}

void HLAobjectRootObjectClass::Publish()
{
  if (!mPublished)
  {
    rti1516ev::AttributeHandleSet attributes = GetAllAttributeHandles();
    mRtiAmbassador->publishObjectClassAttributes(mObjectClassHandle, attributes);
    mPublished = true;
  }
}

void HLAobjectRootObjectClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishObjectClass(mObjectClassHandle);
    mPublished = false;
  }
}

void HLAobjectRootObjectClass::Subscribe()
{
  if (!mSubscribed)
  {
    rti1516ev::AttributeHandleSet attributes = GetAllAttributeHandles();
    mRtiAmbassador->subscribeObjectClassAttributes(mObjectClassHandle, attributes);
    mRtiAmbassador->setObjectClassDeliverToSelf(mObjectClassHandle, true);
    mSubscribed = true;
  }
}

void HLAobjectRootObjectClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeObjectClass(mObjectClassHandle);
    mSubscribed = false;
  }
}

void HLAobjectRootObjectClass::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle, const std::wstring& instanceName)
{
  assert(mObjectInstancesByName.find(instanceName) == mObjectInstancesByName.end());
  assert(mObjectInstancesByHandle.find(instanceHandle) == mObjectInstancesByHandle.end());
  HLAobjectRoot* newObject = new HLAobjectRoot(this, instanceName, mRtiAmbassador);
  newObject->mObjectInstanceHandle = instanceHandle;
  newObject->mIsOwner = false;
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  mObjectInstancesByHandle.insert(std::make_pair(instanceHandle, newObject));
}

void HLAobjectRootObjectClass::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  std::wstring instanceName = mRtiAmbassador->getObjectInstanceName(theObject);
  auto iter = mObjectInstancesByName.find(instanceName);
  assert(iter != mObjectInstancesByName.end());
  auto* objectInstance = iter->second;
  objectInstance->mObjectInstanceHandle = rti1516ev::ObjectInstanceHandle();
  mObjectInstancesByName.erase(iter);
  mObjectInstancesByHandle.erase(theObject);
}

IHLAobjectRoot* HLAobjectRootObjectClass::GetObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

IHLAobjectRoot* HLAobjectRootObjectClass::GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle)
{
  auto iter = mObjectInstancesByHandle.find(instanceHandle);
  if (iter != mObjectInstancesByHandle.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

IHLAobjectRoot* HLAobjectRootObjectClass::CreateObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return nullptr;
  }
  if (!mPublished)
  {
    throw rti1516ev::ObjectClassNotPublished(L"HLAobjectRoot");
  }
  HLAobjectRoot* newObject = new HLAobjectRoot(this, instanceName, mRtiAmbassador);
  ObjectClassRegistry::GetInstance()->RegisterObjectInstanceName(instanceName, [this, newObject, instanceName](bool success) {
    if (success) {
      rti1516ev::ObjectInstanceHandle instanceHandle = mRtiAmbassador->registerObjectInstance(mObjectClassHandle, instanceName);
      newObject->mObjectInstanceHandle = instanceHandle;
      newObject->mIsOwner = true;
      mObjectInstancesByHandle.insert(std::make_pair(instanceHandle, newObject));
    }
  });
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  return newObject;
}

rti1516ev::AttributeHandleSet HLAobjectRootObjectClass::GetAllAttributeHandles()
{
  rti1516ev::AttributeHandleSet result;
  result.insert(GetHLAprivilegeToDeleteObjectAttributeHandle());
  return result;
}

// object instances of type 'HLAobjectRoot'
HLAobjectRoot::HLAobjectRoot()
{
}

HLAobjectRoot::HLAobjectRoot(HLAobjectRootObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* rtiAmbassador)
  : mObjectClass(objectClass)
  , mInstanceName(instanceName)
  , mRtiAmbassador(rtiAmbassador)
{
}

HLAobjectRoot::~HLAobjectRoot()
{
  if (mObjectInstanceHandle.isValid() && mIsOwner)
  {
    mRtiAmbassador->deleteObjectInstance(mObjectInstanceHandle, rti1516ev::VariableLengthData());
    mObjectInstanceHandle = rti1516ev::ObjectInstanceHandle();
    mIsOwner = false;
  }
}

// attribute HLAprivilegeToDeleteObject : HLAtoken
const std::vector<uint8_t>& HLAobjectRoot::GetHLAprivilegeToDeleteObject() const
{
  return mHLAprivilegeToDeleteObject.get();
}

void HLAobjectRoot::SetHLAprivilegeToDeleteObject(std::vector<uint8_t> newValue)
{
  mHLAprivilegeToDeleteObject.set(newValue);
  mDirty |= kHLAprivilegeToDeleteObjectBit;
}

rti1516ev::AttributeHandleValueMap HLAobjectRoot::GetAllAttributeValues() const
{
  rti1516ev::AttributeHandleValueMap result;
  result[mObjectClass->GetHLAprivilegeToDeleteObjectAttributeHandle()] = mHLAprivilegeToDeleteObject.encode();
  return result;
}

rti1516ev::AttributeHandleValueMap HLAobjectRoot::GetModifiedAttributeValues() const
{
  rti1516ev::AttributeHandleValueMap result;
  if (mDirty & kHLAprivilegeToDeleteObjectBit)
  {
    result[mObjectClass->GetHLAprivilegeToDeleteObjectAttributeHandle()] = mHLAprivilegeToDeleteObject.encode();
  }
  return result;
}

void HLAobjectRoot::UpdateAllAttributeValues()
{
  if (IsValid())
  {
    rti1516ev::AttributeHandleValueMap attributes = GetAllAttributeValues();
    mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData());
  }
}

void HLAobjectRoot::UpdateAllAttributeValues(const rti1516ev::LogicalTime& time)
{
  if (IsValid())
  {
    rti1516ev::AttributeHandleValueMap attributes = GetAllAttributeValues();
    mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData(), time);
  }
}

void HLAobjectRoot::UpdateModifiedAttributeValues()
{
  if (IsValid())
  {
    rti1516ev::AttributeHandleValueMap attributes = GetModifiedAttributeValues();
    mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData());
    mDirty = kNone;
  }
}

void HLAobjectRoot::UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time)
{
  if (IsValid())
  {
    rti1516ev::AttributeHandleValueMap attributes = GetModifiedAttributeValues();
    mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData(), time);
    mDirty = kNone;
  }
}

void HLAobjectRoot::ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes)
{
  for (auto& attributeHandleValue : attributes)
  {
    rti1516ev::AttributeHandle attributeHandle = attributeHandleValue.first;
    if (attributeHandle == mObjectClass->GetHLAprivilegeToDeleteObjectAttributeHandle())
    {
      mHLAprivilegeToDeleteObject.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAprivilegeToDeleteObjectBit;
    }
  } // for (auto& attributeHandleValue : attributes)
} // HLAobjectRoot::ReflectAttributeValues

void HLAobjectRoot::ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributeHandles)
{
  rti1516ev::AttributeHandleValueMap updateAttributes;
  for (auto& attributeHandle : attributeHandles)
  {
    if (attributeHandle == mObjectClass->GetHLAprivilegeToDeleteObjectAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAprivilegeToDeleteObject.encode()));
      mDirty &= ~kHLAprivilegeToDeleteObjectBit;
    }
  } // for (auto& attributeHandleValue : attributes)
  mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, updateAttributes, rti1516ev::VariableLengthData());
} // HLAobjectRoot::ReflectAttributeValues


// object class type 'HLAmanager'
HLAmanagerObjectClass::HLAmanagerObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mObjectClassHandle = rtiAmbassador->getObjectClassHandle(L"HLAobjectRoot.HLAmanager");
}

void HLAmanagerObjectClass::Publish()
{
  if (!mPublished)
  {
    rti1516ev::AttributeHandleSet attributes = GetAllAttributeHandles();
    mRtiAmbassador->publishObjectClassAttributes(mObjectClassHandle, attributes);
    mPublished = true;
  }
}

void HLAmanagerObjectClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishObjectClass(mObjectClassHandle);
    mPublished = false;
  }
}

void HLAmanagerObjectClass::Subscribe()
{
  if (!mSubscribed)
  {
    rti1516ev::AttributeHandleSet attributes = GetAllAttributeHandles();
    mRtiAmbassador->subscribeObjectClassAttributes(mObjectClassHandle, attributes);
    mRtiAmbassador->setObjectClassDeliverToSelf(mObjectClassHandle, true);
    mSubscribed = true;
  }
}

void HLAmanagerObjectClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeObjectClass(mObjectClassHandle);
    mSubscribed = false;
  }
}

void HLAmanagerObjectClass::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle, const std::wstring& instanceName)
{
  assert(mObjectInstancesByName.find(instanceName) == mObjectInstancesByName.end());
  assert(mObjectInstancesByHandle.find(instanceHandle) == mObjectInstancesByHandle.end());
  HLAmanager* newObject = new HLAmanager(this, instanceName, mRtiAmbassador);
  newObject->mObjectInstanceHandle = instanceHandle;
  newObject->mIsOwner = false;
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  mObjectInstancesByHandle.insert(std::make_pair(instanceHandle, newObject));
}

void HLAmanagerObjectClass::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  std::wstring instanceName = mRtiAmbassador->getObjectInstanceName(theObject);
  auto iter = mObjectInstancesByName.find(instanceName);
  assert(iter != mObjectInstancesByName.end());
  auto* objectInstance = iter->second;
  objectInstance->mObjectInstanceHandle = rti1516ev::ObjectInstanceHandle();
  mObjectInstancesByName.erase(iter);
  mObjectInstancesByHandle.erase(theObject);
}

IHLAmanager* HLAmanagerObjectClass::GetObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

IHLAmanager* HLAmanagerObjectClass::GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle)
{
  auto iter = mObjectInstancesByHandle.find(instanceHandle);
  if (iter != mObjectInstancesByHandle.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

IHLAmanager* HLAmanagerObjectClass::CreateObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return nullptr;
  }
  if (!mPublished)
  {
    throw rti1516ev::ObjectClassNotPublished(L"HLAmanager");
  }
  HLAmanager* newObject = new HLAmanager(this, instanceName, mRtiAmbassador);
  ObjectClassRegistry::GetInstance()->RegisterObjectInstanceName(instanceName, [this, newObject, instanceName](bool success) {
    if (success) {
      rti1516ev::ObjectInstanceHandle instanceHandle = mRtiAmbassador->registerObjectInstance(mObjectClassHandle, instanceName);
      newObject->mObjectInstanceHandle = instanceHandle;
      newObject->mIsOwner = true;
      mObjectInstancesByHandle.insert(std::make_pair(instanceHandle, newObject));
    }
  });
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  return newObject;
}

rti1516ev::AttributeHandleSet HLAmanagerObjectClass::GetAllAttributeHandles()
{
  rti1516ev::AttributeHandleSet result;
  result.insert(GetHLAprivilegeToDeleteObjectAttributeHandle());
  return result;
}

// object instances of type 'HLAmanager'
HLAmanager::HLAmanager()
{
}

HLAmanager::HLAmanager(HLAmanagerObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* rtiAmbassador)
  : mObjectClass(objectClass)
  , mInstanceName(instanceName)
  , mRtiAmbassador(rtiAmbassador)
{
}

HLAmanager::~HLAmanager()
{
  if (mObjectInstanceHandle.isValid() && mIsOwner)
  {
    mRtiAmbassador->deleteObjectInstance(mObjectInstanceHandle, rti1516ev::VariableLengthData());
    mObjectInstanceHandle = rti1516ev::ObjectInstanceHandle();
    mIsOwner = false;
  }
}

// attribute HLAprivilegeToDeleteObject : HLAtoken
const std::vector<uint8_t>& HLAmanager::GetHLAprivilegeToDeleteObject() const
{
  return mHLAprivilegeToDeleteObject.get();
}

void HLAmanager::SetHLAprivilegeToDeleteObject(std::vector<uint8_t> newValue)
{
  mHLAprivilegeToDeleteObject.set(newValue);
  mDirty |= kHLAprivilegeToDeleteObjectBit;
}

rti1516ev::AttributeHandleValueMap HLAmanager::GetAllAttributeValues() const
{
  rti1516ev::AttributeHandleValueMap result;
  result[mObjectClass->GetHLAprivilegeToDeleteObjectAttributeHandle()] = mHLAprivilegeToDeleteObject.encode();
  return result;
}

rti1516ev::AttributeHandleValueMap HLAmanager::GetModifiedAttributeValues() const
{
  rti1516ev::AttributeHandleValueMap result;
  return result;
}


// object class type 'HLAfederate'
HLAfederateObjectClass::HLAfederateObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAmanagerObjectClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mObjectClassHandle = rtiAmbassador->getObjectClassHandle(L"HLAobjectRoot.HLAmanager.HLAfederate");
  // attribute HLAfederateHandle : HLAhandle
  mHLAfederateHandleAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAfederateHandle");
  // attribute HLAfederateName : HLAunicodeString
  mHLAfederateNameAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAfederateName");
  // attribute HLAfederateType : HLAunicodeString
  mHLAfederateTypeAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAfederateType");
  // attribute HLAfederateHost : HLAunicodeString
  mHLAfederateHostAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAfederateHost");
  // attribute HLARTIversion : HLAunicodeString
  mHLARTIversionAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLARTIversion");
  // attribute HLAFOMmoduleDesignatorList : HLAmoduleDesignatorList
  mHLAFOMmoduleDesignatorListAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAFOMmoduleDesignatorList");
  // attribute HLAtimeConstrained : HLAboolean
  mHLAtimeConstrainedAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAtimeConstrained");
  // attribute HLAtimeRegulating : HLAboolean
  mHLAtimeRegulatingAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAtimeRegulating");
  // attribute HLAasynchronousDelivery : HLAboolean
  mHLAasynchronousDeliveryAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAasynchronousDelivery");
  // attribute HLAfederateState : HLAfederateState
  mHLAfederateStateAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAfederateState");
  // attribute HLAtimeManagerState : HLAtimeState
  mHLAtimeManagerStateAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAtimeManagerState");
  // attribute HLAlogicalTime : HLAlogicalTime
  mHLAlogicalTimeAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAlogicalTime");
  // attribute HLAlookahead : HLAtimeInterval
  mHLAlookaheadAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAlookahead");
  // attribute HLAGALT : HLAlogicalTime
  mHLAGALTAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAGALT");
  // attribute HLALITS : HLAlogicalTime
  mHLALITSAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLALITS");
  // attribute HLAROlength : HLAcount
  mHLAROlengthAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAROlength");
  // attribute HLATSOlength : HLAcount
  mHLATSOlengthAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLATSOlength");
  // attribute HLAreflectionsReceived : HLAcount
  mHLAreflectionsReceivedAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAreflectionsReceived");
  // attribute HLAupdatesSent : HLAcount
  mHLAupdatesSentAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAupdatesSent");
  // attribute HLAinteractionsReceived : HLAcount
  mHLAinteractionsReceivedAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAinteractionsReceived");
  // attribute HLAinteractionsSent : HLAcount
  mHLAinteractionsSentAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAinteractionsSent");
  // attribute HLAobjectInstancesThatCanBeDeleted : HLAcount
  mHLAobjectInstancesThatCanBeDeletedAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAobjectInstancesThatCanBeDeleted");
  // attribute HLAobjectInstancesUpdated : HLAcount
  mHLAobjectInstancesUpdatedAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAobjectInstancesUpdated");
  // attribute HLAobjectInstancesReflected : HLAcount
  mHLAobjectInstancesReflectedAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAobjectInstancesReflected");
  // attribute HLAobjectInstancesDeleted : HLAcount
  mHLAobjectInstancesDeletedAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAobjectInstancesDeleted");
  // attribute HLAobjectInstancesRemoved : HLAcount
  mHLAobjectInstancesRemovedAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAobjectInstancesRemoved");
  // attribute HLAobjectInstancesRegistered : HLAcount
  mHLAobjectInstancesRegisteredAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAobjectInstancesRegistered");
  // attribute HLAobjectInstancesDiscovered : HLAcount
  mHLAobjectInstancesDiscoveredAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAobjectInstancesDiscovered");
  // attribute HLAtimeGrantedTime : HLAmsec
  mHLAtimeGrantedTimeAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAtimeGrantedTime");
  // attribute HLAtimeAdvancingTime : HLAmsec
  mHLAtimeAdvancingTimeAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAtimeAdvancingTime");
  // attribute HLAconveyRegionDesignatorSets : HLAswitch
  mHLAconveyRegionDesignatorSetsAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAconveyRegionDesignatorSets");
  // attribute HLAconveyProducingFederate : HLAswitch
  mHLAconveyProducingFederateAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAconveyProducingFederate");
}

void HLAfederateObjectClass::Publish()
{
  if (!mPublished)
  {
    rti1516ev::AttributeHandleSet attributes = GetAllAttributeHandles();
    mRtiAmbassador->publishObjectClassAttributes(mObjectClassHandle, attributes);
    mPublished = true;
  }
}

void HLAfederateObjectClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishObjectClass(mObjectClassHandle);
    mPublished = false;
  }
}

void HLAfederateObjectClass::Subscribe()
{
  if (!mSubscribed)
  {
    rti1516ev::AttributeHandleSet attributes = GetAllAttributeHandles();
    mRtiAmbassador->subscribeObjectClassAttributes(mObjectClassHandle, attributes);
    mRtiAmbassador->setObjectClassDeliverToSelf(mObjectClassHandle, true);
    mSubscribed = true;
  }
}

void HLAfederateObjectClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeObjectClass(mObjectClassHandle);
    mSubscribed = false;
  }
}

void HLAfederateObjectClass::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle, const std::wstring& instanceName)
{
  assert(mObjectInstancesByName.find(instanceName) == mObjectInstancesByName.end());
  assert(mObjectInstancesByHandle.find(instanceHandle) == mObjectInstancesByHandle.end());
  HLAfederate* newObject = new HLAfederate(this, instanceName, mRtiAmbassador);
  newObject->mObjectInstanceHandle = instanceHandle;
  newObject->mIsOwner = false;
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  mObjectInstancesByHandle.insert(std::make_pair(instanceHandle, newObject));
}

void HLAfederateObjectClass::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  std::wstring instanceName = mRtiAmbassador->getObjectInstanceName(theObject);
  auto iter = mObjectInstancesByName.find(instanceName);
  assert(iter != mObjectInstancesByName.end());
  auto* objectInstance = iter->second;
  objectInstance->mObjectInstanceHandle = rti1516ev::ObjectInstanceHandle();
  mObjectInstancesByName.erase(iter);
  mObjectInstancesByHandle.erase(theObject);
}

IHLAfederate* HLAfederateObjectClass::GetObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

IHLAfederate* HLAfederateObjectClass::GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle)
{
  auto iter = mObjectInstancesByHandle.find(instanceHandle);
  if (iter != mObjectInstancesByHandle.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

IHLAfederate* HLAfederateObjectClass::CreateObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return nullptr;
  }
  if (!mPublished)
  {
    throw rti1516ev::ObjectClassNotPublished(L"HLAfederate");
  }
  HLAfederate* newObject = new HLAfederate(this, instanceName, mRtiAmbassador);
  ObjectClassRegistry::GetInstance()->RegisterObjectInstanceName(instanceName, [this, newObject, instanceName](bool success) {
    if (success) {
      rti1516ev::ObjectInstanceHandle instanceHandle = mRtiAmbassador->registerObjectInstance(mObjectClassHandle, instanceName);
      newObject->mObjectInstanceHandle = instanceHandle;
      newObject->mIsOwner = true;
      mObjectInstancesByHandle.insert(std::make_pair(instanceHandle, newObject));
    }
  });
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  return newObject;
}

rti1516ev::AttributeHandleSet HLAfederateObjectClass::GetAllAttributeHandles()
{
  rti1516ev::AttributeHandleSet result;
  result.insert(GetHLAprivilegeToDeleteObjectAttributeHandle());
  result.insert(GetHLAfederateHandleAttributeHandle());
  result.insert(GetHLAfederateNameAttributeHandle());
  result.insert(GetHLAfederateTypeAttributeHandle());
  result.insert(GetHLAfederateHostAttributeHandle());
  result.insert(GetHLARTIversionAttributeHandle());
  result.insert(GetHLAFOMmoduleDesignatorListAttributeHandle());
  result.insert(GetHLAtimeConstrainedAttributeHandle());
  result.insert(GetHLAtimeRegulatingAttributeHandle());
  result.insert(GetHLAasynchronousDeliveryAttributeHandle());
  result.insert(GetHLAfederateStateAttributeHandle());
  result.insert(GetHLAtimeManagerStateAttributeHandle());
  result.insert(GetHLAlogicalTimeAttributeHandle());
  result.insert(GetHLAlookaheadAttributeHandle());
  result.insert(GetHLAGALTAttributeHandle());
  result.insert(GetHLALITSAttributeHandle());
  result.insert(GetHLAROlengthAttributeHandle());
  result.insert(GetHLATSOlengthAttributeHandle());
  result.insert(GetHLAreflectionsReceivedAttributeHandle());
  result.insert(GetHLAupdatesSentAttributeHandle());
  result.insert(GetHLAinteractionsReceivedAttributeHandle());
  result.insert(GetHLAinteractionsSentAttributeHandle());
  result.insert(GetHLAobjectInstancesThatCanBeDeletedAttributeHandle());
  result.insert(GetHLAobjectInstancesUpdatedAttributeHandle());
  result.insert(GetHLAobjectInstancesReflectedAttributeHandle());
  result.insert(GetHLAobjectInstancesDeletedAttributeHandle());
  result.insert(GetHLAobjectInstancesRemovedAttributeHandle());
  result.insert(GetHLAobjectInstancesRegisteredAttributeHandle());
  result.insert(GetHLAobjectInstancesDiscoveredAttributeHandle());
  result.insert(GetHLAtimeGrantedTimeAttributeHandle());
  result.insert(GetHLAtimeAdvancingTimeAttributeHandle());
  result.insert(GetHLAconveyRegionDesignatorSetsAttributeHandle());
  result.insert(GetHLAconveyProducingFederateAttributeHandle());
  return result;
}

// object instances of type 'HLAfederate'
HLAfederate::HLAfederate()
{
}

HLAfederate::HLAfederate(HLAfederateObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* rtiAmbassador)
  : mObjectClass(objectClass)
  , mInstanceName(instanceName)
  , mRtiAmbassador(rtiAmbassador)
{
}

HLAfederate::~HLAfederate()
{
  if (mObjectInstanceHandle.isValid() && mIsOwner)
  {
    mRtiAmbassador->deleteObjectInstance(mObjectInstanceHandle, rti1516ev::VariableLengthData());
    mObjectInstanceHandle = rti1516ev::ObjectInstanceHandle();
    mIsOwner = false;
  }
}

// attribute HLAprivilegeToDeleteObject : HLAtoken
const std::vector<uint8_t>& HLAfederate::GetHLAprivilegeToDeleteObject() const
{
  return mHLAprivilegeToDeleteObject.get();
}

void HLAfederate::SetHLAprivilegeToDeleteObject(std::vector<uint8_t> newValue)
{
  mHLAprivilegeToDeleteObject.set(newValue);
  mDirty |= kHLAprivilegeToDeleteObjectBit;
}

// attribute HLAfederateHandle : HLAhandle
rti1516ev::HLAhandle HLAfederate::GetHLAfederateHandle() const
{
  return mHLAfederateHandleEncoder;
}

void HLAfederate::SetHLAfederateHandle(rti1516ev::HLAhandle newValue)
{
  mHLAfederateHandleEncoder = newValue;
  mDirty |= kHLAfederateHandleBit;
}

// attribute HLAfederateName : HLAunicodeString
std::wstring HLAfederate::GetHLAfederateName() const
{
  return mHLAfederateName.get();
}

void HLAfederate::SetHLAfederateName(std::wstring newValue)
{
  mHLAfederateName.set(newValue);
  mDirty |= kHLAfederateNameBit;
}

// attribute HLAfederateType : HLAunicodeString
std::wstring HLAfederate::GetHLAfederateType() const
{
  return mHLAfederateType.get();
}

void HLAfederate::SetHLAfederateType(std::wstring newValue)
{
  mHLAfederateType.set(newValue);
  mDirty |= kHLAfederateTypeBit;
}

// attribute HLAfederateHost : HLAunicodeString
std::wstring HLAfederate::GetHLAfederateHost() const
{
  return mHLAfederateHost.get();
}

void HLAfederate::SetHLAfederateHost(std::wstring newValue)
{
  mHLAfederateHost.set(newValue);
  mDirty |= kHLAfederateHostBit;
}

// attribute HLARTIversion : HLAunicodeString
std::wstring HLAfederate::GetHLARTIversion() const
{
  return mHLARTIversion.get();
}

void HLAfederate::SetHLARTIversion(std::wstring newValue)
{
  mHLARTIversion.set(newValue);
  mDirty |= kHLARTIversionBit;
}

// attribute HLAFOMmoduleDesignatorList : HLAmoduleDesignatorList
const std::vector<std::wstring>& HLAfederate::GetHLAFOMmoduleDesignatorList() const
{
  return mHLAFOMmoduleDesignatorList.get();
}

void HLAfederate::SetHLAFOMmoduleDesignatorList(std::vector<std::wstring> newValue)
{
  mHLAFOMmoduleDesignatorList.set(newValue);
  mDirty |= kHLAFOMmoduleDesignatorListBit;
}

// attribute HLAtimeConstrained : HLAboolean
bool HLAfederate::GetHLAtimeConstrained() const
{
  return mHLAtimeConstrained.get();
}

void HLAfederate::SetHLAtimeConstrained(bool newValue)
{
  mHLAtimeConstrained.set(newValue);
  mDirty |= kHLAtimeConstrainedBit;
}

// attribute HLAtimeRegulating : HLAboolean
bool HLAfederate::GetHLAtimeRegulating() const
{
  return mHLAtimeRegulating.get();
}

void HLAfederate::SetHLAtimeRegulating(bool newValue)
{
  mHLAtimeRegulating.set(newValue);
  mDirty |= kHLAtimeRegulatingBit;
}

// attribute HLAasynchronousDelivery : HLAboolean
bool HLAfederate::GetHLAasynchronousDelivery() const
{
  return mHLAasynchronousDelivery.get();
}

void HLAfederate::SetHLAasynchronousDelivery(bool newValue)
{
  mHLAasynchronousDelivery.set(newValue);
  mDirty |= kHLAasynchronousDeliveryBit;
}

// attribute HLAfederateState : HLAfederateState
HLAfederateState HLAfederate::GetHLAfederateState() const
{
  return static_cast<HLAfederateState>(mHLAfederateState.get());
}

void HLAfederate::SetHLAfederateState(HLAfederateState newValue)
{
  mHLAfederateState.set(newValue);
  mDirty |= kHLAfederateStateBit;
}

// attribute HLAtimeManagerState : HLAtimeState
HLAtimeState HLAfederate::GetHLAtimeManagerState() const
{
  return static_cast<HLAtimeState>(mHLAtimeManagerState.get());
}

void HLAfederate::SetHLAtimeManagerState(HLAtimeState newValue)
{
  mHLAtimeManagerState.set(newValue);
  mDirty |= kHLAtimeManagerStateBit;
}

// attribute HLAlogicalTime : HLAlogicalTime
const std::vector<uint8_t>& HLAfederate::GetHLAlogicalTime() const
{
  return mHLAlogicalTime.get();
}

void HLAfederate::SetHLAlogicalTime(std::vector<uint8_t> newValue)
{
  mHLAlogicalTime.set(newValue);
  mDirty |= kHLAlogicalTimeBit;
}

// attribute HLAlookahead : HLAtimeInterval
const std::vector<uint8_t>& HLAfederate::GetHLAlookahead() const
{
  return mHLAlookahead.get();
}

void HLAfederate::SetHLAlookahead(std::vector<uint8_t> newValue)
{
  mHLAlookahead.set(newValue);
  mDirty |= kHLAlookaheadBit;
}

// attribute HLAGALT : HLAlogicalTime
const std::vector<uint8_t>& HLAfederate::GetHLAGALT() const
{
  return mHLAGALT.get();
}

void HLAfederate::SetHLAGALT(std::vector<uint8_t> newValue)
{
  mHLAGALT.set(newValue);
  mDirty |= kHLAGALTBit;
}

// attribute HLALITS : HLAlogicalTime
const std::vector<uint8_t>& HLAfederate::GetHLALITS() const
{
  return mHLALITS.get();
}

void HLAfederate::SetHLALITS(std::vector<uint8_t> newValue)
{
  mHLALITS.set(newValue);
  mDirty |= kHLALITSBit;
}

// attribute HLAROlength : HLAcount
HLAcount HLAfederate::GetHLAROlength() const
{
  return mHLAROlength.get();
}

void HLAfederate::SetHLAROlength(HLAcount newValue)
{
  mHLAROlength.set(newValue);
  mDirty |= kHLAROlengthBit;
}

// attribute HLATSOlength : HLAcount
HLAcount HLAfederate::GetHLATSOlength() const
{
  return mHLATSOlength.get();
}

void HLAfederate::SetHLATSOlength(HLAcount newValue)
{
  mHLATSOlength.set(newValue);
  mDirty |= kHLATSOlengthBit;
}

// attribute HLAreflectionsReceived : HLAcount
HLAcount HLAfederate::GetHLAreflectionsReceived() const
{
  return mHLAreflectionsReceived.get();
}

void HLAfederate::SetHLAreflectionsReceived(HLAcount newValue)
{
  mHLAreflectionsReceived.set(newValue);
  mDirty |= kHLAreflectionsReceivedBit;
}

// attribute HLAupdatesSent : HLAcount
HLAcount HLAfederate::GetHLAupdatesSent() const
{
  return mHLAupdatesSent.get();
}

void HLAfederate::SetHLAupdatesSent(HLAcount newValue)
{
  mHLAupdatesSent.set(newValue);
  mDirty |= kHLAupdatesSentBit;
}

// attribute HLAinteractionsReceived : HLAcount
HLAcount HLAfederate::GetHLAinteractionsReceived() const
{
  return mHLAinteractionsReceived.get();
}

void HLAfederate::SetHLAinteractionsReceived(HLAcount newValue)
{
  mHLAinteractionsReceived.set(newValue);
  mDirty |= kHLAinteractionsReceivedBit;
}

// attribute HLAinteractionsSent : HLAcount
HLAcount HLAfederate::GetHLAinteractionsSent() const
{
  return mHLAinteractionsSent.get();
}

void HLAfederate::SetHLAinteractionsSent(HLAcount newValue)
{
  mHLAinteractionsSent.set(newValue);
  mDirty |= kHLAinteractionsSentBit;
}

// attribute HLAobjectInstancesThatCanBeDeleted : HLAcount
HLAcount HLAfederate::GetHLAobjectInstancesThatCanBeDeleted() const
{
  return mHLAobjectInstancesThatCanBeDeleted.get();
}

void HLAfederate::SetHLAobjectInstancesThatCanBeDeleted(HLAcount newValue)
{
  mHLAobjectInstancesThatCanBeDeleted.set(newValue);
  mDirty |= kHLAobjectInstancesThatCanBeDeletedBit;
}

// attribute HLAobjectInstancesUpdated : HLAcount
HLAcount HLAfederate::GetHLAobjectInstancesUpdated() const
{
  return mHLAobjectInstancesUpdated.get();
}

void HLAfederate::SetHLAobjectInstancesUpdated(HLAcount newValue)
{
  mHLAobjectInstancesUpdated.set(newValue);
  mDirty |= kHLAobjectInstancesUpdatedBit;
}

// attribute HLAobjectInstancesReflected : HLAcount
HLAcount HLAfederate::GetHLAobjectInstancesReflected() const
{
  return mHLAobjectInstancesReflected.get();
}

void HLAfederate::SetHLAobjectInstancesReflected(HLAcount newValue)
{
  mHLAobjectInstancesReflected.set(newValue);
  mDirty |= kHLAobjectInstancesReflectedBit;
}

// attribute HLAobjectInstancesDeleted : HLAcount
HLAcount HLAfederate::GetHLAobjectInstancesDeleted() const
{
  return mHLAobjectInstancesDeleted.get();
}

void HLAfederate::SetHLAobjectInstancesDeleted(HLAcount newValue)
{
  mHLAobjectInstancesDeleted.set(newValue);
  mDirty |= kHLAobjectInstancesDeletedBit;
}

// attribute HLAobjectInstancesRemoved : HLAcount
HLAcount HLAfederate::GetHLAobjectInstancesRemoved() const
{
  return mHLAobjectInstancesRemoved.get();
}

void HLAfederate::SetHLAobjectInstancesRemoved(HLAcount newValue)
{
  mHLAobjectInstancesRemoved.set(newValue);
  mDirty |= kHLAobjectInstancesRemovedBit;
}

// attribute HLAobjectInstancesRegistered : HLAcount
HLAcount HLAfederate::GetHLAobjectInstancesRegistered() const
{
  return mHLAobjectInstancesRegistered.get();
}

void HLAfederate::SetHLAobjectInstancesRegistered(HLAcount newValue)
{
  mHLAobjectInstancesRegistered.set(newValue);
  mDirty |= kHLAobjectInstancesRegisteredBit;
}

// attribute HLAobjectInstancesDiscovered : HLAcount
HLAcount HLAfederate::GetHLAobjectInstancesDiscovered() const
{
  return mHLAobjectInstancesDiscovered.get();
}

void HLAfederate::SetHLAobjectInstancesDiscovered(HLAcount newValue)
{
  mHLAobjectInstancesDiscovered.set(newValue);
  mDirty |= kHLAobjectInstancesDiscoveredBit;
}

// attribute HLAtimeGrantedTime : HLAmsec
HLAmsec HLAfederate::GetHLAtimeGrantedTime() const
{
  return mHLAtimeGrantedTime.get();
}

void HLAfederate::SetHLAtimeGrantedTime(HLAmsec newValue)
{
  mHLAtimeGrantedTime.set(newValue);
  mDirty |= kHLAtimeGrantedTimeBit;
}

// attribute HLAtimeAdvancingTime : HLAmsec
HLAmsec HLAfederate::GetHLAtimeAdvancingTime() const
{
  return mHLAtimeAdvancingTime.get();
}

void HLAfederate::SetHLAtimeAdvancingTime(HLAmsec newValue)
{
  mHLAtimeAdvancingTime.set(newValue);
  mDirty |= kHLAtimeAdvancingTimeBit;
}

// attribute HLAconveyRegionDesignatorSets : HLAswitch
HLAswitch HLAfederate::GetHLAconveyRegionDesignatorSets() const
{
  return static_cast<HLAswitch>(mHLAconveyRegionDesignatorSets.get());
}

void HLAfederate::SetHLAconveyRegionDesignatorSets(HLAswitch newValue)
{
  mHLAconveyRegionDesignatorSets.set(newValue);
  mDirty |= kHLAconveyRegionDesignatorSetsBit;
}

// attribute HLAconveyProducingFederate : HLAswitch
HLAswitch HLAfederate::GetHLAconveyProducingFederate() const
{
  return static_cast<HLAswitch>(mHLAconveyProducingFederate.get());
}

void HLAfederate::SetHLAconveyProducingFederate(HLAswitch newValue)
{
  mHLAconveyProducingFederate.set(newValue);
  mDirty |= kHLAconveyProducingFederateBit;
}

rti1516ev::AttributeHandleValueMap HLAfederate::GetAllAttributeValues() const
{
  rti1516ev::AttributeHandleValueMap result;
  result[mObjectClass->GetHLAprivilegeToDeleteObjectAttributeHandle()] = mHLAprivilegeToDeleteObject.encode();
  result[mObjectClass->GetHLAfederateHandleAttributeHandle()] = mHLAfederateHandle.encode();
  result[mObjectClass->GetHLAfederateNameAttributeHandle()] = mHLAfederateName.encode();
  result[mObjectClass->GetHLAfederateTypeAttributeHandle()] = mHLAfederateType.encode();
  result[mObjectClass->GetHLAfederateHostAttributeHandle()] = mHLAfederateHost.encode();
  result[mObjectClass->GetHLARTIversionAttributeHandle()] = mHLARTIversion.encode();
  result[mObjectClass->GetHLAFOMmoduleDesignatorListAttributeHandle()] = mHLAFOMmoduleDesignatorList.encode();
  result[mObjectClass->GetHLAtimeConstrainedAttributeHandle()] = mHLAtimeConstrained.encode();
  result[mObjectClass->GetHLAtimeRegulatingAttributeHandle()] = mHLAtimeRegulating.encode();
  result[mObjectClass->GetHLAasynchronousDeliveryAttributeHandle()] = mHLAasynchronousDelivery.encode();
  result[mObjectClass->GetHLAfederateStateAttributeHandle()] = mHLAfederateState.encode();
  result[mObjectClass->GetHLAtimeManagerStateAttributeHandle()] = mHLAtimeManagerState.encode();
  result[mObjectClass->GetHLAlogicalTimeAttributeHandle()] = mHLAlogicalTime.encode();
  result[mObjectClass->GetHLAlookaheadAttributeHandle()] = mHLAlookahead.encode();
  result[mObjectClass->GetHLAGALTAttributeHandle()] = mHLAGALT.encode();
  result[mObjectClass->GetHLALITSAttributeHandle()] = mHLALITS.encode();
  result[mObjectClass->GetHLAROlengthAttributeHandle()] = mHLAROlength.encode();
  result[mObjectClass->GetHLATSOlengthAttributeHandle()] = mHLATSOlength.encode();
  result[mObjectClass->GetHLAreflectionsReceivedAttributeHandle()] = mHLAreflectionsReceived.encode();
  result[mObjectClass->GetHLAupdatesSentAttributeHandle()] = mHLAupdatesSent.encode();
  result[mObjectClass->GetHLAinteractionsReceivedAttributeHandle()] = mHLAinteractionsReceived.encode();
  result[mObjectClass->GetHLAinteractionsSentAttributeHandle()] = mHLAinteractionsSent.encode();
  result[mObjectClass->GetHLAobjectInstancesThatCanBeDeletedAttributeHandle()] = mHLAobjectInstancesThatCanBeDeleted.encode();
  result[mObjectClass->GetHLAobjectInstancesUpdatedAttributeHandle()] = mHLAobjectInstancesUpdated.encode();
  result[mObjectClass->GetHLAobjectInstancesReflectedAttributeHandle()] = mHLAobjectInstancesReflected.encode();
  result[mObjectClass->GetHLAobjectInstancesDeletedAttributeHandle()] = mHLAobjectInstancesDeleted.encode();
  result[mObjectClass->GetHLAobjectInstancesRemovedAttributeHandle()] = mHLAobjectInstancesRemoved.encode();
  result[mObjectClass->GetHLAobjectInstancesRegisteredAttributeHandle()] = mHLAobjectInstancesRegistered.encode();
  result[mObjectClass->GetHLAobjectInstancesDiscoveredAttributeHandle()] = mHLAobjectInstancesDiscovered.encode();
  result[mObjectClass->GetHLAtimeGrantedTimeAttributeHandle()] = mHLAtimeGrantedTime.encode();
  result[mObjectClass->GetHLAtimeAdvancingTimeAttributeHandle()] = mHLAtimeAdvancingTime.encode();
  result[mObjectClass->GetHLAconveyRegionDesignatorSetsAttributeHandle()] = mHLAconveyRegionDesignatorSets.encode();
  result[mObjectClass->GetHLAconveyProducingFederateAttributeHandle()] = mHLAconveyProducingFederate.encode();
  return result;
}

rti1516ev::AttributeHandleValueMap HLAfederate::GetModifiedAttributeValues() const
{
  rti1516ev::AttributeHandleValueMap result;
  if (mDirty & kHLAfederateHandleBit)
  {
    result[mObjectClass->GetHLAfederateHandleAttributeHandle()] = mHLAfederateHandle.encode();
  }
  if (mDirty & kHLAfederateNameBit)
  {
    result[mObjectClass->GetHLAfederateNameAttributeHandle()] = mHLAfederateName.encode();
  }
  if (mDirty & kHLAfederateTypeBit)
  {
    result[mObjectClass->GetHLAfederateTypeAttributeHandle()] = mHLAfederateType.encode();
  }
  if (mDirty & kHLAfederateHostBit)
  {
    result[mObjectClass->GetHLAfederateHostAttributeHandle()] = mHLAfederateHost.encode();
  }
  if (mDirty & kHLARTIversionBit)
  {
    result[mObjectClass->GetHLARTIversionAttributeHandle()] = mHLARTIversion.encode();
  }
  if (mDirty & kHLAFOMmoduleDesignatorListBit)
  {
    result[mObjectClass->GetHLAFOMmoduleDesignatorListAttributeHandle()] = mHLAFOMmoduleDesignatorList.encode();
  }
  if (mDirty & kHLAtimeConstrainedBit)
  {
    result[mObjectClass->GetHLAtimeConstrainedAttributeHandle()] = mHLAtimeConstrained.encode();
  }
  if (mDirty & kHLAtimeRegulatingBit)
  {
    result[mObjectClass->GetHLAtimeRegulatingAttributeHandle()] = mHLAtimeRegulating.encode();
  }
  if (mDirty & kHLAasynchronousDeliveryBit)
  {
    result[mObjectClass->GetHLAasynchronousDeliveryAttributeHandle()] = mHLAasynchronousDelivery.encode();
  }
  if (mDirty & kHLAfederateStateBit)
  {
    result[mObjectClass->GetHLAfederateStateAttributeHandle()] = mHLAfederateState.encode();
  }
  if (mDirty & kHLAtimeManagerStateBit)
  {
    result[mObjectClass->GetHLAtimeManagerStateAttributeHandle()] = mHLAtimeManagerState.encode();
  }
  if (mDirty & kHLAlogicalTimeBit)
  {
    result[mObjectClass->GetHLAlogicalTimeAttributeHandle()] = mHLAlogicalTime.encode();
  }
  if (mDirty & kHLAlookaheadBit)
  {
    result[mObjectClass->GetHLAlookaheadAttributeHandle()] = mHLAlookahead.encode();
  }
  if (mDirty & kHLAGALTBit)
  {
    result[mObjectClass->GetHLAGALTAttributeHandle()] = mHLAGALT.encode();
  }
  if (mDirty & kHLALITSBit)
  {
    result[mObjectClass->GetHLALITSAttributeHandle()] = mHLALITS.encode();
  }
  if (mDirty & kHLAROlengthBit)
  {
    result[mObjectClass->GetHLAROlengthAttributeHandle()] = mHLAROlength.encode();
  }
  if (mDirty & kHLATSOlengthBit)
  {
    result[mObjectClass->GetHLATSOlengthAttributeHandle()] = mHLATSOlength.encode();
  }
  if (mDirty & kHLAreflectionsReceivedBit)
  {
    result[mObjectClass->GetHLAreflectionsReceivedAttributeHandle()] = mHLAreflectionsReceived.encode();
  }
  if (mDirty & kHLAupdatesSentBit)
  {
    result[mObjectClass->GetHLAupdatesSentAttributeHandle()] = mHLAupdatesSent.encode();
  }
  if (mDirty & kHLAinteractionsReceivedBit)
  {
    result[mObjectClass->GetHLAinteractionsReceivedAttributeHandle()] = mHLAinteractionsReceived.encode();
  }
  if (mDirty & kHLAinteractionsSentBit)
  {
    result[mObjectClass->GetHLAinteractionsSentAttributeHandle()] = mHLAinteractionsSent.encode();
  }
  if (mDirty & kHLAobjectInstancesThatCanBeDeletedBit)
  {
    result[mObjectClass->GetHLAobjectInstancesThatCanBeDeletedAttributeHandle()] = mHLAobjectInstancesThatCanBeDeleted.encode();
  }
  if (mDirty & kHLAobjectInstancesUpdatedBit)
  {
    result[mObjectClass->GetHLAobjectInstancesUpdatedAttributeHandle()] = mHLAobjectInstancesUpdated.encode();
  }
  if (mDirty & kHLAobjectInstancesReflectedBit)
  {
    result[mObjectClass->GetHLAobjectInstancesReflectedAttributeHandle()] = mHLAobjectInstancesReflected.encode();
  }
  if (mDirty & kHLAobjectInstancesDeletedBit)
  {
    result[mObjectClass->GetHLAobjectInstancesDeletedAttributeHandle()] = mHLAobjectInstancesDeleted.encode();
  }
  if (mDirty & kHLAobjectInstancesRemovedBit)
  {
    result[mObjectClass->GetHLAobjectInstancesRemovedAttributeHandle()] = mHLAobjectInstancesRemoved.encode();
  }
  if (mDirty & kHLAobjectInstancesRegisteredBit)
  {
    result[mObjectClass->GetHLAobjectInstancesRegisteredAttributeHandle()] = mHLAobjectInstancesRegistered.encode();
  }
  if (mDirty & kHLAobjectInstancesDiscoveredBit)
  {
    result[mObjectClass->GetHLAobjectInstancesDiscoveredAttributeHandle()] = mHLAobjectInstancesDiscovered.encode();
  }
  if (mDirty & kHLAtimeGrantedTimeBit)
  {
    result[mObjectClass->GetHLAtimeGrantedTimeAttributeHandle()] = mHLAtimeGrantedTime.encode();
  }
  if (mDirty & kHLAtimeAdvancingTimeBit)
  {
    result[mObjectClass->GetHLAtimeAdvancingTimeAttributeHandle()] = mHLAtimeAdvancingTime.encode();
  }
  if (mDirty & kHLAconveyRegionDesignatorSetsBit)
  {
    result[mObjectClass->GetHLAconveyRegionDesignatorSetsAttributeHandle()] = mHLAconveyRegionDesignatorSets.encode();
  }
  if (mDirty & kHLAconveyProducingFederateBit)
  {
    result[mObjectClass->GetHLAconveyProducingFederateAttributeHandle()] = mHLAconveyProducingFederate.encode();
  }
  return result;
}

void HLAfederate::UpdateAllAttributeValues()
{
  if (IsValid())
  {
    rti1516ev::AttributeHandleValueMap attributes = GetAllAttributeValues();
    mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData());
  }
}

void HLAfederate::UpdateAllAttributeValues(const rti1516ev::LogicalTime& time)
{
  if (IsValid())
  {
    rti1516ev::AttributeHandleValueMap attributes = GetAllAttributeValues();
    mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData(), time);
  }
}

void HLAfederate::UpdateModifiedAttributeValues()
{
  if (IsValid())
  {
    rti1516ev::AttributeHandleValueMap attributes = GetModifiedAttributeValues();
    mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData());
    mDirty = kNone;
  }
}

void HLAfederate::UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time)
{
  if (IsValid())
  {
    rti1516ev::AttributeHandleValueMap attributes = GetModifiedAttributeValues();
    mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData(), time);
    mDirty = kNone;
  }
}

void HLAfederate::ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes)
{
  for (auto& attributeHandleValue : attributes)
  {
    rti1516ev::AttributeHandle attributeHandle = attributeHandleValue.first;
    if (attributeHandle == mObjectClass->GetHLAfederateHandleAttributeHandle())
    {
      mHLAfederateHandle.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAfederateHandleBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAfederateNameAttributeHandle())
    {
      mHLAfederateName.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAfederateNameBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAfederateTypeAttributeHandle())
    {
      mHLAfederateType.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAfederateTypeBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAfederateHostAttributeHandle())
    {
      mHLAfederateHost.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAfederateHostBit;
    }
    else if (attributeHandle == mObjectClass->GetHLARTIversionAttributeHandle())
    {
      mHLARTIversion.decode(attributeHandleValue.second);
      mLastUpdated |= kHLARTIversionBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAFOMmoduleDesignatorListAttributeHandle())
    {
      mHLAFOMmoduleDesignatorList.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAFOMmoduleDesignatorListBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAtimeConstrainedAttributeHandle())
    {
      mHLAtimeConstrained.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAtimeConstrainedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAtimeRegulatingAttributeHandle())
    {
      mHLAtimeRegulating.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAtimeRegulatingBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAasynchronousDeliveryAttributeHandle())
    {
      mHLAasynchronousDelivery.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAasynchronousDeliveryBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAfederateStateAttributeHandle())
    {
      mHLAfederateState.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAfederateStateBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAtimeManagerStateAttributeHandle())
    {
      mHLAtimeManagerState.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAtimeManagerStateBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAlogicalTimeAttributeHandle())
    {
      mHLAlogicalTime.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAlogicalTimeBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAlookaheadAttributeHandle())
    {
      mHLAlookahead.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAlookaheadBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAGALTAttributeHandle())
    {
      mHLAGALT.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAGALTBit;
    }
    else if (attributeHandle == mObjectClass->GetHLALITSAttributeHandle())
    {
      mHLALITS.decode(attributeHandleValue.second);
      mLastUpdated |= kHLALITSBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAROlengthAttributeHandle())
    {
      mHLAROlength.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAROlengthBit;
    }
    else if (attributeHandle == mObjectClass->GetHLATSOlengthAttributeHandle())
    {
      mHLATSOlength.decode(attributeHandleValue.second);
      mLastUpdated |= kHLATSOlengthBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAreflectionsReceivedAttributeHandle())
    {
      mHLAreflectionsReceived.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAreflectionsReceivedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAupdatesSentAttributeHandle())
    {
      mHLAupdatesSent.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAupdatesSentBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAinteractionsReceivedAttributeHandle())
    {
      mHLAinteractionsReceived.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAinteractionsReceivedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAinteractionsSentAttributeHandle())
    {
      mHLAinteractionsSent.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAinteractionsSentBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAobjectInstancesThatCanBeDeletedAttributeHandle())
    {
      mHLAobjectInstancesThatCanBeDeleted.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAobjectInstancesThatCanBeDeletedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAobjectInstancesUpdatedAttributeHandle())
    {
      mHLAobjectInstancesUpdated.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAobjectInstancesUpdatedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAobjectInstancesReflectedAttributeHandle())
    {
      mHLAobjectInstancesReflected.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAobjectInstancesReflectedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAobjectInstancesDeletedAttributeHandle())
    {
      mHLAobjectInstancesDeleted.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAobjectInstancesDeletedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAobjectInstancesRemovedAttributeHandle())
    {
      mHLAobjectInstancesRemoved.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAobjectInstancesRemovedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAobjectInstancesRegisteredAttributeHandle())
    {
      mHLAobjectInstancesRegistered.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAobjectInstancesRegisteredBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAobjectInstancesDiscoveredAttributeHandle())
    {
      mHLAobjectInstancesDiscovered.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAobjectInstancesDiscoveredBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAtimeGrantedTimeAttributeHandle())
    {
      mHLAtimeGrantedTime.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAtimeGrantedTimeBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAtimeAdvancingTimeAttributeHandle())
    {
      mHLAtimeAdvancingTime.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAtimeAdvancingTimeBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAconveyRegionDesignatorSetsAttributeHandle())
    {
      mHLAconveyRegionDesignatorSets.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAconveyRegionDesignatorSetsBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAconveyProducingFederateAttributeHandle())
    {
      mHLAconveyProducingFederate.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAconveyProducingFederateBit;
    }
  } // for (auto& attributeHandleValue : attributes)
    ExecuteUpdateCallbacks();
} // HLAfederate::ReflectAttributeValues

void HLAfederate::ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributeHandles)
{
  rti1516ev::AttributeHandleValueMap updateAttributes;
  for (auto& attributeHandle : attributeHandles)
  {
    if (attributeHandle == mObjectClass->GetHLAfederateHandleAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAfederateHandle.encode()));
      mDirty &= ~kHLAfederateHandleBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAfederateNameAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAfederateName.encode()));
      mDirty &= ~kHLAfederateNameBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAfederateTypeAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAfederateType.encode()));
      mDirty &= ~kHLAfederateTypeBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAfederateHostAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAfederateHost.encode()));
      mDirty &= ~kHLAfederateHostBit;
    }
    else if (attributeHandle == mObjectClass->GetHLARTIversionAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLARTIversion.encode()));
      mDirty &= ~kHLARTIversionBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAFOMmoduleDesignatorListAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAFOMmoduleDesignatorList.encode()));
      mDirty &= ~kHLAFOMmoduleDesignatorListBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAtimeConstrainedAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAtimeConstrained.encode()));
      mDirty &= ~kHLAtimeConstrainedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAtimeRegulatingAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAtimeRegulating.encode()));
      mDirty &= ~kHLAtimeRegulatingBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAasynchronousDeliveryAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAasynchronousDelivery.encode()));
      mDirty &= ~kHLAasynchronousDeliveryBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAfederateStateAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAfederateState.encode()));
      mDirty &= ~kHLAfederateStateBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAtimeManagerStateAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAtimeManagerState.encode()));
      mDirty &= ~kHLAtimeManagerStateBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAlogicalTimeAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAlogicalTime.encode()));
      mDirty &= ~kHLAlogicalTimeBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAlookaheadAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAlookahead.encode()));
      mDirty &= ~kHLAlookaheadBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAGALTAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAGALT.encode()));
      mDirty &= ~kHLAGALTBit;
    }
    else if (attributeHandle == mObjectClass->GetHLALITSAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLALITS.encode()));
      mDirty &= ~kHLALITSBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAROlengthAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAROlength.encode()));
      mDirty &= ~kHLAROlengthBit;
    }
    else if (attributeHandle == mObjectClass->GetHLATSOlengthAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLATSOlength.encode()));
      mDirty &= ~kHLATSOlengthBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAreflectionsReceivedAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAreflectionsReceived.encode()));
      mDirty &= ~kHLAreflectionsReceivedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAupdatesSentAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAupdatesSent.encode()));
      mDirty &= ~kHLAupdatesSentBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAinteractionsReceivedAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAinteractionsReceived.encode()));
      mDirty &= ~kHLAinteractionsReceivedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAinteractionsSentAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAinteractionsSent.encode()));
      mDirty &= ~kHLAinteractionsSentBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAobjectInstancesThatCanBeDeletedAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAobjectInstancesThatCanBeDeleted.encode()));
      mDirty &= ~kHLAobjectInstancesThatCanBeDeletedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAobjectInstancesUpdatedAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAobjectInstancesUpdated.encode()));
      mDirty &= ~kHLAobjectInstancesUpdatedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAobjectInstancesReflectedAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAobjectInstancesReflected.encode()));
      mDirty &= ~kHLAobjectInstancesReflectedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAobjectInstancesDeletedAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAobjectInstancesDeleted.encode()));
      mDirty &= ~kHLAobjectInstancesDeletedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAobjectInstancesRemovedAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAobjectInstancesRemoved.encode()));
      mDirty &= ~kHLAobjectInstancesRemovedBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAobjectInstancesRegisteredAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAobjectInstancesRegistered.encode()));
      mDirty &= ~kHLAobjectInstancesRegisteredBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAobjectInstancesDiscoveredAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAobjectInstancesDiscovered.encode()));
      mDirty &= ~kHLAobjectInstancesDiscoveredBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAtimeGrantedTimeAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAtimeGrantedTime.encode()));
      mDirty &= ~kHLAtimeGrantedTimeBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAtimeAdvancingTimeAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAtimeAdvancingTime.encode()));
      mDirty &= ~kHLAtimeAdvancingTimeBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAconveyRegionDesignatorSetsAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAconveyRegionDesignatorSets.encode()));
      mDirty &= ~kHLAconveyRegionDesignatorSetsBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAconveyProducingFederateAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAconveyProducingFederate.encode()));
      mDirty &= ~kHLAconveyProducingFederateBit;
    }
  } // for (auto& attributeHandleValue : attributes)
  mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, updateAttributes, rti1516ev::VariableLengthData());
} // HLAfederate::ReflectAttributeValues

uint32_t HLAfederate::RegisterUpdateCallback(UpdateCallbackType callback)
{
  mLastCallbackToken++;
  mUpdateCallbacks.insert(std::make_pair(mLastCallbackToken, callback));
  return mLastCallbackToken;
}

void HLAfederate::UnregisterUpdateCallback(uint32_t callbackToken)
{
  mUpdateCallbacks.erase(callbackToken);
}

void HLAfederate::ExecuteUpdateCallbacks()
{
  for (auto& callbackEntry : mUpdateCallbacks)
  {
    auto& callback = callbackEntry.second;
    callback(this);
  }
}

// object class type 'HLAfederation'
HLAfederationObjectClass::HLAfederationObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAmanagerObjectClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mObjectClassHandle = rtiAmbassador->getObjectClassHandle(L"HLAobjectRoot.HLAmanager.HLAfederation");
  // attribute HLAfederationName : HLAunicodeString
  mHLAfederationNameAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAfederationName");
  // attribute HLAfederatesInFederation : HLAhandleList
  mHLAfederatesInFederationAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAfederatesInFederation");
  // attribute HLARTIversion : HLAunicodeString
  mHLARTIversionAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLARTIversion");
  // attribute HLAMIMdesignator : HLAunicodeString
  mHLAMIMdesignatorAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAMIMdesignator");
  // attribute HLAFOMmoduleDesignatorList : HLAmoduleDesignatorList
  mHLAFOMmoduleDesignatorListAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAFOMmoduleDesignatorList");
  // attribute HLAcurrentFDD : HLAunicodeString
  mHLAcurrentFDDAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAcurrentFDD");
  // attribute HLAtimeImplementationName : HLAunicodeString
  mHLAtimeImplementationNameAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAtimeImplementationName");
  // attribute HLAlastSaveName : HLAunicodeString
  mHLAlastSaveNameAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAlastSaveName");
  // attribute HLAlastSaveTime : HLAlogicalTime
  mHLAlastSaveTimeAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAlastSaveTime");
  // attribute HLAnextSaveName : HLAunicodeString
  mHLAnextSaveNameAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAnextSaveName");
  // attribute HLAnextSaveTime : HLAlogicalTime
  mHLAnextSaveTimeAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAnextSaveTime");
  // attribute HLAautoProvide : HLAswitch
  mHLAautoProvideAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"HLAautoProvide");
}

void HLAfederationObjectClass::Publish()
{
  if (!mPublished)
  {
    rti1516ev::AttributeHandleSet attributes = GetAllAttributeHandles();
    mRtiAmbassador->publishObjectClassAttributes(mObjectClassHandle, attributes);
    mPublished = true;
  }
}

void HLAfederationObjectClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishObjectClass(mObjectClassHandle);
    mPublished = false;
  }
}

void HLAfederationObjectClass::Subscribe()
{
  if (!mSubscribed)
  {
    rti1516ev::AttributeHandleSet attributes = GetAllAttributeHandles();
    mRtiAmbassador->subscribeObjectClassAttributes(mObjectClassHandle, attributes);
    mRtiAmbassador->setObjectClassDeliverToSelf(mObjectClassHandle, true);
    mSubscribed = true;
  }
}

void HLAfederationObjectClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeObjectClass(mObjectClassHandle);
    mSubscribed = false;
  }
}

void HLAfederationObjectClass::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle, const std::wstring& instanceName)
{
  assert(mObjectInstancesByName.find(instanceName) == mObjectInstancesByName.end());
  assert(mObjectInstancesByHandle.find(instanceHandle) == mObjectInstancesByHandle.end());
  HLAfederation* newObject = new HLAfederation(this, instanceName, mRtiAmbassador);
  newObject->mObjectInstanceHandle = instanceHandle;
  newObject->mIsOwner = false;
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  mObjectInstancesByHandle.insert(std::make_pair(instanceHandle, newObject));
}

void HLAfederationObjectClass::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  std::wstring instanceName = mRtiAmbassador->getObjectInstanceName(theObject);
  auto iter = mObjectInstancesByName.find(instanceName);
  assert(iter != mObjectInstancesByName.end());
  auto* objectInstance = iter->second;
  objectInstance->mObjectInstanceHandle = rti1516ev::ObjectInstanceHandle();
  mObjectInstancesByName.erase(iter);
  mObjectInstancesByHandle.erase(theObject);
}

IHLAfederation* HLAfederationObjectClass::GetObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

IHLAfederation* HLAfederationObjectClass::GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle)
{
  auto iter = mObjectInstancesByHandle.find(instanceHandle);
  if (iter != mObjectInstancesByHandle.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

IHLAfederation* HLAfederationObjectClass::CreateObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return nullptr;
  }
  if (!mPublished)
  {
    throw rti1516ev::ObjectClassNotPublished(L"HLAfederation");
  }
  HLAfederation* newObject = new HLAfederation(this, instanceName, mRtiAmbassador);
  ObjectClassRegistry::GetInstance()->RegisterObjectInstanceName(instanceName, [this, newObject, instanceName](bool success) {
    if (success) {
      rti1516ev::ObjectInstanceHandle instanceHandle = mRtiAmbassador->registerObjectInstance(mObjectClassHandle, instanceName);
      newObject->mObjectInstanceHandle = instanceHandle;
      newObject->mIsOwner = true;
      mObjectInstancesByHandle.insert(std::make_pair(instanceHandle, newObject));
    }
  });
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  return newObject;
}

rti1516ev::AttributeHandleSet HLAfederationObjectClass::GetAllAttributeHandles()
{
  rti1516ev::AttributeHandleSet result;
  result.insert(GetHLAprivilegeToDeleteObjectAttributeHandle());
  result.insert(GetHLAfederationNameAttributeHandle());
  result.insert(GetHLAfederatesInFederationAttributeHandle());
  result.insert(GetHLARTIversionAttributeHandle());
  result.insert(GetHLAMIMdesignatorAttributeHandle());
  result.insert(GetHLAFOMmoduleDesignatorListAttributeHandle());
  result.insert(GetHLAcurrentFDDAttributeHandle());
  result.insert(GetHLAtimeImplementationNameAttributeHandle());
  result.insert(GetHLAlastSaveNameAttributeHandle());
  result.insert(GetHLAlastSaveTimeAttributeHandle());
  result.insert(GetHLAnextSaveNameAttributeHandle());
  result.insert(GetHLAnextSaveTimeAttributeHandle());
  result.insert(GetHLAautoProvideAttributeHandle());
  return result;
}

// object instances of type 'HLAfederation'
HLAfederation::HLAfederation()
{
}

HLAfederation::HLAfederation(HLAfederationObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* rtiAmbassador)
  : mObjectClass(objectClass)
  , mInstanceName(instanceName)
  , mRtiAmbassador(rtiAmbassador)
{
}

HLAfederation::~HLAfederation()
{
  if (mObjectInstanceHandle.isValid() && mIsOwner)
  {
    mRtiAmbassador->deleteObjectInstance(mObjectInstanceHandle, rti1516ev::VariableLengthData());
    mObjectInstanceHandle = rti1516ev::ObjectInstanceHandle();
    mIsOwner = false;
  }
}

// attribute HLAprivilegeToDeleteObject : HLAtoken
const std::vector<uint8_t>& HLAfederation::GetHLAprivilegeToDeleteObject() const
{
  return mHLAprivilegeToDeleteObject.get();
}

void HLAfederation::SetHLAprivilegeToDeleteObject(std::vector<uint8_t> newValue)
{
  mHLAprivilegeToDeleteObject.set(newValue);
  mDirty |= kHLAprivilegeToDeleteObjectBit;
}

// attribute HLAfederationName : HLAunicodeString
std::wstring HLAfederation::GetHLAfederationName() const
{
  return mHLAfederationName.get();
}

void HLAfederation::SetHLAfederationName(std::wstring newValue)
{
  mHLAfederationName.set(newValue);
  mDirty |= kHLAfederationNameBit;
}

// attribute HLAfederatesInFederation : HLAhandleList
const std::vector<rti1516ev::HLAhandle>& HLAfederation::GetHLAfederatesInFederation() const
{
  return mHLAfederatesInFederation.get();
}

void HLAfederation::SetHLAfederatesInFederation(std::vector<rti1516ev::HLAhandle> newValue)
{
  mHLAfederatesInFederation.set(newValue);
  mDirty |= kHLAfederatesInFederationBit;
}

// attribute HLARTIversion : HLAunicodeString
std::wstring HLAfederation::GetHLARTIversion() const
{
  return mHLARTIversion.get();
}

void HLAfederation::SetHLARTIversion(std::wstring newValue)
{
  mHLARTIversion.set(newValue);
  mDirty |= kHLARTIversionBit;
}

// attribute HLAMIMdesignator : HLAunicodeString
std::wstring HLAfederation::GetHLAMIMdesignator() const
{
  return mHLAMIMdesignator.get();
}

void HLAfederation::SetHLAMIMdesignator(std::wstring newValue)
{
  mHLAMIMdesignator.set(newValue);
  mDirty |= kHLAMIMdesignatorBit;
}

// attribute HLAFOMmoduleDesignatorList : HLAmoduleDesignatorList
const std::vector<std::wstring>& HLAfederation::GetHLAFOMmoduleDesignatorList() const
{
  return mHLAFOMmoduleDesignatorList.get();
}

void HLAfederation::SetHLAFOMmoduleDesignatorList(std::vector<std::wstring> newValue)
{
  mHLAFOMmoduleDesignatorList.set(newValue);
  mDirty |= kHLAFOMmoduleDesignatorListBit;
}

// attribute HLAcurrentFDD : HLAunicodeString
std::wstring HLAfederation::GetHLAcurrentFDD() const
{
  return mHLAcurrentFDD.get();
}

void HLAfederation::SetHLAcurrentFDD(std::wstring newValue)
{
  mHLAcurrentFDD.set(newValue);
  mDirty |= kHLAcurrentFDDBit;
}

// attribute HLAtimeImplementationName : HLAunicodeString
std::wstring HLAfederation::GetHLAtimeImplementationName() const
{
  return mHLAtimeImplementationName.get();
}

void HLAfederation::SetHLAtimeImplementationName(std::wstring newValue)
{
  mHLAtimeImplementationName.set(newValue);
  mDirty |= kHLAtimeImplementationNameBit;
}

// attribute HLAlastSaveName : HLAunicodeString
std::wstring HLAfederation::GetHLAlastSaveName() const
{
  return mHLAlastSaveName.get();
}

void HLAfederation::SetHLAlastSaveName(std::wstring newValue)
{
  mHLAlastSaveName.set(newValue);
  mDirty |= kHLAlastSaveNameBit;
}

// attribute HLAlastSaveTime : HLAlogicalTime
const std::vector<uint8_t>& HLAfederation::GetHLAlastSaveTime() const
{
  return mHLAlastSaveTime.get();
}

void HLAfederation::SetHLAlastSaveTime(std::vector<uint8_t> newValue)
{
  mHLAlastSaveTime.set(newValue);
  mDirty |= kHLAlastSaveTimeBit;
}

// attribute HLAnextSaveName : HLAunicodeString
std::wstring HLAfederation::GetHLAnextSaveName() const
{
  return mHLAnextSaveName.get();
}

void HLAfederation::SetHLAnextSaveName(std::wstring newValue)
{
  mHLAnextSaveName.set(newValue);
  mDirty |= kHLAnextSaveNameBit;
}

// attribute HLAnextSaveTime : HLAlogicalTime
const std::vector<uint8_t>& HLAfederation::GetHLAnextSaveTime() const
{
  return mHLAnextSaveTime.get();
}

void HLAfederation::SetHLAnextSaveTime(std::vector<uint8_t> newValue)
{
  mHLAnextSaveTime.set(newValue);
  mDirty |= kHLAnextSaveTimeBit;
}

// attribute HLAautoProvide : HLAswitch
HLAswitch HLAfederation::GetHLAautoProvide() const
{
  return static_cast<HLAswitch>(mHLAautoProvide.get());
}

void HLAfederation::SetHLAautoProvide(HLAswitch newValue)
{
  mHLAautoProvide.set(newValue);
  mDirty |= kHLAautoProvideBit;
}

rti1516ev::AttributeHandleValueMap HLAfederation::GetAllAttributeValues() const
{
  rti1516ev::AttributeHandleValueMap result;
  result[mObjectClass->GetHLAprivilegeToDeleteObjectAttributeHandle()] = mHLAprivilegeToDeleteObject.encode();
  result[mObjectClass->GetHLAfederationNameAttributeHandle()] = mHLAfederationName.encode();
  result[mObjectClass->GetHLAfederatesInFederationAttributeHandle()] = mHLAfederatesInFederation.encode();
  result[mObjectClass->GetHLARTIversionAttributeHandle()] = mHLARTIversion.encode();
  result[mObjectClass->GetHLAMIMdesignatorAttributeHandle()] = mHLAMIMdesignator.encode();
  result[mObjectClass->GetHLAFOMmoduleDesignatorListAttributeHandle()] = mHLAFOMmoduleDesignatorList.encode();
  result[mObjectClass->GetHLAcurrentFDDAttributeHandle()] = mHLAcurrentFDD.encode();
  result[mObjectClass->GetHLAtimeImplementationNameAttributeHandle()] = mHLAtimeImplementationName.encode();
  result[mObjectClass->GetHLAlastSaveNameAttributeHandle()] = mHLAlastSaveName.encode();
  result[mObjectClass->GetHLAlastSaveTimeAttributeHandle()] = mHLAlastSaveTime.encode();
  result[mObjectClass->GetHLAnextSaveNameAttributeHandle()] = mHLAnextSaveName.encode();
  result[mObjectClass->GetHLAnextSaveTimeAttributeHandle()] = mHLAnextSaveTime.encode();
  result[mObjectClass->GetHLAautoProvideAttributeHandle()] = mHLAautoProvide.encode();
  return result;
}

rti1516ev::AttributeHandleValueMap HLAfederation::GetModifiedAttributeValues() const
{
  rti1516ev::AttributeHandleValueMap result;
  if (mDirty & kHLAfederationNameBit)
  {
    result[mObjectClass->GetHLAfederationNameAttributeHandle()] = mHLAfederationName.encode();
  }
  if (mDirty & kHLAfederatesInFederationBit)
  {
    result[mObjectClass->GetHLAfederatesInFederationAttributeHandle()] = mHLAfederatesInFederation.encode();
  }
  if (mDirty & kHLARTIversionBit)
  {
    result[mObjectClass->GetHLARTIversionAttributeHandle()] = mHLARTIversion.encode();
  }
  if (mDirty & kHLAMIMdesignatorBit)
  {
    result[mObjectClass->GetHLAMIMdesignatorAttributeHandle()] = mHLAMIMdesignator.encode();
  }
  if (mDirty & kHLAFOMmoduleDesignatorListBit)
  {
    result[mObjectClass->GetHLAFOMmoduleDesignatorListAttributeHandle()] = mHLAFOMmoduleDesignatorList.encode();
  }
  if (mDirty & kHLAcurrentFDDBit)
  {
    result[mObjectClass->GetHLAcurrentFDDAttributeHandle()] = mHLAcurrentFDD.encode();
  }
  if (mDirty & kHLAtimeImplementationNameBit)
  {
    result[mObjectClass->GetHLAtimeImplementationNameAttributeHandle()] = mHLAtimeImplementationName.encode();
  }
  if (mDirty & kHLAlastSaveNameBit)
  {
    result[mObjectClass->GetHLAlastSaveNameAttributeHandle()] = mHLAlastSaveName.encode();
  }
  if (mDirty & kHLAlastSaveTimeBit)
  {
    result[mObjectClass->GetHLAlastSaveTimeAttributeHandle()] = mHLAlastSaveTime.encode();
  }
  if (mDirty & kHLAnextSaveNameBit)
  {
    result[mObjectClass->GetHLAnextSaveNameAttributeHandle()] = mHLAnextSaveName.encode();
  }
  if (mDirty & kHLAnextSaveTimeBit)
  {
    result[mObjectClass->GetHLAnextSaveTimeAttributeHandle()] = mHLAnextSaveTime.encode();
  }
  if (mDirty & kHLAautoProvideBit)
  {
    result[mObjectClass->GetHLAautoProvideAttributeHandle()] = mHLAautoProvide.encode();
  }
  return result;
}

void HLAfederation::UpdateAllAttributeValues()
{
  if (IsValid())
  {
    rti1516ev::AttributeHandleValueMap attributes = GetAllAttributeValues();
    mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData());
  }
}

void HLAfederation::UpdateAllAttributeValues(const rti1516ev::LogicalTime& time)
{
  if (IsValid())
  {
    rti1516ev::AttributeHandleValueMap attributes = GetAllAttributeValues();
    mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData(), time);
  }
}

void HLAfederation::UpdateModifiedAttributeValues()
{
  if (IsValid())
  {
    rti1516ev::AttributeHandleValueMap attributes = GetModifiedAttributeValues();
    mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData());
    mDirty = kNone;
  }
}

void HLAfederation::UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time)
{
  if (IsValid())
  {
    rti1516ev::AttributeHandleValueMap attributes = GetModifiedAttributeValues();
    mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, attributes, rti1516ev::VariableLengthData(), time);
    mDirty = kNone;
  }
}

void HLAfederation::ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes)
{
  for (auto& attributeHandleValue : attributes)
  {
    rti1516ev::AttributeHandle attributeHandle = attributeHandleValue.first;
    if (attributeHandle == mObjectClass->GetHLAfederationNameAttributeHandle())
    {
      mHLAfederationName.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAfederationNameBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAfederatesInFederationAttributeHandle())
    {
      mHLAfederatesInFederation.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAfederatesInFederationBit;
    }
    else if (attributeHandle == mObjectClass->GetHLARTIversionAttributeHandle())
    {
      mHLARTIversion.decode(attributeHandleValue.second);
      mLastUpdated |= kHLARTIversionBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAMIMdesignatorAttributeHandle())
    {
      mHLAMIMdesignator.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAMIMdesignatorBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAFOMmoduleDesignatorListAttributeHandle())
    {
      mHLAFOMmoduleDesignatorList.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAFOMmoduleDesignatorListBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAcurrentFDDAttributeHandle())
    {
      mHLAcurrentFDD.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAcurrentFDDBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAtimeImplementationNameAttributeHandle())
    {
      mHLAtimeImplementationName.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAtimeImplementationNameBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAlastSaveNameAttributeHandle())
    {
      mHLAlastSaveName.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAlastSaveNameBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAlastSaveTimeAttributeHandle())
    {
      mHLAlastSaveTime.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAlastSaveTimeBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAnextSaveNameAttributeHandle())
    {
      mHLAnextSaveName.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAnextSaveNameBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAnextSaveTimeAttributeHandle())
    {
      mHLAnextSaveTime.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAnextSaveTimeBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAautoProvideAttributeHandle())
    {
      mHLAautoProvide.decode(attributeHandleValue.second);
      mLastUpdated |= kHLAautoProvideBit;
    }
  } // for (auto& attributeHandleValue : attributes)
    ExecuteUpdateCallbacks();
} // HLAfederation::ReflectAttributeValues

void HLAfederation::ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributeHandles)
{
  rti1516ev::AttributeHandleValueMap updateAttributes;
  for (auto& attributeHandle : attributeHandles)
  {
    if (attributeHandle == mObjectClass->GetHLAfederationNameAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAfederationName.encode()));
      mDirty &= ~kHLAfederationNameBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAfederatesInFederationAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAfederatesInFederation.encode()));
      mDirty &= ~kHLAfederatesInFederationBit;
    }
    else if (attributeHandle == mObjectClass->GetHLARTIversionAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLARTIversion.encode()));
      mDirty &= ~kHLARTIversionBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAMIMdesignatorAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAMIMdesignator.encode()));
      mDirty &= ~kHLAMIMdesignatorBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAFOMmoduleDesignatorListAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAFOMmoduleDesignatorList.encode()));
      mDirty &= ~kHLAFOMmoduleDesignatorListBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAcurrentFDDAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAcurrentFDD.encode()));
      mDirty &= ~kHLAcurrentFDDBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAtimeImplementationNameAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAtimeImplementationName.encode()));
      mDirty &= ~kHLAtimeImplementationNameBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAlastSaveNameAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAlastSaveName.encode()));
      mDirty &= ~kHLAlastSaveNameBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAlastSaveTimeAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAlastSaveTime.encode()));
      mDirty &= ~kHLAlastSaveTimeBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAnextSaveNameAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAnextSaveName.encode()));
      mDirty &= ~kHLAnextSaveNameBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAnextSaveTimeAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAnextSaveTime.encode()));
      mDirty &= ~kHLAnextSaveTimeBit;
    }
    else if (attributeHandle == mObjectClass->GetHLAautoProvideAttributeHandle())
    {
      updateAttributes.insert(std::make_pair(attributeHandle, mHLAautoProvide.encode()));
      mDirty &= ~kHLAautoProvideBit;
    }
  } // for (auto& attributeHandleValue : attributes)
  mRtiAmbassador->updateAttributeValues(mObjectInstanceHandle, updateAttributes, rti1516ev::VariableLengthData());
} // HLAfederation::ReflectAttributeValues

uint32_t HLAfederation::RegisterUpdateCallback(UpdateCallbackType callback)
{
  mLastCallbackToken++;
  mUpdateCallbacks.insert(std::make_pair(mLastCallbackToken, callback));
  return mLastCallbackToken;
}

void HLAfederation::UnregisterUpdateCallback(uint32_t callbackToken)
{
  mUpdateCallbacks.erase(callbackToken);
}

void HLAfederation::ExecuteUpdateCallbacks()
{
  for (auto& callbackEntry : mUpdateCallbacks)
  {
    auto& callback = callbackEntry.second;
    callback(this);
  }
}

 

ObjectClassRegistry* ObjectClassRegistry::sClassRegistry = nullptr;

ObjectClassRegistry::ObjectClassRegistry()
{
  assert(sClassRegistry == nullptr);
  sClassRegistry = this;
}

ObjectClassRegistry::~ObjectClassRegistry()
{
  sClassRegistry = nullptr;
}

void ObjectClassRegistry::Initialize(rti1516ev::RTIambassador* rtiAmbassador)
{
  mRtiAmbassador = rtiAmbassador;
  mHLAobjectRootObjectClass = std::unique_ptr<HLAobjectRootObjectClass>(new HLAobjectRootObjectClass(mRtiAmbassador));
  mHLAmanagerObjectClass = std::unique_ptr<HLAmanagerObjectClass>(new HLAmanagerObjectClass(mRtiAmbassador, mHLAobjectRootObjectClass.get()));
  mHLAfederateObjectClass = std::unique_ptr<HLAfederateObjectClass>(new HLAfederateObjectClass(mRtiAmbassador, mHLAmanagerObjectClass.get()));
  mHLAfederationObjectClass = std::unique_ptr<HLAfederationObjectClass>(new HLAfederationObjectClass(mRtiAmbassador, mHLAmanagerObjectClass.get()));
} // Initialize

void ObjectClassRegistry::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName)
{
  rti1516ev::ObjectClassHandle theObjectClass = mRtiAmbassador->getKnownObjectClassHandle(theObject);
  if (theObjectClass == mHLAobjectRootObjectClass->GetObjectClassHandle())
  {
    mHLAobjectRootObjectClass->DiscoverObjectInstance(theObject, theObjectInstanceName);
  }
  else if (theObjectClass == mHLAmanagerObjectClass->GetObjectClassHandle())
  {
    mHLAmanagerObjectClass->DiscoverObjectInstance(theObject, theObjectInstanceName);
  }
  else if (theObjectClass == mHLAfederateObjectClass->GetObjectClassHandle())
  {
    mHLAfederateObjectClass->DiscoverObjectInstance(theObject, theObjectInstanceName);
  }
  else if (theObjectClass == mHLAfederationObjectClass->GetObjectClassHandle())
  {
    mHLAfederationObjectClass->DiscoverObjectInstance(theObject, theObjectInstanceName);
  }
}

void ObjectClassRegistry::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  rti1516ev::ObjectClassHandle theObjectClass = mRtiAmbassador->getKnownObjectClassHandle(theObject);
  if (theObjectClass == mHLAobjectRootObjectClass->GetObjectClassHandle())
  {
    mHLAobjectRootObjectClass->RemoveObjectInstance(theObject);
  }
  else if (theObjectClass == mHLAmanagerObjectClass->GetObjectClassHandle())
  {
    mHLAmanagerObjectClass->RemoveObjectInstance(theObject);
  }
  else if (theObjectClass == mHLAfederateObjectClass->GetObjectClassHandle())
  {
    mHLAfederateObjectClass->RemoveObjectInstance(theObject);
  }
  else if (theObjectClass == mHLAfederationObjectClass->GetObjectClassHandle())
  {
    mHLAfederationObjectClass->RemoveObjectInstance(theObject);
  }
}

void ObjectClassRegistry::ReflectAttributeValues(rti1516ev::ObjectInstanceHandle theObject, const rti1516ev::AttributeHandleValueMap & attributes)
{
  rti1516ev::ObjectClassHandle theObjectClass = mRtiAmbassador->getKnownObjectClassHandle(theObject);
  if (theObjectClass == mHLAobjectRootObjectClass->GetObjectClassHandle())
  {
    static_cast<HLAobjectRoot*>(mHLAobjectRootObjectClass->GetObjectInstance(theObject))->ReflectAttributeValues(attributes);
  }
  else if (theObjectClass == mHLAfederateObjectClass->GetObjectClassHandle())
  {
    static_cast<HLAfederate*>(mHLAfederateObjectClass->GetObjectInstance(theObject))->ReflectAttributeValues(attributes);
  }
  else if (theObjectClass == mHLAfederationObjectClass->GetObjectClassHandle())
  {
    static_cast<HLAfederation*>(mHLAfederationObjectClass->GetObjectInstance(theObject))->ReflectAttributeValues(attributes);
  }
}

void ObjectClassRegistry::ProvideAttributeValues(rti1516ev::ObjectClassHandle theObjectClass, rti1516ev::ObjectInstanceHandle theObject, const rti1516ev::AttributeHandleSet& attributeHandles)
{
  if (theObjectClass == mHLAobjectRootObjectClass->GetObjectClassHandle())
  {
    static_cast<HLAobjectRoot*>(mHLAobjectRootObjectClass->GetObjectInstance(theObject))->ProvideAttributeValues(attributeHandles);
  }
  else if (theObjectClass == mHLAfederateObjectClass->GetObjectClassHandle())
  {
    static_cast<HLAfederate*>(mHLAfederateObjectClass->GetObjectInstance(theObject))->ProvideAttributeValues(attributeHandles);
  }
  else if (theObjectClass == mHLAfederationObjectClass->GetObjectClassHandle())
  {
    static_cast<HLAfederation*>(mHLAfederationObjectClass->GetObjectInstance(theObject))->ProvideAttributeValues(attributeHandles);
  }
}

void ObjectClassRegistry::RegisterObjectInstanceName(const std::wstring& theObjectInstanceName, std::function<void(bool)> completionCallback)
{
  mInstanceNameReservationCallbacks.insert(std::make_pair(theObjectInstanceName, completionCallback));
  mRtiAmbassador->reserveObjectInstanceName(theObjectInstanceName);
}

void ObjectClassRegistry::ObjectInstanceNameReservationSucceeded(const std::wstring& theObjectInstanceName)
{
  auto iter = mInstanceNameReservationCallbacks.find(theObjectInstanceName);
  iter->second(true);
  mInstanceNameReservationCallbacks.erase(iter);
}

void ObjectClassRegistry::ObjectInstanceNameReservationFailed(const std::wstring& theObjectInstanceName)
{
  auto iter = mInstanceNameReservationCallbacks.find(theObjectInstanceName);
  iter->second(false);
  mInstanceNameReservationCallbacks.erase(iter);
}

IObjectClassRegistry* GetObjectClassRegistry()
{
  return ObjectClassRegistry::GetInstance();
}

} // namespace OpenRTI
} // namespace Mom
