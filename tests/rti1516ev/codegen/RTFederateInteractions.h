
// Code automatically generated by T4 template from D:\vfs\OpenRTI-codegen\tests\rti1516ev\codegen\\RTFederate.xml, do not edit
#pragma once

#include <vector>
#include "RTI/Handle.h"
#include "RTI/RTIambassador.h"
#include "RTI/encoding/BasicDataElements.h"
#include "RTI/encoding/HLAfixedRecord.h"
#include "RTI/encoding/HLAfixedArray.h"
#include "RTI/encoding/HLAvariableArray.h"
#include "RTI/encoding/HLAopaqueData.h"
#include "RTI/encoding/HLAhandle.h"
#include "RTFederateInteractionInterfaces.h"
#include "RTFederateEncodings.h"

namespace NDistSimIB {
namespace NRTFederateEncoding {

class HLAinteractionRoot;
class HLAinteractionRootInteractionClass : public IHLAinteractionRootInteractionClass
{
  public:
    // IHLAinteractionRootInteractionClass
    HLAinteractionRootInteractionClass() = default;
    virtual ~HLAinteractionRootInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send() override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    HLAinteractionRootInteractionClass(rti1516ev::RTIambassador* rtiAmbassador);
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
};


class MeasurementInit;
class MeasurementInitInteractionClass : public IMeasurementInitInteractionClass
{
  public:
    // IMeasurementInitInteractionClass
    MeasurementInitInteractionClass() = default;
    virtual ~MeasurementInitInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(const std::vector<uint8_t>& Dummy) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    MeasurementInitInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass);

    // parameter Dummy : HLAopaqueData
    rti1516ev::ParameterHandle GetDummyParameterHandle() const { return mDummyParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Dummy : HLAopaqueData
    rti1516ev::ParameterHandle mDummyParameterHandle;
};


class MeasurementStop;
class MeasurementStopInteractionClass : public IMeasurementStopInteractionClass
{
  public:
    // IMeasurementStopInteractionClass
    MeasurementStopInteractionClass() = default;
    virtual ~MeasurementStopInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(const std::wstring& NextFederationSuffix) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    MeasurementStopInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass);

    // parameter NextFederationSuffix : HLAunicodeString
    rti1516ev::ParameterHandle GetNextFederationSuffixParameterHandle() const { return mNextFederationSuffixParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter NextFederationSuffix : HLAunicodeString
    rti1516ev::ParameterHandle mNextFederationSuffixParameterHandle;
};


class KeyEvent;
class KeyEventInteractionClass : public IKeyEventInteractionClass
{
  public:
    // IKeyEventInteractionClass
    KeyEventInteractionClass() = default;
    virtual ~KeyEventInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(int32_t KeyCode) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    KeyEventInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass);

    // parameter KeyCode : HLAinteger32LE
    rti1516ev::ParameterHandle GetKeyCodeParameterHandle() const { return mKeyCodeParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter KeyCode : HLAinteger32LE
    rti1516ev::ParameterHandle mKeyCodeParameterHandle;
};


class TextLog;
class TextLogInteractionClass : public ITextLogInteractionClass
{
  public:
    // ITextLogInteractionClass
    TextLogInteractionClass() = default;
    virtual ~TextLogInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(const std::wstring& Sender, const std::wstring& Text) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    TextLogInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass);

    // parameter Sender : HLAunicodeString
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mSenderParameterHandle; }
    // parameter Text : HLAunicodeString
    rti1516ev::ParameterHandle GetTextParameterHandle() const { return mTextParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Sender : HLAunicodeString
    rti1516ev::ParameterHandle mSenderParameterHandle;
    // parameter Text : HLAunicodeString
    rti1516ev::ParameterHandle mTextParameterHandle;
};


class DOMemberTransmitData;
class DOMemberTransmitDataInteractionClass : public IDOMemberTransmitDataInteractionClass
{
  public:
    // IDOMemberTransmitDataInteractionClass
    DOMemberTransmitDataInteractionClass() = default;
    virtual ~DOMemberTransmitDataInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle ObjInstanceHandle, const std::string& ConnectionType, const std::vector<uint8_t>& DataBytes) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    DOMemberTransmitDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass);

    // parameter ObjInstanceHandle : HLAhandle
    rti1516ev::ParameterHandle GetObjInstanceHandleParameterHandle() const { return mObjInstanceHandleParameterHandle; }
    // parameter ConnectionType : HLAASCIIstring
    rti1516ev::ParameterHandle GetConnectionTypeParameterHandle() const { return mConnectionTypeParameterHandle; }
    // parameter DataBytes : HLAopaqueData
    rti1516ev::ParameterHandle GetDataBytesParameterHandle() const { return mDataBytesParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter ObjInstanceHandle : HLAhandle
    rti1516ev::ParameterHandle mObjInstanceHandleParameterHandle;
    // parameter ConnectionType : HLAASCIIstring
    rti1516ev::ParameterHandle mConnectionTypeParameterHandle;
    // parameter DataBytes : HLAopaqueData
    rti1516ev::ParameterHandle mDataBytesParameterHandle;
};


class SystemVariableUpdate;
class SystemVariableUpdateInteractionClass : public ISystemVariableUpdateInteractionClass
{
  public:
    // ISystemVariableUpdateInteractionClass
    SystemVariableUpdateInteractionClass() = default;
    virtual ~SystemVariableUpdateInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(const std::string& Id, const std::vector<uint8_t>& Value, int32_t Client, bool HasChanged) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    SystemVariableUpdateInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass);

    // parameter Id : HLAASCIIstring
    rti1516ev::ParameterHandle GetIdParameterHandle() const { return mIdParameterHandle; }
    // parameter Value : HLAopaqueData
    rti1516ev::ParameterHandle GetValueParameterHandle() const { return mValueParameterHandle; }
    // parameter Client : HLAinteger32LE
    rti1516ev::ParameterHandle GetClientParameterHandle() const { return mClientParameterHandle; }
    // parameter HasChanged : HLAboolean
    rti1516ev::ParameterHandle GetHasChangedParameterHandle() const { return mHasChangedParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Id : HLAASCIIstring
    rti1516ev::ParameterHandle mIdParameterHandle;
    // parameter Value : HLAopaqueData
    rti1516ev::ParameterHandle mValueParameterHandle;
    // parameter Client : HLAinteger32LE
    rti1516ev::ParameterHandle mClientParameterHandle;
    // parameter HasChanged : HLAboolean
    rti1516ev::ParameterHandle mHasChangedParameterHandle;
};


class SystemVariableModification;
class SystemVariableModificationInteractionClass : public ISystemVariableModificationInteractionClass
{
  public:
    // ISystemVariableModificationInteractionClass
    SystemVariableModificationInteractionClass() = default;
    virtual ~SystemVariableModificationInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(const std::vector<uint8_t>& Value) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    SystemVariableModificationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass);

    // parameter Value : HLAopaqueData
    rti1516ev::ParameterHandle GetValueParameterHandle() const { return mValueParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Value : HLAopaqueData
    rti1516ev::ParameterHandle mValueParameterHandle;
};


class ValueEntityUpdate;
class ValueEntityUpdateInteractionClass : public IValueEntityUpdateInteractionClass
{
  public:
    // IValueEntityUpdateInteractionClass
    ValueEntityUpdateInteractionClass() = default;
    virtual ~ValueEntityUpdateInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(const std::vector<uint8_t>& Id, const std::vector<uint8_t>& Value) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    ValueEntityUpdateInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass);

    // parameter Id : HLAopaqueData
    rti1516ev::ParameterHandle GetIdParameterHandle() const { return mIdParameterHandle; }
    // parameter Value : HLAopaqueData
    rti1516ev::ParameterHandle GetValueParameterHandle() const { return mValueParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Id : HLAopaqueData
    rti1516ev::ParameterHandle mIdParameterHandle;
    // parameter Value : HLAopaqueData
    rti1516ev::ParameterHandle mValueParameterHandle;
};


class BusMessage;
class BusMessageInteractionClass : public IBusMessageInteractionClass
{
  public:
    // IBusMessageInteractionClass
    BusMessageInteractionClass() = default;
    virtual ~BusMessageInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    BusMessageInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass);

    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mIsRequestParameterHandle; }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mChannelNameParameterHandle; }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBusTypeParameterHandle; }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mRequestingFederateParameterHandle; }
    // parameter Sender : HLAhandle
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mSenderParameterHandle; }
    // parameter Receiver : HLAhandle
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mReceiverParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle mIsRequestParameterHandle;
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle mChannelNameParameterHandle;
    // parameter BusType : BusType
    rti1516ev::ParameterHandle mBusTypeParameterHandle;
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle mRequestingFederateParameterHandle;
    // parameter Sender : HLAhandle
    rti1516ev::ParameterHandle mSenderParameterHandle;
    // parameter Receiver : HLAhandle
    rti1516ev::ParameterHandle mReceiverParameterHandle;
};


class EthPacket;
class EthPacketInteractionClass : public IEthPacketInteractionClass
{
  public:
    // IEthPacketInteractionClass
    EthPacketInteractionClass() = default;
    virtual ~EthPacketInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacket& Frame) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    EthPacketInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, BusMessageInteractionClass* baseClass);

    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAhandle
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAhandle
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Frame : EthernetPacket
    rti1516ev::ParameterHandle GetFrameParameterHandle() const { return mFrameParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Frame : EthernetPacket
    rti1516ev::ParameterHandle mFrameParameterHandle;
};


class EthPacketError;
class EthPacketErrorInteractionClass : public IEthPacketErrorInteractionClass
{
  public:
    // IEthPacketErrorInteractionClass
    EthPacketErrorInteractionClass() = default;
    virtual ~EthPacketErrorInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketError& Frame) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    EthPacketErrorInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, BusMessageInteractionClass* baseClass);

    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAhandle
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAhandle
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Frame : EthernetPacketError
    rti1516ev::ParameterHandle GetFrameParameterHandle() const { return mFrameParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Frame : EthernetPacketError
    rti1516ev::ParameterHandle mFrameParameterHandle;
};


class EthPacketErrorForwarded;
class EthPacketErrorForwardedInteractionClass : public IEthPacketErrorForwardedInteractionClass
{
  public:
    // IEthPacketErrorForwardedInteractionClass
    EthPacketErrorForwardedInteractionClass() = default;
    virtual ~EthPacketErrorForwardedInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketErrorForwarded& Frame) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    EthPacketErrorForwardedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, BusMessageInteractionClass* baseClass);

    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAhandle
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAhandle
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Frame : EthernetPacketErrorForwarded
    rti1516ev::ParameterHandle GetFrameParameterHandle() const { return mFrameParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Frame : EthernetPacketErrorForwarded
    rti1516ev::ParameterHandle mFrameParameterHandle;
};


class EthForwardedPacket;
class EthForwardedPacketInteractionClass : public IEthForwardedPacketInteractionClass
{
  public:
    // IEthForwardedPacketInteractionClass
    EthForwardedPacketInteractionClass() = default;
    virtual ~EthForwardedPacketInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketForwarded& Frame) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    EthForwardedPacketInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, BusMessageInteractionClass* baseClass);

    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAhandle
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAhandle
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Frame : EthernetPacketForwarded
    rti1516ev::ParameterHandle GetFrameParameterHandle() const { return mFrameParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Frame : EthernetPacketForwarded
    rti1516ev::ParameterHandle mFrameParameterHandle;
};


class EthStatus;
class EthStatusInteractionClass : public IEthStatusInteractionClass
{
  public:
    // IEthStatusInteractionClass
    EthStatusInteractionClass() = default;
    virtual ~EthStatusInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetStatus& Frame) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    EthStatusInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, BusMessageInteractionClass* baseClass);

    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAhandle
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAhandle
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Frame : EthernetStatus
    rti1516ev::ParameterHandle GetFrameParameterHandle() const { return mFrameParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Frame : EthernetStatus
    rti1516ev::ParameterHandle mFrameParameterHandle;
};


class CANMessage;
class CANMessageInteractionClass : public ICANMessageInteractionClass
{
  public:
    // ICANMessageInteractionClass
    CANMessageInteractionClass() = default;
    virtual ~CANMessageInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, int32_t Id, const CANFrame& Frame) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    CANMessageInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, BusMessageInteractionClass* baseClass);

    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAhandle
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAhandle
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Id : HLAinteger32LE
    rti1516ev::ParameterHandle GetIdParameterHandle() const { return mIdParameterHandle; }
    // parameter Frame : CANFrame
    rti1516ev::ParameterHandle GetFrameParameterHandle() const { return mFrameParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Id : HLAinteger32LE
    rti1516ev::ParameterHandle mIdParameterHandle;
    // parameter Frame : CANFrame
    rti1516ev::ParameterHandle mFrameParameterHandle;
};


class CANErrorFrame;
class CANErrorFrameInteractionClass : public ICANErrorFrameInteractionClass
{
  public:
    // ICANErrorFrameInteractionClass
    CANErrorFrameInteractionClass() = default;
    virtual ~CANErrorFrameInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const std::vector<uint8_t>& Frame) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    CANErrorFrameInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, BusMessageInteractionClass* baseClass);

    // parameter IsRequest : HLAboolean
    rti1516ev::ParameterHandle GetIsRequestParameterHandle() const { return mBaseClass->GetIsRequestParameterHandle(); }
    // parameter ChannelName : HLAASCIIstring
    rti1516ev::ParameterHandle GetChannelNameParameterHandle() const { return mBaseClass->GetChannelNameParameterHandle(); }
    // parameter BusType : BusType
    rti1516ev::ParameterHandle GetBusTypeParameterHandle() const { return mBaseClass->GetBusTypeParameterHandle(); }
    // parameter RequestingFederate : HLAhandle
    rti1516ev::ParameterHandle GetRequestingFederateParameterHandle() const { return mBaseClass->GetRequestingFederateParameterHandle(); }
    // parameter Sender : HLAhandle
    rti1516ev::ParameterHandle GetSenderParameterHandle() const { return mBaseClass->GetSenderParameterHandle(); }
    // parameter Receiver : HLAhandle
    rti1516ev::ParameterHandle GetReceiverParameterHandle() const { return mBaseClass->GetReceiverParameterHandle(); }
    // parameter Frame : HLAopaqueData
    rti1516ev::ParameterHandle GetFrameParameterHandle() const { return mFrameParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    BusMessageInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Frame : HLAopaqueData
    rti1516ev::ParameterHandle mFrameParameterHandle;
};


class PythonCommand;
class PythonCommandInteractionClass : public IPythonCommandInteractionClass
{
  public:
    // IPythonCommandInteractionClass
    PythonCommandInteractionClass() = default;
    virtual ~PythonCommandInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(const std::vector<uint8_t>& Code, const std::vector<uint8_t>& Target, const std::vector<uint8_t>& RefID) override;
    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    PythonCommandInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass);

    // parameter Code : HLAopaqueData
    rti1516ev::ParameterHandle GetCodeParameterHandle() const { return mCodeParameterHandle; }
    // parameter Target : HLAopaqueData
    rti1516ev::ParameterHandle GetTargetParameterHandle() const { return mTargetParameterHandle; }
    // parameter RefID : HLAopaqueData
    rti1516ev::ParameterHandle GetRefIDParameterHandle() const { return mRefIDParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter Code : HLAopaqueData
    rti1516ev::ParameterHandle mCodeParameterHandle;
    // parameter Target : HLAopaqueData
    rti1516ev::ParameterHandle mTargetParameterHandle;
    // parameter RefID : HLAopaqueData
    rti1516ev::ParameterHandle mRefIDParameterHandle;
};


 

class InteractionClassRegistry : public IInteractionClassRegistry
{
  public:
    InteractionClassRegistry();
    ~InteractionClassRegistry();
    void Initialize(rti1516ev::RTIambassador* rtiAmbassador);
    static InteractionClassRegistry* GetInstance() { return sClassRegistry; }

    IHLAinteractionRootInteractionClass* getHLAinteractionRootInteractionClass() const override { return mHLAinteractionRootInteractionClass.get(); }
    IMeasurementInitInteractionClass* getMeasurementInitInteractionClass() const override { return mMeasurementInitInteractionClass.get(); }
    IMeasurementStopInteractionClass* getMeasurementStopInteractionClass() const override { return mMeasurementStopInteractionClass.get(); }
    IKeyEventInteractionClass* getKeyEventInteractionClass() const override { return mKeyEventInteractionClass.get(); }
    ITextLogInteractionClass* getTextLogInteractionClass() const override { return mTextLogInteractionClass.get(); }
    IDOMemberTransmitDataInteractionClass* getDOMemberTransmitDataInteractionClass() const override { return mDOMemberTransmitDataInteractionClass.get(); }
    ISystemVariableUpdateInteractionClass* getSystemVariableUpdateInteractionClass() const override { return mSystemVariableUpdateInteractionClass.get(); }
    ISystemVariableModificationInteractionClass* getSystemVariableModificationInteractionClass() const override { return mSystemVariableModificationInteractionClass.get(); }
    IValueEntityUpdateInteractionClass* getValueEntityUpdateInteractionClass() const override { return mValueEntityUpdateInteractionClass.get(); }
    IBusMessageInteractionClass* getBusMessageInteractionClass() const override { return mBusMessageInteractionClass.get(); }
    IEthPacketInteractionClass* getEthPacketInteractionClass() const override { return mEthPacketInteractionClass.get(); }
    IEthPacketErrorInteractionClass* getEthPacketErrorInteractionClass() const override { return mEthPacketErrorInteractionClass.get(); }
    IEthPacketErrorForwardedInteractionClass* getEthPacketErrorForwardedInteractionClass() const override { return mEthPacketErrorForwardedInteractionClass.get(); }
    IEthForwardedPacketInteractionClass* getEthForwardedPacketInteractionClass() const override { return mEthForwardedPacketInteractionClass.get(); }
    IEthStatusInteractionClass* getEthStatusInteractionClass() const override { return mEthStatusInteractionClass.get(); }
    ICANMessageInteractionClass* getCANMessageInteractionClass() const override { return mCANMessageInteractionClass.get(); }
    ICANErrorFrameInteractionClass* getCANErrorFrameInteractionClass() const override { return mCANErrorFrameInteractionClass.get(); }
    IPythonCommandInteractionClass* getPythonCommandInteractionClass() const override { return mPythonCommandInteractionClass.get(); }

    void ReceiveInteraction(rti1516ev::InteractionClassHandle theInteraction, const rti1516ev::ParameterHandleValueMap & parameters);

  private:
    static InteractionClassRegistry* sClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    std::unique_ptr<HLAinteractionRootInteractionClass> mHLAinteractionRootInteractionClass;
    std::unique_ptr<MeasurementInitInteractionClass> mMeasurementInitInteractionClass;
    std::unique_ptr<MeasurementStopInteractionClass> mMeasurementStopInteractionClass;
    std::unique_ptr<KeyEventInteractionClass> mKeyEventInteractionClass;
    std::unique_ptr<TextLogInteractionClass> mTextLogInteractionClass;
    std::unique_ptr<DOMemberTransmitDataInteractionClass> mDOMemberTransmitDataInteractionClass;
    std::unique_ptr<SystemVariableUpdateInteractionClass> mSystemVariableUpdateInteractionClass;
    std::unique_ptr<SystemVariableModificationInteractionClass> mSystemVariableModificationInteractionClass;
    std::unique_ptr<ValueEntityUpdateInteractionClass> mValueEntityUpdateInteractionClass;
    std::unique_ptr<BusMessageInteractionClass> mBusMessageInteractionClass;
    std::unique_ptr<EthPacketInteractionClass> mEthPacketInteractionClass;
    std::unique_ptr<EthPacketErrorInteractionClass> mEthPacketErrorInteractionClass;
    std::unique_ptr<EthPacketErrorForwardedInteractionClass> mEthPacketErrorForwardedInteractionClass;
    std::unique_ptr<EthForwardedPacketInteractionClass> mEthForwardedPacketInteractionClass;
    std::unique_ptr<EthStatusInteractionClass> mEthStatusInteractionClass;
    std::unique_ptr<CANMessageInteractionClass> mCANMessageInteractionClass;
    std::unique_ptr<CANErrorFrameInteractionClass> mCANErrorFrameInteractionClass;
    std::unique_ptr<PythonCommandInteractionClass> mPythonCommandInteractionClass;
}; // class InteractionClassRegistry

} // namespace NDistSimIB
} // namespace NRTFederateEncoding
