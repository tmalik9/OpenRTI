
// Code automatically generated by T4 template from D:\vfs\OpenRTI-codegen\tests\rti1516ev\codegen\\RTFederate.xml, do not edit

#include <vector>
#include <cassert>

#include "RTI/encoding/HLAopaqueData.h"
#include "RTI/encoding/HLAhandle.h"

#include "RTFederateInteractions.h"

namespace NDistSimIB {
namespace NRTFederateEncoding {
HLAinteractionRootInteractionClass::HLAinteractionRootInteractionClass(rti1516ev::RTIambassador* rtiAmbassador)
{
  mRtiAmbassador = rtiAmbassador;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot");
}

void HLAinteractionRootInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAinteractionRootInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAinteractionRootInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAinteractionRootInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAinteractionRootInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void HLAinteractionRootInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet HLAinteractionRootInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'MeasurementInit'
MeasurementInitInteractionClass::MeasurementInitInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.MeasurementInit");
  // parameter Dummy : HLAopaqueData
  mDummyParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Dummy");
}

void MeasurementInitInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void MeasurementInitInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void MeasurementInitInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void MeasurementInitInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void MeasurementInitInteractionClass::send(const std::vector<uint8_t>& Dummy)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAopaqueData DummyEncoder(Dummy);
  parameters.insert(std::make_pair(GetDummyParameterHandle(), DummyEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void MeasurementInitInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet MeasurementInitInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetDummyParameterHandle());
  return result;
}

// object class type 'MeasurementStop'
MeasurementStopInteractionClass::MeasurementStopInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.MeasurementStop");
  // parameter NextFederationSuffix : HLAunicodeString
  mNextFederationSuffixParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"NextFederationSuffix");
}

void MeasurementStopInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void MeasurementStopInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void MeasurementStopInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void MeasurementStopInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void MeasurementStopInteractionClass::send(const std::wstring& NextFederationSuffix)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAunicodeString NextFederationSuffixEncoder(NextFederationSuffix);
  parameters.insert(std::make_pair(GetNextFederationSuffixParameterHandle(), NextFederationSuffixEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void MeasurementStopInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet MeasurementStopInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetNextFederationSuffixParameterHandle());
  return result;
}

// object class type 'KeyEvent'
KeyEventInteractionClass::KeyEventInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.KeyEvent");
  // parameter KeyCode : HLAinteger32LE
  mKeyCodeParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"KeyCode");
}

void KeyEventInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void KeyEventInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void KeyEventInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void KeyEventInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void KeyEventInteractionClass::send(int32_t KeyCode)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAinteger32LE KeyCodeEncoder(KeyCode);
  parameters.insert(std::make_pair(GetKeyCodeParameterHandle(), KeyCodeEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void KeyEventInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet KeyEventInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetKeyCodeParameterHandle());
  return result;
}

// object class type 'TextLog'
TextLogInteractionClass::TextLogInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.TextLog");
  // parameter Sender : HLAunicodeString
  mSenderParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Sender");
  // parameter Text : HLAunicodeString
  mTextParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Text");
}

void TextLogInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void TextLogInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void TextLogInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void TextLogInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void TextLogInteractionClass::send(const std::wstring& Sender, const std::wstring& Text)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAunicodeString SenderEncoder(Sender);
  parameters.insert(std::make_pair(GetSenderParameterHandle(), SenderEncoder.encode()));
  rti1516ev::HLAunicodeString TextEncoder(Text);
  parameters.insert(std::make_pair(GetTextParameterHandle(), TextEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void TextLogInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet TextLogInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetSenderParameterHandle());
  result.insert(GetTextParameterHandle());
  return result;
}

// object class type 'DOMemberTransmitData'
DOMemberTransmitDataInteractionClass::DOMemberTransmitDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.DOMemberTransmitData");
  // parameter ObjInstanceHandle : HLAhandle
  mObjInstanceHandleParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"ObjInstanceHandle");
  // parameter ConnectionType : HLAASCIIstring
  mConnectionTypeParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"ConnectionType");
  // parameter DataBytes : HLAopaqueData
  mDataBytesParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"DataBytes");
}

void DOMemberTransmitDataInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void DOMemberTransmitDataInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void DOMemberTransmitDataInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void DOMemberTransmitDataInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void DOMemberTransmitDataInteractionClass::send(rti1516ev::HLAhandle ObjInstanceHandle, const std::string& ConnectionType, const std::vector<uint8_t>& DataBytes)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle ObjInstanceHandleEncoder(ObjInstanceHandle);
  parameters.insert(std::make_pair(GetObjInstanceHandleParameterHandle(), ObjInstanceHandleEncoder.encode()));
  rti1516ev::HLAASCIIstring ConnectionTypeEncoder(ConnectionType);
  parameters.insert(std::make_pair(GetConnectionTypeParameterHandle(), ConnectionTypeEncoder.encode()));
  rti1516ev::HLAopaqueData DataBytesEncoder(DataBytes);
  parameters.insert(std::make_pair(GetDataBytesParameterHandle(), DataBytesEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void DOMemberTransmitDataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet DOMemberTransmitDataInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetObjInstanceHandleParameterHandle());
  result.insert(GetConnectionTypeParameterHandle());
  result.insert(GetDataBytesParameterHandle());
  return result;
}

// object class type 'SystemVariableUpdate'
SystemVariableUpdateInteractionClass::SystemVariableUpdateInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.SystemVariableUpdate");
  // parameter Id : HLAASCIIstring
  mIdParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Id");
  // parameter Value : HLAopaqueData
  mValueParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Value");
  // parameter Client : HLAinteger32LE
  mClientParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Client");
  // parameter HasChanged : HLAboolean
  mHasChangedParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HasChanged");
}

void SystemVariableUpdateInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void SystemVariableUpdateInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void SystemVariableUpdateInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void SystemVariableUpdateInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void SystemVariableUpdateInteractionClass::send(const std::string& Id, const std::vector<uint8_t>& Value, int32_t Client, bool HasChanged)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAASCIIstring IdEncoder(Id);
  parameters.insert(std::make_pair(GetIdParameterHandle(), IdEncoder.encode()));
  rti1516ev::HLAopaqueData ValueEncoder(Value);
  parameters.insert(std::make_pair(GetValueParameterHandle(), ValueEncoder.encode()));
  rti1516ev::HLAinteger32LE ClientEncoder(Client);
  parameters.insert(std::make_pair(GetClientParameterHandle(), ClientEncoder.encode()));
  rti1516ev::HLAboolean HasChangedEncoder(HasChanged);
  parameters.insert(std::make_pair(GetHasChangedParameterHandle(), HasChangedEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void SystemVariableUpdateInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet SystemVariableUpdateInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetIdParameterHandle());
  result.insert(GetValueParameterHandle());
  result.insert(GetClientParameterHandle());
  result.insert(GetHasChangedParameterHandle());
  return result;
}

// object class type 'SystemVariableModification'
SystemVariableModificationInteractionClass::SystemVariableModificationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.SystemVariableModification");
  // parameter Value : HLAopaqueData
  mValueParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Value");
}

void SystemVariableModificationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void SystemVariableModificationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void SystemVariableModificationInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void SystemVariableModificationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void SystemVariableModificationInteractionClass::send(const std::vector<uint8_t>& Value)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAopaqueData ValueEncoder(Value);
  parameters.insert(std::make_pair(GetValueParameterHandle(), ValueEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void SystemVariableModificationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet SystemVariableModificationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetValueParameterHandle());
  return result;
}

// object class type 'ValueEntityUpdate'
ValueEntityUpdateInteractionClass::ValueEntityUpdateInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.ValueEntityUpdate");
  // parameter Id : HLAopaqueData
  mIdParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Id");
  // parameter Value : HLAopaqueData
  mValueParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Value");
}

void ValueEntityUpdateInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void ValueEntityUpdateInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void ValueEntityUpdateInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void ValueEntityUpdateInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void ValueEntityUpdateInteractionClass::send(const std::vector<uint8_t>& Id, const std::vector<uint8_t>& Value)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAopaqueData IdEncoder(Id);
  parameters.insert(std::make_pair(GetIdParameterHandle(), IdEncoder.encode()));
  rti1516ev::HLAopaqueData ValueEncoder(Value);
  parameters.insert(std::make_pair(GetValueParameterHandle(), ValueEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void ValueEntityUpdateInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet ValueEntityUpdateInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetIdParameterHandle());
  result.insert(GetValueParameterHandle());
  return result;
}

// object class type 'BusMessage'
BusMessageInteractionClass::BusMessageInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.BusMessage");
  // parameter IsRequest : HLAboolean
  mIsRequestParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"IsRequest");
  // parameter ChannelName : HLAASCIIstring
  mChannelNameParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"ChannelName");
  // parameter BusType : BusType
  mBusTypeParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"BusType");
  // parameter RequestingFederate : HLAhandle
  mRequestingFederateParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"RequestingFederate");
  // parameter Sender : HLAhandle
  mSenderParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Sender");
  // parameter Receiver : HLAhandle
  mReceiverParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Receiver");
}

void BusMessageInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void BusMessageInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void BusMessageInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void BusMessageInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void BusMessageInteractionClass::send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAboolean IsRequestEncoder(IsRequest);
  parameters.insert(std::make_pair(GetIsRequestParameterHandle(), IsRequestEncoder.encode()));
  rti1516ev::HLAASCIIstring ChannelNameEncoder(ChannelName);
  parameters.insert(std::make_pair(GetChannelNameParameterHandle(), ChannelNameEncoder.encode()));
  rti1516ev::HLAinteger32LE BusTypeEncoder(BusType);
  parameters.insert(std::make_pair(GetBusTypeParameterHandle(), BusTypeEncoder.encode()));
  rti1516ev::HLAhandle RequestingFederateEncoder(RequestingFederate);
  parameters.insert(std::make_pair(GetRequestingFederateParameterHandle(), RequestingFederateEncoder.encode()));
  rti1516ev::HLAhandle SenderEncoder(Sender);
  parameters.insert(std::make_pair(GetSenderParameterHandle(), SenderEncoder.encode()));
  rti1516ev::HLAhandle ReceiverEncoder(Receiver);
  parameters.insert(std::make_pair(GetReceiverParameterHandle(), ReceiverEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void BusMessageInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet BusMessageInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetIsRequestParameterHandle());
  result.insert(GetChannelNameParameterHandle());
  result.insert(GetBusTypeParameterHandle());
  result.insert(GetRequestingFederateParameterHandle());
  result.insert(GetSenderParameterHandle());
  result.insert(GetReceiverParameterHandle());
  return result;
}

// object class type 'EthPacket'
EthPacketInteractionClass::EthPacketInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, BusMessageInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.BusMessage.EthPacket");
  // parameter Frame : EthernetPacket
  mFrameParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Frame");
}

void EthPacketInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void EthPacketInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void EthPacketInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void EthPacketInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void EthPacketInteractionClass::send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacket& Frame)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAboolean IsRequestEncoder(IsRequest);
  parameters.insert(std::make_pair(GetIsRequestParameterHandle(), IsRequestEncoder.encode()));
  rti1516ev::HLAASCIIstring ChannelNameEncoder(ChannelName);
  parameters.insert(std::make_pair(GetChannelNameParameterHandle(), ChannelNameEncoder.encode()));
  rti1516ev::HLAinteger32LE BusTypeEncoder(BusType);
  parameters.insert(std::make_pair(GetBusTypeParameterHandle(), BusTypeEncoder.encode()));
  rti1516ev::HLAhandle RequestingFederateEncoder(RequestingFederate);
  parameters.insert(std::make_pair(GetRequestingFederateParameterHandle(), RequestingFederateEncoder.encode()));
  rti1516ev::HLAhandle SenderEncoder(Sender);
  parameters.insert(std::make_pair(GetSenderParameterHandle(), SenderEncoder.encode()));
  rti1516ev::HLAhandle ReceiverEncoder(Receiver);
  parameters.insert(std::make_pair(GetReceiverParameterHandle(), ReceiverEncoder.encode()));
  const EthernetPacketEncoding& FrameEncoder = static_cast<const EthernetPacketEncoding&>(Frame);
  parameters.insert(std::make_pair(GetFrameParameterHandle(), FrameEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void EthPacketInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet EthPacketInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetIsRequestParameterHandle());
  result.insert(GetChannelNameParameterHandle());
  result.insert(GetBusTypeParameterHandle());
  result.insert(GetRequestingFederateParameterHandle());
  result.insert(GetSenderParameterHandle());
  result.insert(GetReceiverParameterHandle());
  result.insert(GetFrameParameterHandle());
  return result;
}

// object class type 'EthPacketError'
EthPacketErrorInteractionClass::EthPacketErrorInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, BusMessageInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.BusMessage.EthPacketError");
  // parameter Frame : EthernetPacketError
  mFrameParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Frame");
}

void EthPacketErrorInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void EthPacketErrorInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void EthPacketErrorInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void EthPacketErrorInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void EthPacketErrorInteractionClass::send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketError& Frame)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAboolean IsRequestEncoder(IsRequest);
  parameters.insert(std::make_pair(GetIsRequestParameterHandle(), IsRequestEncoder.encode()));
  rti1516ev::HLAASCIIstring ChannelNameEncoder(ChannelName);
  parameters.insert(std::make_pair(GetChannelNameParameterHandle(), ChannelNameEncoder.encode()));
  rti1516ev::HLAinteger32LE BusTypeEncoder(BusType);
  parameters.insert(std::make_pair(GetBusTypeParameterHandle(), BusTypeEncoder.encode()));
  rti1516ev::HLAhandle RequestingFederateEncoder(RequestingFederate);
  parameters.insert(std::make_pair(GetRequestingFederateParameterHandle(), RequestingFederateEncoder.encode()));
  rti1516ev::HLAhandle SenderEncoder(Sender);
  parameters.insert(std::make_pair(GetSenderParameterHandle(), SenderEncoder.encode()));
  rti1516ev::HLAhandle ReceiverEncoder(Receiver);
  parameters.insert(std::make_pair(GetReceiverParameterHandle(), ReceiverEncoder.encode()));
  const EthernetPacketErrorEncoding& FrameEncoder = static_cast<const EthernetPacketErrorEncoding&>(Frame);
  parameters.insert(std::make_pair(GetFrameParameterHandle(), FrameEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void EthPacketErrorInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet EthPacketErrorInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetIsRequestParameterHandle());
  result.insert(GetChannelNameParameterHandle());
  result.insert(GetBusTypeParameterHandle());
  result.insert(GetRequestingFederateParameterHandle());
  result.insert(GetSenderParameterHandle());
  result.insert(GetReceiverParameterHandle());
  result.insert(GetFrameParameterHandle());
  return result;
}

// object class type 'EthPacketErrorForwarded'
EthPacketErrorForwardedInteractionClass::EthPacketErrorForwardedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, BusMessageInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.BusMessage.EthPacketErrorForwarded");
  // parameter Frame : EthernetPacketErrorForwarded
  mFrameParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Frame");
}

void EthPacketErrorForwardedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void EthPacketErrorForwardedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void EthPacketErrorForwardedInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void EthPacketErrorForwardedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void EthPacketErrorForwardedInteractionClass::send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketErrorForwarded& Frame)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAboolean IsRequestEncoder(IsRequest);
  parameters.insert(std::make_pair(GetIsRequestParameterHandle(), IsRequestEncoder.encode()));
  rti1516ev::HLAASCIIstring ChannelNameEncoder(ChannelName);
  parameters.insert(std::make_pair(GetChannelNameParameterHandle(), ChannelNameEncoder.encode()));
  rti1516ev::HLAinteger32LE BusTypeEncoder(BusType);
  parameters.insert(std::make_pair(GetBusTypeParameterHandle(), BusTypeEncoder.encode()));
  rti1516ev::HLAhandle RequestingFederateEncoder(RequestingFederate);
  parameters.insert(std::make_pair(GetRequestingFederateParameterHandle(), RequestingFederateEncoder.encode()));
  rti1516ev::HLAhandle SenderEncoder(Sender);
  parameters.insert(std::make_pair(GetSenderParameterHandle(), SenderEncoder.encode()));
  rti1516ev::HLAhandle ReceiverEncoder(Receiver);
  parameters.insert(std::make_pair(GetReceiverParameterHandle(), ReceiverEncoder.encode()));
  const EthernetPacketErrorForwardedEncoding& FrameEncoder = static_cast<const EthernetPacketErrorForwardedEncoding&>(Frame);
  parameters.insert(std::make_pair(GetFrameParameterHandle(), FrameEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void EthPacketErrorForwardedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet EthPacketErrorForwardedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetIsRequestParameterHandle());
  result.insert(GetChannelNameParameterHandle());
  result.insert(GetBusTypeParameterHandle());
  result.insert(GetRequestingFederateParameterHandle());
  result.insert(GetSenderParameterHandle());
  result.insert(GetReceiverParameterHandle());
  result.insert(GetFrameParameterHandle());
  return result;
}

// object class type 'EthForwardedPacket'
EthForwardedPacketInteractionClass::EthForwardedPacketInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, BusMessageInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.BusMessage.EthForwardedPacket");
  // parameter Frame : EthernetPacketForwarded
  mFrameParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Frame");
}

void EthForwardedPacketInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void EthForwardedPacketInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void EthForwardedPacketInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void EthForwardedPacketInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void EthForwardedPacketInteractionClass::send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketForwarded& Frame)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAboolean IsRequestEncoder(IsRequest);
  parameters.insert(std::make_pair(GetIsRequestParameterHandle(), IsRequestEncoder.encode()));
  rti1516ev::HLAASCIIstring ChannelNameEncoder(ChannelName);
  parameters.insert(std::make_pair(GetChannelNameParameterHandle(), ChannelNameEncoder.encode()));
  rti1516ev::HLAinteger32LE BusTypeEncoder(BusType);
  parameters.insert(std::make_pair(GetBusTypeParameterHandle(), BusTypeEncoder.encode()));
  rti1516ev::HLAhandle RequestingFederateEncoder(RequestingFederate);
  parameters.insert(std::make_pair(GetRequestingFederateParameterHandle(), RequestingFederateEncoder.encode()));
  rti1516ev::HLAhandle SenderEncoder(Sender);
  parameters.insert(std::make_pair(GetSenderParameterHandle(), SenderEncoder.encode()));
  rti1516ev::HLAhandle ReceiverEncoder(Receiver);
  parameters.insert(std::make_pair(GetReceiverParameterHandle(), ReceiverEncoder.encode()));
  const EthernetPacketForwardedEncoding& FrameEncoder = static_cast<const EthernetPacketForwardedEncoding&>(Frame);
  parameters.insert(std::make_pair(GetFrameParameterHandle(), FrameEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void EthForwardedPacketInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet EthForwardedPacketInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetIsRequestParameterHandle());
  result.insert(GetChannelNameParameterHandle());
  result.insert(GetBusTypeParameterHandle());
  result.insert(GetRequestingFederateParameterHandle());
  result.insert(GetSenderParameterHandle());
  result.insert(GetReceiverParameterHandle());
  result.insert(GetFrameParameterHandle());
  return result;
}

// object class type 'EthStatus'
EthStatusInteractionClass::EthStatusInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, BusMessageInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.BusMessage.EthStatus");
  // parameter Frame : EthernetStatus
  mFrameParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Frame");
}

void EthStatusInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void EthStatusInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void EthStatusInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void EthStatusInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void EthStatusInteractionClass::send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetStatus& Frame)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAboolean IsRequestEncoder(IsRequest);
  parameters.insert(std::make_pair(GetIsRequestParameterHandle(), IsRequestEncoder.encode()));
  rti1516ev::HLAASCIIstring ChannelNameEncoder(ChannelName);
  parameters.insert(std::make_pair(GetChannelNameParameterHandle(), ChannelNameEncoder.encode()));
  rti1516ev::HLAinteger32LE BusTypeEncoder(BusType);
  parameters.insert(std::make_pair(GetBusTypeParameterHandle(), BusTypeEncoder.encode()));
  rti1516ev::HLAhandle RequestingFederateEncoder(RequestingFederate);
  parameters.insert(std::make_pair(GetRequestingFederateParameterHandle(), RequestingFederateEncoder.encode()));
  rti1516ev::HLAhandle SenderEncoder(Sender);
  parameters.insert(std::make_pair(GetSenderParameterHandle(), SenderEncoder.encode()));
  rti1516ev::HLAhandle ReceiverEncoder(Receiver);
  parameters.insert(std::make_pair(GetReceiverParameterHandle(), ReceiverEncoder.encode()));
  const EthernetStatusEncoding& FrameEncoder = static_cast<const EthernetStatusEncoding&>(Frame);
  parameters.insert(std::make_pair(GetFrameParameterHandle(), FrameEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void EthStatusInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet EthStatusInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetIsRequestParameterHandle());
  result.insert(GetChannelNameParameterHandle());
  result.insert(GetBusTypeParameterHandle());
  result.insert(GetRequestingFederateParameterHandle());
  result.insert(GetSenderParameterHandle());
  result.insert(GetReceiverParameterHandle());
  result.insert(GetFrameParameterHandle());
  return result;
}

// object class type 'CANMessage'
CANMessageInteractionClass::CANMessageInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, BusMessageInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.BusMessage.CANMessage");
  // parameter Id : HLAinteger32LE
  mIdParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Id");
  // parameter Frame : CANFrame
  mFrameParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Frame");
}

void CANMessageInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void CANMessageInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void CANMessageInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void CANMessageInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void CANMessageInteractionClass::send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, int32_t Id, const CANFrame& Frame)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAboolean IsRequestEncoder(IsRequest);
  parameters.insert(std::make_pair(GetIsRequestParameterHandle(), IsRequestEncoder.encode()));
  rti1516ev::HLAASCIIstring ChannelNameEncoder(ChannelName);
  parameters.insert(std::make_pair(GetChannelNameParameterHandle(), ChannelNameEncoder.encode()));
  rti1516ev::HLAinteger32LE BusTypeEncoder(BusType);
  parameters.insert(std::make_pair(GetBusTypeParameterHandle(), BusTypeEncoder.encode()));
  rti1516ev::HLAhandle RequestingFederateEncoder(RequestingFederate);
  parameters.insert(std::make_pair(GetRequestingFederateParameterHandle(), RequestingFederateEncoder.encode()));
  rti1516ev::HLAhandle SenderEncoder(Sender);
  parameters.insert(std::make_pair(GetSenderParameterHandle(), SenderEncoder.encode()));
  rti1516ev::HLAhandle ReceiverEncoder(Receiver);
  parameters.insert(std::make_pair(GetReceiverParameterHandle(), ReceiverEncoder.encode()));
  rti1516ev::HLAinteger32LE IdEncoder(Id);
  parameters.insert(std::make_pair(GetIdParameterHandle(), IdEncoder.encode()));
  const CANFrameEncoding& FrameEncoder = static_cast<const CANFrameEncoding&>(Frame);
  parameters.insert(std::make_pair(GetFrameParameterHandle(), FrameEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void CANMessageInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet CANMessageInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetIsRequestParameterHandle());
  result.insert(GetChannelNameParameterHandle());
  result.insert(GetBusTypeParameterHandle());
  result.insert(GetRequestingFederateParameterHandle());
  result.insert(GetSenderParameterHandle());
  result.insert(GetReceiverParameterHandle());
  result.insert(GetIdParameterHandle());
  result.insert(GetFrameParameterHandle());
  return result;
}

// object class type 'CANErrorFrame'
CANErrorFrameInteractionClass::CANErrorFrameInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, BusMessageInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.BusMessage.CANErrorFrame");
  // parameter Frame : HLAopaqueData
  mFrameParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Frame");
}

void CANErrorFrameInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void CANErrorFrameInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void CANErrorFrameInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void CANErrorFrameInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void CANErrorFrameInteractionClass::send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const std::vector<uint8_t>& Frame)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAboolean IsRequestEncoder(IsRequest);
  parameters.insert(std::make_pair(GetIsRequestParameterHandle(), IsRequestEncoder.encode()));
  rti1516ev::HLAASCIIstring ChannelNameEncoder(ChannelName);
  parameters.insert(std::make_pair(GetChannelNameParameterHandle(), ChannelNameEncoder.encode()));
  rti1516ev::HLAinteger32LE BusTypeEncoder(BusType);
  parameters.insert(std::make_pair(GetBusTypeParameterHandle(), BusTypeEncoder.encode()));
  rti1516ev::HLAhandle RequestingFederateEncoder(RequestingFederate);
  parameters.insert(std::make_pair(GetRequestingFederateParameterHandle(), RequestingFederateEncoder.encode()));
  rti1516ev::HLAhandle SenderEncoder(Sender);
  parameters.insert(std::make_pair(GetSenderParameterHandle(), SenderEncoder.encode()));
  rti1516ev::HLAhandle ReceiverEncoder(Receiver);
  parameters.insert(std::make_pair(GetReceiverParameterHandle(), ReceiverEncoder.encode()));
  rti1516ev::HLAopaqueData FrameEncoder(Frame);
  parameters.insert(std::make_pair(GetFrameParameterHandle(), FrameEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void CANErrorFrameInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet CANErrorFrameInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetIsRequestParameterHandle());
  result.insert(GetChannelNameParameterHandle());
  result.insert(GetBusTypeParameterHandle());
  result.insert(GetRequestingFederateParameterHandle());
  result.insert(GetSenderParameterHandle());
  result.insert(GetReceiverParameterHandle());
  result.insert(GetFrameParameterHandle());
  return result;
}

// object class type 'PythonCommand'
PythonCommandInteractionClass::PythonCommandInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.PythonCommand");
  // parameter Code : HLAopaqueData
  mCodeParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Code");
  // parameter Target : HLAopaqueData
  mTargetParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"Target");
  // parameter RefID : HLAopaqueData
  mRefIDParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"RefID");
}

void PythonCommandInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void PythonCommandInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void PythonCommandInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void PythonCommandInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void PythonCommandInteractionClass::send(const std::vector<uint8_t>& Code, const std::vector<uint8_t>& Target, const std::vector<uint8_t>& RefID)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAopaqueData CodeEncoder(Code);
  parameters.insert(std::make_pair(GetCodeParameterHandle(), CodeEncoder.encode()));
  rti1516ev::HLAopaqueData TargetEncoder(Target);
  parameters.insert(std::make_pair(GetTargetParameterHandle(), TargetEncoder.encode()));
  rti1516ev::HLAopaqueData RefIDEncoder(RefID);
  parameters.insert(std::make_pair(GetRefIDParameterHandle(), RefIDEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void PythonCommandInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & /*parameters*/)
{
}

rti1516ev::ParameterHandleSet PythonCommandInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetCodeParameterHandle());
  result.insert(GetTargetParameterHandle());
  result.insert(GetRefIDParameterHandle());
  return result;
}

 

InteractionClassRegistry* InteractionClassRegistry::sClassRegistry = nullptr;

InteractionClassRegistry::InteractionClassRegistry()
{
  assert(sClassRegistry == nullptr);
  sClassRegistry = this;
}

InteractionClassRegistry::~InteractionClassRegistry()
{
  sClassRegistry = nullptr;
}

void InteractionClassRegistry::Initialize(rti1516ev::RTIambassador* rtiAmbassador)
{
  mRtiAmbassador = rtiAmbassador;
  mHLAinteractionRootInteractionClass = std::unique_ptr<HLAinteractionRootInteractionClass>(new HLAinteractionRootInteractionClass(mRtiAmbassador));
  mMeasurementInitInteractionClass = std::unique_ptr<MeasurementInitInteractionClass>(new MeasurementInitInteractionClass(mRtiAmbassador, mHLAinteractionRootInteractionClass.get()));
  mMeasurementStopInteractionClass = std::unique_ptr<MeasurementStopInteractionClass>(new MeasurementStopInteractionClass(mRtiAmbassador, mHLAinteractionRootInteractionClass.get()));
  mKeyEventInteractionClass = std::unique_ptr<KeyEventInteractionClass>(new KeyEventInteractionClass(mRtiAmbassador, mHLAinteractionRootInteractionClass.get()));
  mTextLogInteractionClass = std::unique_ptr<TextLogInteractionClass>(new TextLogInteractionClass(mRtiAmbassador, mHLAinteractionRootInteractionClass.get()));
  mDOMemberTransmitDataInteractionClass = std::unique_ptr<DOMemberTransmitDataInteractionClass>(new DOMemberTransmitDataInteractionClass(mRtiAmbassador, mHLAinteractionRootInteractionClass.get()));
  mSystemVariableUpdateInteractionClass = std::unique_ptr<SystemVariableUpdateInteractionClass>(new SystemVariableUpdateInteractionClass(mRtiAmbassador, mHLAinteractionRootInteractionClass.get()));
  mSystemVariableModificationInteractionClass = std::unique_ptr<SystemVariableModificationInteractionClass>(new SystemVariableModificationInteractionClass(mRtiAmbassador, mHLAinteractionRootInteractionClass.get()));
  mValueEntityUpdateInteractionClass = std::unique_ptr<ValueEntityUpdateInteractionClass>(new ValueEntityUpdateInteractionClass(mRtiAmbassador, mHLAinteractionRootInteractionClass.get()));
  mBusMessageInteractionClass = std::unique_ptr<BusMessageInteractionClass>(new BusMessageInteractionClass(mRtiAmbassador, mHLAinteractionRootInteractionClass.get()));
  mEthPacketInteractionClass = std::unique_ptr<EthPacketInteractionClass>(new EthPacketInteractionClass(mRtiAmbassador, mBusMessageInteractionClass.get()));
  mEthPacketErrorInteractionClass = std::unique_ptr<EthPacketErrorInteractionClass>(new EthPacketErrorInteractionClass(mRtiAmbassador, mBusMessageInteractionClass.get()));
  mEthPacketErrorForwardedInteractionClass = std::unique_ptr<EthPacketErrorForwardedInteractionClass>(new EthPacketErrorForwardedInteractionClass(mRtiAmbassador, mBusMessageInteractionClass.get()));
  mEthForwardedPacketInteractionClass = std::unique_ptr<EthForwardedPacketInteractionClass>(new EthForwardedPacketInteractionClass(mRtiAmbassador, mBusMessageInteractionClass.get()));
  mEthStatusInteractionClass = std::unique_ptr<EthStatusInteractionClass>(new EthStatusInteractionClass(mRtiAmbassador, mBusMessageInteractionClass.get()));
  mCANMessageInteractionClass = std::unique_ptr<CANMessageInteractionClass>(new CANMessageInteractionClass(mRtiAmbassador, mBusMessageInteractionClass.get()));
  mCANErrorFrameInteractionClass = std::unique_ptr<CANErrorFrameInteractionClass>(new CANErrorFrameInteractionClass(mRtiAmbassador, mBusMessageInteractionClass.get()));
  mPythonCommandInteractionClass = std::unique_ptr<PythonCommandInteractionClass>(new PythonCommandInteractionClass(mRtiAmbassador, mHLAinteractionRootInteractionClass.get()));
} // Initialize

void InteractionClassRegistry::ReceiveInteraction(rti1516ev::InteractionClassHandle theInteractionClass, const rti1516ev::ParameterHandleValueMap & parameters)
{
  if (theInteractionClass == mMeasurementInitInteractionClass->GetInteractionClassHandle())
  {
    mMeasurementInitInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mMeasurementStopInteractionClass->GetInteractionClassHandle())
  {
    mMeasurementStopInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mKeyEventInteractionClass->GetInteractionClassHandle())
  {
    mKeyEventInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mTextLogInteractionClass->GetInteractionClassHandle())
  {
    mTextLogInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mDOMemberTransmitDataInteractionClass->GetInteractionClassHandle())
  {
    mDOMemberTransmitDataInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mSystemVariableUpdateInteractionClass->GetInteractionClassHandle())
  {
    mSystemVariableUpdateInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mSystemVariableModificationInteractionClass->GetInteractionClassHandle())
  {
    mSystemVariableModificationInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mValueEntityUpdateInteractionClass->GetInteractionClassHandle())
  {
    mValueEntityUpdateInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mBusMessageInteractionClass->GetInteractionClassHandle())
  {
    mBusMessageInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mEthPacketInteractionClass->GetInteractionClassHandle())
  {
    mEthPacketInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mEthPacketErrorInteractionClass->GetInteractionClassHandle())
  {
    mEthPacketErrorInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mEthPacketErrorForwardedInteractionClass->GetInteractionClassHandle())
  {
    mEthPacketErrorForwardedInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mEthForwardedPacketInteractionClass->GetInteractionClassHandle())
  {
    mEthForwardedPacketInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mEthStatusInteractionClass->GetInteractionClassHandle())
  {
    mEthStatusInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mCANMessageInteractionClass->GetInteractionClassHandle())
  {
    mCANMessageInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mCANErrorFrameInteractionClass->GetInteractionClassHandle())
  {
    mCANErrorFrameInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mPythonCommandInteractionClass->GetInteractionClassHandle())
  {
    mPythonCommandInteractionClass->ReceiveInteraction(parameters);
  }
}

IInteractionClassRegistry* GetInteractionClassRegistry()
{
  return InteractionClassRegistry::GetInstance();
}

} // namespace NDistSimIB
} // namespace NRTFederateEncoding
