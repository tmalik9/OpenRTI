
// Code automatically generated by T4 template from D:\vfs\CANoe\release\15.2\Projects_Source\OpenRTI-master\tests\rti1516ev\codegen\\mom.xml, do not edit
#pragma once

#include <vector>
#include "RTI/Handle.h"
#include "RTI/RTIambassador.h"
#include "RTI/encoding/BasicDataElements.h"
#include "RTI/encoding/HLAfixedRecord.h"
#include "RTI/encoding/HLAfixedArray.h"
#include "RTI/encoding/HLAvariableArray.h"
#include "RTI/encoding/HLAhandle.h"
#include "RTI/encoding/HLAopaqueData.h"
#include "momInteractionInterfaces.h"
#include "momEncodings.h"

namespace OpenRTI {
namespace Mom {

class HLAinteractionRoot;
class HLAinteractionRootInteractionClass : public IHLAinteractionRootInteractionClass
{
  public:
    // IHLAinteractionRootInteractionClass
    HLAinteractionRootInteractionClass() = default;
    virtual ~HLAinteractionRootInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send() override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;
    void sendWithTime(int64_t time) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters, const rti1516ev::LogicalTime& time, rti1516ev::OrderType receivedOrder);
    uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAinteractionRootInteractionClass(rti1516ev::RTIambassador* rtiAmbassador);
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
    std::map<uint32_t, ReceiveCallbackWithTime> _receiveCallbacksWithTime;
    uint32_t _receiveCallbacksWithTimeNextKey = 0;
};


class HLAmanager;
class HLAmanagerInteractionClass : public IHLAmanagerInteractionClass
{
  public:
    // IHLAmanagerInteractionClass
    HLAmanagerInteractionClass() = default;
    virtual ~HLAmanagerInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send() override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAmanagerInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass);
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAinteractionRootInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAfederate;
class HLAfederateInteractionClass : public IHLAfederateInteractionClass
{
  public:
    // IHLAfederateInteractionClass
    HLAfederateInteractionClass() = default;
    virtual ~HLAfederateInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAfederateInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAmanagerInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mHLAfederateParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAmanagerInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle mHLAfederateParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAadjust;
class HLAadjustInteractionClass : public IHLAadjustInteractionClass
{
  public:
    // IHLAadjustInteractionClass
    HLAadjustInteractionClass() = default;
    virtual ~HLAadjustInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAadjustInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAfederateInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAfederateInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAsetTiming;
class HLAsetTimingInteractionClass : public IHLAsetTimingInteractionClass
{
  public:
    // IHLAsetTimingInteractionClass
    HLAsetTimingInteractionClass() = default;
    virtual ~HLAsetTimingInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, HLAseconds HLAreportPeriod) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAsetTimingInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAadjustInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAreportPeriod : HLAseconds
    rti1516ev::ParameterHandle GetHLAreportPeriodParameterHandle() const { return mHLAreportPeriodParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAadjustInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAreportPeriod : HLAseconds
    rti1516ev::ParameterHandle mHLAreportPeriodParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAmodifyAttributeState;
class HLAmodifyAttributeStateInteractionClass : public IHLAmodifyAttributeStateInteractionClass
{
  public:
    // IHLAmodifyAttributeStateInteractionClass
    HLAmodifyAttributeStateInteractionClass() = default;
    virtual ~HLAmodifyAttributeStateInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance, rti1516ev::HLAhandle HLAattribute, HLAownership HLAattributeState) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAmodifyAttributeStateInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAadjustInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle GetHLAobjectInstanceParameterHandle() const { return mHLAobjectInstanceParameterHandle; }
    // parameter HLAattribute : HLAhandle
    rti1516ev::ParameterHandle GetHLAattributeParameterHandle() const { return mHLAattributeParameterHandle; }
    // parameter HLAattributeState : HLAownership
    rti1516ev::ParameterHandle GetHLAattributeStateParameterHandle() const { return mHLAattributeStateParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAadjustInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle mHLAobjectInstanceParameterHandle;
    // parameter HLAattribute : HLAhandle
    rti1516ev::ParameterHandle mHLAattributeParameterHandle;
    // parameter HLAattributeState : HLAownership
    rti1516ev::ParameterHandle mHLAattributeStateParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAsetServiceReporting;
class HLAsetServiceReportingInteractionClass : public IHLAsetServiceReportingInteractionClass
{
  public:
    // IHLAsetServiceReportingInteractionClass
    HLAsetServiceReportingInteractionClass() = default;
    virtual ~HLAsetServiceReportingInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, bool HLAreportingState) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAsetServiceReportingInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAadjustInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAreportingState : HLAboolean
    rti1516ev::ParameterHandle GetHLAreportingStateParameterHandle() const { return mHLAreportingStateParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAadjustInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAreportingState : HLAboolean
    rti1516ev::ParameterHandle mHLAreportingStateParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAsetExceptionReporting;
class HLAsetExceptionReportingInteractionClass : public IHLAsetExceptionReportingInteractionClass
{
  public:
    // IHLAsetExceptionReportingInteractionClass
    HLAsetExceptionReportingInteractionClass() = default;
    virtual ~HLAsetExceptionReportingInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, bool HLAreportingState) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAsetExceptionReportingInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAadjustInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAreportingState : HLAboolean
    rti1516ev::ParameterHandle GetHLAreportingStateParameterHandle() const { return mHLAreportingStateParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAadjustInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAreportingState : HLAboolean
    rti1516ev::ParameterHandle mHLAreportingStateParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAsetSwitches;
class HLAsetSwitchesInteractionClass : public IHLAsetSwitchesInteractionClass
{
  public:
    // IHLAsetSwitchesInteractionClass
    HLAsetSwitchesInteractionClass() = default;
    virtual ~HLAsetSwitchesInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, HLAswitch HLAconveyRegionDesignatorSets, HLAswitch HLAconveyProducingFederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAsetSwitchesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAadjustInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAconveyRegionDesignatorSets : HLAswitch
    rti1516ev::ParameterHandle GetHLAconveyRegionDesignatorSetsParameterHandle() const { return mHLAconveyRegionDesignatorSetsParameterHandle; }
    // parameter HLAconveyProducingFederate : HLAswitch
    rti1516ev::ParameterHandle GetHLAconveyProducingFederateParameterHandle() const { return mHLAconveyProducingFederateParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAadjustInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAconveyRegionDesignatorSets : HLAswitch
    rti1516ev::ParameterHandle mHLAconveyRegionDesignatorSetsParameterHandle;
    // parameter HLAconveyProducingFederate : HLAswitch
    rti1516ev::ParameterHandle mHLAconveyProducingFederateParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequest;
class HLArequestInteractionClass : public IHLArequestInteractionClass
{
  public:
    // IHLArequestInteractionClass
    HLArequestInteractionClass() = default;
    virtual ~HLArequestInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAfederateInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAfederateInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestPublications;
class HLArequestPublicationsInteractionClass : public IHLArequestPublicationsInteractionClass
{
  public:
    // IHLArequestPublicationsInteractionClass
    HLArequestPublicationsInteractionClass() = default;
    virtual ~HLArequestPublicationsInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestPublicationsInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestSubscriptions;
class HLArequestSubscriptionsInteractionClass : public IHLArequestSubscriptionsInteractionClass
{
  public:
    // IHLArequestSubscriptionsInteractionClass
    HLArequestSubscriptionsInteractionClass() = default;
    virtual ~HLArequestSubscriptionsInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestSubscriptionsInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestObjectInstancesThatCanBeDeleted;
class HLArequestObjectInstancesThatCanBeDeletedInteractionClass : public IHLArequestObjectInstancesThatCanBeDeletedInteractionClass
{
  public:
    // IHLArequestObjectInstancesThatCanBeDeletedInteractionClass
    HLArequestObjectInstancesThatCanBeDeletedInteractionClass() = default;
    virtual ~HLArequestObjectInstancesThatCanBeDeletedInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestObjectInstancesThatCanBeDeletedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestObjectInstancesUpdated;
class HLArequestObjectInstancesUpdatedInteractionClass : public IHLArequestObjectInstancesUpdatedInteractionClass
{
  public:
    // IHLArequestObjectInstancesUpdatedInteractionClass
    HLArequestObjectInstancesUpdatedInteractionClass() = default;
    virtual ~HLArequestObjectInstancesUpdatedInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestObjectInstancesUpdatedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestObjectInstancesReflected;
class HLArequestObjectInstancesReflectedInteractionClass : public IHLArequestObjectInstancesReflectedInteractionClass
{
  public:
    // IHLArequestObjectInstancesReflectedInteractionClass
    HLArequestObjectInstancesReflectedInteractionClass() = default;
    virtual ~HLArequestObjectInstancesReflectedInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestObjectInstancesReflectedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestUpdatesSent;
class HLArequestUpdatesSentInteractionClass : public IHLArequestUpdatesSentInteractionClass
{
  public:
    // IHLArequestUpdatesSentInteractionClass
    HLArequestUpdatesSentInteractionClass() = default;
    virtual ~HLArequestUpdatesSentInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestUpdatesSentInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestInteractionsSent;
class HLArequestInteractionsSentInteractionClass : public IHLArequestInteractionsSentInteractionClass
{
  public:
    // IHLArequestInteractionsSentInteractionClass
    HLArequestInteractionsSentInteractionClass() = default;
    virtual ~HLArequestInteractionsSentInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestInteractionsSentInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestReflectionsReceived;
class HLArequestReflectionsReceivedInteractionClass : public IHLArequestReflectionsReceivedInteractionClass
{
  public:
    // IHLArequestReflectionsReceivedInteractionClass
    HLArequestReflectionsReceivedInteractionClass() = default;
    virtual ~HLArequestReflectionsReceivedInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestReflectionsReceivedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestInteractionsReceived;
class HLArequestInteractionsReceivedInteractionClass : public IHLArequestInteractionsReceivedInteractionClass
{
  public:
    // IHLArequestInteractionsReceivedInteractionClass
    HLArequestInteractionsReceivedInteractionClass() = default;
    virtual ~HLArequestInteractionsReceivedInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestInteractionsReceivedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestObjectInstanceInformation;
class HLArequestObjectInstanceInformationInteractionClass : public IHLArequestObjectInstanceInformationInteractionClass
{
  public:
    // IHLArequestObjectInstanceInformationInteractionClass
    HLArequestObjectInstanceInformationInteractionClass() = default;
    virtual ~HLArequestObjectInstanceInformationInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestObjectInstanceInformationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle GetHLAobjectInstanceParameterHandle() const { return mHLAobjectInstanceParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle mHLAobjectInstanceParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestFOMmoduleData;
class HLArequestFOMmoduleDataInteractionClass : public IHLArequestFOMmoduleDataInteractionClass
{
  public:
    // IHLArequestFOMmoduleDataInteractionClass
    HLArequestFOMmoduleDataInteractionClass() = default;
    virtual ~HLArequestFOMmoduleDataInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, HLAindex HLAFOMmoduleIndicator) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestFOMmoduleDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAFOMmoduleIndicator : HLAindex
    rti1516ev::ParameterHandle GetHLAFOMmoduleIndicatorParameterHandle() const { return mHLAFOMmoduleIndicatorParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAFOMmoduleIndicator : HLAindex
    rti1516ev::ParameterHandle mHLAFOMmoduleIndicatorParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreport;
class HLAreportInteractionClass : public IHLAreportInteractionClass
{
  public:
    // IHLAreportInteractionClass
    HLAreportInteractionClass() = default;
    virtual ~HLAreportInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAfederateInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAfederateInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportObjectClassPublication;
class HLAreportObjectClassPublicationInteractionClass : public IHLAreportObjectClassPublicationInteractionClass
{
  public:
    // IHLAreportObjectClassPublicationInteractionClass
    HLAreportObjectClassPublicationInteractionClass() = default;
    virtual ~HLAreportObjectClassPublicationInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, HLAcount HLAnumberOfClasses, rti1516ev::HLAhandle HLAobjectClass, const std::vector<rti1516ev::HLAhandle>& HLAattributeList) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportObjectClassPublicationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAnumberOfClasses : HLAcount
    rti1516ev::ParameterHandle GetHLAnumberOfClassesParameterHandle() const { return mHLAnumberOfClassesParameterHandle; }
    // parameter HLAobjectClass : HLAhandle
    rti1516ev::ParameterHandle GetHLAobjectClassParameterHandle() const { return mHLAobjectClassParameterHandle; }
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle GetHLAattributeListParameterHandle() const { return mHLAattributeListParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAnumberOfClasses : HLAcount
    rti1516ev::ParameterHandle mHLAnumberOfClassesParameterHandle;
    // parameter HLAobjectClass : HLAhandle
    rti1516ev::ParameterHandle mHLAobjectClassParameterHandle;
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle mHLAattributeListParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportInteractionPublication;
class HLAreportInteractionPublicationInteractionClass : public IHLAreportInteractionPublicationInteractionClass
{
  public:
    // IHLAreportInteractionPublicationInteractionClass
    HLAreportInteractionPublicationInteractionClass() = default;
    virtual ~HLAreportInteractionPublicationInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::vector<rti1516ev::HLAhandle>& HLAinteractionClassList) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportInteractionPublicationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAinteractionClassList : HLAhandleList
    rti1516ev::ParameterHandle GetHLAinteractionClassListParameterHandle() const { return mHLAinteractionClassListParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAinteractionClassList : HLAhandleList
    rti1516ev::ParameterHandle mHLAinteractionClassListParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportObjectClassSubscription;
class HLAreportObjectClassSubscriptionInteractionClass : public IHLAreportObjectClassSubscriptionInteractionClass
{
  public:
    // IHLAreportObjectClassSubscriptionInteractionClass
    HLAreportObjectClassSubscriptionInteractionClass() = default;
    virtual ~HLAreportObjectClassSubscriptionInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, HLAcount HLAnumberOfClasses, rti1516ev::HLAhandle HLAobjectClass, bool HLAactive, HLAupdateRateName HLAmaxUpdateRate, const std::vector<rti1516ev::HLAhandle>& HLAattributeList) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportObjectClassSubscriptionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAnumberOfClasses : HLAcount
    rti1516ev::ParameterHandle GetHLAnumberOfClassesParameterHandle() const { return mHLAnumberOfClassesParameterHandle; }
    // parameter HLAobjectClass : HLAhandle
    rti1516ev::ParameterHandle GetHLAobjectClassParameterHandle() const { return mHLAobjectClassParameterHandle; }
    // parameter HLAactive : HLAboolean
    rti1516ev::ParameterHandle GetHLAactiveParameterHandle() const { return mHLAactiveParameterHandle; }
    // parameter HLAmaxUpdateRate : HLAupdateRateName
    rti1516ev::ParameterHandle GetHLAmaxUpdateRateParameterHandle() const { return mHLAmaxUpdateRateParameterHandle; }
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle GetHLAattributeListParameterHandle() const { return mHLAattributeListParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAnumberOfClasses : HLAcount
    rti1516ev::ParameterHandle mHLAnumberOfClassesParameterHandle;
    // parameter HLAobjectClass : HLAhandle
    rti1516ev::ParameterHandle mHLAobjectClassParameterHandle;
    // parameter HLAactive : HLAboolean
    rti1516ev::ParameterHandle mHLAactiveParameterHandle;
    // parameter HLAmaxUpdateRate : HLAupdateRateName
    rti1516ev::ParameterHandle mHLAmaxUpdateRateParameterHandle;
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle mHLAattributeListParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportInteractionSubscription;
class HLAreportInteractionSubscriptionInteractionClass : public IHLAreportInteractionSubscriptionInteractionClass
{
  public:
    // IHLAreportInteractionSubscriptionInteractionClass
    HLAreportInteractionSubscriptionInteractionClass() = default;
    virtual ~HLAreportInteractionSubscriptionInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::vector<HLAinteractionSubscriptionEncoding>& HLAinteractionClassList) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportInteractionSubscriptionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAinteractionClassList : HLAinteractionSubList
    rti1516ev::ParameterHandle GetHLAinteractionClassListParameterHandle() const { return mHLAinteractionClassListParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAinteractionClassList : HLAinteractionSubList
    rti1516ev::ParameterHandle mHLAinteractionClassListParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportObjectInstancesThatCanBeDeleted;
class HLAreportObjectInstancesThatCanBeDeletedInteractionClass : public IHLAreportObjectInstancesThatCanBeDeletedInteractionClass
{
  public:
    // IHLAreportObjectInstancesThatCanBeDeletedInteractionClass
    HLAreportObjectInstancesThatCanBeDeletedInteractionClass() = default;
    virtual ~HLAreportObjectInstancesThatCanBeDeletedInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::vector<HLAobjectClassBasedCountEncoding>& HLAobjectInstanceCounts) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportObjectInstancesThatCanBeDeletedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectInstanceCounts : HLAobjectClassBasedCounts
    rti1516ev::ParameterHandle GetHLAobjectInstanceCountsParameterHandle() const { return mHLAobjectInstanceCountsParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectInstanceCounts : HLAobjectClassBasedCounts
    rti1516ev::ParameterHandle mHLAobjectInstanceCountsParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportObjectInstancesUpdated;
class HLAreportObjectInstancesUpdatedInteractionClass : public IHLAreportObjectInstancesUpdatedInteractionClass
{
  public:
    // IHLAreportObjectInstancesUpdatedInteractionClass
    HLAreportObjectInstancesUpdatedInteractionClass() = default;
    virtual ~HLAreportObjectInstancesUpdatedInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::vector<HLAobjectClassBasedCountEncoding>& HLAobjectInstanceCounts) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportObjectInstancesUpdatedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectInstanceCounts : HLAobjectClassBasedCounts
    rti1516ev::ParameterHandle GetHLAobjectInstanceCountsParameterHandle() const { return mHLAobjectInstanceCountsParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectInstanceCounts : HLAobjectClassBasedCounts
    rti1516ev::ParameterHandle mHLAobjectInstanceCountsParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportObjectInstancesReflected;
class HLAreportObjectInstancesReflectedInteractionClass : public IHLAreportObjectInstancesReflectedInteractionClass
{
  public:
    // IHLAreportObjectInstancesReflectedInteractionClass
    HLAreportObjectInstancesReflectedInteractionClass() = default;
    virtual ~HLAreportObjectInstancesReflectedInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::vector<HLAobjectClassBasedCountEncoding>& HLAobjectInstanceCounts) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportObjectInstancesReflectedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectInstanceCounts : HLAobjectClassBasedCounts
    rti1516ev::ParameterHandle GetHLAobjectInstanceCountsParameterHandle() const { return mHLAobjectInstanceCountsParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectInstanceCounts : HLAobjectClassBasedCounts
    rti1516ev::ParameterHandle mHLAobjectInstanceCountsParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportUpdatesSent;
class HLAreportUpdatesSentInteractionClass : public IHLAreportUpdatesSentInteractionClass
{
  public:
    // IHLAreportUpdatesSentInteractionClass
    HLAreportUpdatesSentInteractionClass() = default;
    virtual ~HLAreportUpdatesSentInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, HLAtransportationName HLAtransportation, const std::vector<HLAobjectClassBasedCountEncoding>& HLAupdateCounts) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportUpdatesSentInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAtransportation : HLAtransportationName
    rti1516ev::ParameterHandle GetHLAtransportationParameterHandle() const { return mHLAtransportationParameterHandle; }
    // parameter HLAupdateCounts : HLAobjectClassBasedCounts
    rti1516ev::ParameterHandle GetHLAupdateCountsParameterHandle() const { return mHLAupdateCountsParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAtransportation : HLAtransportationName
    rti1516ev::ParameterHandle mHLAtransportationParameterHandle;
    // parameter HLAupdateCounts : HLAobjectClassBasedCounts
    rti1516ev::ParameterHandle mHLAupdateCountsParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportReflectionsReceived;
class HLAreportReflectionsReceivedInteractionClass : public IHLAreportReflectionsReceivedInteractionClass
{
  public:
    // IHLAreportReflectionsReceivedInteractionClass
    HLAreportReflectionsReceivedInteractionClass() = default;
    virtual ~HLAreportReflectionsReceivedInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, HLAtransportationName HLAtransportation, const std::vector<HLAobjectClassBasedCountEncoding>& HLAreflectCounts) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportReflectionsReceivedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAtransportation : HLAtransportationName
    rti1516ev::ParameterHandle GetHLAtransportationParameterHandle() const { return mHLAtransportationParameterHandle; }
    // parameter HLAreflectCounts : HLAobjectClassBasedCounts
    rti1516ev::ParameterHandle GetHLAreflectCountsParameterHandle() const { return mHLAreflectCountsParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAtransportation : HLAtransportationName
    rti1516ev::ParameterHandle mHLAtransportationParameterHandle;
    // parameter HLAreflectCounts : HLAobjectClassBasedCounts
    rti1516ev::ParameterHandle mHLAreflectCountsParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportInteractionsSent;
class HLAreportInteractionsSentInteractionClass : public IHLAreportInteractionsSentInteractionClass
{
  public:
    // IHLAreportInteractionsSentInteractionClass
    HLAreportInteractionsSentInteractionClass() = default;
    virtual ~HLAreportInteractionsSentInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, HLAtransportationName HLAtransportation, const std::vector<HLAinteractionCountEncoding>& HLAinteractionCounts) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportInteractionsSentInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAtransportation : HLAtransportationName
    rti1516ev::ParameterHandle GetHLAtransportationParameterHandle() const { return mHLAtransportationParameterHandle; }
    // parameter HLAinteractionCounts : HLAinteractionCounts
    rti1516ev::ParameterHandle GetHLAinteractionCountsParameterHandle() const { return mHLAinteractionCountsParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAtransportation : HLAtransportationName
    rti1516ev::ParameterHandle mHLAtransportationParameterHandle;
    // parameter HLAinteractionCounts : HLAinteractionCounts
    rti1516ev::ParameterHandle mHLAinteractionCountsParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportInteractionsReceived;
class HLAreportInteractionsReceivedInteractionClass : public IHLAreportInteractionsReceivedInteractionClass
{
  public:
    // IHLAreportInteractionsReceivedInteractionClass
    HLAreportInteractionsReceivedInteractionClass() = default;
    virtual ~HLAreportInteractionsReceivedInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, HLAtransportationName HLAtransportation, const std::vector<HLAinteractionCountEncoding>& HLAinteractionCounts) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportInteractionsReceivedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAtransportation : HLAtransportationName
    rti1516ev::ParameterHandle GetHLAtransportationParameterHandle() const { return mHLAtransportationParameterHandle; }
    // parameter HLAinteractionCounts : HLAinteractionCounts
    rti1516ev::ParameterHandle GetHLAinteractionCountsParameterHandle() const { return mHLAinteractionCountsParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAtransportation : HLAtransportationName
    rti1516ev::ParameterHandle mHLAtransportationParameterHandle;
    // parameter HLAinteractionCounts : HLAinteractionCounts
    rti1516ev::ParameterHandle mHLAinteractionCountsParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportObjectInstanceInformation;
class HLAreportObjectInstanceInformationInteractionClass : public IHLAreportObjectInstanceInformationInteractionClass
{
  public:
    // IHLAreportObjectInstanceInformationInteractionClass
    HLAreportObjectInstanceInformationInteractionClass() = default;
    virtual ~HLAreportObjectInstanceInformationInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance, const std::vector<rti1516ev::HLAhandle>& HLAownedInstanceAttributeList, rti1516ev::HLAhandle HLAregisteredClass, rti1516ev::HLAhandle HLAknownClass) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportObjectInstanceInformationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle GetHLAobjectInstanceParameterHandle() const { return mHLAobjectInstanceParameterHandle; }
    // parameter HLAownedInstanceAttributeList : HLAhandleList
    rti1516ev::ParameterHandle GetHLAownedInstanceAttributeListParameterHandle() const { return mHLAownedInstanceAttributeListParameterHandle; }
    // parameter HLAregisteredClass : HLAhandle
    rti1516ev::ParameterHandle GetHLAregisteredClassParameterHandle() const { return mHLAregisteredClassParameterHandle; }
    // parameter HLAknownClass : HLAhandle
    rti1516ev::ParameterHandle GetHLAknownClassParameterHandle() const { return mHLAknownClassParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle mHLAobjectInstanceParameterHandle;
    // parameter HLAownedInstanceAttributeList : HLAhandleList
    rti1516ev::ParameterHandle mHLAownedInstanceAttributeListParameterHandle;
    // parameter HLAregisteredClass : HLAhandle
    rti1516ev::ParameterHandle mHLAregisteredClassParameterHandle;
    // parameter HLAknownClass : HLAhandle
    rti1516ev::ParameterHandle mHLAknownClassParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportException;
class HLAreportExceptionInteractionClass : public IHLAreportExceptionInteractionClass
{
  public:
    // IHLAreportExceptionInteractionClass
    HLAreportExceptionInteractionClass() = default;
    virtual ~HLAreportExceptionInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::wstring& HLAservice, const std::wstring& HLAexception) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportExceptionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAservice : HLAunicodeString
    rti1516ev::ParameterHandle GetHLAserviceParameterHandle() const { return mHLAserviceParameterHandle; }
    // parameter HLAexception : HLAunicodeString
    rti1516ev::ParameterHandle GetHLAexceptionParameterHandle() const { return mHLAexceptionParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAservice : HLAunicodeString
    rti1516ev::ParameterHandle mHLAserviceParameterHandle;
    // parameter HLAexception : HLAunicodeString
    rti1516ev::ParameterHandle mHLAexceptionParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportServiceInvocation;
class HLAreportServiceInvocationInteractionClass : public IHLAreportServiceInvocationInteractionClass
{
  public:
    // IHLAreportServiceInvocationInteractionClass
    HLAreportServiceInvocationInteractionClass() = default;
    virtual ~HLAreportServiceInvocationInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::wstring& HLAservice, bool HLAsuccessIndicator, const std::vector<std::wstring>& HLAsuppliedArguments, const std::vector<std::wstring>& HLAreturnedArguments, const std::wstring& HLAexception, HLAcount HLAserialNumber) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportServiceInvocationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAservice : HLAunicodeString
    rti1516ev::ParameterHandle GetHLAserviceParameterHandle() const { return mHLAserviceParameterHandle; }
    // parameter HLAsuccessIndicator : HLAboolean
    rti1516ev::ParameterHandle GetHLAsuccessIndicatorParameterHandle() const { return mHLAsuccessIndicatorParameterHandle; }
    // parameter HLAsuppliedArguments : HLAargumentList
    rti1516ev::ParameterHandle GetHLAsuppliedArgumentsParameterHandle() const { return mHLAsuppliedArgumentsParameterHandle; }
    // parameter HLAreturnedArguments : HLAargumentList
    rti1516ev::ParameterHandle GetHLAreturnedArgumentsParameterHandle() const { return mHLAreturnedArgumentsParameterHandle; }
    // parameter HLAexception : HLAunicodeString
    rti1516ev::ParameterHandle GetHLAexceptionParameterHandle() const { return mHLAexceptionParameterHandle; }
    // parameter HLAserialNumber : HLAcount
    rti1516ev::ParameterHandle GetHLAserialNumberParameterHandle() const { return mHLAserialNumberParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAservice : HLAunicodeString
    rti1516ev::ParameterHandle mHLAserviceParameterHandle;
    // parameter HLAsuccessIndicator : HLAboolean
    rti1516ev::ParameterHandle mHLAsuccessIndicatorParameterHandle;
    // parameter HLAsuppliedArguments : HLAargumentList
    rti1516ev::ParameterHandle mHLAsuppliedArgumentsParameterHandle;
    // parameter HLAreturnedArguments : HLAargumentList
    rti1516ev::ParameterHandle mHLAreturnedArgumentsParameterHandle;
    // parameter HLAexception : HLAunicodeString
    rti1516ev::ParameterHandle mHLAexceptionParameterHandle;
    // parameter HLAserialNumber : HLAcount
    rti1516ev::ParameterHandle mHLAserialNumberParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportMOMexception;
class HLAreportMOMexceptionInteractionClass : public IHLAreportMOMexceptionInteractionClass
{
  public:
    // IHLAreportMOMexceptionInteractionClass
    HLAreportMOMexceptionInteractionClass() = default;
    virtual ~HLAreportMOMexceptionInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::wstring& HLAservice, const std::wstring& HLAexception, bool HLAparameterError) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportMOMexceptionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAservice : HLAunicodeString
    rti1516ev::ParameterHandle GetHLAserviceParameterHandle() const { return mHLAserviceParameterHandle; }
    // parameter HLAexception : HLAunicodeString
    rti1516ev::ParameterHandle GetHLAexceptionParameterHandle() const { return mHLAexceptionParameterHandle; }
    // parameter HLAparameterError : HLAboolean
    rti1516ev::ParameterHandle GetHLAparameterErrorParameterHandle() const { return mHLAparameterErrorParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAservice : HLAunicodeString
    rti1516ev::ParameterHandle mHLAserviceParameterHandle;
    // parameter HLAexception : HLAunicodeString
    rti1516ev::ParameterHandle mHLAexceptionParameterHandle;
    // parameter HLAparameterError : HLAboolean
    rti1516ev::ParameterHandle mHLAparameterErrorParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportFederateLost;
class HLAreportFederateLostInteractionClass : public IHLAreportFederateLostInteractionClass
{
  public:
    // IHLAreportFederateLostInteractionClass
    HLAreportFederateLostInteractionClass() = default;
    virtual ~HLAreportFederateLostInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::wstring& HLAfederateName, const std::vector<uint8_t>& HLAtimeStamp, const std::wstring& HLAfaultDescription) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportFederateLostInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAfederateName : HLAunicodeString
    rti1516ev::ParameterHandle GetHLAfederateNameParameterHandle() const { return mHLAfederateNameParameterHandle; }
    // parameter HLAtimeStamp : HLAlogicalTime
    rti1516ev::ParameterHandle GetHLAtimeStampParameterHandle() const { return mHLAtimeStampParameterHandle; }
    // parameter HLAfaultDescription : HLAunicodeString
    rti1516ev::ParameterHandle GetHLAfaultDescriptionParameterHandle() const { return mHLAfaultDescriptionParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAfederateName : HLAunicodeString
    rti1516ev::ParameterHandle mHLAfederateNameParameterHandle;
    // parameter HLAtimeStamp : HLAlogicalTime
    rti1516ev::ParameterHandle mHLAtimeStampParameterHandle;
    // parameter HLAfaultDescription : HLAunicodeString
    rti1516ev::ParameterHandle mHLAfaultDescriptionParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportFOMmoduleData;
class HLAreportFOMmoduleDataInteractionClass : public IHLAreportFOMmoduleDataInteractionClass
{
  public:
    // IHLAreportFOMmoduleDataInteractionClass
    HLAreportFOMmoduleDataInteractionClass() = default;
    virtual ~HLAreportFOMmoduleDataInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, HLAindex HLAFOMmoduleIndicator, const std::wstring& HLAFOMmoduleData) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportFOMmoduleDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAFOMmoduleIndicator : HLAindex
    rti1516ev::ParameterHandle GetHLAFOMmoduleIndicatorParameterHandle() const { return mHLAFOMmoduleIndicatorParameterHandle; }
    // parameter HLAFOMmoduleData : HLAunicodeString
    rti1516ev::ParameterHandle GetHLAFOMmoduleDataParameterHandle() const { return mHLAFOMmoduleDataParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAFOMmoduleIndicator : HLAindex
    rti1516ev::ParameterHandle mHLAFOMmoduleIndicatorParameterHandle;
    // parameter HLAFOMmoduleData : HLAunicodeString
    rti1516ev::ParameterHandle mHLAFOMmoduleDataParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAservice;
class HLAserviceInteractionClass : public IHLAserviceInteractionClass
{
  public:
    // IHLAserviceInteractionClass
    HLAserviceInteractionClass() = default;
    virtual ~HLAserviceInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAserviceInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAfederateInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAfederateInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAresignFederationExecution;
class HLAresignFederationExecutionInteractionClass : public IHLAresignFederationExecutionInteractionClass
{
  public:
    // IHLAresignFederationExecutionInteractionClass
    HLAresignFederationExecutionInteractionClass() = default;
    virtual ~HLAresignFederationExecutionInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, HLAresignAction HLAresignAction) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAresignFederationExecutionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAresignAction : HLAresignAction
    rti1516ev::ParameterHandle GetHLAresignActionParameterHandle() const { return mHLAresignActionParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAresignAction : HLAresignAction
    rti1516ev::ParameterHandle mHLAresignActionParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAsynchronizationPointAchieved;
class HLAsynchronizationPointAchievedInteractionClass : public IHLAsynchronizationPointAchievedInteractionClass
{
  public:
    // IHLAsynchronizationPointAchievedInteractionClass
    HLAsynchronizationPointAchievedInteractionClass() = default;
    virtual ~HLAsynchronizationPointAchievedInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::wstring& HLAlabel) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAsynchronizationPointAchievedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAlabel : HLAunicodeString
    rti1516ev::ParameterHandle GetHLAlabelParameterHandle() const { return mHLAlabelParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAlabel : HLAunicodeString
    rti1516ev::ParameterHandle mHLAlabelParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAfederateSaveBegun;
class HLAfederateSaveBegunInteractionClass : public IHLAfederateSaveBegunInteractionClass
{
  public:
    // IHLAfederateSaveBegunInteractionClass
    HLAfederateSaveBegunInteractionClass() = default;
    virtual ~HLAfederateSaveBegunInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAfederateSaveBegunInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAfederateSaveComplete;
class HLAfederateSaveCompleteInteractionClass : public IHLAfederateSaveCompleteInteractionClass
{
  public:
    // IHLAfederateSaveCompleteInteractionClass
    HLAfederateSaveCompleteInteractionClass() = default;
    virtual ~HLAfederateSaveCompleteInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, bool HLAsuccessIndicator) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAfederateSaveCompleteInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAsuccessIndicator : HLAboolean
    rti1516ev::ParameterHandle GetHLAsuccessIndicatorParameterHandle() const { return mHLAsuccessIndicatorParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAsuccessIndicator : HLAboolean
    rti1516ev::ParameterHandle mHLAsuccessIndicatorParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAfederateRestoreComplete;
class HLAfederateRestoreCompleteInteractionClass : public IHLAfederateRestoreCompleteInteractionClass
{
  public:
    // IHLAfederateRestoreCompleteInteractionClass
    HLAfederateRestoreCompleteInteractionClass() = default;
    virtual ~HLAfederateRestoreCompleteInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, bool HLAsuccessIndicator) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAfederateRestoreCompleteInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAsuccessIndicator : HLAboolean
    rti1516ev::ParameterHandle GetHLAsuccessIndicatorParameterHandle() const { return mHLAsuccessIndicatorParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAsuccessIndicator : HLAboolean
    rti1516ev::ParameterHandle mHLAsuccessIndicatorParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLApublishObjectClassAttributes;
class HLApublishObjectClassAttributesInteractionClass : public IHLApublishObjectClassAttributesInteractionClass
{
  public:
    // IHLApublishObjectClassAttributesInteractionClass
    HLApublishObjectClassAttributesInteractionClass() = default;
    virtual ~HLApublishObjectClassAttributesInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectClass, const std::vector<rti1516ev::HLAhandle>& HLAattributeList) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLApublishObjectClassAttributesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectClass : HLAhandle
    rti1516ev::ParameterHandle GetHLAobjectClassParameterHandle() const { return mHLAobjectClassParameterHandle; }
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle GetHLAattributeListParameterHandle() const { return mHLAattributeListParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectClass : HLAhandle
    rti1516ev::ParameterHandle mHLAobjectClassParameterHandle;
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle mHLAattributeListParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAunpublishObjectClassAttributes;
class HLAunpublishObjectClassAttributesInteractionClass : public IHLAunpublishObjectClassAttributesInteractionClass
{
  public:
    // IHLAunpublishObjectClassAttributesInteractionClass
    HLAunpublishObjectClassAttributesInteractionClass() = default;
    virtual ~HLAunpublishObjectClassAttributesInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectClass, const std::vector<rti1516ev::HLAhandle>& HLAattributeList) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAunpublishObjectClassAttributesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectClass : HLAhandle
    rti1516ev::ParameterHandle GetHLAobjectClassParameterHandle() const { return mHLAobjectClassParameterHandle; }
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle GetHLAattributeListParameterHandle() const { return mHLAattributeListParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectClass : HLAhandle
    rti1516ev::ParameterHandle mHLAobjectClassParameterHandle;
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle mHLAattributeListParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLApublishInteractionClass;
class HLApublishInteractionClassInteractionClass : public IHLApublishInteractionClassInteractionClass
{
  public:
    // IHLApublishInteractionClassInteractionClass
    HLApublishInteractionClassInteractionClass() = default;
    virtual ~HLApublishInteractionClassInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAinteractionClass) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLApublishInteractionClassInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAinteractionClass : HLAhandle
    rti1516ev::ParameterHandle GetHLAinteractionClassParameterHandle() const { return mHLAinteractionClassParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAinteractionClass : HLAhandle
    rti1516ev::ParameterHandle mHLAinteractionClassParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAunpublishInteractionClass;
class HLAunpublishInteractionClassInteractionClass : public IHLAunpublishInteractionClassInteractionClass
{
  public:
    // IHLAunpublishInteractionClassInteractionClass
    HLAunpublishInteractionClassInteractionClass() = default;
    virtual ~HLAunpublishInteractionClassInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAinteractionClass) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAunpublishInteractionClassInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAinteractionClass : HLAhandle
    rti1516ev::ParameterHandle GetHLAinteractionClassParameterHandle() const { return mHLAinteractionClassParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAinteractionClass : HLAhandle
    rti1516ev::ParameterHandle mHLAinteractionClassParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAsubscribeObjectClassAttributes;
class HLAsubscribeObjectClassAttributesInteractionClass : public IHLAsubscribeObjectClassAttributesInteractionClass
{
  public:
    // IHLAsubscribeObjectClassAttributesInteractionClass
    HLAsubscribeObjectClassAttributesInteractionClass() = default;
    virtual ~HLAsubscribeObjectClassAttributesInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectClass, const std::vector<rti1516ev::HLAhandle>& HLAattributeList, bool HLAactive) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAsubscribeObjectClassAttributesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectClass : HLAhandle
    rti1516ev::ParameterHandle GetHLAobjectClassParameterHandle() const { return mHLAobjectClassParameterHandle; }
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle GetHLAattributeListParameterHandle() const { return mHLAattributeListParameterHandle; }
    // parameter HLAactive : HLAboolean
    rti1516ev::ParameterHandle GetHLAactiveParameterHandle() const { return mHLAactiveParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectClass : HLAhandle
    rti1516ev::ParameterHandle mHLAobjectClassParameterHandle;
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle mHLAattributeListParameterHandle;
    // parameter HLAactive : HLAboolean
    rti1516ev::ParameterHandle mHLAactiveParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAunsubscribeObjectClassAttributes;
class HLAunsubscribeObjectClassAttributesInteractionClass : public IHLAunsubscribeObjectClassAttributesInteractionClass
{
  public:
    // IHLAunsubscribeObjectClassAttributesInteractionClass
    HLAunsubscribeObjectClassAttributesInteractionClass() = default;
    virtual ~HLAunsubscribeObjectClassAttributesInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectClass, const std::vector<rti1516ev::HLAhandle>& HLAattributeList) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAunsubscribeObjectClassAttributesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectClass : HLAhandle
    rti1516ev::ParameterHandle GetHLAobjectClassParameterHandle() const { return mHLAobjectClassParameterHandle; }
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle GetHLAattributeListParameterHandle() const { return mHLAattributeListParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectClass : HLAhandle
    rti1516ev::ParameterHandle mHLAobjectClassParameterHandle;
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle mHLAattributeListParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAsubscribeInteractionClass;
class HLAsubscribeInteractionClassInteractionClass : public IHLAsubscribeInteractionClassInteractionClass
{
  public:
    // IHLAsubscribeInteractionClassInteractionClass
    HLAsubscribeInteractionClassInteractionClass() = default;
    virtual ~HLAsubscribeInteractionClassInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAinteractionClass, bool HLAactive) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAsubscribeInteractionClassInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAinteractionClass : HLAhandle
    rti1516ev::ParameterHandle GetHLAinteractionClassParameterHandle() const { return mHLAinteractionClassParameterHandle; }
    // parameter HLAactive : HLAboolean
    rti1516ev::ParameterHandle GetHLAactiveParameterHandle() const { return mHLAactiveParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAinteractionClass : HLAhandle
    rti1516ev::ParameterHandle mHLAinteractionClassParameterHandle;
    // parameter HLAactive : HLAboolean
    rti1516ev::ParameterHandle mHLAactiveParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAunsubscribeInteractionClass;
class HLAunsubscribeInteractionClassInteractionClass : public IHLAunsubscribeInteractionClassInteractionClass
{
  public:
    // IHLAunsubscribeInteractionClassInteractionClass
    HLAunsubscribeInteractionClassInteractionClass() = default;
    virtual ~HLAunsubscribeInteractionClassInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAinteractionClass) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAunsubscribeInteractionClassInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAinteractionClass : HLAhandle
    rti1516ev::ParameterHandle GetHLAinteractionClassParameterHandle() const { return mHLAinteractionClassParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAinteractionClass : HLAhandle
    rti1516ev::ParameterHandle mHLAinteractionClassParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAdeleteObjectInstance;
class HLAdeleteObjectInstanceInteractionClass : public IHLAdeleteObjectInstanceInteractionClass
{
  public:
    // IHLAdeleteObjectInstanceInteractionClass
    HLAdeleteObjectInstanceInteractionClass() = default;
    virtual ~HLAdeleteObjectInstanceInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance, const std::vector<uint8_t>& HLAtag, const std::vector<uint8_t>& HLAtimeStamp) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAdeleteObjectInstanceInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle GetHLAobjectInstanceParameterHandle() const { return mHLAobjectInstanceParameterHandle; }
    // parameter HLAtag : HLAopaqueData
    rti1516ev::ParameterHandle GetHLAtagParameterHandle() const { return mHLAtagParameterHandle; }
    // parameter HLAtimeStamp : HLAlogicalTime
    rti1516ev::ParameterHandle GetHLAtimeStampParameterHandle() const { return mHLAtimeStampParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle mHLAobjectInstanceParameterHandle;
    // parameter HLAtag : HLAopaqueData
    rti1516ev::ParameterHandle mHLAtagParameterHandle;
    // parameter HLAtimeStamp : HLAlogicalTime
    rti1516ev::ParameterHandle mHLAtimeStampParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAlocalDeleteObjectInstance;
class HLAlocalDeleteObjectInstanceInteractionClass : public IHLAlocalDeleteObjectInstanceInteractionClass
{
  public:
    // IHLAlocalDeleteObjectInstanceInteractionClass
    HLAlocalDeleteObjectInstanceInteractionClass() = default;
    virtual ~HLAlocalDeleteObjectInstanceInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAlocalDeleteObjectInstanceInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle GetHLAobjectInstanceParameterHandle() const { return mHLAobjectInstanceParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle mHLAobjectInstanceParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestAttributeTransportationTypeChange;
class HLArequestAttributeTransportationTypeChangeInteractionClass : public IHLArequestAttributeTransportationTypeChangeInteractionClass
{
  public:
    // IHLArequestAttributeTransportationTypeChangeInteractionClass
    HLArequestAttributeTransportationTypeChangeInteractionClass() = default;
    virtual ~HLArequestAttributeTransportationTypeChangeInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance, const std::vector<rti1516ev::HLAhandle>& HLAattributeList, HLAtransportationName HLAtransportation) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestAttributeTransportationTypeChangeInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle GetHLAobjectInstanceParameterHandle() const { return mHLAobjectInstanceParameterHandle; }
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle GetHLAattributeListParameterHandle() const { return mHLAattributeListParameterHandle; }
    // parameter HLAtransportation : HLAtransportationName
    rti1516ev::ParameterHandle GetHLAtransportationParameterHandle() const { return mHLAtransportationParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle mHLAobjectInstanceParameterHandle;
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle mHLAattributeListParameterHandle;
    // parameter HLAtransportation : HLAtransportationName
    rti1516ev::ParameterHandle mHLAtransportationParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestInteractionTransportationTypeChange;
class HLArequestInteractionTransportationTypeChangeInteractionClass : public IHLArequestInteractionTransportationTypeChangeInteractionClass
{
  public:
    // IHLArequestInteractionTransportationTypeChangeInteractionClass
    HLArequestInteractionTransportationTypeChangeInteractionClass() = default;
    virtual ~HLArequestInteractionTransportationTypeChangeInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAinteractionClass, HLAtransportationName HLAtransportation) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestInteractionTransportationTypeChangeInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAinteractionClass : HLAhandle
    rti1516ev::ParameterHandle GetHLAinteractionClassParameterHandle() const { return mHLAinteractionClassParameterHandle; }
    // parameter HLAtransportation : HLAtransportationName
    rti1516ev::ParameterHandle GetHLAtransportationParameterHandle() const { return mHLAtransportationParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAinteractionClass : HLAhandle
    rti1516ev::ParameterHandle mHLAinteractionClassParameterHandle;
    // parameter HLAtransportation : HLAtransportationName
    rti1516ev::ParameterHandle mHLAtransportationParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAunconditionalAttributeOwnershipDivestiture;
class HLAunconditionalAttributeOwnershipDivestitureInteractionClass : public IHLAunconditionalAttributeOwnershipDivestitureInteractionClass
{
  public:
    // IHLAunconditionalAttributeOwnershipDivestitureInteractionClass
    HLAunconditionalAttributeOwnershipDivestitureInteractionClass() = default;
    virtual ~HLAunconditionalAttributeOwnershipDivestitureInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance, const std::vector<rti1516ev::HLAhandle>& HLAattributeList) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAunconditionalAttributeOwnershipDivestitureInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle GetHLAobjectInstanceParameterHandle() const { return mHLAobjectInstanceParameterHandle; }
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle GetHLAattributeListParameterHandle() const { return mHLAattributeListParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle mHLAobjectInstanceParameterHandle;
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle mHLAattributeListParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAenableTimeRegulation;
class HLAenableTimeRegulationInteractionClass : public IHLAenableTimeRegulationInteractionClass
{
  public:
    // IHLAenableTimeRegulationInteractionClass
    HLAenableTimeRegulationInteractionClass() = default;
    virtual ~HLAenableTimeRegulationInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::vector<uint8_t>& HLAlookahead) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAenableTimeRegulationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAlookahead : HLAtimeInterval
    rti1516ev::ParameterHandle GetHLAlookaheadParameterHandle() const { return mHLAlookaheadParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAlookahead : HLAtimeInterval
    rti1516ev::ParameterHandle mHLAlookaheadParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAdisableTimeRegulation;
class HLAdisableTimeRegulationInteractionClass : public IHLAdisableTimeRegulationInteractionClass
{
  public:
    // IHLAdisableTimeRegulationInteractionClass
    HLAdisableTimeRegulationInteractionClass() = default;
    virtual ~HLAdisableTimeRegulationInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAdisableTimeRegulationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAenableTimeConstrained;
class HLAenableTimeConstrainedInteractionClass : public IHLAenableTimeConstrainedInteractionClass
{
  public:
    // IHLAenableTimeConstrainedInteractionClass
    HLAenableTimeConstrainedInteractionClass() = default;
    virtual ~HLAenableTimeConstrainedInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAenableTimeConstrainedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAdisableTimeConstrained;
class HLAdisableTimeConstrainedInteractionClass : public IHLAdisableTimeConstrainedInteractionClass
{
  public:
    // IHLAdisableTimeConstrainedInteractionClass
    HLAdisableTimeConstrainedInteractionClass() = default;
    virtual ~HLAdisableTimeConstrainedInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAdisableTimeConstrainedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAtimeAdvanceRequest;
class HLAtimeAdvanceRequestInteractionClass : public IHLAtimeAdvanceRequestInteractionClass
{
  public:
    // IHLAtimeAdvanceRequestInteractionClass
    HLAtimeAdvanceRequestInteractionClass() = default;
    virtual ~HLAtimeAdvanceRequestInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::vector<uint8_t>& HLAtimeStamp) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAtimeAdvanceRequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAtimeStamp : HLAlogicalTime
    rti1516ev::ParameterHandle GetHLAtimeStampParameterHandle() const { return mHLAtimeStampParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAtimeStamp : HLAlogicalTime
    rti1516ev::ParameterHandle mHLAtimeStampParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAtimeAdvanceRequestAvailable;
class HLAtimeAdvanceRequestAvailableInteractionClass : public IHLAtimeAdvanceRequestAvailableInteractionClass
{
  public:
    // IHLAtimeAdvanceRequestAvailableInteractionClass
    HLAtimeAdvanceRequestAvailableInteractionClass() = default;
    virtual ~HLAtimeAdvanceRequestAvailableInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::vector<uint8_t>& HLAtimeStamp) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAtimeAdvanceRequestAvailableInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAtimeStamp : HLAlogicalTime
    rti1516ev::ParameterHandle GetHLAtimeStampParameterHandle() const { return mHLAtimeStampParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAtimeStamp : HLAlogicalTime
    rti1516ev::ParameterHandle mHLAtimeStampParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAnextMessageRequest;
class HLAnextMessageRequestInteractionClass : public IHLAnextMessageRequestInteractionClass
{
  public:
    // IHLAnextMessageRequestInteractionClass
    HLAnextMessageRequestInteractionClass() = default;
    virtual ~HLAnextMessageRequestInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::vector<uint8_t>& HLAtimeStamp) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAnextMessageRequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAtimeStamp : HLAlogicalTime
    rti1516ev::ParameterHandle GetHLAtimeStampParameterHandle() const { return mHLAtimeStampParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAtimeStamp : HLAlogicalTime
    rti1516ev::ParameterHandle mHLAtimeStampParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAnextMessageRequestAvailable;
class HLAnextMessageRequestAvailableInteractionClass : public IHLAnextMessageRequestAvailableInteractionClass
{
  public:
    // IHLAnextMessageRequestAvailableInteractionClass
    HLAnextMessageRequestAvailableInteractionClass() = default;
    virtual ~HLAnextMessageRequestAvailableInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::vector<uint8_t>& HLAtimeStamp) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAnextMessageRequestAvailableInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAtimeStamp : HLAlogicalTime
    rti1516ev::ParameterHandle GetHLAtimeStampParameterHandle() const { return mHLAtimeStampParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAtimeStamp : HLAlogicalTime
    rti1516ev::ParameterHandle mHLAtimeStampParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAflushQueueRequest;
class HLAflushQueueRequestInteractionClass : public IHLAflushQueueRequestInteractionClass
{
  public:
    // IHLAflushQueueRequestInteractionClass
    HLAflushQueueRequestInteractionClass() = default;
    virtual ~HLAflushQueueRequestInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::vector<uint8_t>& HLAtimeStamp) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAflushQueueRequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAtimeStamp : HLAlogicalTime
    rti1516ev::ParameterHandle GetHLAtimeStampParameterHandle() const { return mHLAtimeStampParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAtimeStamp : HLAlogicalTime
    rti1516ev::ParameterHandle mHLAtimeStampParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAenableAsynchronousDelivery;
class HLAenableAsynchronousDeliveryInteractionClass : public IHLAenableAsynchronousDeliveryInteractionClass
{
  public:
    // IHLAenableAsynchronousDeliveryInteractionClass
    HLAenableAsynchronousDeliveryInteractionClass() = default;
    virtual ~HLAenableAsynchronousDeliveryInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAenableAsynchronousDeliveryInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAdisableAsynchronousDelivery;
class HLAdisableAsynchronousDeliveryInteractionClass : public IHLAdisableAsynchronousDeliveryInteractionClass
{
  public:
    // IHLAdisableAsynchronousDeliveryInteractionClass
    HLAdisableAsynchronousDeliveryInteractionClass() = default;
    virtual ~HLAdisableAsynchronousDeliveryInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAdisableAsynchronousDeliveryInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAmodifyLookahead;
class HLAmodifyLookaheadInteractionClass : public IHLAmodifyLookaheadInteractionClass
{
  public:
    // IHLAmodifyLookaheadInteractionClass
    HLAmodifyLookaheadInteractionClass() = default;
    virtual ~HLAmodifyLookaheadInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, const std::vector<uint8_t>& HLAlookahead) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAmodifyLookaheadInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAlookahead : HLAtimeInterval
    rti1516ev::ParameterHandle GetHLAlookaheadParameterHandle() const { return mHLAlookaheadParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAlookahead : HLAtimeInterval
    rti1516ev::ParameterHandle mHLAlookaheadParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAchangeAttributeOrderType;
class HLAchangeAttributeOrderTypeInteractionClass : public IHLAchangeAttributeOrderTypeInteractionClass
{
  public:
    // IHLAchangeAttributeOrderTypeInteractionClass
    HLAchangeAttributeOrderTypeInteractionClass() = default;
    virtual ~HLAchangeAttributeOrderTypeInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance, const std::vector<rti1516ev::HLAhandle>& HLAattributeList, HLAorderType HLAsendOrder) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAchangeAttributeOrderTypeInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle GetHLAobjectInstanceParameterHandle() const { return mHLAobjectInstanceParameterHandle; }
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle GetHLAattributeListParameterHandle() const { return mHLAattributeListParameterHandle; }
    // parameter HLAsendOrder : HLAorderType
    rti1516ev::ParameterHandle GetHLAsendOrderParameterHandle() const { return mHLAsendOrderParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAobjectInstance : HLAhandle
    rti1516ev::ParameterHandle mHLAobjectInstanceParameterHandle;
    // parameter HLAattributeList : HLAhandleList
    rti1516ev::ParameterHandle mHLAattributeListParameterHandle;
    // parameter HLAsendOrder : HLAorderType
    rti1516ev::ParameterHandle mHLAsendOrderParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAchangeInteractionOrderType;
class HLAchangeInteractionOrderTypeInteractionClass : public IHLAchangeInteractionOrderTypeInteractionClass
{
  public:
    // IHLAchangeInteractionOrderTypeInteractionClass
    HLAchangeInteractionOrderTypeInteractionClass() = default;
    virtual ~HLAchangeInteractionOrderTypeInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAinteractionClass, HLAorderType HLAsendOrder) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAchangeInteractionOrderTypeInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass);
    // parameter HLAfederate : HLAhandle
    rti1516ev::ParameterHandle GetHLAfederateParameterHandle() const { return mBaseClass->GetHLAfederateParameterHandle(); }
    // parameter HLAinteractionClass : HLAhandle
    rti1516ev::ParameterHandle GetHLAinteractionClassParameterHandle() const { return mHLAinteractionClassParameterHandle; }
    // parameter HLAsendOrder : HLAorderType
    rti1516ev::ParameterHandle GetHLAsendOrderParameterHandle() const { return mHLAsendOrderParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAserviceInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAinteractionClass : HLAhandle
    rti1516ev::ParameterHandle mHLAinteractionClassParameterHandle;
    // parameter HLAsendOrder : HLAorderType
    rti1516ev::ParameterHandle mHLAsendOrderParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAfederation;
class HLAfederationInteractionClass : public IHLAfederationInteractionClass
{
  public:
    // IHLAfederationInteractionClass
    HLAfederationInteractionClass() = default;
    virtual ~HLAfederationInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send() override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAfederationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAmanagerInteractionClass* baseClass);
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAmanagerInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAadjust;
class HLAadjustInteractionClass : public IHLAadjustInteractionClass
{
  public:
    // IHLAadjustInteractionClass
    HLAadjustInteractionClass() = default;
    virtual ~HLAadjustInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send() override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAadjustInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAfederationInteractionClass* baseClass);
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAfederationInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAsetSwitches;
class HLAsetSwitchesInteractionClass : public IHLAsetSwitchesInteractionClass
{
  public:
    // IHLAsetSwitchesInteractionClass
    HLAsetSwitchesInteractionClass() = default;
    virtual ~HLAsetSwitchesInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(HLAswitch HLAautoProvide) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAsetSwitchesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAadjustInteractionClass* baseClass);
    // parameter HLAautoProvide : HLAswitch
    rti1516ev::ParameterHandle GetHLAautoProvideParameterHandle() const { return mHLAautoProvideParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAadjustInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAautoProvide : HLAswitch
    rti1516ev::ParameterHandle mHLAautoProvideParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequest;
class HLArequestInteractionClass : public IHLArequestInteractionClass
{
  public:
    // IHLArequestInteractionClass
    HLArequestInteractionClass() = default;
    virtual ~HLArequestInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send() override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAfederationInteractionClass* baseClass);
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAfederationInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestSynchronizationPoints;
class HLArequestSynchronizationPointsInteractionClass : public IHLArequestSynchronizationPointsInteractionClass
{
  public:
    // IHLArequestSynchronizationPointsInteractionClass
    HLArequestSynchronizationPointsInteractionClass() = default;
    virtual ~HLArequestSynchronizationPointsInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send() override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestSynchronizationPointsInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestSynchronizationPointStatus;
class HLArequestSynchronizationPointStatusInteractionClass : public IHLArequestSynchronizationPointStatusInteractionClass
{
  public:
    // IHLArequestSynchronizationPointStatusInteractionClass
    HLArequestSynchronizationPointStatusInteractionClass() = default;
    virtual ~HLArequestSynchronizationPointStatusInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send() override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestSynchronizationPointStatusInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestFOMmoduleData;
class HLArequestFOMmoduleDataInteractionClass : public IHLArequestFOMmoduleDataInteractionClass
{
  public:
    // IHLArequestFOMmoduleDataInteractionClass
    HLArequestFOMmoduleDataInteractionClass() = default;
    virtual ~HLArequestFOMmoduleDataInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(HLAindex HLAFOMmoduleIndicator) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestFOMmoduleDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    // parameter HLAFOMmoduleIndicator : HLAindex
    rti1516ev::ParameterHandle GetHLAFOMmoduleIndicatorParameterHandle() const { return mHLAFOMmoduleIndicatorParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAFOMmoduleIndicator : HLAindex
    rti1516ev::ParameterHandle mHLAFOMmoduleIndicatorParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLArequestMIMdata;
class HLArequestMIMdataInteractionClass : public IHLArequestMIMdataInteractionClass
{
  public:
    // IHLArequestMIMdataInteractionClass
    HLArequestMIMdataInteractionClass() = default;
    virtual ~HLArequestMIMdataInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send() override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLArequestMIMdataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass);
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLArequestInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreport;
class HLAreportInteractionClass : public IHLAreportInteractionClass
{
  public:
    // IHLAreportInteractionClass
    HLAreportInteractionClass() = default;
    virtual ~HLAreportInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send() override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAfederationInteractionClass* baseClass);
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAfederationInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportSynchronizationPoints;
class HLAreportSynchronizationPointsInteractionClass : public IHLAreportSynchronizationPointsInteractionClass
{
  public:
    // IHLAreportSynchronizationPointsInteractionClass
    HLAreportSynchronizationPointsInteractionClass() = default;
    virtual ~HLAreportSynchronizationPointsInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(const std::vector<std::wstring>& HLAsyncPoints) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportSynchronizationPointsInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAsyncPoints : HLAsynchPointList
    rti1516ev::ParameterHandle GetHLAsyncPointsParameterHandle() const { return mHLAsyncPointsParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAsyncPoints : HLAsynchPointList
    rti1516ev::ParameterHandle mHLAsyncPointsParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportSynchronizationPointStatus;
class HLAreportSynchronizationPointStatusInteractionClass : public IHLAreportSynchronizationPointStatusInteractionClass
{
  public:
    // IHLAreportSynchronizationPointStatusInteractionClass
    HLAreportSynchronizationPointStatusInteractionClass() = default;
    virtual ~HLAreportSynchronizationPointStatusInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(const std::wstring& HLAsyncPointName, const std::vector<HLAsynchPointFederateEncoding>& HLAsyncPointFederates) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportSynchronizationPointStatusInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAsyncPointName : HLAunicodeString
    rti1516ev::ParameterHandle GetHLAsyncPointNameParameterHandle() const { return mHLAsyncPointNameParameterHandle; }
    // parameter HLAsyncPointFederates : HLAsynchPointFederateList
    rti1516ev::ParameterHandle GetHLAsyncPointFederatesParameterHandle() const { return mHLAsyncPointFederatesParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAsyncPointName : HLAunicodeString
    rti1516ev::ParameterHandle mHLAsyncPointNameParameterHandle;
    // parameter HLAsyncPointFederates : HLAsynchPointFederateList
    rti1516ev::ParameterHandle mHLAsyncPointFederatesParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportFOMmoduleData;
class HLAreportFOMmoduleDataInteractionClass : public IHLAreportFOMmoduleDataInteractionClass
{
  public:
    // IHLAreportFOMmoduleDataInteractionClass
    HLAreportFOMmoduleDataInteractionClass() = default;
    virtual ~HLAreportFOMmoduleDataInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(HLAindex HLAFOMmoduleIndicator, const std::wstring& HLAFOMmoduleData) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportFOMmoduleDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAFOMmoduleIndicator : HLAindex
    rti1516ev::ParameterHandle GetHLAFOMmoduleIndicatorParameterHandle() const { return mHLAFOMmoduleIndicatorParameterHandle; }
    // parameter HLAFOMmoduleData : HLAunicodeString
    rti1516ev::ParameterHandle GetHLAFOMmoduleDataParameterHandle() const { return mHLAFOMmoduleDataParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAFOMmoduleIndicator : HLAindex
    rti1516ev::ParameterHandle mHLAFOMmoduleIndicatorParameterHandle;
    // parameter HLAFOMmoduleData : HLAunicodeString
    rti1516ev::ParameterHandle mHLAFOMmoduleDataParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


class HLAreportMIMdata;
class HLAreportMIMdataInteractionClass : public IHLAreportMIMdataInteractionClass
{
  public:
    // IHLAreportMIMdataInteractionClass
    HLAreportMIMdataInteractionClass() = default;
    virtual ~HLAreportMIMdataInteractionClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    void send(const std::wstring& HLAMIMdata) override;
    void ReceiveInteraction(const rti1516ev::ParameterHandleValueMap & parameters);
    uint32_t RegisterReceiveCallback(ReceiveCallback callback) override;

    // internal
    rti1516ev::InteractionClassHandle GetInteractionClassHandle() const { return mInteractionClassHandle; }
    HLAreportMIMdataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass);
    // parameter HLAMIMdata : HLAunicodeString
    rti1516ev::ParameterHandle GetHLAMIMdataParameterHandle() const { return mHLAMIMdataParameterHandle; }
    rti1516ev::ParameterHandleSet GetAllParameterHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // interaction class handle
    rti1516ev::InteractionClassHandle mInteractionClassHandle;
    HLAreportInteractionClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Parameter handles
    // parameter HLAMIMdata : HLAunicodeString
    rti1516ev::ParameterHandle mHLAMIMdataParameterHandle;
    std::map<uint32_t, ReceiveCallback> _receiveCallbacks;
    uint32_t _receiveCallbacksNextKey = 0;
};


 

class InteractionClassRegistry : public IInteractionClassRegistry
{
  public:
    InteractionClassRegistry();
    ~InteractionClassRegistry();
    void Initialize(rti1516ev::RTIambassador* rtiAmbassador);
    static InteractionClassRegistry* GetInstance() { return sClassRegistry; }

    IHLAinteractionRootInteractionClass* GetHLAinteractionRootInteractionClass() const override { return mHLAinteractionRootInteractionClass.get(); }
    IHLAmanagerInteractionClass* GetHLAmanagerInteractionClass() const override { return mHLAmanagerInteractionClass.get(); }
    IHLAfederateInteractionClass* GetHLAfederateInteractionClass() const override { return mHLAfederateInteractionClass.get(); }
    IHLAadjustInteractionClass* GetHLAadjustInteractionClass() const override { return mHLAadjustInteractionClass.get(); }
    IHLAsetTimingInteractionClass* GetHLAsetTimingInteractionClass() const override { return mHLAsetTimingInteractionClass.get(); }
    IHLAmodifyAttributeStateInteractionClass* GetHLAmodifyAttributeStateInteractionClass() const override { return mHLAmodifyAttributeStateInteractionClass.get(); }
    IHLAsetServiceReportingInteractionClass* GetHLAsetServiceReportingInteractionClass() const override { return mHLAsetServiceReportingInteractionClass.get(); }
    IHLAsetExceptionReportingInteractionClass* GetHLAsetExceptionReportingInteractionClass() const override { return mHLAsetExceptionReportingInteractionClass.get(); }
    IHLAsetSwitchesInteractionClass* GetHLAsetSwitchesInteractionClass() const override { return mHLAsetSwitchesInteractionClass.get(); }
    IHLArequestInteractionClass* GetHLArequestInteractionClass() const override { return mHLArequestInteractionClass.get(); }
    IHLArequestPublicationsInteractionClass* GetHLArequestPublicationsInteractionClass() const override { return mHLArequestPublicationsInteractionClass.get(); }
    IHLArequestSubscriptionsInteractionClass* GetHLArequestSubscriptionsInteractionClass() const override { return mHLArequestSubscriptionsInteractionClass.get(); }
    IHLArequestObjectInstancesThatCanBeDeletedInteractionClass* GetHLArequestObjectInstancesThatCanBeDeletedInteractionClass() const override { return mHLArequestObjectInstancesThatCanBeDeletedInteractionClass.get(); }
    IHLArequestObjectInstancesUpdatedInteractionClass* GetHLArequestObjectInstancesUpdatedInteractionClass() const override { return mHLArequestObjectInstancesUpdatedInteractionClass.get(); }
    IHLArequestObjectInstancesReflectedInteractionClass* GetHLArequestObjectInstancesReflectedInteractionClass() const override { return mHLArequestObjectInstancesReflectedInteractionClass.get(); }
    IHLArequestUpdatesSentInteractionClass* GetHLArequestUpdatesSentInteractionClass() const override { return mHLArequestUpdatesSentInteractionClass.get(); }
    IHLArequestInteractionsSentInteractionClass* GetHLArequestInteractionsSentInteractionClass() const override { return mHLArequestInteractionsSentInteractionClass.get(); }
    IHLArequestReflectionsReceivedInteractionClass* GetHLArequestReflectionsReceivedInteractionClass() const override { return mHLArequestReflectionsReceivedInteractionClass.get(); }
    IHLArequestInteractionsReceivedInteractionClass* GetHLArequestInteractionsReceivedInteractionClass() const override { return mHLArequestInteractionsReceivedInteractionClass.get(); }
    IHLArequestObjectInstanceInformationInteractionClass* GetHLArequestObjectInstanceInformationInteractionClass() const override { return mHLArequestObjectInstanceInformationInteractionClass.get(); }
    IHLArequestFOMmoduleDataInteractionClass* GetHLArequestFOMmoduleDataInteractionClass() const override { return mHLArequestFOMmoduleDataInteractionClass.get(); }
    IHLAreportInteractionClass* GetHLAreportInteractionClass() const override { return mHLAreportInteractionClass.get(); }
    IHLAreportObjectClassPublicationInteractionClass* GetHLAreportObjectClassPublicationInteractionClass() const override { return mHLAreportObjectClassPublicationInteractionClass.get(); }
    IHLAreportInteractionPublicationInteractionClass* GetHLAreportInteractionPublicationInteractionClass() const override { return mHLAreportInteractionPublicationInteractionClass.get(); }
    IHLAreportObjectClassSubscriptionInteractionClass* GetHLAreportObjectClassSubscriptionInteractionClass() const override { return mHLAreportObjectClassSubscriptionInteractionClass.get(); }
    IHLAreportInteractionSubscriptionInteractionClass* GetHLAreportInteractionSubscriptionInteractionClass() const override { return mHLAreportInteractionSubscriptionInteractionClass.get(); }
    IHLAreportObjectInstancesThatCanBeDeletedInteractionClass* GetHLAreportObjectInstancesThatCanBeDeletedInteractionClass() const override { return mHLAreportObjectInstancesThatCanBeDeletedInteractionClass.get(); }
    IHLAreportObjectInstancesUpdatedInteractionClass* GetHLAreportObjectInstancesUpdatedInteractionClass() const override { return mHLAreportObjectInstancesUpdatedInteractionClass.get(); }
    IHLAreportObjectInstancesReflectedInteractionClass* GetHLAreportObjectInstancesReflectedInteractionClass() const override { return mHLAreportObjectInstancesReflectedInteractionClass.get(); }
    IHLAreportUpdatesSentInteractionClass* GetHLAreportUpdatesSentInteractionClass() const override { return mHLAreportUpdatesSentInteractionClass.get(); }
    IHLAreportReflectionsReceivedInteractionClass* GetHLAreportReflectionsReceivedInteractionClass() const override { return mHLAreportReflectionsReceivedInteractionClass.get(); }
    IHLAreportInteractionsSentInteractionClass* GetHLAreportInteractionsSentInteractionClass() const override { return mHLAreportInteractionsSentInteractionClass.get(); }
    IHLAreportInteractionsReceivedInteractionClass* GetHLAreportInteractionsReceivedInteractionClass() const override { return mHLAreportInteractionsReceivedInteractionClass.get(); }
    IHLAreportObjectInstanceInformationInteractionClass* GetHLAreportObjectInstanceInformationInteractionClass() const override { return mHLAreportObjectInstanceInformationInteractionClass.get(); }
    IHLAreportExceptionInteractionClass* GetHLAreportExceptionInteractionClass() const override { return mHLAreportExceptionInteractionClass.get(); }
    IHLAreportServiceInvocationInteractionClass* GetHLAreportServiceInvocationInteractionClass() const override { return mHLAreportServiceInvocationInteractionClass.get(); }
    IHLAreportMOMexceptionInteractionClass* GetHLAreportMOMexceptionInteractionClass() const override { return mHLAreportMOMexceptionInteractionClass.get(); }
    IHLAreportFederateLostInteractionClass* GetHLAreportFederateLostInteractionClass() const override { return mHLAreportFederateLostInteractionClass.get(); }
    IHLAreportFOMmoduleDataInteractionClass* GetHLAreportFOMmoduleDataInteractionClass() const override { return mHLAreportFOMmoduleDataInteractionClass.get(); }
    IHLAserviceInteractionClass* GetHLAserviceInteractionClass() const override { return mHLAserviceInteractionClass.get(); }
    IHLAresignFederationExecutionInteractionClass* GetHLAresignFederationExecutionInteractionClass() const override { return mHLAresignFederationExecutionInteractionClass.get(); }
    IHLAsynchronizationPointAchievedInteractionClass* GetHLAsynchronizationPointAchievedInteractionClass() const override { return mHLAsynchronizationPointAchievedInteractionClass.get(); }
    IHLAfederateSaveBegunInteractionClass* GetHLAfederateSaveBegunInteractionClass() const override { return mHLAfederateSaveBegunInteractionClass.get(); }
    IHLAfederateSaveCompleteInteractionClass* GetHLAfederateSaveCompleteInteractionClass() const override { return mHLAfederateSaveCompleteInteractionClass.get(); }
    IHLAfederateRestoreCompleteInteractionClass* GetHLAfederateRestoreCompleteInteractionClass() const override { return mHLAfederateRestoreCompleteInteractionClass.get(); }
    IHLApublishObjectClassAttributesInteractionClass* GetHLApublishObjectClassAttributesInteractionClass() const override { return mHLApublishObjectClassAttributesInteractionClass.get(); }
    IHLAunpublishObjectClassAttributesInteractionClass* GetHLAunpublishObjectClassAttributesInteractionClass() const override { return mHLAunpublishObjectClassAttributesInteractionClass.get(); }
    IHLApublishInteractionClassInteractionClass* GetHLApublishInteractionClassInteractionClass() const override { return mHLApublishInteractionClassInteractionClass.get(); }
    IHLAunpublishInteractionClassInteractionClass* GetHLAunpublishInteractionClassInteractionClass() const override { return mHLAunpublishInteractionClassInteractionClass.get(); }
    IHLAsubscribeObjectClassAttributesInteractionClass* GetHLAsubscribeObjectClassAttributesInteractionClass() const override { return mHLAsubscribeObjectClassAttributesInteractionClass.get(); }
    IHLAunsubscribeObjectClassAttributesInteractionClass* GetHLAunsubscribeObjectClassAttributesInteractionClass() const override { return mHLAunsubscribeObjectClassAttributesInteractionClass.get(); }
    IHLAsubscribeInteractionClassInteractionClass* GetHLAsubscribeInteractionClassInteractionClass() const override { return mHLAsubscribeInteractionClassInteractionClass.get(); }
    IHLAunsubscribeInteractionClassInteractionClass* GetHLAunsubscribeInteractionClassInteractionClass() const override { return mHLAunsubscribeInteractionClassInteractionClass.get(); }
    IHLAdeleteObjectInstanceInteractionClass* GetHLAdeleteObjectInstanceInteractionClass() const override { return mHLAdeleteObjectInstanceInteractionClass.get(); }
    IHLAlocalDeleteObjectInstanceInteractionClass* GetHLAlocalDeleteObjectInstanceInteractionClass() const override { return mHLAlocalDeleteObjectInstanceInteractionClass.get(); }
    IHLArequestAttributeTransportationTypeChangeInteractionClass* GetHLArequestAttributeTransportationTypeChangeInteractionClass() const override { return mHLArequestAttributeTransportationTypeChangeInteractionClass.get(); }
    IHLArequestInteractionTransportationTypeChangeInteractionClass* GetHLArequestInteractionTransportationTypeChangeInteractionClass() const override { return mHLArequestInteractionTransportationTypeChangeInteractionClass.get(); }
    IHLAunconditionalAttributeOwnershipDivestitureInteractionClass* GetHLAunconditionalAttributeOwnershipDivestitureInteractionClass() const override { return mHLAunconditionalAttributeOwnershipDivestitureInteractionClass.get(); }
    IHLAenableTimeRegulationInteractionClass* GetHLAenableTimeRegulationInteractionClass() const override { return mHLAenableTimeRegulationInteractionClass.get(); }
    IHLAdisableTimeRegulationInteractionClass* GetHLAdisableTimeRegulationInteractionClass() const override { return mHLAdisableTimeRegulationInteractionClass.get(); }
    IHLAenableTimeConstrainedInteractionClass* GetHLAenableTimeConstrainedInteractionClass() const override { return mHLAenableTimeConstrainedInteractionClass.get(); }
    IHLAdisableTimeConstrainedInteractionClass* GetHLAdisableTimeConstrainedInteractionClass() const override { return mHLAdisableTimeConstrainedInteractionClass.get(); }
    IHLAtimeAdvanceRequestInteractionClass* GetHLAtimeAdvanceRequestInteractionClass() const override { return mHLAtimeAdvanceRequestInteractionClass.get(); }
    IHLAtimeAdvanceRequestAvailableInteractionClass* GetHLAtimeAdvanceRequestAvailableInteractionClass() const override { return mHLAtimeAdvanceRequestAvailableInteractionClass.get(); }
    IHLAnextMessageRequestInteractionClass* GetHLAnextMessageRequestInteractionClass() const override { return mHLAnextMessageRequestInteractionClass.get(); }
    IHLAnextMessageRequestAvailableInteractionClass* GetHLAnextMessageRequestAvailableInteractionClass() const override { return mHLAnextMessageRequestAvailableInteractionClass.get(); }
    IHLAflushQueueRequestInteractionClass* GetHLAflushQueueRequestInteractionClass() const override { return mHLAflushQueueRequestInteractionClass.get(); }
    IHLAenableAsynchronousDeliveryInteractionClass* GetHLAenableAsynchronousDeliveryInteractionClass() const override { return mHLAenableAsynchronousDeliveryInteractionClass.get(); }
    IHLAdisableAsynchronousDeliveryInteractionClass* GetHLAdisableAsynchronousDeliveryInteractionClass() const override { return mHLAdisableAsynchronousDeliveryInteractionClass.get(); }
    IHLAmodifyLookaheadInteractionClass* GetHLAmodifyLookaheadInteractionClass() const override { return mHLAmodifyLookaheadInteractionClass.get(); }
    IHLAchangeAttributeOrderTypeInteractionClass* GetHLAchangeAttributeOrderTypeInteractionClass() const override { return mHLAchangeAttributeOrderTypeInteractionClass.get(); }
    IHLAchangeInteractionOrderTypeInteractionClass* GetHLAchangeInteractionOrderTypeInteractionClass() const override { return mHLAchangeInteractionOrderTypeInteractionClass.get(); }
    IHLAfederationInteractionClass* GetHLAfederationInteractionClass() const override { return mHLAfederationInteractionClass.get(); }
    IHLAadjustInteractionClass* GetHLAadjustInteractionClass() const override { return mHLAadjustInteractionClass.get(); }
    IHLAsetSwitchesInteractionClass* GetHLAsetSwitchesInteractionClass() const override { return mHLAsetSwitchesInteractionClass.get(); }
    IHLArequestInteractionClass* GetHLArequestInteractionClass() const override { return mHLArequestInteractionClass.get(); }
    IHLArequestSynchronizationPointsInteractionClass* GetHLArequestSynchronizationPointsInteractionClass() const override { return mHLArequestSynchronizationPointsInteractionClass.get(); }
    IHLArequestSynchronizationPointStatusInteractionClass* GetHLArequestSynchronizationPointStatusInteractionClass() const override { return mHLArequestSynchronizationPointStatusInteractionClass.get(); }
    IHLArequestFOMmoduleDataInteractionClass* GetHLArequestFOMmoduleDataInteractionClass() const override { return mHLArequestFOMmoduleDataInteractionClass.get(); }
    IHLArequestMIMdataInteractionClass* GetHLArequestMIMdataInteractionClass() const override { return mHLArequestMIMdataInteractionClass.get(); }
    IHLAreportInteractionClass* GetHLAreportInteractionClass() const override { return mHLAreportInteractionClass.get(); }
    IHLAreportSynchronizationPointsInteractionClass* GetHLAreportSynchronizationPointsInteractionClass() const override { return mHLAreportSynchronizationPointsInteractionClass.get(); }
    IHLAreportSynchronizationPointStatusInteractionClass* GetHLAreportSynchronizationPointStatusInteractionClass() const override { return mHLAreportSynchronizationPointStatusInteractionClass.get(); }
    IHLAreportFOMmoduleDataInteractionClass* GetHLAreportFOMmoduleDataInteractionClass() const override { return mHLAreportFOMmoduleDataInteractionClass.get(); }
    IHLAreportMIMdataInteractionClass* GetHLAreportMIMdataInteractionClass() const override { return mHLAreportMIMdataInteractionClass.get(); }

    void ReceiveInteraction(rti1516ev::InteractionClassHandle theInteraction, const rti1516ev::ParameterHandleValueMap & parameters);

  private:
    static InteractionClassRegistry* sClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    std::unique_ptr<HLAinteractionRootInteractionClass> mHLAinteractionRootInteractionClass;
    std::unique_ptr<HLAmanagerInteractionClass> mHLAmanagerInteractionClass;
    std::unique_ptr<HLAfederateInteractionClass> mHLAfederateInteractionClass;
    std::unique_ptr<HLAadjustInteractionClass> mHLAadjustInteractionClass;
    std::unique_ptr<HLAsetTimingInteractionClass> mHLAsetTimingInteractionClass;
    std::unique_ptr<HLAmodifyAttributeStateInteractionClass> mHLAmodifyAttributeStateInteractionClass;
    std::unique_ptr<HLAsetServiceReportingInteractionClass> mHLAsetServiceReportingInteractionClass;
    std::unique_ptr<HLAsetExceptionReportingInteractionClass> mHLAsetExceptionReportingInteractionClass;
    std::unique_ptr<HLAsetSwitchesInteractionClass> mHLAsetSwitchesInteractionClass;
    std::unique_ptr<HLArequestInteractionClass> mHLArequestInteractionClass;
    std::unique_ptr<HLArequestPublicationsInteractionClass> mHLArequestPublicationsInteractionClass;
    std::unique_ptr<HLArequestSubscriptionsInteractionClass> mHLArequestSubscriptionsInteractionClass;
    std::unique_ptr<HLArequestObjectInstancesThatCanBeDeletedInteractionClass> mHLArequestObjectInstancesThatCanBeDeletedInteractionClass;
    std::unique_ptr<HLArequestObjectInstancesUpdatedInteractionClass> mHLArequestObjectInstancesUpdatedInteractionClass;
    std::unique_ptr<HLArequestObjectInstancesReflectedInteractionClass> mHLArequestObjectInstancesReflectedInteractionClass;
    std::unique_ptr<HLArequestUpdatesSentInteractionClass> mHLArequestUpdatesSentInteractionClass;
    std::unique_ptr<HLArequestInteractionsSentInteractionClass> mHLArequestInteractionsSentInteractionClass;
    std::unique_ptr<HLArequestReflectionsReceivedInteractionClass> mHLArequestReflectionsReceivedInteractionClass;
    std::unique_ptr<HLArequestInteractionsReceivedInteractionClass> mHLArequestInteractionsReceivedInteractionClass;
    std::unique_ptr<HLArequestObjectInstanceInformationInteractionClass> mHLArequestObjectInstanceInformationInteractionClass;
    std::unique_ptr<HLArequestFOMmoduleDataInteractionClass> mHLArequestFOMmoduleDataInteractionClass;
    std::unique_ptr<HLAreportInteractionClass> mHLAreportInteractionClass;
    std::unique_ptr<HLAreportObjectClassPublicationInteractionClass> mHLAreportObjectClassPublicationInteractionClass;
    std::unique_ptr<HLAreportInteractionPublicationInteractionClass> mHLAreportInteractionPublicationInteractionClass;
    std::unique_ptr<HLAreportObjectClassSubscriptionInteractionClass> mHLAreportObjectClassSubscriptionInteractionClass;
    std::unique_ptr<HLAreportInteractionSubscriptionInteractionClass> mHLAreportInteractionSubscriptionInteractionClass;
    std::unique_ptr<HLAreportObjectInstancesThatCanBeDeletedInteractionClass> mHLAreportObjectInstancesThatCanBeDeletedInteractionClass;
    std::unique_ptr<HLAreportObjectInstancesUpdatedInteractionClass> mHLAreportObjectInstancesUpdatedInteractionClass;
    std::unique_ptr<HLAreportObjectInstancesReflectedInteractionClass> mHLAreportObjectInstancesReflectedInteractionClass;
    std::unique_ptr<HLAreportUpdatesSentInteractionClass> mHLAreportUpdatesSentInteractionClass;
    std::unique_ptr<HLAreportReflectionsReceivedInteractionClass> mHLAreportReflectionsReceivedInteractionClass;
    std::unique_ptr<HLAreportInteractionsSentInteractionClass> mHLAreportInteractionsSentInteractionClass;
    std::unique_ptr<HLAreportInteractionsReceivedInteractionClass> mHLAreportInteractionsReceivedInteractionClass;
    std::unique_ptr<HLAreportObjectInstanceInformationInteractionClass> mHLAreportObjectInstanceInformationInteractionClass;
    std::unique_ptr<HLAreportExceptionInteractionClass> mHLAreportExceptionInteractionClass;
    std::unique_ptr<HLAreportServiceInvocationInteractionClass> mHLAreportServiceInvocationInteractionClass;
    std::unique_ptr<HLAreportMOMexceptionInteractionClass> mHLAreportMOMexceptionInteractionClass;
    std::unique_ptr<HLAreportFederateLostInteractionClass> mHLAreportFederateLostInteractionClass;
    std::unique_ptr<HLAreportFOMmoduleDataInteractionClass> mHLAreportFOMmoduleDataInteractionClass;
    std::unique_ptr<HLAserviceInteractionClass> mHLAserviceInteractionClass;
    std::unique_ptr<HLAresignFederationExecutionInteractionClass> mHLAresignFederationExecutionInteractionClass;
    std::unique_ptr<HLAsynchronizationPointAchievedInteractionClass> mHLAsynchronizationPointAchievedInteractionClass;
    std::unique_ptr<HLAfederateSaveBegunInteractionClass> mHLAfederateSaveBegunInteractionClass;
    std::unique_ptr<HLAfederateSaveCompleteInteractionClass> mHLAfederateSaveCompleteInteractionClass;
    std::unique_ptr<HLAfederateRestoreCompleteInteractionClass> mHLAfederateRestoreCompleteInteractionClass;
    std::unique_ptr<HLApublishObjectClassAttributesInteractionClass> mHLApublishObjectClassAttributesInteractionClass;
    std::unique_ptr<HLAunpublishObjectClassAttributesInteractionClass> mHLAunpublishObjectClassAttributesInteractionClass;
    std::unique_ptr<HLApublishInteractionClassInteractionClass> mHLApublishInteractionClassInteractionClass;
    std::unique_ptr<HLAunpublishInteractionClassInteractionClass> mHLAunpublishInteractionClassInteractionClass;
    std::unique_ptr<HLAsubscribeObjectClassAttributesInteractionClass> mHLAsubscribeObjectClassAttributesInteractionClass;
    std::unique_ptr<HLAunsubscribeObjectClassAttributesInteractionClass> mHLAunsubscribeObjectClassAttributesInteractionClass;
    std::unique_ptr<HLAsubscribeInteractionClassInteractionClass> mHLAsubscribeInteractionClassInteractionClass;
    std::unique_ptr<HLAunsubscribeInteractionClassInteractionClass> mHLAunsubscribeInteractionClassInteractionClass;
    std::unique_ptr<HLAdeleteObjectInstanceInteractionClass> mHLAdeleteObjectInstanceInteractionClass;
    std::unique_ptr<HLAlocalDeleteObjectInstanceInteractionClass> mHLAlocalDeleteObjectInstanceInteractionClass;
    std::unique_ptr<HLArequestAttributeTransportationTypeChangeInteractionClass> mHLArequestAttributeTransportationTypeChangeInteractionClass;
    std::unique_ptr<HLArequestInteractionTransportationTypeChangeInteractionClass> mHLArequestInteractionTransportationTypeChangeInteractionClass;
    std::unique_ptr<HLAunconditionalAttributeOwnershipDivestitureInteractionClass> mHLAunconditionalAttributeOwnershipDivestitureInteractionClass;
    std::unique_ptr<HLAenableTimeRegulationInteractionClass> mHLAenableTimeRegulationInteractionClass;
    std::unique_ptr<HLAdisableTimeRegulationInteractionClass> mHLAdisableTimeRegulationInteractionClass;
    std::unique_ptr<HLAenableTimeConstrainedInteractionClass> mHLAenableTimeConstrainedInteractionClass;
    std::unique_ptr<HLAdisableTimeConstrainedInteractionClass> mHLAdisableTimeConstrainedInteractionClass;
    std::unique_ptr<HLAtimeAdvanceRequestInteractionClass> mHLAtimeAdvanceRequestInteractionClass;
    std::unique_ptr<HLAtimeAdvanceRequestAvailableInteractionClass> mHLAtimeAdvanceRequestAvailableInteractionClass;
    std::unique_ptr<HLAnextMessageRequestInteractionClass> mHLAnextMessageRequestInteractionClass;
    std::unique_ptr<HLAnextMessageRequestAvailableInteractionClass> mHLAnextMessageRequestAvailableInteractionClass;
    std::unique_ptr<HLAflushQueueRequestInteractionClass> mHLAflushQueueRequestInteractionClass;
    std::unique_ptr<HLAenableAsynchronousDeliveryInteractionClass> mHLAenableAsynchronousDeliveryInteractionClass;
    std::unique_ptr<HLAdisableAsynchronousDeliveryInteractionClass> mHLAdisableAsynchronousDeliveryInteractionClass;
    std::unique_ptr<HLAmodifyLookaheadInteractionClass> mHLAmodifyLookaheadInteractionClass;
    std::unique_ptr<HLAchangeAttributeOrderTypeInteractionClass> mHLAchangeAttributeOrderTypeInteractionClass;
    std::unique_ptr<HLAchangeInteractionOrderTypeInteractionClass> mHLAchangeInteractionOrderTypeInteractionClass;
    std::unique_ptr<HLAfederationInteractionClass> mHLAfederationInteractionClass;
    std::unique_ptr<HLAadjustInteractionClass> mHLAadjustInteractionClass;
    std::unique_ptr<HLAsetSwitchesInteractionClass> mHLAsetSwitchesInteractionClass;
    std::unique_ptr<HLArequestInteractionClass> mHLArequestInteractionClass;
    std::unique_ptr<HLArequestSynchronizationPointsInteractionClass> mHLArequestSynchronizationPointsInteractionClass;
    std::unique_ptr<HLArequestSynchronizationPointStatusInteractionClass> mHLArequestSynchronizationPointStatusInteractionClass;
    std::unique_ptr<HLArequestFOMmoduleDataInteractionClass> mHLArequestFOMmoduleDataInteractionClass;
    std::unique_ptr<HLArequestMIMdataInteractionClass> mHLArequestMIMdataInteractionClass;
    std::unique_ptr<HLAreportInteractionClass> mHLAreportInteractionClass;
    std::unique_ptr<HLAreportSynchronizationPointsInteractionClass> mHLAreportSynchronizationPointsInteractionClass;
    std::unique_ptr<HLAreportSynchronizationPointStatusInteractionClass> mHLAreportSynchronizationPointStatusInteractionClass;
    std::unique_ptr<HLAreportFOMmoduleDataInteractionClass> mHLAreportFOMmoduleDataInteractionClass;
    std::unique_ptr<HLAreportMIMdataInteractionClass> mHLAreportMIMdataInteractionClass;
}; // class InteractionClassRegistry

} // namespace OpenRTI
} // namespace Mom
