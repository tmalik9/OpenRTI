
// Code automatically generated by T4 template from D:\vfs\OpenRTI-codegen\tests\rti1516ev\codegen\\mom.xml, do not edit

#include <vector>
#include <cassert>

#include "RTI/encoding/HLAhandle.h"
#include "RTI/encoding/HLAopaqueData.h"
#include "RTI/time/HLAinteger64Time.h"

#include "momInteractions.h"
#include "momObjects.h"

namespace OpenRTI {
namespace Mom {
HLAinteractionRootInteractionClass::HLAinteractionRootInteractionClass(rti1516ev::RTIambassador* rtiAmbassador)
{
  mRtiAmbassador = rtiAmbassador;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot");
}

void HLAinteractionRootInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAinteractionRootInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAinteractionRootInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAinteractionRootInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAinteractionRootInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}

void HLAinteractionRootInteractionClass::sendWithTime(int64_t time)
{
  rti1516ev::ParameterHandleValueMap parameters;
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData(), rti1516ev::HLAinteger64Time(time));
}

void HLAinteractionRootInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback();
  }
}

void HLAinteractionRootInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&, const rti1516ev::LogicalTime& time, rti1516ev::OrderType /*receivedOrder*/)
{
  for (auto& entry : _receiveCallbacksWithTime) {
    auto& callback = entry.second;
    callback(static_cast<const rti1516ev::HLAinteger64Time&>(time).getTime());
  }
}

uint32_t HLAinteractionRootInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}

uint32_t HLAinteractionRootInteractionClass::RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback)
{
  uint32_t key = _receiveCallbacksWithTimeNextKey++;
  _receiveCallbacksWithTime.insert(std::make_pair(key, callback));
  return key;
}

rti1516ev::ParameterHandleSet HLAinteractionRootInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLAmanager'
HLAmanagerInteractionClass::HLAmanagerInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAinteractionRootInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager");
}

void HLAmanagerInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAmanagerInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAmanagerInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAmanagerInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAmanagerInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAmanagerInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback();
  }
}


uint32_t HLAmanagerInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAmanagerInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLAfederate'
HLAfederateInteractionClass::HLAfederateInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAmanagerInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate");
  // parameter HLAfederate : HLAhandle
  mHLAfederateParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAfederate");
}

void HLAfederateInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAfederateInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAfederateInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAfederateInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAfederateInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAfederateInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLAfederateInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAfederateInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAadjust'
HLAadjustInteractionClass::HLAadjustInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAfederateInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust");
}

void HLAadjustInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAadjustInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAadjustInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAadjustInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAadjustInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAadjustInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLAadjustInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAadjustInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAsetTiming'
HLAsetTimingInteractionClass::HLAsetTimingInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAadjustInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAsetTiming");
  // parameter HLAreportPeriod : HLAseconds
  mHLAreportPeriodParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAreportPeriod");
}

void HLAsetTimingInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsetTimingInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsetTimingInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAsetTimingInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsetTimingInteractionClass::send(rti1516ev::HLAhandle HLAfederate, HLAseconds HLAreportPeriod)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAinteger32BE HLAreportPeriodEncoder(HLAreportPeriod);
  parameters.insert(std::make_pair(GetHLAreportPeriodParameterHandle(), HLAreportPeriodEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAsetTimingInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAinteger32BE HLAreportPeriodDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreportPeriodIter = parameters.find(GetHLAreportPeriodParameterHandle());
  if (HLAreportPeriodIter != parameters.end())
  {
    HLAreportPeriodDecoder.decode(HLAreportPeriodIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAreportPeriodDecoder.get());
  }
}


uint32_t HLAsetTimingInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAsetTimingInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAreportPeriodParameterHandle());
  return result;
}

// object class type 'HLAmodifyAttributeState'
HLAmodifyAttributeStateInteractionClass::HLAmodifyAttributeStateInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAadjustInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAmodifyAttributeState");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
  // parameter HLAattribute : HLAhandle
  mHLAattributeParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattribute");
  // parameter HLAattributeState : HLAownership
  mHLAattributeStateParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeState");
}

void HLAmodifyAttributeStateInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAmodifyAttributeStateInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAmodifyAttributeStateInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAmodifyAttributeStateInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAmodifyAttributeStateInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance, rti1516ev::HLAhandle HLAattribute, HLAownership HLAattributeState)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAobjectInstanceEncoder(HLAobjectInstance);
  parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  rti1516ev::HLAhandle HLAattributeEncoder(HLAattribute);
  parameters.insert(std::make_pair(GetHLAattributeParameterHandle(), HLAattributeEncoder.encode()));
  rti1516ev::HLAinteger32BE HLAattributeStateEncoder(HLAattributeState);
  parameters.insert(std::make_pair(GetHLAattributeStateParameterHandle(), HLAattributeStateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAmodifyAttributeStateInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
  }
  rti1516ev::HLAhandle HLAattributeDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeIter = parameters.find(GetHLAattributeParameterHandle());
  if (HLAattributeIter != parameters.end())
  {
    HLAattributeDecoder.decode(HLAattributeIter->second);
  }
  rti1516ev::HLAinteger32BE HLAattributeStateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeStateIter = parameters.find(GetHLAattributeStateParameterHandle());
  if (HLAattributeStateIter != parameters.end())
  {
    HLAattributeStateDecoder.decode(HLAattributeStateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectInstanceDecoder, HLAattributeDecoder, static_cast<HLAownership>(HLAattributeStateDecoder.get()));
  }
}


uint32_t HLAmodifyAttributeStateInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAmodifyAttributeStateInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  result.insert(GetHLAattributeParameterHandle());
  result.insert(GetHLAattributeStateParameterHandle());
  return result;
}

// object class type 'HLAsetServiceReporting'
HLAsetServiceReportingInteractionClass::HLAsetServiceReportingInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAadjustInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAsetServiceReporting");
  // parameter HLAreportingState : HLAboolean
  mHLAreportingStateParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAreportingState");
}

void HLAsetServiceReportingInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsetServiceReportingInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsetServiceReportingInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAsetServiceReportingInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsetServiceReportingInteractionClass::send(rti1516ev::HLAhandle HLAfederate, bool HLAreportingState)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAboolean HLAreportingStateEncoder(HLAreportingState);
  parameters.insert(std::make_pair(GetHLAreportingStateParameterHandle(), HLAreportingStateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAsetServiceReportingInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAboolean HLAreportingStateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreportingStateIter = parameters.find(GetHLAreportingStateParameterHandle());
  if (HLAreportingStateIter != parameters.end())
  {
    HLAreportingStateDecoder.decode(HLAreportingStateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAreportingStateDecoder.get());
  }
}


uint32_t HLAsetServiceReportingInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAsetServiceReportingInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAreportingStateParameterHandle());
  return result;
}

// object class type 'HLAsetExceptionReporting'
HLAsetExceptionReportingInteractionClass::HLAsetExceptionReportingInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAadjustInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAsetExceptionReporting");
  // parameter HLAreportingState : HLAboolean
  mHLAreportingStateParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAreportingState");
}

void HLAsetExceptionReportingInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsetExceptionReportingInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsetExceptionReportingInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAsetExceptionReportingInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsetExceptionReportingInteractionClass::send(rti1516ev::HLAhandle HLAfederate, bool HLAreportingState)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAboolean HLAreportingStateEncoder(HLAreportingState);
  parameters.insert(std::make_pair(GetHLAreportingStateParameterHandle(), HLAreportingStateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAsetExceptionReportingInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAboolean HLAreportingStateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreportingStateIter = parameters.find(GetHLAreportingStateParameterHandle());
  if (HLAreportingStateIter != parameters.end())
  {
    HLAreportingStateDecoder.decode(HLAreportingStateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAreportingStateDecoder.get());
  }
}


uint32_t HLAsetExceptionReportingInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAsetExceptionReportingInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAreportingStateParameterHandle());
  return result;
}

// object class type 'HLAsetSwitches'
HLAsetSwitchesInteractionClass::HLAsetSwitchesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAadjustInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAadjust.HLAsetSwitches");
  // parameter HLAconveyRegionDesignatorSets : HLAswitch
  mHLAconveyRegionDesignatorSetsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAconveyRegionDesignatorSets");
  // parameter HLAconveyProducingFederate : HLAswitch
  mHLAconveyProducingFederateParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAconveyProducingFederate");
}

void HLAsetSwitchesInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsetSwitchesInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsetSwitchesInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAsetSwitchesInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsetSwitchesInteractionClass::send(rti1516ev::HLAhandle HLAfederate, HLAswitch HLAconveyRegionDesignatorSets, HLAswitch HLAconveyProducingFederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAinteger32BE HLAconveyRegionDesignatorSetsEncoder(HLAconveyRegionDesignatorSets);
  parameters.insert(std::make_pair(GetHLAconveyRegionDesignatorSetsParameterHandle(), HLAconveyRegionDesignatorSetsEncoder.encode()));
  rti1516ev::HLAinteger32BE HLAconveyProducingFederateEncoder(HLAconveyProducingFederate);
  parameters.insert(std::make_pair(GetHLAconveyProducingFederateParameterHandle(), HLAconveyProducingFederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAsetSwitchesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAinteger32BE HLAconveyRegionDesignatorSetsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAconveyRegionDesignatorSetsIter = parameters.find(GetHLAconveyRegionDesignatorSetsParameterHandle());
  if (HLAconveyRegionDesignatorSetsIter != parameters.end())
  {
    HLAconveyRegionDesignatorSetsDecoder.decode(HLAconveyRegionDesignatorSetsIter->second);
  }
  rti1516ev::HLAinteger32BE HLAconveyProducingFederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAconveyProducingFederateIter = parameters.find(GetHLAconveyProducingFederateParameterHandle());
  if (HLAconveyProducingFederateIter != parameters.end())
  {
    HLAconveyProducingFederateDecoder.decode(HLAconveyProducingFederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, static_cast<HLAswitch>(HLAconveyRegionDesignatorSetsDecoder.get()), static_cast<HLAswitch>(HLAconveyProducingFederateDecoder.get()));
  }
}


uint32_t HLAsetSwitchesInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAsetSwitchesInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAconveyRegionDesignatorSetsParameterHandle());
  result.insert(GetHLAconveyProducingFederateParameterHandle());
  return result;
}

// object class type 'HLArequest'
HLArequestInteractionClass::HLArequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAfederateInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest");
}

void HLArequestInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLArequestInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestPublications'
HLArequestPublicationsInteractionClass::HLArequestPublicationsInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestPublications");
}

void HLArequestPublicationsInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestPublicationsInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestPublicationsInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestPublicationsInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestPublicationsInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestPublicationsInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLArequestPublicationsInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestPublicationsInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestSubscriptions'
HLArequestSubscriptionsInteractionClass::HLArequestSubscriptionsInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestSubscriptions");
}

void HLArequestSubscriptionsInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestSubscriptionsInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestSubscriptionsInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestSubscriptionsInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestSubscriptionsInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestSubscriptionsInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLArequestSubscriptionsInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestSubscriptionsInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestObjectInstancesThatCanBeDeleted'
HLArequestObjectInstancesThatCanBeDeletedInteractionClass::HLArequestObjectInstancesThatCanBeDeletedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestObjectInstancesThatCanBeDeleted");
}

void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestObjectInstancesThatCanBeDeletedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLArequestObjectInstancesThatCanBeDeletedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestObjectInstancesThatCanBeDeletedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestObjectInstancesUpdated'
HLArequestObjectInstancesUpdatedInteractionClass::HLArequestObjectInstancesUpdatedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestObjectInstancesUpdated");
}

void HLArequestObjectInstancesUpdatedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestObjectInstancesUpdatedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestObjectInstancesUpdatedInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestObjectInstancesUpdatedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestObjectInstancesUpdatedInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestObjectInstancesUpdatedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLArequestObjectInstancesUpdatedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestObjectInstancesUpdatedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestObjectInstancesReflected'
HLArequestObjectInstancesReflectedInteractionClass::HLArequestObjectInstancesReflectedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestObjectInstancesReflected");
}

void HLArequestObjectInstancesReflectedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestObjectInstancesReflectedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestObjectInstancesReflectedInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestObjectInstancesReflectedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestObjectInstancesReflectedInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestObjectInstancesReflectedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLArequestObjectInstancesReflectedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestObjectInstancesReflectedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestUpdatesSent'
HLArequestUpdatesSentInteractionClass::HLArequestUpdatesSentInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestUpdatesSent");
}

void HLArequestUpdatesSentInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestUpdatesSentInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestUpdatesSentInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestUpdatesSentInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestUpdatesSentInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestUpdatesSentInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLArequestUpdatesSentInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestUpdatesSentInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestInteractionsSent'
HLArequestInteractionsSentInteractionClass::HLArequestInteractionsSentInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestInteractionsSent");
}

void HLArequestInteractionsSentInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestInteractionsSentInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestInteractionsSentInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestInteractionsSentInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestInteractionsSentInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestInteractionsSentInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLArequestInteractionsSentInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestInteractionsSentInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestReflectionsReceived'
HLArequestReflectionsReceivedInteractionClass::HLArequestReflectionsReceivedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestReflectionsReceived");
}

void HLArequestReflectionsReceivedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestReflectionsReceivedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestReflectionsReceivedInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestReflectionsReceivedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestReflectionsReceivedInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestReflectionsReceivedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLArequestReflectionsReceivedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestReflectionsReceivedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestInteractionsReceived'
HLArequestInteractionsReceivedInteractionClass::HLArequestInteractionsReceivedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestInteractionsReceived");
}

void HLArequestInteractionsReceivedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestInteractionsReceivedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestInteractionsReceivedInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestInteractionsReceivedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestInteractionsReceivedInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestInteractionsReceivedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLArequestInteractionsReceivedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestInteractionsReceivedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLArequestObjectInstanceInformation'
HLArequestObjectInstanceInformationInteractionClass::HLArequestObjectInstanceInformationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestObjectInstanceInformation");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
}

void HLArequestObjectInstanceInformationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestObjectInstanceInformationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestObjectInstanceInformationInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestObjectInstanceInformationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestObjectInstanceInformationInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAobjectInstanceEncoder(HLAobjectInstance);
  parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestObjectInstanceInformationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectInstanceDecoder);
  }
}


uint32_t HLArequestObjectInstanceInformationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestObjectInstanceInformationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  return result;
}

// object class type 'HLArequestFOMmoduleData'
HLArequestFOMmoduleDataInteractionClass::HLArequestFOMmoduleDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLArequest.HLArequestFOMmoduleData");
  // parameter HLAFOMmoduleIndicator : HLAindex
  mHLAFOMmoduleIndicatorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAFOMmoduleIndicator");
}

void HLArequestFOMmoduleDataInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestFOMmoduleDataInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestFOMmoduleDataInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestFOMmoduleDataInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestFOMmoduleDataInteractionClass::send(rti1516ev::HLAhandle HLAfederate, HLAindex HLAFOMmoduleIndicator)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(HLAFOMmoduleIndicator);
  parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestFOMmoduleDataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleIndicatorIter = parameters.find(GetHLAFOMmoduleIndicatorParameterHandle());
  if (HLAFOMmoduleIndicatorIter != parameters.end())
  {
    HLAFOMmoduleIndicatorDecoder.decode(HLAFOMmoduleIndicatorIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAFOMmoduleIndicatorDecoder.get());
  }
}


uint32_t HLArequestFOMmoduleDataInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestFOMmoduleDataInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAFOMmoduleIndicatorParameterHandle());
  return result;
}

// object class type 'HLAreport'
HLAreportInteractionClass::HLAreportInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAfederateInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport");
}

void HLAreportInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLAreportInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAreportObjectClassPublication'
HLAreportObjectClassPublicationInteractionClass::HLAreportObjectClassPublicationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectClassPublication");
  // parameter HLAnumberOfClasses : HLAcount
  mHLAnumberOfClassesParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAnumberOfClasses");
  // parameter HLAobjectClass : HLAhandle
  mHLAobjectClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectClass");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
}

void HLAreportObjectClassPublicationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportObjectClassPublicationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportObjectClassPublicationInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportObjectClassPublicationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportObjectClassPublicationInteractionClass::send(rti1516ev::HLAhandle HLAfederate, HLAcount HLAnumberOfClasses, rti1516ev::HLAhandle HLAobjectClass, const std::vector<rti1516ev::HLAhandle>& HLAattributeList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAinteger32BE HLAnumberOfClassesEncoder(HLAnumberOfClasses);
  parameters.insert(std::make_pair(GetHLAnumberOfClassesParameterHandle(), HLAnumberOfClassesEncoder.encode()));
  rti1516ev::HLAhandle HLAobjectClassEncoder(HLAobjectClass);
  parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(HLAattributeList);
  parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportObjectClassPublicationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAinteger32BE HLAnumberOfClassesDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAnumberOfClassesIter = parameters.find(GetHLAnumberOfClassesParameterHandle());
  if (HLAnumberOfClassesIter != parameters.end())
  {
    HLAnumberOfClassesDecoder.decode(HLAnumberOfClassesIter->second);
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAnumberOfClassesDecoder.get(), HLAobjectClassDecoder, HLAattributeListDecoder.get());
  }
}


uint32_t HLAreportObjectClassPublicationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportObjectClassPublicationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAnumberOfClassesParameterHandle());
  result.insert(GetHLAobjectClassParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  return result;
}

// object class type 'HLAreportInteractionPublication'
HLAreportInteractionPublicationInteractionClass::HLAreportInteractionPublicationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportInteractionPublication");
  // parameter HLAinteractionClassList : HLAhandleList
  mHLAinteractionClassListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClassList");
}

void HLAreportInteractionPublicationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportInteractionPublicationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportInteractionPublicationInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportInteractionPublicationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportInteractionPublicationInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::vector<rti1516ev::HLAhandle>& HLAinteractionClassList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  const HLAhandleListEncoding& HLAinteractionClassListEncoder = static_cast<const HLAhandleListEncoding&>(HLAinteractionClassList);
  parameters.insert(std::make_pair(GetHLAinteractionClassListParameterHandle(), HLAinteractionClassListEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportInteractionPublicationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  HLAhandleListEncoding HLAinteractionClassListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassListIter = parameters.find(GetHLAinteractionClassListParameterHandle());
  if (HLAinteractionClassListIter != parameters.end())
  {
    HLAinteractionClassListDecoder.decode(HLAinteractionClassListIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAinteractionClassListDecoder.get());
  }
}


uint32_t HLAreportInteractionPublicationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportInteractionPublicationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassListParameterHandle());
  return result;
}

// object class type 'HLAreportObjectClassSubscription'
HLAreportObjectClassSubscriptionInteractionClass::HLAreportObjectClassSubscriptionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectClassSubscription");
  // parameter HLAnumberOfClasses : HLAcount
  mHLAnumberOfClassesParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAnumberOfClasses");
  // parameter HLAobjectClass : HLAhandle
  mHLAobjectClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectClass");
  // parameter HLAactive : HLAboolean
  mHLAactiveParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAactive");
  // parameter HLAmaxUpdateRate : HLAupdateRateName
  mHLAmaxUpdateRateParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAmaxUpdateRate");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
}

void HLAreportObjectClassSubscriptionInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportObjectClassSubscriptionInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportObjectClassSubscriptionInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportObjectClassSubscriptionInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportObjectClassSubscriptionInteractionClass::send(rti1516ev::HLAhandle HLAfederate, HLAcount HLAnumberOfClasses, rti1516ev::HLAhandle HLAobjectClass, bool HLAactive, HLAupdateRateName HLAmaxUpdateRate, const std::vector<rti1516ev::HLAhandle>& HLAattributeList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAinteger32BE HLAnumberOfClassesEncoder(HLAnumberOfClasses);
  parameters.insert(std::make_pair(GetHLAnumberOfClassesParameterHandle(), HLAnumberOfClassesEncoder.encode()));
  rti1516ev::HLAhandle HLAobjectClassEncoder(HLAobjectClass);
  parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  rti1516ev::HLAboolean HLAactiveEncoder(HLAactive);
  parameters.insert(std::make_pair(GetHLAactiveParameterHandle(), HLAactiveEncoder.encode()));
  rti1516ev::HLAunicodeString HLAmaxUpdateRateEncoder(HLAmaxUpdateRate);
  parameters.insert(std::make_pair(GetHLAmaxUpdateRateParameterHandle(), HLAmaxUpdateRateEncoder.encode()));
  const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(HLAattributeList);
  parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportObjectClassSubscriptionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAinteger32BE HLAnumberOfClassesDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAnumberOfClassesIter = parameters.find(GetHLAnumberOfClassesParameterHandle());
  if (HLAnumberOfClassesIter != parameters.end())
  {
    HLAnumberOfClassesDecoder.decode(HLAnumberOfClassesIter->second);
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
  }
  rti1516ev::HLAboolean HLAactiveDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAactiveIter = parameters.find(GetHLAactiveParameterHandle());
  if (HLAactiveIter != parameters.end())
  {
    HLAactiveDecoder.decode(HLAactiveIter->second);
  }
  rti1516ev::HLAunicodeString HLAmaxUpdateRateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAmaxUpdateRateIter = parameters.find(GetHLAmaxUpdateRateParameterHandle());
  if (HLAmaxUpdateRateIter != parameters.end())
  {
    HLAmaxUpdateRateDecoder.decode(HLAmaxUpdateRateIter->second);
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAnumberOfClassesDecoder.get(), HLAobjectClassDecoder, HLAactiveDecoder.get(), HLAmaxUpdateRateDecoder.get(), HLAattributeListDecoder.get());
  }
}


uint32_t HLAreportObjectClassSubscriptionInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportObjectClassSubscriptionInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAnumberOfClassesParameterHandle());
  result.insert(GetHLAobjectClassParameterHandle());
  result.insert(GetHLAactiveParameterHandle());
  result.insert(GetHLAmaxUpdateRateParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  return result;
}

// object class type 'HLAreportInteractionSubscription'
HLAreportInteractionSubscriptionInteractionClass::HLAreportInteractionSubscriptionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportInteractionSubscription");
  // parameter HLAinteractionClassList : HLAinteractionSubList
  mHLAinteractionClassListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClassList");
}

void HLAreportInteractionSubscriptionInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportInteractionSubscriptionInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportInteractionSubscriptionInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportInteractionSubscriptionInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportInteractionSubscriptionInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::vector<HLAinteractionSubscriptionEncoding>& HLAinteractionClassList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  const HLAinteractionSubListEncoding& HLAinteractionClassListEncoder = static_cast<const HLAinteractionSubListEncoding&>(HLAinteractionClassList);
  parameters.insert(std::make_pair(GetHLAinteractionClassListParameterHandle(), HLAinteractionClassListEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportInteractionSubscriptionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  HLAinteractionSubListEncoding HLAinteractionClassListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassListIter = parameters.find(GetHLAinteractionClassListParameterHandle());
  if (HLAinteractionClassListIter != parameters.end())
  {
    HLAinteractionClassListDecoder.decode(HLAinteractionClassListIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAinteractionClassListDecoder.get());
  }
}


uint32_t HLAreportInteractionSubscriptionInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportInteractionSubscriptionInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassListParameterHandle());
  return result;
}

// object class type 'HLAreportObjectInstancesThatCanBeDeleted'
HLAreportObjectInstancesThatCanBeDeletedInteractionClass::HLAreportObjectInstancesThatCanBeDeletedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectInstancesThatCanBeDeleted");
  // parameter HLAobjectInstanceCounts : HLAobjectClassBasedCounts
  mHLAobjectInstanceCountsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstanceCounts");
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::vector<HLAobjectClassBasedCountEncoding>& HLAobjectInstanceCounts)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  const HLAobjectClassBasedCountsEncoding& HLAobjectInstanceCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(HLAobjectInstanceCounts);
  parameters.insert(std::make_pair(GetHLAobjectInstanceCountsParameterHandle(), HLAobjectInstanceCountsEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportObjectInstancesThatCanBeDeletedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  HLAobjectClassBasedCountsEncoding HLAobjectInstanceCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceCountsIter = parameters.find(GetHLAobjectInstanceCountsParameterHandle());
  if (HLAobjectInstanceCountsIter != parameters.end())
  {
    HLAobjectInstanceCountsDecoder.decode(HLAobjectInstanceCountsIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectInstanceCountsDecoder.get());
  }
}


uint32_t HLAreportObjectInstancesThatCanBeDeletedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportObjectInstancesThatCanBeDeletedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceCountsParameterHandle());
  return result;
}

// object class type 'HLAreportObjectInstancesUpdated'
HLAreportObjectInstancesUpdatedInteractionClass::HLAreportObjectInstancesUpdatedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectInstancesUpdated");
  // parameter HLAobjectInstanceCounts : HLAobjectClassBasedCounts
  mHLAobjectInstanceCountsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstanceCounts");
}

void HLAreportObjectInstancesUpdatedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportObjectInstancesUpdatedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportObjectInstancesUpdatedInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportObjectInstancesUpdatedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportObjectInstancesUpdatedInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::vector<HLAobjectClassBasedCountEncoding>& HLAobjectInstanceCounts)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  const HLAobjectClassBasedCountsEncoding& HLAobjectInstanceCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(HLAobjectInstanceCounts);
  parameters.insert(std::make_pair(GetHLAobjectInstanceCountsParameterHandle(), HLAobjectInstanceCountsEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportObjectInstancesUpdatedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  HLAobjectClassBasedCountsEncoding HLAobjectInstanceCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceCountsIter = parameters.find(GetHLAobjectInstanceCountsParameterHandle());
  if (HLAobjectInstanceCountsIter != parameters.end())
  {
    HLAobjectInstanceCountsDecoder.decode(HLAobjectInstanceCountsIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectInstanceCountsDecoder.get());
  }
}


uint32_t HLAreportObjectInstancesUpdatedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportObjectInstancesUpdatedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceCountsParameterHandle());
  return result;
}

// object class type 'HLAreportObjectInstancesReflected'
HLAreportObjectInstancesReflectedInteractionClass::HLAreportObjectInstancesReflectedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectInstancesReflected");
  // parameter HLAobjectInstanceCounts : HLAobjectClassBasedCounts
  mHLAobjectInstanceCountsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstanceCounts");
}

void HLAreportObjectInstancesReflectedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportObjectInstancesReflectedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportObjectInstancesReflectedInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportObjectInstancesReflectedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportObjectInstancesReflectedInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::vector<HLAobjectClassBasedCountEncoding>& HLAobjectInstanceCounts)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  const HLAobjectClassBasedCountsEncoding& HLAobjectInstanceCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(HLAobjectInstanceCounts);
  parameters.insert(std::make_pair(GetHLAobjectInstanceCountsParameterHandle(), HLAobjectInstanceCountsEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportObjectInstancesReflectedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  HLAobjectClassBasedCountsEncoding HLAobjectInstanceCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceCountsIter = parameters.find(GetHLAobjectInstanceCountsParameterHandle());
  if (HLAobjectInstanceCountsIter != parameters.end())
  {
    HLAobjectInstanceCountsDecoder.decode(HLAobjectInstanceCountsIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectInstanceCountsDecoder.get());
  }
}


uint32_t HLAreportObjectInstancesReflectedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportObjectInstancesReflectedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceCountsParameterHandle());
  return result;
}

// object class type 'HLAreportUpdatesSent'
HLAreportUpdatesSentInteractionClass::HLAreportUpdatesSentInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportUpdatesSent");
  // parameter HLAtransportation : HLAtransportationName
  mHLAtransportationParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtransportation");
  // parameter HLAupdateCounts : HLAobjectClassBasedCounts
  mHLAupdateCountsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAupdateCounts");
}

void HLAreportUpdatesSentInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportUpdatesSentInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportUpdatesSentInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportUpdatesSentInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportUpdatesSentInteractionClass::send(rti1516ev::HLAhandle HLAfederate, HLAtransportationName HLAtransportation, const std::vector<HLAobjectClassBasedCountEncoding>& HLAupdateCounts)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAunicodeString HLAtransportationEncoder(HLAtransportation);
  parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  const HLAobjectClassBasedCountsEncoding& HLAupdateCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(HLAupdateCounts);
  parameters.insert(std::make_pair(GetHLAupdateCountsParameterHandle(), HLAupdateCountsEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportUpdatesSentInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
  }
  HLAobjectClassBasedCountsEncoding HLAupdateCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAupdateCountsIter = parameters.find(GetHLAupdateCountsParameterHandle());
  if (HLAupdateCountsIter != parameters.end())
  {
    HLAupdateCountsDecoder.decode(HLAupdateCountsIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAtransportationDecoder.get(), HLAupdateCountsDecoder.get());
  }
}


uint32_t HLAreportUpdatesSentInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportUpdatesSentInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtransportationParameterHandle());
  result.insert(GetHLAupdateCountsParameterHandle());
  return result;
}

// object class type 'HLAreportReflectionsReceived'
HLAreportReflectionsReceivedInteractionClass::HLAreportReflectionsReceivedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportReflectionsReceived");
  // parameter HLAtransportation : HLAtransportationName
  mHLAtransportationParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtransportation");
  // parameter HLAreflectCounts : HLAobjectClassBasedCounts
  mHLAreflectCountsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAreflectCounts");
}

void HLAreportReflectionsReceivedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportReflectionsReceivedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportReflectionsReceivedInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportReflectionsReceivedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportReflectionsReceivedInteractionClass::send(rti1516ev::HLAhandle HLAfederate, HLAtransportationName HLAtransportation, const std::vector<HLAobjectClassBasedCountEncoding>& HLAreflectCounts)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAunicodeString HLAtransportationEncoder(HLAtransportation);
  parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  const HLAobjectClassBasedCountsEncoding& HLAreflectCountsEncoder = static_cast<const HLAobjectClassBasedCountsEncoding&>(HLAreflectCounts);
  parameters.insert(std::make_pair(GetHLAreflectCountsParameterHandle(), HLAreflectCountsEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportReflectionsReceivedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
  }
  HLAobjectClassBasedCountsEncoding HLAreflectCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreflectCountsIter = parameters.find(GetHLAreflectCountsParameterHandle());
  if (HLAreflectCountsIter != parameters.end())
  {
    HLAreflectCountsDecoder.decode(HLAreflectCountsIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAtransportationDecoder.get(), HLAreflectCountsDecoder.get());
  }
}


uint32_t HLAreportReflectionsReceivedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportReflectionsReceivedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtransportationParameterHandle());
  result.insert(GetHLAreflectCountsParameterHandle());
  return result;
}

// object class type 'HLAreportInteractionsSent'
HLAreportInteractionsSentInteractionClass::HLAreportInteractionsSentInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportInteractionsSent");
  // parameter HLAtransportation : HLAtransportationName
  mHLAtransportationParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtransportation");
  // parameter HLAinteractionCounts : HLAinteractionCounts
  mHLAinteractionCountsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionCounts");
}

void HLAreportInteractionsSentInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportInteractionsSentInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportInteractionsSentInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportInteractionsSentInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportInteractionsSentInteractionClass::send(rti1516ev::HLAhandle HLAfederate, HLAtransportationName HLAtransportation, const std::vector<HLAinteractionCountEncoding>& HLAinteractionCounts)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAunicodeString HLAtransportationEncoder(HLAtransportation);
  parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  const HLAinteractionCountsEncoding& HLAinteractionCountsEncoder = static_cast<const HLAinteractionCountsEncoding&>(HLAinteractionCounts);
  parameters.insert(std::make_pair(GetHLAinteractionCountsParameterHandle(), HLAinteractionCountsEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportInteractionsSentInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
  }
  HLAinteractionCountsEncoding HLAinteractionCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionCountsIter = parameters.find(GetHLAinteractionCountsParameterHandle());
  if (HLAinteractionCountsIter != parameters.end())
  {
    HLAinteractionCountsDecoder.decode(HLAinteractionCountsIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAtransportationDecoder.get(), HLAinteractionCountsDecoder.get());
  }
}


uint32_t HLAreportInteractionsSentInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportInteractionsSentInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtransportationParameterHandle());
  result.insert(GetHLAinteractionCountsParameterHandle());
  return result;
}

// object class type 'HLAreportInteractionsReceived'
HLAreportInteractionsReceivedInteractionClass::HLAreportInteractionsReceivedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportInteractionsReceived");
  // parameter HLAtransportation : HLAtransportationName
  mHLAtransportationParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtransportation");
  // parameter HLAinteractionCounts : HLAinteractionCounts
  mHLAinteractionCountsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionCounts");
}

void HLAreportInteractionsReceivedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportInteractionsReceivedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportInteractionsReceivedInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportInteractionsReceivedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportInteractionsReceivedInteractionClass::send(rti1516ev::HLAhandle HLAfederate, HLAtransportationName HLAtransportation, const std::vector<HLAinteractionCountEncoding>& HLAinteractionCounts)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAunicodeString HLAtransportationEncoder(HLAtransportation);
  parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  const HLAinteractionCountsEncoding& HLAinteractionCountsEncoder = static_cast<const HLAinteractionCountsEncoding&>(HLAinteractionCounts);
  parameters.insert(std::make_pair(GetHLAinteractionCountsParameterHandle(), HLAinteractionCountsEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportInteractionsReceivedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
  }
  HLAinteractionCountsEncoding HLAinteractionCountsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionCountsIter = parameters.find(GetHLAinteractionCountsParameterHandle());
  if (HLAinteractionCountsIter != parameters.end())
  {
    HLAinteractionCountsDecoder.decode(HLAinteractionCountsIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAtransportationDecoder.get(), HLAinteractionCountsDecoder.get());
  }
}


uint32_t HLAreportInteractionsReceivedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportInteractionsReceivedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtransportationParameterHandle());
  result.insert(GetHLAinteractionCountsParameterHandle());
  return result;
}

// object class type 'HLAreportObjectInstanceInformation'
HLAreportObjectInstanceInformationInteractionClass::HLAreportObjectInstanceInformationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportObjectInstanceInformation");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
  // parameter HLAownedInstanceAttributeList : HLAhandleList
  mHLAownedInstanceAttributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAownedInstanceAttributeList");
  // parameter HLAregisteredClass : HLAhandle
  mHLAregisteredClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAregisteredClass");
  // parameter HLAknownClass : HLAhandle
  mHLAknownClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAknownClass");
}

void HLAreportObjectInstanceInformationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportObjectInstanceInformationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportObjectInstanceInformationInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportObjectInstanceInformationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportObjectInstanceInformationInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance, const std::vector<rti1516ev::HLAhandle>& HLAownedInstanceAttributeList, rti1516ev::HLAhandle HLAregisteredClass, rti1516ev::HLAhandle HLAknownClass)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAobjectInstanceEncoder(HLAobjectInstance);
  parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  const HLAhandleListEncoding& HLAownedInstanceAttributeListEncoder = static_cast<const HLAhandleListEncoding&>(HLAownedInstanceAttributeList);
  parameters.insert(std::make_pair(GetHLAownedInstanceAttributeListParameterHandle(), HLAownedInstanceAttributeListEncoder.encode()));
  rti1516ev::HLAhandle HLAregisteredClassEncoder(HLAregisteredClass);
  parameters.insert(std::make_pair(GetHLAregisteredClassParameterHandle(), HLAregisteredClassEncoder.encode()));
  rti1516ev::HLAhandle HLAknownClassEncoder(HLAknownClass);
  parameters.insert(std::make_pair(GetHLAknownClassParameterHandle(), HLAknownClassEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportObjectInstanceInformationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
  }
  HLAhandleListEncoding HLAownedInstanceAttributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAownedInstanceAttributeListIter = parameters.find(GetHLAownedInstanceAttributeListParameterHandle());
  if (HLAownedInstanceAttributeListIter != parameters.end())
  {
    HLAownedInstanceAttributeListDecoder.decode(HLAownedInstanceAttributeListIter->second);
  }
  rti1516ev::HLAhandle HLAregisteredClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAregisteredClassIter = parameters.find(GetHLAregisteredClassParameterHandle());
  if (HLAregisteredClassIter != parameters.end())
  {
    HLAregisteredClassDecoder.decode(HLAregisteredClassIter->second);
  }
  rti1516ev::HLAhandle HLAknownClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAknownClassIter = parameters.find(GetHLAknownClassParameterHandle());
  if (HLAknownClassIter != parameters.end())
  {
    HLAknownClassDecoder.decode(HLAknownClassIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectInstanceDecoder, HLAownedInstanceAttributeListDecoder.get(), HLAregisteredClassDecoder, HLAknownClassDecoder);
  }
}


uint32_t HLAreportObjectInstanceInformationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportObjectInstanceInformationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  result.insert(GetHLAownedInstanceAttributeListParameterHandle());
  result.insert(GetHLAregisteredClassParameterHandle());
  result.insert(GetHLAknownClassParameterHandle());
  return result;
}

// object class type 'HLAreportException'
HLAreportExceptionInteractionClass::HLAreportExceptionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportException");
  // parameter HLAservice : HLAunicodeString
  mHLAserviceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAservice");
  // parameter HLAexception : HLAunicodeString
  mHLAexceptionParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAexception");
}

void HLAreportExceptionInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportExceptionInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportExceptionInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportExceptionInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportExceptionInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::wstring& HLAservice, const std::wstring& HLAexception)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAunicodeString HLAserviceEncoder(HLAservice);
  parameters.insert(std::make_pair(GetHLAserviceParameterHandle(), HLAserviceEncoder.encode()));
  rti1516ev::HLAunicodeString HLAexceptionEncoder(HLAexception);
  parameters.insert(std::make_pair(GetHLAexceptionParameterHandle(), HLAexceptionEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportExceptionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAunicodeString HLAserviceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAserviceIter = parameters.find(GetHLAserviceParameterHandle());
  if (HLAserviceIter != parameters.end())
  {
    HLAserviceDecoder.decode(HLAserviceIter->second);
  }
  rti1516ev::HLAunicodeString HLAexceptionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAexceptionIter = parameters.find(GetHLAexceptionParameterHandle());
  if (HLAexceptionIter != parameters.end())
  {
    HLAexceptionDecoder.decode(HLAexceptionIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAserviceDecoder.get(), HLAexceptionDecoder.get());
  }
}


uint32_t HLAreportExceptionInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportExceptionInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAserviceParameterHandle());
  result.insert(GetHLAexceptionParameterHandle());
  return result;
}

// object class type 'HLAreportServiceInvocation'
HLAreportServiceInvocationInteractionClass::HLAreportServiceInvocationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportServiceInvocation");
  // parameter HLAservice : HLAunicodeString
  mHLAserviceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAservice");
  // parameter HLAsuccessIndicator : HLAboolean
  mHLAsuccessIndicatorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsuccessIndicator");
  // parameter HLAsuppliedArguments : HLAargumentList
  mHLAsuppliedArgumentsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsuppliedArguments");
  // parameter HLAreturnedArguments : HLAargumentList
  mHLAreturnedArgumentsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAreturnedArguments");
  // parameter HLAexception : HLAunicodeString
  mHLAexceptionParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAexception");
  // parameter HLAserialNumber : HLAcount
  mHLAserialNumberParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAserialNumber");
}

void HLAreportServiceInvocationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportServiceInvocationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportServiceInvocationInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportServiceInvocationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportServiceInvocationInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::wstring& HLAservice, bool HLAsuccessIndicator, const std::vector<std::wstring>& HLAsuppliedArguments, const std::vector<std::wstring>& HLAreturnedArguments, const std::wstring& HLAexception, HLAcount HLAserialNumber)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAunicodeString HLAserviceEncoder(HLAservice);
  parameters.insert(std::make_pair(GetHLAserviceParameterHandle(), HLAserviceEncoder.encode()));
  rti1516ev::HLAboolean HLAsuccessIndicatorEncoder(HLAsuccessIndicator);
  parameters.insert(std::make_pair(GetHLAsuccessIndicatorParameterHandle(), HLAsuccessIndicatorEncoder.encode()));
  const HLAargumentListEncoding& HLAsuppliedArgumentsEncoder = static_cast<const HLAargumentListEncoding&>(HLAsuppliedArguments);
  parameters.insert(std::make_pair(GetHLAsuppliedArgumentsParameterHandle(), HLAsuppliedArgumentsEncoder.encode()));
  const HLAargumentListEncoding& HLAreturnedArgumentsEncoder = static_cast<const HLAargumentListEncoding&>(HLAreturnedArguments);
  parameters.insert(std::make_pair(GetHLAreturnedArgumentsParameterHandle(), HLAreturnedArgumentsEncoder.encode()));
  rti1516ev::HLAunicodeString HLAexceptionEncoder(HLAexception);
  parameters.insert(std::make_pair(GetHLAexceptionParameterHandle(), HLAexceptionEncoder.encode()));
  rti1516ev::HLAinteger32BE HLAserialNumberEncoder(HLAserialNumber);
  parameters.insert(std::make_pair(GetHLAserialNumberParameterHandle(), HLAserialNumberEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportServiceInvocationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAunicodeString HLAserviceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAserviceIter = parameters.find(GetHLAserviceParameterHandle());
  if (HLAserviceIter != parameters.end())
  {
    HLAserviceDecoder.decode(HLAserviceIter->second);
  }
  rti1516ev::HLAboolean HLAsuccessIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsuccessIndicatorIter = parameters.find(GetHLAsuccessIndicatorParameterHandle());
  if (HLAsuccessIndicatorIter != parameters.end())
  {
    HLAsuccessIndicatorDecoder.decode(HLAsuccessIndicatorIter->second);
  }
  HLAargumentListEncoding HLAsuppliedArgumentsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsuppliedArgumentsIter = parameters.find(GetHLAsuppliedArgumentsParameterHandle());
  if (HLAsuppliedArgumentsIter != parameters.end())
  {
    HLAsuppliedArgumentsDecoder.decode(HLAsuppliedArgumentsIter->second);
  }
  HLAargumentListEncoding HLAreturnedArgumentsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAreturnedArgumentsIter = parameters.find(GetHLAreturnedArgumentsParameterHandle());
  if (HLAreturnedArgumentsIter != parameters.end())
  {
    HLAreturnedArgumentsDecoder.decode(HLAreturnedArgumentsIter->second);
  }
  rti1516ev::HLAunicodeString HLAexceptionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAexceptionIter = parameters.find(GetHLAexceptionParameterHandle());
  if (HLAexceptionIter != parameters.end())
  {
    HLAexceptionDecoder.decode(HLAexceptionIter->second);
  }
  rti1516ev::HLAinteger32BE HLAserialNumberDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAserialNumberIter = parameters.find(GetHLAserialNumberParameterHandle());
  if (HLAserialNumberIter != parameters.end())
  {
    HLAserialNumberDecoder.decode(HLAserialNumberIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAserviceDecoder.get(), HLAsuccessIndicatorDecoder.get(), HLAsuppliedArgumentsDecoder.get(), HLAreturnedArgumentsDecoder.get(), HLAexceptionDecoder.get(), HLAserialNumberDecoder.get());
  }
}


uint32_t HLAreportServiceInvocationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportServiceInvocationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAserviceParameterHandle());
  result.insert(GetHLAsuccessIndicatorParameterHandle());
  result.insert(GetHLAsuppliedArgumentsParameterHandle());
  result.insert(GetHLAreturnedArgumentsParameterHandle());
  result.insert(GetHLAexceptionParameterHandle());
  result.insert(GetHLAserialNumberParameterHandle());
  return result;
}

// object class type 'HLAreportMOMexception'
HLAreportMOMexceptionInteractionClass::HLAreportMOMexceptionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportMOMexception");
  // parameter HLAservice : HLAunicodeString
  mHLAserviceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAservice");
  // parameter HLAexception : HLAunicodeString
  mHLAexceptionParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAexception");
  // parameter HLAparameterError : HLAboolean
  mHLAparameterErrorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAparameterError");
}

void HLAreportMOMexceptionInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportMOMexceptionInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportMOMexceptionInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportMOMexceptionInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportMOMexceptionInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::wstring& HLAservice, const std::wstring& HLAexception, bool HLAparameterError)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAunicodeString HLAserviceEncoder(HLAservice);
  parameters.insert(std::make_pair(GetHLAserviceParameterHandle(), HLAserviceEncoder.encode()));
  rti1516ev::HLAunicodeString HLAexceptionEncoder(HLAexception);
  parameters.insert(std::make_pair(GetHLAexceptionParameterHandle(), HLAexceptionEncoder.encode()));
  rti1516ev::HLAboolean HLAparameterErrorEncoder(HLAparameterError);
  parameters.insert(std::make_pair(GetHLAparameterErrorParameterHandle(), HLAparameterErrorEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportMOMexceptionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAunicodeString HLAserviceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAserviceIter = parameters.find(GetHLAserviceParameterHandle());
  if (HLAserviceIter != parameters.end())
  {
    HLAserviceDecoder.decode(HLAserviceIter->second);
  }
  rti1516ev::HLAunicodeString HLAexceptionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAexceptionIter = parameters.find(GetHLAexceptionParameterHandle());
  if (HLAexceptionIter != parameters.end())
  {
    HLAexceptionDecoder.decode(HLAexceptionIter->second);
  }
  rti1516ev::HLAboolean HLAparameterErrorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAparameterErrorIter = parameters.find(GetHLAparameterErrorParameterHandle());
  if (HLAparameterErrorIter != parameters.end())
  {
    HLAparameterErrorDecoder.decode(HLAparameterErrorIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAserviceDecoder.get(), HLAexceptionDecoder.get(), HLAparameterErrorDecoder.get());
  }
}


uint32_t HLAreportMOMexceptionInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportMOMexceptionInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAserviceParameterHandle());
  result.insert(GetHLAexceptionParameterHandle());
  result.insert(GetHLAparameterErrorParameterHandle());
  return result;
}

// object class type 'HLAreportFederateLost'
HLAreportFederateLostInteractionClass::HLAreportFederateLostInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportFederateLost");
  // parameter HLAfederateName : HLAunicodeString
  mHLAfederateNameParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAfederateName");
  // parameter HLAtimeStamp : HLAlogicalTime
  mHLAtimeStampParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtimeStamp");
  // parameter HLAfaultDescription : HLAunicodeString
  mHLAfaultDescriptionParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAfaultDescription");
}

void HLAreportFederateLostInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportFederateLostInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportFederateLostInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportFederateLostInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportFederateLostInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::wstring& HLAfederateName, const std::vector<uint8_t>& HLAtimeStamp, const std::wstring& HLAfaultDescription)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAunicodeString HLAfederateNameEncoder(HLAfederateName);
  parameters.insert(std::make_pair(GetHLAfederateNameParameterHandle(), HLAfederateNameEncoder.encode()));
  const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(HLAtimeStamp);
  parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  rti1516ev::HLAunicodeString HLAfaultDescriptionEncoder(HLAfaultDescription);
  parameters.insert(std::make_pair(GetHLAfaultDescriptionParameterHandle(), HLAfaultDescriptionEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportFederateLostInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAunicodeString HLAfederateNameDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateNameIter = parameters.find(GetHLAfederateNameParameterHandle());
  if (HLAfederateNameIter != parameters.end())
  {
    HLAfederateNameDecoder.decode(HLAfederateNameIter->second);
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
  }
  rti1516ev::HLAunicodeString HLAfaultDescriptionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfaultDescriptionIter = parameters.find(GetHLAfaultDescriptionParameterHandle());
  if (HLAfaultDescriptionIter != parameters.end())
  {
    HLAfaultDescriptionDecoder.decode(HLAfaultDescriptionIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAfederateNameDecoder.get(), HLAtimeStampDecoder.get(), HLAfaultDescriptionDecoder.get());
  }
}


uint32_t HLAreportFederateLostInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportFederateLostInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAfederateNameParameterHandle());
  result.insert(GetHLAtimeStampParameterHandle());
  result.insert(GetHLAfaultDescriptionParameterHandle());
  return result;
}

// object class type 'HLAreportFOMmoduleData'
HLAreportFOMmoduleDataInteractionClass::HLAreportFOMmoduleDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAreport.HLAreportFOMmoduleData");
  // parameter HLAFOMmoduleIndicator : HLAindex
  mHLAFOMmoduleIndicatorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAFOMmoduleIndicator");
  // parameter HLAFOMmoduleData : HLAunicodeString
  mHLAFOMmoduleDataParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAFOMmoduleData");
}

void HLAreportFOMmoduleDataInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportFOMmoduleDataInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportFOMmoduleDataInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportFOMmoduleDataInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportFOMmoduleDataInteractionClass::send(rti1516ev::HLAhandle HLAfederate, HLAindex HLAFOMmoduleIndicator, const std::wstring& HLAFOMmoduleData)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(HLAFOMmoduleIndicator);
  parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  rti1516ev::HLAunicodeString HLAFOMmoduleDataEncoder(HLAFOMmoduleData);
  parameters.insert(std::make_pair(GetHLAFOMmoduleDataParameterHandle(), HLAFOMmoduleDataEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportFOMmoduleDataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleIndicatorIter = parameters.find(GetHLAFOMmoduleIndicatorParameterHandle());
  if (HLAFOMmoduleIndicatorIter != parameters.end())
  {
    HLAFOMmoduleIndicatorDecoder.decode(HLAFOMmoduleIndicatorIter->second);
  }
  rti1516ev::HLAunicodeString HLAFOMmoduleDataDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleDataIter = parameters.find(GetHLAFOMmoduleDataParameterHandle());
  if (HLAFOMmoduleDataIter != parameters.end())
  {
    HLAFOMmoduleDataDecoder.decode(HLAFOMmoduleDataIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAFOMmoduleIndicatorDecoder.get(), HLAFOMmoduleDataDecoder.get());
  }
}


uint32_t HLAreportFOMmoduleDataInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportFOMmoduleDataInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAFOMmoduleIndicatorParameterHandle());
  result.insert(GetHLAFOMmoduleDataParameterHandle());
  return result;
}

// object class type 'HLAservice'
HLAserviceInteractionClass::HLAserviceInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAfederateInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice");
}

void HLAserviceInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAserviceInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAserviceInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAserviceInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAserviceInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAserviceInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLAserviceInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAserviceInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAresignFederationExecution'
HLAresignFederationExecutionInteractionClass::HLAresignFederationExecutionInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAresignFederationExecution");
  // parameter HLAresignAction : HLAresignAction
  mHLAresignActionParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAresignAction");
}

void HLAresignFederationExecutionInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAresignFederationExecutionInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAresignFederationExecutionInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAresignFederationExecutionInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAresignFederationExecutionInteractionClass::send(rti1516ev::HLAhandle HLAfederate, HLAresignAction HLAresignAction)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAinteger32BE HLAresignActionEncoder(HLAresignAction);
  parameters.insert(std::make_pair(GetHLAresignActionParameterHandle(), HLAresignActionEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAresignFederationExecutionInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAinteger32BE HLAresignActionDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAresignActionIter = parameters.find(GetHLAresignActionParameterHandle());
  if (HLAresignActionIter != parameters.end())
  {
    HLAresignActionDecoder.decode(HLAresignActionIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, static_cast<HLAresignAction>(HLAresignActionDecoder.get()));
  }
}


uint32_t HLAresignFederationExecutionInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAresignFederationExecutionInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAresignActionParameterHandle());
  return result;
}

// object class type 'HLAsynchronizationPointAchieved'
HLAsynchronizationPointAchievedInteractionClass::HLAsynchronizationPointAchievedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAsynchronizationPointAchieved");
  // parameter HLAlabel : HLAunicodeString
  mHLAlabelParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAlabel");
}

void HLAsynchronizationPointAchievedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsynchronizationPointAchievedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsynchronizationPointAchievedInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAsynchronizationPointAchievedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsynchronizationPointAchievedInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::wstring& HLAlabel)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAunicodeString HLAlabelEncoder(HLAlabel);
  parameters.insert(std::make_pair(GetHLAlabelParameterHandle(), HLAlabelEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAsynchronizationPointAchievedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAunicodeString HLAlabelDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAlabelIter = parameters.find(GetHLAlabelParameterHandle());
  if (HLAlabelIter != parameters.end())
  {
    HLAlabelDecoder.decode(HLAlabelIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAlabelDecoder.get());
  }
}


uint32_t HLAsynchronizationPointAchievedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAsynchronizationPointAchievedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAlabelParameterHandle());
  return result;
}

// object class type 'HLAfederateSaveBegun'
HLAfederateSaveBegunInteractionClass::HLAfederateSaveBegunInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAfederateSaveBegun");
}

void HLAfederateSaveBegunInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAfederateSaveBegunInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAfederateSaveBegunInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAfederateSaveBegunInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAfederateSaveBegunInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAfederateSaveBegunInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLAfederateSaveBegunInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAfederateSaveBegunInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAfederateSaveComplete'
HLAfederateSaveCompleteInteractionClass::HLAfederateSaveCompleteInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAfederateSaveComplete");
  // parameter HLAsuccessIndicator : HLAboolean
  mHLAsuccessIndicatorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsuccessIndicator");
}

void HLAfederateSaveCompleteInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAfederateSaveCompleteInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAfederateSaveCompleteInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAfederateSaveCompleteInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAfederateSaveCompleteInteractionClass::send(rti1516ev::HLAhandle HLAfederate, bool HLAsuccessIndicator)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAboolean HLAsuccessIndicatorEncoder(HLAsuccessIndicator);
  parameters.insert(std::make_pair(GetHLAsuccessIndicatorParameterHandle(), HLAsuccessIndicatorEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAfederateSaveCompleteInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAboolean HLAsuccessIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsuccessIndicatorIter = parameters.find(GetHLAsuccessIndicatorParameterHandle());
  if (HLAsuccessIndicatorIter != parameters.end())
  {
    HLAsuccessIndicatorDecoder.decode(HLAsuccessIndicatorIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAsuccessIndicatorDecoder.get());
  }
}


uint32_t HLAfederateSaveCompleteInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAfederateSaveCompleteInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAsuccessIndicatorParameterHandle());
  return result;
}

// object class type 'HLAfederateRestoreComplete'
HLAfederateRestoreCompleteInteractionClass::HLAfederateRestoreCompleteInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAfederateRestoreComplete");
  // parameter HLAsuccessIndicator : HLAboolean
  mHLAsuccessIndicatorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsuccessIndicator");
}

void HLAfederateRestoreCompleteInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAfederateRestoreCompleteInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAfederateRestoreCompleteInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAfederateRestoreCompleteInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAfederateRestoreCompleteInteractionClass::send(rti1516ev::HLAhandle HLAfederate, bool HLAsuccessIndicator)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAboolean HLAsuccessIndicatorEncoder(HLAsuccessIndicator);
  parameters.insert(std::make_pair(GetHLAsuccessIndicatorParameterHandle(), HLAsuccessIndicatorEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAfederateRestoreCompleteInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAboolean HLAsuccessIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsuccessIndicatorIter = parameters.find(GetHLAsuccessIndicatorParameterHandle());
  if (HLAsuccessIndicatorIter != parameters.end())
  {
    HLAsuccessIndicatorDecoder.decode(HLAsuccessIndicatorIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAsuccessIndicatorDecoder.get());
  }
}


uint32_t HLAfederateRestoreCompleteInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAfederateRestoreCompleteInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAsuccessIndicatorParameterHandle());
  return result;
}

// object class type 'HLApublishObjectClassAttributes'
HLApublishObjectClassAttributesInteractionClass::HLApublishObjectClassAttributesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLApublishObjectClassAttributes");
  // parameter HLAobjectClass : HLAhandle
  mHLAobjectClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectClass");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
}

void HLApublishObjectClassAttributesInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLApublishObjectClassAttributesInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLApublishObjectClassAttributesInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLApublishObjectClassAttributesInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLApublishObjectClassAttributesInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectClass, const std::vector<rti1516ev::HLAhandle>& HLAattributeList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAobjectClassEncoder(HLAobjectClass);
  parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(HLAattributeList);
  parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLApublishObjectClassAttributesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectClassDecoder, HLAattributeListDecoder.get());
  }
}


uint32_t HLApublishObjectClassAttributesInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLApublishObjectClassAttributesInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectClassParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  return result;
}

// object class type 'HLAunpublishObjectClassAttributes'
HLAunpublishObjectClassAttributesInteractionClass::HLAunpublishObjectClassAttributesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunpublishObjectClassAttributes");
  // parameter HLAobjectClass : HLAhandle
  mHLAobjectClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectClass");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
}

void HLAunpublishObjectClassAttributesInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAunpublishObjectClassAttributesInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAunpublishObjectClassAttributesInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAunpublishObjectClassAttributesInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAunpublishObjectClassAttributesInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectClass, const std::vector<rti1516ev::HLAhandle>& HLAattributeList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAobjectClassEncoder(HLAobjectClass);
  parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(HLAattributeList);
  parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAunpublishObjectClassAttributesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectClassDecoder, HLAattributeListDecoder.get());
  }
}


uint32_t HLAunpublishObjectClassAttributesInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAunpublishObjectClassAttributesInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectClassParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  return result;
}

// object class type 'HLApublishInteractionClass'
HLApublishInteractionClassInteractionClass::HLApublishInteractionClassInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLApublishInteractionClass");
  // parameter HLAinteractionClass : HLAhandle
  mHLAinteractionClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClass");
}

void HLApublishInteractionClassInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLApublishInteractionClassInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLApublishInteractionClassInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLApublishInteractionClassInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLApublishInteractionClassInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAinteractionClass)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAinteractionClassEncoder(HLAinteractionClass);
  parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLApublishInteractionClassInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAinteractionClassDecoder);
  }
}


uint32_t HLApublishInteractionClassInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLApublishInteractionClassInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassParameterHandle());
  return result;
}

// object class type 'HLAunpublishInteractionClass'
HLAunpublishInteractionClassInteractionClass::HLAunpublishInteractionClassInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunpublishInteractionClass");
  // parameter HLAinteractionClass : HLAhandle
  mHLAinteractionClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClass");
}

void HLAunpublishInteractionClassInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAunpublishInteractionClassInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAunpublishInteractionClassInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAunpublishInteractionClassInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAunpublishInteractionClassInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAinteractionClass)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAinteractionClassEncoder(HLAinteractionClass);
  parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAunpublishInteractionClassInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAinteractionClassDecoder);
  }
}


uint32_t HLAunpublishInteractionClassInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAunpublishInteractionClassInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassParameterHandle());
  return result;
}

// object class type 'HLAsubscribeObjectClassAttributes'
HLAsubscribeObjectClassAttributesInteractionClass::HLAsubscribeObjectClassAttributesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAsubscribeObjectClassAttributes");
  // parameter HLAobjectClass : HLAhandle
  mHLAobjectClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectClass");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
  // parameter HLAactive : HLAboolean
  mHLAactiveParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAactive");
}

void HLAsubscribeObjectClassAttributesInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsubscribeObjectClassAttributesInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsubscribeObjectClassAttributesInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAsubscribeObjectClassAttributesInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsubscribeObjectClassAttributesInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectClass, const std::vector<rti1516ev::HLAhandle>& HLAattributeList, bool HLAactive)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAobjectClassEncoder(HLAobjectClass);
  parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(HLAattributeList);
  parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  rti1516ev::HLAboolean HLAactiveEncoder(HLAactive);
  parameters.insert(std::make_pair(GetHLAactiveParameterHandle(), HLAactiveEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAsubscribeObjectClassAttributesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
  }
  rti1516ev::HLAboolean HLAactiveDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAactiveIter = parameters.find(GetHLAactiveParameterHandle());
  if (HLAactiveIter != parameters.end())
  {
    HLAactiveDecoder.decode(HLAactiveIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectClassDecoder, HLAattributeListDecoder.get(), HLAactiveDecoder.get());
  }
}


uint32_t HLAsubscribeObjectClassAttributesInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAsubscribeObjectClassAttributesInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectClassParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  result.insert(GetHLAactiveParameterHandle());
  return result;
}

// object class type 'HLAunsubscribeObjectClassAttributes'
HLAunsubscribeObjectClassAttributesInteractionClass::HLAunsubscribeObjectClassAttributesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunsubscribeObjectClassAttributes");
  // parameter HLAobjectClass : HLAhandle
  mHLAobjectClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectClass");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
}

void HLAunsubscribeObjectClassAttributesInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAunsubscribeObjectClassAttributesInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAunsubscribeObjectClassAttributesInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAunsubscribeObjectClassAttributesInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAunsubscribeObjectClassAttributesInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectClass, const std::vector<rti1516ev::HLAhandle>& HLAattributeList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAobjectClassEncoder(HLAobjectClass);
  parameters.insert(std::make_pair(GetHLAobjectClassParameterHandle(), HLAobjectClassEncoder.encode()));
  const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(HLAattributeList);
  parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAunsubscribeObjectClassAttributesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAobjectClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectClassIter = parameters.find(GetHLAobjectClassParameterHandle());
  if (HLAobjectClassIter != parameters.end())
  {
    HLAobjectClassDecoder.decode(HLAobjectClassIter->second);
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectClassDecoder, HLAattributeListDecoder.get());
  }
}


uint32_t HLAunsubscribeObjectClassAttributesInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAunsubscribeObjectClassAttributesInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectClassParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  return result;
}

// object class type 'HLAsubscribeInteractionClass'
HLAsubscribeInteractionClassInteractionClass::HLAsubscribeInteractionClassInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAsubscribeInteractionClass");
  // parameter HLAinteractionClass : HLAhandle
  mHLAinteractionClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClass");
  // parameter HLAactive : HLAboolean
  mHLAactiveParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAactive");
}

void HLAsubscribeInteractionClassInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsubscribeInteractionClassInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsubscribeInteractionClassInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAsubscribeInteractionClassInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsubscribeInteractionClassInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAinteractionClass, bool HLAactive)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAinteractionClassEncoder(HLAinteractionClass);
  parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  rti1516ev::HLAboolean HLAactiveEncoder(HLAactive);
  parameters.insert(std::make_pair(GetHLAactiveParameterHandle(), HLAactiveEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAsubscribeInteractionClassInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
  }
  rti1516ev::HLAboolean HLAactiveDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAactiveIter = parameters.find(GetHLAactiveParameterHandle());
  if (HLAactiveIter != parameters.end())
  {
    HLAactiveDecoder.decode(HLAactiveIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAinteractionClassDecoder, HLAactiveDecoder.get());
  }
}


uint32_t HLAsubscribeInteractionClassInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAsubscribeInteractionClassInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassParameterHandle());
  result.insert(GetHLAactiveParameterHandle());
  return result;
}

// object class type 'HLAunsubscribeInteractionClass'
HLAunsubscribeInteractionClassInteractionClass::HLAunsubscribeInteractionClassInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunsubscribeInteractionClass");
  // parameter HLAinteractionClass : HLAhandle
  mHLAinteractionClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClass");
}

void HLAunsubscribeInteractionClassInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAunsubscribeInteractionClassInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAunsubscribeInteractionClassInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAunsubscribeInteractionClassInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAunsubscribeInteractionClassInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAinteractionClass)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAinteractionClassEncoder(HLAinteractionClass);
  parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAunsubscribeInteractionClassInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAinteractionClassDecoder);
  }
}


uint32_t HLAunsubscribeInteractionClassInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAunsubscribeInteractionClassInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassParameterHandle());
  return result;
}

// object class type 'HLAdeleteObjectInstance'
HLAdeleteObjectInstanceInteractionClass::HLAdeleteObjectInstanceInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAdeleteObjectInstance");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
  // parameter HLAtag : HLAopaqueData
  mHLAtagParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtag");
  // parameter HLAtimeStamp : HLAlogicalTime
  mHLAtimeStampParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtimeStamp");
}

void HLAdeleteObjectInstanceInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAdeleteObjectInstanceInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAdeleteObjectInstanceInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAdeleteObjectInstanceInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAdeleteObjectInstanceInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance, const std::vector<uint8_t>& HLAtag, const std::vector<uint8_t>& HLAtimeStamp)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAobjectInstanceEncoder(HLAobjectInstance);
  parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  rti1516ev::HLAopaqueData HLAtagEncoder(HLAtag);
  parameters.insert(std::make_pair(GetHLAtagParameterHandle(), HLAtagEncoder.encode()));
  const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(HLAtimeStamp);
  parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAdeleteObjectInstanceInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
  }
  rti1516ev::HLAopaqueData HLAtagDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtagIter = parameters.find(GetHLAtagParameterHandle());
  if (HLAtagIter != parameters.end())
  {
    HLAtagDecoder.decode(HLAtagIter->second);
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectInstanceDecoder, HLAtagDecoder.get(), HLAtimeStampDecoder.get());
  }
}


uint32_t HLAdeleteObjectInstanceInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAdeleteObjectInstanceInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  result.insert(GetHLAtagParameterHandle());
  result.insert(GetHLAtimeStampParameterHandle());
  return result;
}

// object class type 'HLAlocalDeleteObjectInstance'
HLAlocalDeleteObjectInstanceInteractionClass::HLAlocalDeleteObjectInstanceInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAlocalDeleteObjectInstance");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
}

void HLAlocalDeleteObjectInstanceInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAlocalDeleteObjectInstanceInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAlocalDeleteObjectInstanceInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAlocalDeleteObjectInstanceInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAlocalDeleteObjectInstanceInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAobjectInstanceEncoder(HLAobjectInstance);
  parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAlocalDeleteObjectInstanceInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectInstanceDecoder);
  }
}


uint32_t HLAlocalDeleteObjectInstanceInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAlocalDeleteObjectInstanceInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  return result;
}

// object class type 'HLArequestAttributeTransportationTypeChange'
HLArequestAttributeTransportationTypeChangeInteractionClass::HLArequestAttributeTransportationTypeChangeInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLArequestAttributeTransportationTypeChange");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
  // parameter HLAtransportation : HLAtransportationName
  mHLAtransportationParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtransportation");
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestAttributeTransportationTypeChangeInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance, const std::vector<rti1516ev::HLAhandle>& HLAattributeList, HLAtransportationName HLAtransportation)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAobjectInstanceEncoder(HLAobjectInstance);
  parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(HLAattributeList);
  parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  rti1516ev::HLAunicodeString HLAtransportationEncoder(HLAtransportation);
  parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestAttributeTransportationTypeChangeInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectInstanceDecoder, HLAattributeListDecoder.get(), HLAtransportationDecoder.get());
  }
}


uint32_t HLArequestAttributeTransportationTypeChangeInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestAttributeTransportationTypeChangeInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  result.insert(GetHLAtransportationParameterHandle());
  return result;
}

// object class type 'HLArequestInteractionTransportationTypeChange'
HLArequestInteractionTransportationTypeChangeInteractionClass::HLArequestInteractionTransportationTypeChangeInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLArequestInteractionTransportationTypeChange");
  // parameter HLAinteractionClass : HLAhandle
  mHLAinteractionClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClass");
  // parameter HLAtransportation : HLAtransportationName
  mHLAtransportationParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtransportation");
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestInteractionTransportationTypeChangeInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAinteractionClass, HLAtransportationName HLAtransportation)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAinteractionClassEncoder(HLAinteractionClass);
  parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  rti1516ev::HLAunicodeString HLAtransportationEncoder(HLAtransportation);
  parameters.insert(std::make_pair(GetHLAtransportationParameterHandle(), HLAtransportationEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestInteractionTransportationTypeChangeInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
  }
  rti1516ev::HLAunicodeString HLAtransportationDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtransportationIter = parameters.find(GetHLAtransportationParameterHandle());
  if (HLAtransportationIter != parameters.end())
  {
    HLAtransportationDecoder.decode(HLAtransportationIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAinteractionClassDecoder, HLAtransportationDecoder.get());
  }
}


uint32_t HLArequestInteractionTransportationTypeChangeInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestInteractionTransportationTypeChangeInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassParameterHandle());
  result.insert(GetHLAtransportationParameterHandle());
  return result;
}

// object class type 'HLAunconditionalAttributeOwnershipDivestiture'
HLAunconditionalAttributeOwnershipDivestitureInteractionClass::HLAunconditionalAttributeOwnershipDivestitureInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAunconditionalAttributeOwnershipDivestiture");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance, const std::vector<rti1516ev::HLAhandle>& HLAattributeList)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAobjectInstanceEncoder(HLAobjectInstance);
  parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(HLAattributeList);
  parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAunconditionalAttributeOwnershipDivestitureInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectInstanceDecoder, HLAattributeListDecoder.get());
  }
}


uint32_t HLAunconditionalAttributeOwnershipDivestitureInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAunconditionalAttributeOwnershipDivestitureInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  return result;
}

// object class type 'HLAenableTimeRegulation'
HLAenableTimeRegulationInteractionClass::HLAenableTimeRegulationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAenableTimeRegulation");
  // parameter HLAlookahead : HLAtimeInterval
  mHLAlookaheadParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAlookahead");
}

void HLAenableTimeRegulationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAenableTimeRegulationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAenableTimeRegulationInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAenableTimeRegulationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAenableTimeRegulationInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::vector<uint8_t>& HLAlookahead)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  const HLAtimeIntervalEncoding& HLAlookaheadEncoder = static_cast<const HLAtimeIntervalEncoding&>(HLAlookahead);
  parameters.insert(std::make_pair(GetHLAlookaheadParameterHandle(), HLAlookaheadEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAenableTimeRegulationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  HLAtimeIntervalEncoding HLAlookaheadDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAlookaheadIter = parameters.find(GetHLAlookaheadParameterHandle());
  if (HLAlookaheadIter != parameters.end())
  {
    HLAlookaheadDecoder.decode(HLAlookaheadIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAlookaheadDecoder.get());
  }
}


uint32_t HLAenableTimeRegulationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAenableTimeRegulationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAlookaheadParameterHandle());
  return result;
}

// object class type 'HLAdisableTimeRegulation'
HLAdisableTimeRegulationInteractionClass::HLAdisableTimeRegulationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAdisableTimeRegulation");
}

void HLAdisableTimeRegulationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAdisableTimeRegulationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAdisableTimeRegulationInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAdisableTimeRegulationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAdisableTimeRegulationInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAdisableTimeRegulationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLAdisableTimeRegulationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAdisableTimeRegulationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAenableTimeConstrained'
HLAenableTimeConstrainedInteractionClass::HLAenableTimeConstrainedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAenableTimeConstrained");
}

void HLAenableTimeConstrainedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAenableTimeConstrainedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAenableTimeConstrainedInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAenableTimeConstrainedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAenableTimeConstrainedInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAenableTimeConstrainedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLAenableTimeConstrainedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAenableTimeConstrainedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAdisableTimeConstrained'
HLAdisableTimeConstrainedInteractionClass::HLAdisableTimeConstrainedInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAdisableTimeConstrained");
}

void HLAdisableTimeConstrainedInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAdisableTimeConstrainedInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAdisableTimeConstrainedInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAdisableTimeConstrainedInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAdisableTimeConstrainedInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAdisableTimeConstrainedInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLAdisableTimeConstrainedInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAdisableTimeConstrainedInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAtimeAdvanceRequest'
HLAtimeAdvanceRequestInteractionClass::HLAtimeAdvanceRequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAtimeAdvanceRequest");
  // parameter HLAtimeStamp : HLAlogicalTime
  mHLAtimeStampParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtimeStamp");
}

void HLAtimeAdvanceRequestInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAtimeAdvanceRequestInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAtimeAdvanceRequestInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAtimeAdvanceRequestInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAtimeAdvanceRequestInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::vector<uint8_t>& HLAtimeStamp)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(HLAtimeStamp);
  parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAtimeAdvanceRequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAtimeStampDecoder.get());
  }
}


uint32_t HLAtimeAdvanceRequestInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAtimeAdvanceRequestInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtimeStampParameterHandle());
  return result;
}

// object class type 'HLAtimeAdvanceRequestAvailable'
HLAtimeAdvanceRequestAvailableInteractionClass::HLAtimeAdvanceRequestAvailableInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAtimeAdvanceRequestAvailable");
  // parameter HLAtimeStamp : HLAlogicalTime
  mHLAtimeStampParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtimeStamp");
}

void HLAtimeAdvanceRequestAvailableInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAtimeAdvanceRequestAvailableInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAtimeAdvanceRequestAvailableInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAtimeAdvanceRequestAvailableInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAtimeAdvanceRequestAvailableInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::vector<uint8_t>& HLAtimeStamp)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(HLAtimeStamp);
  parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAtimeAdvanceRequestAvailableInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAtimeStampDecoder.get());
  }
}


uint32_t HLAtimeAdvanceRequestAvailableInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAtimeAdvanceRequestAvailableInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtimeStampParameterHandle());
  return result;
}

// object class type 'HLAnextMessageRequest'
HLAnextMessageRequestInteractionClass::HLAnextMessageRequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAnextMessageRequest");
  // parameter HLAtimeStamp : HLAlogicalTime
  mHLAtimeStampParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtimeStamp");
}

void HLAnextMessageRequestInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAnextMessageRequestInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAnextMessageRequestInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAnextMessageRequestInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAnextMessageRequestInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::vector<uint8_t>& HLAtimeStamp)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(HLAtimeStamp);
  parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAnextMessageRequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAtimeStampDecoder.get());
  }
}


uint32_t HLAnextMessageRequestInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAnextMessageRequestInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtimeStampParameterHandle());
  return result;
}

// object class type 'HLAnextMessageRequestAvailable'
HLAnextMessageRequestAvailableInteractionClass::HLAnextMessageRequestAvailableInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAnextMessageRequestAvailable");
  // parameter HLAtimeStamp : HLAlogicalTime
  mHLAtimeStampParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtimeStamp");
}

void HLAnextMessageRequestAvailableInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAnextMessageRequestAvailableInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAnextMessageRequestAvailableInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAnextMessageRequestAvailableInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAnextMessageRequestAvailableInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::vector<uint8_t>& HLAtimeStamp)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(HLAtimeStamp);
  parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAnextMessageRequestAvailableInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAtimeStampDecoder.get());
  }
}


uint32_t HLAnextMessageRequestAvailableInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAnextMessageRequestAvailableInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtimeStampParameterHandle());
  return result;
}

// object class type 'HLAflushQueueRequest'
HLAflushQueueRequestInteractionClass::HLAflushQueueRequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAflushQueueRequest");
  // parameter HLAtimeStamp : HLAlogicalTime
  mHLAtimeStampParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAtimeStamp");
}

void HLAflushQueueRequestInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAflushQueueRequestInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAflushQueueRequestInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAflushQueueRequestInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAflushQueueRequestInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::vector<uint8_t>& HLAtimeStamp)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  const HLAlogicalTimeEncoding& HLAtimeStampEncoder = static_cast<const HLAlogicalTimeEncoding&>(HLAtimeStamp);
  parameters.insert(std::make_pair(GetHLAtimeStampParameterHandle(), HLAtimeStampEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAflushQueueRequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  HLAlogicalTimeEncoding HLAtimeStampDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAtimeStampIter = parameters.find(GetHLAtimeStampParameterHandle());
  if (HLAtimeStampIter != parameters.end())
  {
    HLAtimeStampDecoder.decode(HLAtimeStampIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAtimeStampDecoder.get());
  }
}


uint32_t HLAflushQueueRequestInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAflushQueueRequestInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAtimeStampParameterHandle());
  return result;
}

// object class type 'HLAenableAsynchronousDelivery'
HLAenableAsynchronousDeliveryInteractionClass::HLAenableAsynchronousDeliveryInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAenableAsynchronousDelivery");
}

void HLAenableAsynchronousDeliveryInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAenableAsynchronousDeliveryInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAenableAsynchronousDeliveryInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAenableAsynchronousDeliveryInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAenableAsynchronousDeliveryInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAenableAsynchronousDeliveryInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLAenableAsynchronousDeliveryInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAenableAsynchronousDeliveryInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAdisableAsynchronousDelivery'
HLAdisableAsynchronousDeliveryInteractionClass::HLAdisableAsynchronousDeliveryInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAdisableAsynchronousDelivery");
}

void HLAdisableAsynchronousDeliveryInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAdisableAsynchronousDeliveryInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAdisableAsynchronousDeliveryInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAdisableAsynchronousDeliveryInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAdisableAsynchronousDeliveryInteractionClass::send(rti1516ev::HLAhandle HLAfederate)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAdisableAsynchronousDeliveryInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder);
  }
}


uint32_t HLAdisableAsynchronousDeliveryInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAdisableAsynchronousDeliveryInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  return result;
}

// object class type 'HLAmodifyLookahead'
HLAmodifyLookaheadInteractionClass::HLAmodifyLookaheadInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAmodifyLookahead");
  // parameter HLAlookahead : HLAtimeInterval
  mHLAlookaheadParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAlookahead");
}

void HLAmodifyLookaheadInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAmodifyLookaheadInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAmodifyLookaheadInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAmodifyLookaheadInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAmodifyLookaheadInteractionClass::send(rti1516ev::HLAhandle HLAfederate, const std::vector<uint8_t>& HLAlookahead)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  const HLAtimeIntervalEncoding& HLAlookaheadEncoder = static_cast<const HLAtimeIntervalEncoding&>(HLAlookahead);
  parameters.insert(std::make_pair(GetHLAlookaheadParameterHandle(), HLAlookaheadEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAmodifyLookaheadInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  HLAtimeIntervalEncoding HLAlookaheadDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAlookaheadIter = parameters.find(GetHLAlookaheadParameterHandle());
  if (HLAlookaheadIter != parameters.end())
  {
    HLAlookaheadDecoder.decode(HLAlookaheadIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAlookaheadDecoder.get());
  }
}


uint32_t HLAmodifyLookaheadInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAmodifyLookaheadInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAlookaheadParameterHandle());
  return result;
}

// object class type 'HLAchangeAttributeOrderType'
HLAchangeAttributeOrderTypeInteractionClass::HLAchangeAttributeOrderTypeInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAchangeAttributeOrderType");
  // parameter HLAobjectInstance : HLAhandle
  mHLAobjectInstanceParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAobjectInstance");
  // parameter HLAattributeList : HLAhandleList
  mHLAattributeListParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAattributeList");
  // parameter HLAsendOrder : HLAorderType
  mHLAsendOrderParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsendOrder");
}

void HLAchangeAttributeOrderTypeInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAchangeAttributeOrderTypeInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAchangeAttributeOrderTypeInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAchangeAttributeOrderTypeInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAchangeAttributeOrderTypeInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAobjectInstance, const std::vector<rti1516ev::HLAhandle>& HLAattributeList, HLAorderType HLAsendOrder)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAobjectInstanceEncoder(HLAobjectInstance);
  parameters.insert(std::make_pair(GetHLAobjectInstanceParameterHandle(), HLAobjectInstanceEncoder.encode()));
  const HLAhandleListEncoding& HLAattributeListEncoder = static_cast<const HLAhandleListEncoding&>(HLAattributeList);
  parameters.insert(std::make_pair(GetHLAattributeListParameterHandle(), HLAattributeListEncoder.encode()));
  rti1516ev::HLAinteger32BE HLAsendOrderEncoder(HLAsendOrder);
  parameters.insert(std::make_pair(GetHLAsendOrderParameterHandle(), HLAsendOrderEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAchangeAttributeOrderTypeInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAobjectInstanceDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAobjectInstanceIter = parameters.find(GetHLAobjectInstanceParameterHandle());
  if (HLAobjectInstanceIter != parameters.end())
  {
    HLAobjectInstanceDecoder.decode(HLAobjectInstanceIter->second);
  }
  HLAhandleListEncoding HLAattributeListDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAattributeListIter = parameters.find(GetHLAattributeListParameterHandle());
  if (HLAattributeListIter != parameters.end())
  {
    HLAattributeListDecoder.decode(HLAattributeListIter->second);
  }
  rti1516ev::HLAinteger32BE HLAsendOrderDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsendOrderIter = parameters.find(GetHLAsendOrderParameterHandle());
  if (HLAsendOrderIter != parameters.end())
  {
    HLAsendOrderDecoder.decode(HLAsendOrderIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAobjectInstanceDecoder, HLAattributeListDecoder.get(), static_cast<HLAorderType>(HLAsendOrderDecoder.get()));
  }
}


uint32_t HLAchangeAttributeOrderTypeInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAchangeAttributeOrderTypeInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAobjectInstanceParameterHandle());
  result.insert(GetHLAattributeListParameterHandle());
  result.insert(GetHLAsendOrderParameterHandle());
  return result;
}

// object class type 'HLAchangeInteractionOrderType'
HLAchangeInteractionOrderTypeInteractionClass::HLAchangeInteractionOrderTypeInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAserviceInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederate.HLAservice.HLAchangeInteractionOrderType");
  // parameter HLAinteractionClass : HLAhandle
  mHLAinteractionClassParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAinteractionClass");
  // parameter HLAsendOrder : HLAorderType
  mHLAsendOrderParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsendOrder");
}

void HLAchangeInteractionOrderTypeInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAchangeInteractionOrderTypeInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAchangeInteractionOrderTypeInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAchangeInteractionOrderTypeInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAchangeInteractionOrderTypeInteractionClass::send(rti1516ev::HLAhandle HLAfederate, rti1516ev::HLAhandle HLAinteractionClass, HLAorderType HLAsendOrder)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAhandle HLAfederateEncoder(HLAfederate);
  parameters.insert(std::make_pair(GetHLAfederateParameterHandle(), HLAfederateEncoder.encode()));
  rti1516ev::HLAhandle HLAinteractionClassEncoder(HLAinteractionClass);
  parameters.insert(std::make_pair(GetHLAinteractionClassParameterHandle(), HLAinteractionClassEncoder.encode()));
  rti1516ev::HLAinteger32BE HLAsendOrderEncoder(HLAsendOrder);
  parameters.insert(std::make_pair(GetHLAsendOrderParameterHandle(), HLAsendOrderEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAchangeInteractionOrderTypeInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAhandle HLAfederateDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAfederateIter = parameters.find(GetHLAfederateParameterHandle());
  if (HLAfederateIter != parameters.end())
  {
    HLAfederateDecoder.decode(HLAfederateIter->second);
  }
  rti1516ev::HLAhandle HLAinteractionClassDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAinteractionClassIter = parameters.find(GetHLAinteractionClassParameterHandle());
  if (HLAinteractionClassIter != parameters.end())
  {
    HLAinteractionClassDecoder.decode(HLAinteractionClassIter->second);
  }
  rti1516ev::HLAinteger32BE HLAsendOrderDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsendOrderIter = parameters.find(GetHLAsendOrderParameterHandle());
  if (HLAsendOrderIter != parameters.end())
  {
    HLAsendOrderDecoder.decode(HLAsendOrderIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAfederateDecoder, HLAinteractionClassDecoder, static_cast<HLAorderType>(HLAsendOrderDecoder.get()));
  }
}


uint32_t HLAchangeInteractionOrderTypeInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAchangeInteractionOrderTypeInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAfederateParameterHandle());
  result.insert(GetHLAinteractionClassParameterHandle());
  result.insert(GetHLAsendOrderParameterHandle());
  return result;
}

// object class type 'HLAfederation'
HLAfederationInteractionClass::HLAfederationInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAmanagerInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation");
}

void HLAfederationInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAfederationInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAfederationInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAfederationInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAfederationInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAfederationInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback();
  }
}


uint32_t HLAfederationInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAfederationInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLAadjust'
HLAadjustInteractionClass::HLAadjustInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAfederationInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLAadjust");
}

void HLAadjustInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAadjustInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAadjustInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAadjustInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAadjustInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAadjustInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback();
  }
}


uint32_t HLAadjustInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAadjustInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLAsetSwitches'
HLAsetSwitchesInteractionClass::HLAsetSwitchesInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAadjustInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLAadjust.HLAsetSwitches");
  // parameter HLAautoProvide : HLAswitch
  mHLAautoProvideParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAautoProvide");
}

void HLAsetSwitchesInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAsetSwitchesInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAsetSwitchesInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAsetSwitchesInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAsetSwitchesInteractionClass::send(HLAswitch HLAautoProvide)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAinteger32BE HLAautoProvideEncoder(HLAautoProvide);
  parameters.insert(std::make_pair(GetHLAautoProvideParameterHandle(), HLAautoProvideEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAsetSwitchesInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAinteger32BE HLAautoProvideDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAautoProvideIter = parameters.find(GetHLAautoProvideParameterHandle());
  if (HLAautoProvideIter != parameters.end())
  {
    HLAautoProvideDecoder.decode(HLAautoProvideIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(static_cast<HLAswitch>(HLAautoProvideDecoder.get()));
  }
}


uint32_t HLAsetSwitchesInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAsetSwitchesInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAautoProvideParameterHandle());
  return result;
}

// object class type 'HLArequest'
HLArequestInteractionClass::HLArequestInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAfederationInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest");
}

void HLArequestInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback();
  }
}


uint32_t HLArequestInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLArequestSynchronizationPoints'
HLArequestSynchronizationPointsInteractionClass::HLArequestSynchronizationPointsInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest.HLArequestSynchronizationPoints");
}

void HLArequestSynchronizationPointsInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestSynchronizationPointsInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestSynchronizationPointsInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestSynchronizationPointsInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestSynchronizationPointsInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestSynchronizationPointsInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback();
  }
}


uint32_t HLArequestSynchronizationPointsInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestSynchronizationPointsInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLArequestSynchronizationPointStatus'
HLArequestSynchronizationPointStatusInteractionClass::HLArequestSynchronizationPointStatusInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest.HLArequestSynchronizationPointStatus");
}

void HLArequestSynchronizationPointStatusInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestSynchronizationPointStatusInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestSynchronizationPointStatusInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestSynchronizationPointStatusInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestSynchronizationPointStatusInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestSynchronizationPointStatusInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback();
  }
}


uint32_t HLArequestSynchronizationPointStatusInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestSynchronizationPointStatusInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLArequestFOMmoduleData'
HLArequestFOMmoduleDataInteractionClass::HLArequestFOMmoduleDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest.HLArequestFOMmoduleData");
  // parameter HLAFOMmoduleIndicator : HLAindex
  mHLAFOMmoduleIndicatorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAFOMmoduleIndicator");
}

void HLArequestFOMmoduleDataInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestFOMmoduleDataInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestFOMmoduleDataInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestFOMmoduleDataInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestFOMmoduleDataInteractionClass::send(HLAindex HLAFOMmoduleIndicator)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(HLAFOMmoduleIndicator);
  parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestFOMmoduleDataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleIndicatorIter = parameters.find(GetHLAFOMmoduleIndicatorParameterHandle());
  if (HLAFOMmoduleIndicatorIter != parameters.end())
  {
    HLAFOMmoduleIndicatorDecoder.decode(HLAFOMmoduleIndicatorIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAFOMmoduleIndicatorDecoder.get());
  }
}


uint32_t HLArequestFOMmoduleDataInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestFOMmoduleDataInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAFOMmoduleIndicatorParameterHandle());
  return result;
}

// object class type 'HLArequestMIMdata'
HLArequestMIMdataInteractionClass::HLArequestMIMdataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLArequestInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLArequest.HLArequestMIMdata");
}

void HLArequestMIMdataInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLArequestMIMdataInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLArequestMIMdataInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLArequestMIMdataInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLArequestMIMdataInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLArequestMIMdataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback();
  }
}


uint32_t HLArequestMIMdataInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLArequestMIMdataInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLAreport'
HLAreportInteractionClass::HLAreportInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAfederationInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport");
}

void HLAreportInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportInteractionClass::send()
{
  rti1516ev::ParameterHandleValueMap parameters;
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap&)
{
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback();
  }
}


uint32_t HLAreportInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  return result;
}

// object class type 'HLAreportSynchronizationPoints'
HLAreportSynchronizationPointsInteractionClass::HLAreportSynchronizationPointsInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport.HLAreportSynchronizationPoints");
  // parameter HLAsyncPoints : HLAsynchPointList
  mHLAsyncPointsParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsyncPoints");
}

void HLAreportSynchronizationPointsInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportSynchronizationPointsInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportSynchronizationPointsInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportSynchronizationPointsInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportSynchronizationPointsInteractionClass::send(const std::vector<std::wstring>& HLAsyncPoints)
{
  rti1516ev::ParameterHandleValueMap parameters;
  const HLAsynchPointListEncoding& HLAsyncPointsEncoder = static_cast<const HLAsynchPointListEncoding&>(HLAsyncPoints);
  parameters.insert(std::make_pair(GetHLAsyncPointsParameterHandle(), HLAsyncPointsEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportSynchronizationPointsInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  HLAsynchPointListEncoding HLAsyncPointsDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsyncPointsIter = parameters.find(GetHLAsyncPointsParameterHandle());
  if (HLAsyncPointsIter != parameters.end())
  {
    HLAsyncPointsDecoder.decode(HLAsyncPointsIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAsyncPointsDecoder.get());
  }
}


uint32_t HLAreportSynchronizationPointsInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportSynchronizationPointsInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAsyncPointsParameterHandle());
  return result;
}

// object class type 'HLAreportSynchronizationPointStatus'
HLAreportSynchronizationPointStatusInteractionClass::HLAreportSynchronizationPointStatusInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport.HLAreportSynchronizationPointStatus");
  // parameter HLAsyncPointName : HLAunicodeString
  mHLAsyncPointNameParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsyncPointName");
  // parameter HLAsyncPointFederates : HLAsynchPointFederateList
  mHLAsyncPointFederatesParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAsyncPointFederates");
}

void HLAreportSynchronizationPointStatusInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportSynchronizationPointStatusInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportSynchronizationPointStatusInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportSynchronizationPointStatusInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportSynchronizationPointStatusInteractionClass::send(const std::wstring& HLAsyncPointName, const std::vector<HLAsynchPointFederateEncoding>& HLAsyncPointFederates)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAunicodeString HLAsyncPointNameEncoder(HLAsyncPointName);
  parameters.insert(std::make_pair(GetHLAsyncPointNameParameterHandle(), HLAsyncPointNameEncoder.encode()));
  const HLAsynchPointFederateListEncoding& HLAsyncPointFederatesEncoder = static_cast<const HLAsynchPointFederateListEncoding&>(HLAsyncPointFederates);
  parameters.insert(std::make_pair(GetHLAsyncPointFederatesParameterHandle(), HLAsyncPointFederatesEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportSynchronizationPointStatusInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAunicodeString HLAsyncPointNameDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsyncPointNameIter = parameters.find(GetHLAsyncPointNameParameterHandle());
  if (HLAsyncPointNameIter != parameters.end())
  {
    HLAsyncPointNameDecoder.decode(HLAsyncPointNameIter->second);
  }
  HLAsynchPointFederateListEncoding HLAsyncPointFederatesDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAsyncPointFederatesIter = parameters.find(GetHLAsyncPointFederatesParameterHandle());
  if (HLAsyncPointFederatesIter != parameters.end())
  {
    HLAsyncPointFederatesDecoder.decode(HLAsyncPointFederatesIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAsyncPointNameDecoder.get(), HLAsyncPointFederatesDecoder.get());
  }
}


uint32_t HLAreportSynchronizationPointStatusInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportSynchronizationPointStatusInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAsyncPointNameParameterHandle());
  result.insert(GetHLAsyncPointFederatesParameterHandle());
  return result;
}

// object class type 'HLAreportFOMmoduleData'
HLAreportFOMmoduleDataInteractionClass::HLAreportFOMmoduleDataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport.HLAreportFOMmoduleData");
  // parameter HLAFOMmoduleIndicator : HLAindex
  mHLAFOMmoduleIndicatorParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAFOMmoduleIndicator");
  // parameter HLAFOMmoduleData : HLAunicodeString
  mHLAFOMmoduleDataParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAFOMmoduleData");
}

void HLAreportFOMmoduleDataInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportFOMmoduleDataInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportFOMmoduleDataInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportFOMmoduleDataInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportFOMmoduleDataInteractionClass::send(HLAindex HLAFOMmoduleIndicator, const std::wstring& HLAFOMmoduleData)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorEncoder(HLAFOMmoduleIndicator);
  parameters.insert(std::make_pair(GetHLAFOMmoduleIndicatorParameterHandle(), HLAFOMmoduleIndicatorEncoder.encode()));
  rti1516ev::HLAunicodeString HLAFOMmoduleDataEncoder(HLAFOMmoduleData);
  parameters.insert(std::make_pair(GetHLAFOMmoduleDataParameterHandle(), HLAFOMmoduleDataEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportFOMmoduleDataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAinteger32BE HLAFOMmoduleIndicatorDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleIndicatorIter = parameters.find(GetHLAFOMmoduleIndicatorParameterHandle());
  if (HLAFOMmoduleIndicatorIter != parameters.end())
  {
    HLAFOMmoduleIndicatorDecoder.decode(HLAFOMmoduleIndicatorIter->second);
  }
  rti1516ev::HLAunicodeString HLAFOMmoduleDataDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAFOMmoduleDataIter = parameters.find(GetHLAFOMmoduleDataParameterHandle());
  if (HLAFOMmoduleDataIter != parameters.end())
  {
    HLAFOMmoduleDataDecoder.decode(HLAFOMmoduleDataIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAFOMmoduleIndicatorDecoder.get(), HLAFOMmoduleDataDecoder.get());
  }
}


uint32_t HLAreportFOMmoduleDataInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportFOMmoduleDataInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAFOMmoduleIndicatorParameterHandle());
  result.insert(GetHLAFOMmoduleDataParameterHandle());
  return result;
}

// object class type 'HLAreportMIMdata'
HLAreportMIMdataInteractionClass::HLAreportMIMdataInteractionClass(rti1516ev::RTIambassador* rtiAmbassador, HLAreportInteractionClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mInteractionClassHandle = rtiAmbassador->getInteractionClassHandle(L"HLAinteractionRoot.HLAmanager.HLAfederation.HLAreport.HLAreportMIMdata");
  // parameter HLAMIMdata : HLAunicodeString
  mHLAMIMdataParameterHandle = rtiAmbassador->getParameterHandle(mInteractionClassHandle, L"HLAMIMdata");
}

void HLAreportMIMdataInteractionClass::Publish()
{
  if (!mPublished)
  {
    mRtiAmbassador->publishInteractionClass(mInteractionClassHandle);
    mPublished = true;
  }
}

void HLAreportMIMdataInteractionClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishInteractionClass(mInteractionClassHandle);
    mPublished = false;
  }
}

void HLAreportMIMdataInteractionClass::Subscribe()
{
  if (!mSubscribed)
  {
    mRtiAmbassador->subscribeInteractionClass(mInteractionClassHandle);
    mRtiAmbassador->setInteractionClassDeliverToSelf(mInteractionClassHandle, true);
    mSubscribed = true;
  }
}

void HLAreportMIMdataInteractionClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeInteractionClass(mInteractionClassHandle);
    mSubscribed = false;
  }
}

void HLAreportMIMdataInteractionClass::send(const std::wstring& HLAMIMdata)
{
  rti1516ev::ParameterHandleValueMap parameters;
  rti1516ev::HLAunicodeString HLAMIMdataEncoder(HLAMIMdata);
  parameters.insert(std::make_pair(GetHLAMIMdataParameterHandle(), HLAMIMdataEncoder.encode()));
  mRtiAmbassador->sendInteraction(GetInteractionClassHandle(), parameters, rti1516ev::VariableLengthData());
}


void HLAreportMIMdataInteractionClass::ReceiveInteraction(const rti1516ev::ParameterHandleValueMap& parameters )
{
  rti1516ev::HLAunicodeString HLAMIMdataDecoder;
  rti1516ev::ParameterHandleValueMap::const_iterator HLAMIMdataIter = parameters.find(GetHLAMIMdataParameterHandle());
  if (HLAMIMdataIter != parameters.end())
  {
    HLAMIMdataDecoder.decode(HLAMIMdataIter->second);
  }
  for (auto& entry : _receiveCallbacks) {
    auto& callback = entry.second;
    callback(HLAMIMdataDecoder.get());
  }
}


uint32_t HLAreportMIMdataInteractionClass::RegisterReceiveCallback(ReceiveCallback callback)
{
  uint32_t key = _receiveCallbacksNextKey++;
  _receiveCallbacks.insert(std::make_pair(key, callback));
  return key;
}


rti1516ev::ParameterHandleSet HLAreportMIMdataInteractionClass::GetAllParameterHandles()
{
  rti1516ev::ParameterHandleSet result;
  result.insert(GetHLAMIMdataParameterHandle());
  return result;
}

 

InteractionClassRegistry* InteractionClassRegistry::sClassRegistry = nullptr;

InteractionClassRegistry::InteractionClassRegistry()
{
  assert(sClassRegistry == nullptr);
  sClassRegistry = this;
}

InteractionClassRegistry::~InteractionClassRegistry()
{
  sClassRegistry = nullptr;
}

void InteractionClassRegistry::Initialize(rti1516ev::RTIambassador* rtiAmbassador)
{
  mRtiAmbassador = rtiAmbassador;
  mHLAinteractionRootInteractionClass = std::unique_ptr<HLAinteractionRootInteractionClass>(new HLAinteractionRootInteractionClass(mRtiAmbassador));
  mHLAmanagerInteractionClass = std::unique_ptr<HLAmanagerInteractionClass>(new HLAmanagerInteractionClass(mRtiAmbassador, mHLAinteractionRootInteractionClass.get()));
  mHLAfederateInteractionClass = std::unique_ptr<HLAfederateInteractionClass>(new HLAfederateInteractionClass(mRtiAmbassador, mHLAmanagerInteractionClass.get()));
  mHLAadjustInteractionClass = std::unique_ptr<HLAadjustInteractionClass>(new HLAadjustInteractionClass(mRtiAmbassador, mHLAfederateInteractionClass.get()));
  mHLAsetTimingInteractionClass = std::unique_ptr<HLAsetTimingInteractionClass>(new HLAsetTimingInteractionClass(mRtiAmbassador, mHLAadjustInteractionClass.get()));
  mHLAmodifyAttributeStateInteractionClass = std::unique_ptr<HLAmodifyAttributeStateInteractionClass>(new HLAmodifyAttributeStateInteractionClass(mRtiAmbassador, mHLAadjustInteractionClass.get()));
  mHLAsetServiceReportingInteractionClass = std::unique_ptr<HLAsetServiceReportingInteractionClass>(new HLAsetServiceReportingInteractionClass(mRtiAmbassador, mHLAadjustInteractionClass.get()));
  mHLAsetExceptionReportingInteractionClass = std::unique_ptr<HLAsetExceptionReportingInteractionClass>(new HLAsetExceptionReportingInteractionClass(mRtiAmbassador, mHLAadjustInteractionClass.get()));
  mHLAsetSwitchesInteractionClass = std::unique_ptr<HLAsetSwitchesInteractionClass>(new HLAsetSwitchesInteractionClass(mRtiAmbassador, mHLAadjustInteractionClass.get()));
  mHLArequestInteractionClass = std::unique_ptr<HLArequestInteractionClass>(new HLArequestInteractionClass(mRtiAmbassador, mHLAfederateInteractionClass.get()));
  mHLArequestPublicationsInteractionClass = std::unique_ptr<HLArequestPublicationsInteractionClass>(new HLArequestPublicationsInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLArequestSubscriptionsInteractionClass = std::unique_ptr<HLArequestSubscriptionsInteractionClass>(new HLArequestSubscriptionsInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLArequestObjectInstancesThatCanBeDeletedInteractionClass = std::unique_ptr<HLArequestObjectInstancesThatCanBeDeletedInteractionClass>(new HLArequestObjectInstancesThatCanBeDeletedInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLArequestObjectInstancesUpdatedInteractionClass = std::unique_ptr<HLArequestObjectInstancesUpdatedInteractionClass>(new HLArequestObjectInstancesUpdatedInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLArequestObjectInstancesReflectedInteractionClass = std::unique_ptr<HLArequestObjectInstancesReflectedInteractionClass>(new HLArequestObjectInstancesReflectedInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLArequestUpdatesSentInteractionClass = std::unique_ptr<HLArequestUpdatesSentInteractionClass>(new HLArequestUpdatesSentInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLArequestInteractionsSentInteractionClass = std::unique_ptr<HLArequestInteractionsSentInteractionClass>(new HLArequestInteractionsSentInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLArequestReflectionsReceivedInteractionClass = std::unique_ptr<HLArequestReflectionsReceivedInteractionClass>(new HLArequestReflectionsReceivedInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLArequestInteractionsReceivedInteractionClass = std::unique_ptr<HLArequestInteractionsReceivedInteractionClass>(new HLArequestInteractionsReceivedInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLArequestObjectInstanceInformationInteractionClass = std::unique_ptr<HLArequestObjectInstanceInformationInteractionClass>(new HLArequestObjectInstanceInformationInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLArequestFOMmoduleDataInteractionClass = std::unique_ptr<HLArequestFOMmoduleDataInteractionClass>(new HLArequestFOMmoduleDataInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLAreportInteractionClass = std::unique_ptr<HLAreportInteractionClass>(new HLAreportInteractionClass(mRtiAmbassador, mHLAfederateInteractionClass.get()));
  mHLAreportObjectClassPublicationInteractionClass = std::unique_ptr<HLAreportObjectClassPublicationInteractionClass>(new HLAreportObjectClassPublicationInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportInteractionPublicationInteractionClass = std::unique_ptr<HLAreportInteractionPublicationInteractionClass>(new HLAreportInteractionPublicationInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportObjectClassSubscriptionInteractionClass = std::unique_ptr<HLAreportObjectClassSubscriptionInteractionClass>(new HLAreportObjectClassSubscriptionInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportInteractionSubscriptionInteractionClass = std::unique_ptr<HLAreportInteractionSubscriptionInteractionClass>(new HLAreportInteractionSubscriptionInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportObjectInstancesThatCanBeDeletedInteractionClass = std::unique_ptr<HLAreportObjectInstancesThatCanBeDeletedInteractionClass>(new HLAreportObjectInstancesThatCanBeDeletedInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportObjectInstancesUpdatedInteractionClass = std::unique_ptr<HLAreportObjectInstancesUpdatedInteractionClass>(new HLAreportObjectInstancesUpdatedInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportObjectInstancesReflectedInteractionClass = std::unique_ptr<HLAreportObjectInstancesReflectedInteractionClass>(new HLAreportObjectInstancesReflectedInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportUpdatesSentInteractionClass = std::unique_ptr<HLAreportUpdatesSentInteractionClass>(new HLAreportUpdatesSentInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportReflectionsReceivedInteractionClass = std::unique_ptr<HLAreportReflectionsReceivedInteractionClass>(new HLAreportReflectionsReceivedInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportInteractionsSentInteractionClass = std::unique_ptr<HLAreportInteractionsSentInteractionClass>(new HLAreportInteractionsSentInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportInteractionsReceivedInteractionClass = std::unique_ptr<HLAreportInteractionsReceivedInteractionClass>(new HLAreportInteractionsReceivedInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportObjectInstanceInformationInteractionClass = std::unique_ptr<HLAreportObjectInstanceInformationInteractionClass>(new HLAreportObjectInstanceInformationInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportExceptionInteractionClass = std::unique_ptr<HLAreportExceptionInteractionClass>(new HLAreportExceptionInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportServiceInvocationInteractionClass = std::unique_ptr<HLAreportServiceInvocationInteractionClass>(new HLAreportServiceInvocationInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportMOMexceptionInteractionClass = std::unique_ptr<HLAreportMOMexceptionInteractionClass>(new HLAreportMOMexceptionInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportFederateLostInteractionClass = std::unique_ptr<HLAreportFederateLostInteractionClass>(new HLAreportFederateLostInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportFOMmoduleDataInteractionClass = std::unique_ptr<HLAreportFOMmoduleDataInteractionClass>(new HLAreportFOMmoduleDataInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAserviceInteractionClass = std::unique_ptr<HLAserviceInteractionClass>(new HLAserviceInteractionClass(mRtiAmbassador, mHLAfederateInteractionClass.get()));
  mHLAresignFederationExecutionInteractionClass = std::unique_ptr<HLAresignFederationExecutionInteractionClass>(new HLAresignFederationExecutionInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAsynchronizationPointAchievedInteractionClass = std::unique_ptr<HLAsynchronizationPointAchievedInteractionClass>(new HLAsynchronizationPointAchievedInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAfederateSaveBegunInteractionClass = std::unique_ptr<HLAfederateSaveBegunInteractionClass>(new HLAfederateSaveBegunInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAfederateSaveCompleteInteractionClass = std::unique_ptr<HLAfederateSaveCompleteInteractionClass>(new HLAfederateSaveCompleteInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAfederateRestoreCompleteInteractionClass = std::unique_ptr<HLAfederateRestoreCompleteInteractionClass>(new HLAfederateRestoreCompleteInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLApublishObjectClassAttributesInteractionClass = std::unique_ptr<HLApublishObjectClassAttributesInteractionClass>(new HLApublishObjectClassAttributesInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAunpublishObjectClassAttributesInteractionClass = std::unique_ptr<HLAunpublishObjectClassAttributesInteractionClass>(new HLAunpublishObjectClassAttributesInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLApublishInteractionClassInteractionClass = std::unique_ptr<HLApublishInteractionClassInteractionClass>(new HLApublishInteractionClassInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAunpublishInteractionClassInteractionClass = std::unique_ptr<HLAunpublishInteractionClassInteractionClass>(new HLAunpublishInteractionClassInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAsubscribeObjectClassAttributesInteractionClass = std::unique_ptr<HLAsubscribeObjectClassAttributesInteractionClass>(new HLAsubscribeObjectClassAttributesInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAunsubscribeObjectClassAttributesInteractionClass = std::unique_ptr<HLAunsubscribeObjectClassAttributesInteractionClass>(new HLAunsubscribeObjectClassAttributesInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAsubscribeInteractionClassInteractionClass = std::unique_ptr<HLAsubscribeInteractionClassInteractionClass>(new HLAsubscribeInteractionClassInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAunsubscribeInteractionClassInteractionClass = std::unique_ptr<HLAunsubscribeInteractionClassInteractionClass>(new HLAunsubscribeInteractionClassInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAdeleteObjectInstanceInteractionClass = std::unique_ptr<HLAdeleteObjectInstanceInteractionClass>(new HLAdeleteObjectInstanceInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAlocalDeleteObjectInstanceInteractionClass = std::unique_ptr<HLAlocalDeleteObjectInstanceInteractionClass>(new HLAlocalDeleteObjectInstanceInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLArequestAttributeTransportationTypeChangeInteractionClass = std::unique_ptr<HLArequestAttributeTransportationTypeChangeInteractionClass>(new HLArequestAttributeTransportationTypeChangeInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLArequestInteractionTransportationTypeChangeInteractionClass = std::unique_ptr<HLArequestInteractionTransportationTypeChangeInteractionClass>(new HLArequestInteractionTransportationTypeChangeInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAunconditionalAttributeOwnershipDivestitureInteractionClass = std::unique_ptr<HLAunconditionalAttributeOwnershipDivestitureInteractionClass>(new HLAunconditionalAttributeOwnershipDivestitureInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAenableTimeRegulationInteractionClass = std::unique_ptr<HLAenableTimeRegulationInteractionClass>(new HLAenableTimeRegulationInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAdisableTimeRegulationInteractionClass = std::unique_ptr<HLAdisableTimeRegulationInteractionClass>(new HLAdisableTimeRegulationInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAenableTimeConstrainedInteractionClass = std::unique_ptr<HLAenableTimeConstrainedInteractionClass>(new HLAenableTimeConstrainedInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAdisableTimeConstrainedInteractionClass = std::unique_ptr<HLAdisableTimeConstrainedInteractionClass>(new HLAdisableTimeConstrainedInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAtimeAdvanceRequestInteractionClass = std::unique_ptr<HLAtimeAdvanceRequestInteractionClass>(new HLAtimeAdvanceRequestInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAtimeAdvanceRequestAvailableInteractionClass = std::unique_ptr<HLAtimeAdvanceRequestAvailableInteractionClass>(new HLAtimeAdvanceRequestAvailableInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAnextMessageRequestInteractionClass = std::unique_ptr<HLAnextMessageRequestInteractionClass>(new HLAnextMessageRequestInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAnextMessageRequestAvailableInteractionClass = std::unique_ptr<HLAnextMessageRequestAvailableInteractionClass>(new HLAnextMessageRequestAvailableInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAflushQueueRequestInteractionClass = std::unique_ptr<HLAflushQueueRequestInteractionClass>(new HLAflushQueueRequestInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAenableAsynchronousDeliveryInteractionClass = std::unique_ptr<HLAenableAsynchronousDeliveryInteractionClass>(new HLAenableAsynchronousDeliveryInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAdisableAsynchronousDeliveryInteractionClass = std::unique_ptr<HLAdisableAsynchronousDeliveryInteractionClass>(new HLAdisableAsynchronousDeliveryInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAmodifyLookaheadInteractionClass = std::unique_ptr<HLAmodifyLookaheadInteractionClass>(new HLAmodifyLookaheadInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAchangeAttributeOrderTypeInteractionClass = std::unique_ptr<HLAchangeAttributeOrderTypeInteractionClass>(new HLAchangeAttributeOrderTypeInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAchangeInteractionOrderTypeInteractionClass = std::unique_ptr<HLAchangeInteractionOrderTypeInteractionClass>(new HLAchangeInteractionOrderTypeInteractionClass(mRtiAmbassador, mHLAserviceInteractionClass.get()));
  mHLAfederationInteractionClass = std::unique_ptr<HLAfederationInteractionClass>(new HLAfederationInteractionClass(mRtiAmbassador, mHLAmanagerInteractionClass.get()));
  mHLAadjustInteractionClass = std::unique_ptr<HLAadjustInteractionClass>(new HLAadjustInteractionClass(mRtiAmbassador, mHLAfederationInteractionClass.get()));
  mHLAsetSwitchesInteractionClass = std::unique_ptr<HLAsetSwitchesInteractionClass>(new HLAsetSwitchesInteractionClass(mRtiAmbassador, mHLAadjustInteractionClass.get()));
  mHLArequestInteractionClass = std::unique_ptr<HLArequestInteractionClass>(new HLArequestInteractionClass(mRtiAmbassador, mHLAfederationInteractionClass.get()));
  mHLArequestSynchronizationPointsInteractionClass = std::unique_ptr<HLArequestSynchronizationPointsInteractionClass>(new HLArequestSynchronizationPointsInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLArequestSynchronizationPointStatusInteractionClass = std::unique_ptr<HLArequestSynchronizationPointStatusInteractionClass>(new HLArequestSynchronizationPointStatusInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLArequestFOMmoduleDataInteractionClass = std::unique_ptr<HLArequestFOMmoduleDataInteractionClass>(new HLArequestFOMmoduleDataInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLArequestMIMdataInteractionClass = std::unique_ptr<HLArequestMIMdataInteractionClass>(new HLArequestMIMdataInteractionClass(mRtiAmbassador, mHLArequestInteractionClass.get()));
  mHLAreportInteractionClass = std::unique_ptr<HLAreportInteractionClass>(new HLAreportInteractionClass(mRtiAmbassador, mHLAfederationInteractionClass.get()));
  mHLAreportSynchronizationPointsInteractionClass = std::unique_ptr<HLAreportSynchronizationPointsInteractionClass>(new HLAreportSynchronizationPointsInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportSynchronizationPointStatusInteractionClass = std::unique_ptr<HLAreportSynchronizationPointStatusInteractionClass>(new HLAreportSynchronizationPointStatusInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportFOMmoduleDataInteractionClass = std::unique_ptr<HLAreportFOMmoduleDataInteractionClass>(new HLAreportFOMmoduleDataInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
  mHLAreportMIMdataInteractionClass = std::unique_ptr<HLAreportMIMdataInteractionClass>(new HLAreportMIMdataInteractionClass(mRtiAmbassador, mHLAreportInteractionClass.get()));
} // Initialize

void InteractionClassRegistry::ReceiveInteraction(rti1516ev::InteractionClassHandle theInteractionClass, const rti1516ev::ParameterHandleValueMap & parameters)
{
  if (theInteractionClass == mHLAfederateInteractionClass->GetInteractionClassHandle())
  {
    mHLAfederateInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAsetTimingInteractionClass->GetInteractionClassHandle())
  {
    mHLAsetTimingInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAmodifyAttributeStateInteractionClass->GetInteractionClassHandle())
  {
    mHLAmodifyAttributeStateInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAsetServiceReportingInteractionClass->GetInteractionClassHandle())
  {
    mHLAsetServiceReportingInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAsetExceptionReportingInteractionClass->GetInteractionClassHandle())
  {
    mHLAsetExceptionReportingInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAsetSwitchesInteractionClass->GetInteractionClassHandle())
  {
    mHLAsetSwitchesInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLArequestObjectInstanceInformationInteractionClass->GetInteractionClassHandle())
  {
    mHLArequestObjectInstanceInformationInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLArequestFOMmoduleDataInteractionClass->GetInteractionClassHandle())
  {
    mHLArequestFOMmoduleDataInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportObjectClassPublicationInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportObjectClassPublicationInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportInteractionPublicationInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportInteractionPublicationInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportObjectClassSubscriptionInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportObjectClassSubscriptionInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportInteractionSubscriptionInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportInteractionSubscriptionInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportObjectInstancesThatCanBeDeletedInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportObjectInstancesThatCanBeDeletedInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportObjectInstancesUpdatedInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportObjectInstancesUpdatedInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportObjectInstancesReflectedInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportObjectInstancesReflectedInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportUpdatesSentInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportUpdatesSentInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportReflectionsReceivedInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportReflectionsReceivedInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportInteractionsSentInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportInteractionsSentInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportInteractionsReceivedInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportInteractionsReceivedInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportObjectInstanceInformationInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportObjectInstanceInformationInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportExceptionInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportExceptionInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportServiceInvocationInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportServiceInvocationInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportMOMexceptionInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportMOMexceptionInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportFederateLostInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportFederateLostInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportFOMmoduleDataInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportFOMmoduleDataInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAresignFederationExecutionInteractionClass->GetInteractionClassHandle())
  {
    mHLAresignFederationExecutionInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAsynchronizationPointAchievedInteractionClass->GetInteractionClassHandle())
  {
    mHLAsynchronizationPointAchievedInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAfederateSaveCompleteInteractionClass->GetInteractionClassHandle())
  {
    mHLAfederateSaveCompleteInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAfederateRestoreCompleteInteractionClass->GetInteractionClassHandle())
  {
    mHLAfederateRestoreCompleteInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLApublishObjectClassAttributesInteractionClass->GetInteractionClassHandle())
  {
    mHLApublishObjectClassAttributesInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAunpublishObjectClassAttributesInteractionClass->GetInteractionClassHandle())
  {
    mHLAunpublishObjectClassAttributesInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLApublishInteractionClassInteractionClass->GetInteractionClassHandle())
  {
    mHLApublishInteractionClassInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAunpublishInteractionClassInteractionClass->GetInteractionClassHandle())
  {
    mHLAunpublishInteractionClassInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAsubscribeObjectClassAttributesInteractionClass->GetInteractionClassHandle())
  {
    mHLAsubscribeObjectClassAttributesInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAunsubscribeObjectClassAttributesInteractionClass->GetInteractionClassHandle())
  {
    mHLAunsubscribeObjectClassAttributesInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAsubscribeInteractionClassInteractionClass->GetInteractionClassHandle())
  {
    mHLAsubscribeInteractionClassInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAunsubscribeInteractionClassInteractionClass->GetInteractionClassHandle())
  {
    mHLAunsubscribeInteractionClassInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAdeleteObjectInstanceInteractionClass->GetInteractionClassHandle())
  {
    mHLAdeleteObjectInstanceInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAlocalDeleteObjectInstanceInteractionClass->GetInteractionClassHandle())
  {
    mHLAlocalDeleteObjectInstanceInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLArequestAttributeTransportationTypeChangeInteractionClass->GetInteractionClassHandle())
  {
    mHLArequestAttributeTransportationTypeChangeInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLArequestInteractionTransportationTypeChangeInteractionClass->GetInteractionClassHandle())
  {
    mHLArequestInteractionTransportationTypeChangeInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAunconditionalAttributeOwnershipDivestitureInteractionClass->GetInteractionClassHandle())
  {
    mHLAunconditionalAttributeOwnershipDivestitureInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAenableTimeRegulationInteractionClass->GetInteractionClassHandle())
  {
    mHLAenableTimeRegulationInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAtimeAdvanceRequestInteractionClass->GetInteractionClassHandle())
  {
    mHLAtimeAdvanceRequestInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAtimeAdvanceRequestAvailableInteractionClass->GetInteractionClassHandle())
  {
    mHLAtimeAdvanceRequestAvailableInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAnextMessageRequestInteractionClass->GetInteractionClassHandle())
  {
    mHLAnextMessageRequestInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAnextMessageRequestAvailableInteractionClass->GetInteractionClassHandle())
  {
    mHLAnextMessageRequestAvailableInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAflushQueueRequestInteractionClass->GetInteractionClassHandle())
  {
    mHLAflushQueueRequestInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAmodifyLookaheadInteractionClass->GetInteractionClassHandle())
  {
    mHLAmodifyLookaheadInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAchangeAttributeOrderTypeInteractionClass->GetInteractionClassHandle())
  {
    mHLAchangeAttributeOrderTypeInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAchangeInteractionOrderTypeInteractionClass->GetInteractionClassHandle())
  {
    mHLAchangeInteractionOrderTypeInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAsetSwitchesInteractionClass->GetInteractionClassHandle())
  {
    mHLAsetSwitchesInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLArequestFOMmoduleDataInteractionClass->GetInteractionClassHandle())
  {
    mHLArequestFOMmoduleDataInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportSynchronizationPointsInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportSynchronizationPointsInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportSynchronizationPointStatusInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportSynchronizationPointStatusInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportFOMmoduleDataInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportFOMmoduleDataInteractionClass->ReceiveInteraction(parameters);
  }
  else if (theInteractionClass == mHLAreportMIMdataInteractionClass->GetInteractionClassHandle())
  {
    mHLAreportMIMdataInteractionClass->ReceiveInteraction(parameters);
  }
}

IInteractionClassRegistry* GetInteractionClassRegistry()
{
  return InteractionClassRegistry::GetInstance();
}

} // namespace OpenRTI
} // namespace Mom
