
// Code automatically generated by T4 template from D:\vfs\OpenRTI-codegen\tests\rti1516ev\codegen\\RTFederate.xml, do not edit
#pragma once

#include <vector>
#include <functional>

#include "RTI/encoding/HLAopaqueData.h"
#include "RTI/encoding/HLAhandle.h"
#include "RTFederateDataTypes.h"
#include "RTFederateObjectInterfaces.h"

namespace NDistSimIB {
namespace NRTFederateEncoding {

class IHLAinteractionRootInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send() = 0;
    using ReceiveCallback = std::function<void()>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class IMeasurementInitInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(const std::vector<uint8_t>& Dummy) = 0;
    using ReceiveCallback = std::function<void(const std::vector<uint8_t>& Dummy)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // Order is Receive, send/receive w. timestamps omitted
};

class IMeasurementStopInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(const std::wstring& NextFederationSuffix) = 0;
    using ReceiveCallback = std::function<void(const std::wstring& NextFederationSuffix)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(const std::wstring& NextFederationSuffix, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(const std::wstring& NextFederationSuffix, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class IKeyEventInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(int32_t KeyCode) = 0;
    using ReceiveCallback = std::function<void(int32_t KeyCode)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(int32_t KeyCode, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(int32_t KeyCode, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class ITextLogInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(const std::wstring& Sender, const std::wstring& Text) = 0;
    using ReceiveCallback = std::function<void(const std::wstring& Sender, const std::wstring& Text)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(const std::wstring& Sender, const std::wstring& Text, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(const std::wstring& Sender, const std::wstring& Text, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class IDOMemberTransmitDataInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(IDOMemberSource* ObjInstanceHandle, const std::string& ConnectionType, const std::vector<uint8_t>& DataBytes) = 0;
    using ReceiveCallback = std::function<void(IDOMemberSource* ObjInstanceHandle, const std::string& ConnectionType, const std::vector<uint8_t>& DataBytes)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(IDOMemberSource* ObjInstanceHandle, const std::string& ConnectionType, const std::vector<uint8_t>& DataBytes, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(IDOMemberSource* ObjInstanceHandle, const std::string& ConnectionType, const std::vector<uint8_t>& DataBytes, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class ISystemVariableUpdateInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(const std::string& Id, const std::vector<uint8_t>& Value, int32_t Client, bool HasChanged) = 0;
    using ReceiveCallback = std::function<void(const std::string& Id, const std::vector<uint8_t>& Value, int32_t Client, bool HasChanged)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(const std::string& Id, const std::vector<uint8_t>& Value, int32_t Client, bool HasChanged, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(const std::string& Id, const std::vector<uint8_t>& Value, int32_t Client, bool HasChanged, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class ISystemVariableModificationInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(const std::vector<uint8_t>& Value) = 0;
    using ReceiveCallback = std::function<void(const std::vector<uint8_t>& Value)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(const std::vector<uint8_t>& Value, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(const std::vector<uint8_t>& Value, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class IValueEntityUpdateInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(const std::vector<uint8_t>& Id, const std::vector<uint8_t>& Value) = 0;
    using ReceiveCallback = std::function<void(const std::vector<uint8_t>& Id, const std::vector<uint8_t>& Value)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(const std::vector<uint8_t>& Id, const std::vector<uint8_t>& Value, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(const std::vector<uint8_t>& Id, const std::vector<uint8_t>& Value, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class IBusMessageInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver) = 0;
    using ReceiveCallback = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class IEthPacketInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacket& Frame) = 0;
    using ReceiveCallback = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacket& Frame)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacket& Frame, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacket& Frame, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class IEthPacketErrorInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketError& Frame) = 0;
    using ReceiveCallback = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketError& Frame)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketError& Frame, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketError& Frame, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class IEthPacketErrorForwardedInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketErrorForwarded& Frame) = 0;
    using ReceiveCallback = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketErrorForwarded& Frame)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketErrorForwarded& Frame, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketErrorForwarded& Frame, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class IEthForwardedPacketInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketForwarded& Frame) = 0;
    using ReceiveCallback = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketForwarded& Frame)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketForwarded& Frame, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetPacketForwarded& Frame, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class IEthStatusInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetStatus& Frame) = 0;
    using ReceiveCallback = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetStatus& Frame)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetStatus& Frame, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const EthernetStatus& Frame, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class ICANMessageInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, int32_t Id, const CANFrame& Frame) = 0;
    using ReceiveCallback = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, int32_t Id, const CANFrame& Frame)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, int32_t Id, const CANFrame& Frame, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, int32_t Id, const CANFrame& Frame, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class ICANErrorFrameInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const std::vector<uint8_t>& Frame) = 0;
    using ReceiveCallback = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const std::vector<uint8_t>& Frame)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const std::vector<uint8_t>& Frame, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(bool IsRequest, const std::string& ChannelName, BusType BusType, rti1516ev::HLAhandle RequestingFederate, rti1516ev::HLAhandle Sender, rti1516ev::HLAhandle Receiver, const std::vector<uint8_t>& Frame, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};

class IPythonCommandInteractionClass
{
  public:
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe() = 0;
    virtual void Unsubscribe() = 0;
    virtual void send(const std::vector<uint8_t>& Code, const std::vector<uint8_t>& Target, const std::vector<uint8_t>& RefID) = 0;
    using ReceiveCallback = std::function<void(const std::vector<uint8_t>& Code, const std::vector<uint8_t>& Target, const std::vector<uint8_t>& RefID)>;
    virtual uint32_t RegisterReceiveCallback(ReceiveCallback callback) = 0;
    // send/receive with timestamps
    virtual void sendWithTime(const std::vector<uint8_t>& Code, const std::vector<uint8_t>& Target, const std::vector<uint8_t>& RefID, int64_t time) = 0;
    using ReceiveCallbackWithTime = std::function<void(const std::vector<uint8_t>& Code, const std::vector<uint8_t>& Target, const std::vector<uint8_t>& RefID, int64_t time)>;
    virtual uint32_t RegisterReceiveCallbackWithTime(ReceiveCallbackWithTime callback) = 0;
};


class IInteractionClassRegistry
{
  public:
    virtual IHLAinteractionRootInteractionClass* GetHLAinteractionRootInteractionClass() const = 0;
    virtual IMeasurementInitInteractionClass* GetMeasurementInitInteractionClass() const = 0;
    virtual IMeasurementStopInteractionClass* GetMeasurementStopInteractionClass() const = 0;
    virtual IKeyEventInteractionClass* GetKeyEventInteractionClass() const = 0;
    virtual ITextLogInteractionClass* GetTextLogInteractionClass() const = 0;
    virtual IDOMemberTransmitDataInteractionClass* GetDOMemberTransmitDataInteractionClass() const = 0;
    virtual ISystemVariableUpdateInteractionClass* GetSystemVariableUpdateInteractionClass() const = 0;
    virtual ISystemVariableModificationInteractionClass* GetSystemVariableModificationInteractionClass() const = 0;
    virtual IValueEntityUpdateInteractionClass* GetValueEntityUpdateInteractionClass() const = 0;
    virtual IBusMessageInteractionClass* GetBusMessageInteractionClass() const = 0;
    virtual IEthPacketInteractionClass* GetEthPacketInteractionClass() const = 0;
    virtual IEthPacketErrorInteractionClass* GetEthPacketErrorInteractionClass() const = 0;
    virtual IEthPacketErrorForwardedInteractionClass* GetEthPacketErrorForwardedInteractionClass() const = 0;
    virtual IEthForwardedPacketInteractionClass* GetEthForwardedPacketInteractionClass() const = 0;
    virtual IEthStatusInteractionClass* GetEthStatusInteractionClass() const = 0;
    virtual ICANMessageInteractionClass* GetCANMessageInteractionClass() const = 0;
    virtual ICANErrorFrameInteractionClass* GetCANErrorFrameInteractionClass() const = 0;
    virtual IPythonCommandInteractionClass* GetPythonCommandInteractionClass() const = 0;
  protected:
    virtual ~IInteractionClassRegistry() {}
}; // class IInteractionClassRegistry

IInteractionClassRegistry* GetInteractionClassRegistry();

} // namespace NDistSimIB
} // namespace NRTFederateEncoding
