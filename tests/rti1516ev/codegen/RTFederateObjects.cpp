
// Code automatically generated by T4 template from D:\vfs\OpenRTI-codegen\tests\rti1516ev\codegen\\RTFederate.xml, do not edit

#include <vector>
#include <cassert>

#include "RTI/encoding/HLAopaqueData.h"

#include "RTFederateObjects.h"

namespace NDistributedSimulation {
namespace NRTFederateEncoding {
HLAobjectRootObjectClass::HLAobjectRootObjectClass(rti1516ev::RTIambassador* rtiAmbassador)
{
  mRtiAmbassador = rtiAmbassador;
  mObjectClassHandle = rtiAmbassador->getObjectClassHandle(L"HLAobjectRoot");
// attribute HLAobjectRoot.HLAprivilegeToDeleteObject : no data type
}

void HLAobjectRootObjectClass::Publish()
{
  if (!mPublished)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->publishObjectClassAttributes(mObjectClassHandle, attributes);
    mPublished = true;
  }
}

void HLAobjectRootObjectClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishObjectClass(mObjectClassHandle);
    mPublished = false;
  }
}

void HLAobjectRootObjectClass::Subscribe()
{
  if (!mSubscribed)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->subscribeObjectClassAttributes(mObjectClassHandle, attributes);
    mSubscribed = true;
  }
}

void HLAobjectRootObjectClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeObjectClass(mObjectClassHandle);
    mSubscribed = false;
  }
}

void HLAobjectRootObjectClass::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, const std::wstring& theObjectInstanceName)
{
  auto iter = mObjectInstancesByName.find(theObjectInstanceName);
  assert(iter == mObjectInstancesByName.end());
  HLAobjectRoot* newObject = new HLAobjectRoot(mRtiAmbassador, theObjectInstanceName, theObject);
  mObjectInstancesByName.insert(std::make_pair(theObjectInstanceName, newObject));
}

void HLAobjectRootObjectClass::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  std::wstring instanceName = mRtiAmbassador->getObjectInstanceName(theObject);
  auto iter = mObjectInstancesByName.find(instanceName);
  assert(iter != mObjectInstancesByName.end());
  mObjectInstancesByName.erase(iter);
}

HLAobjectRoot* HLAobjectRootObjectClass::GetObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

HLAobjectRoot* HLAobjectRootObjectClass::CreateObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return nullptr;
  }
  if (!mPublished)
  {
    throw rti1516ev::ObjectClassNotPublished(L"HLAobjectRoot");
  }
  rti1516ev::ObjectInstanceHandle instanceHandle = mRtiAmbassador->registerObjectInstance(mObjectClassHandle, instanceName);
  HLAobjectRoot* newObject = new HLAobjectRoot(mRtiAmbassador, instanceName, instanceHandle);
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  return newObject;
}

// object instances of type 'HLAobjectRoot'
HLAobjectRoot::HLAobjectRoot()
{
}

HLAobjectRoot::HLAobjectRoot(rti1516ev::RTIambassador* rtiAmbassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle)
  : mInstanceName(instanceName)
  , mInstanceHandle(instanceHandle)
  , mRtiAmbassador(rtiAmbassador)
{
}

HLAobjectRoot::~HLAobjectRoot()
{
}

// attribute HLAobjectRoot.HLAprivilegeToDeleteObject : no data type

rti1516ev::AttributeHandleValueMap HLAobjectRoot::getChangedAttributes() const
{
  rti1516ev::AttributeHandleValueMap result;
  
  return result;
}


// object class type 'SystemVariable'
SystemVariableObjectClass::SystemVariableObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mObjectClassHandle = rtiAmbassador->getObjectClassHandle(L"HLAobjectRoot.SystemVariable");
  // attribute Value : HLAopaqueData
  mValueAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"Value");
}

void SystemVariableObjectClass::Publish()
{
  if (!mPublished)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->publishObjectClassAttributes(mObjectClassHandle, attributes);
    mPublished = true;
  }
}

void SystemVariableObjectClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishObjectClass(mObjectClassHandle);
    mPublished = false;
  }
}

void SystemVariableObjectClass::Subscribe()
{
  if (!mSubscribed)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->subscribeObjectClassAttributes(mObjectClassHandle, attributes);
    mSubscribed = true;
  }
}

void SystemVariableObjectClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeObjectClass(mObjectClassHandle);
    mSubscribed = false;
  }
}

void SystemVariableObjectClass::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, const std::wstring& theObjectInstanceName)
{
  auto iter = mObjectInstancesByName.find(theObjectInstanceName);
  assert(iter == mObjectInstancesByName.end());
  SystemVariable* newObject = new SystemVariable(mRtiAmbassador, theObjectInstanceName, theObject);
  mObjectInstancesByName.insert(std::make_pair(theObjectInstanceName, newObject));
}

void SystemVariableObjectClass::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  std::wstring instanceName = mRtiAmbassador->getObjectInstanceName(theObject);
  auto iter = mObjectInstancesByName.find(instanceName);
  assert(iter != mObjectInstancesByName.end());
  mObjectInstancesByName.erase(iter);
}

SystemVariable* SystemVariableObjectClass::GetObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

SystemVariable* SystemVariableObjectClass::CreateObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return nullptr;
  }
  if (!mPublished)
  {
    throw rti1516ev::ObjectClassNotPublished(L"SystemVariable");
  }
  rti1516ev::ObjectInstanceHandle instanceHandle = mRtiAmbassador->registerObjectInstance(mObjectClassHandle, instanceName);
  SystemVariable* newObject = new SystemVariable(mRtiAmbassador, instanceName, instanceHandle);
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  return newObject;
}

// object instances of type 'SystemVariable'
SystemVariable::SystemVariable()
{
}

SystemVariable::SystemVariable(rti1516ev::RTIambassador* rtiAmbassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle)
  : mInstanceName(instanceName)
  , mInstanceHandle(instanceHandle)
  , mRtiAmbassador(rtiAmbassador)
{
}

SystemVariable::~SystemVariable()
{
}

// attribute Value : HLAopaqueData
std::vector<uint8_t> SystemVariable::GetValue() const
{
  return mValue.get();
}

void SystemVariable::SetValue(std::vector<uint8_t> newValue)
{
  mValue.set(newValue);
}

rti1516ev::AttributeHandleValueMap SystemVariable::getChangedAttributes() const
{
  rti1516ev::AttributeHandleValueMap result;
  
  result = HLAobjectRoot::getChangedAttributes();
  if (mDirty & kValueBit)
  {
    result[mObjectClass->GetValueAttributeHandle()] = mValue.encode();
  }
  return result;
}

void SystemVariable::reflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes)
{
  for (auto& attributeHandleValue : attributes)
  {
    rti1516ev::AttributeHandle attributeHandle = attributeHandleValue.first;
    if (attributeHandle == mObjectClass->GetValueAttributeHandle())
    {
      mLastUpdated |= kValueBit;
    }
  } // for (auto& attributeHandleValue : attributes)
} // SystemVariable::reflectAttributeValues

// object class type 'ValueEntity'
ValueEntityObjectClass::ValueEntityObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mObjectClassHandle = rtiAmbassador->getObjectClassHandle(L"HLAobjectRoot.ValueEntity");
  // attribute Value : HLAopaqueData
  mValueAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"Value");
}

void ValueEntityObjectClass::Publish()
{
  if (!mPublished)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->publishObjectClassAttributes(mObjectClassHandle, attributes);
    mPublished = true;
  }
}

void ValueEntityObjectClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishObjectClass(mObjectClassHandle);
    mPublished = false;
  }
}

void ValueEntityObjectClass::Subscribe()
{
  if (!mSubscribed)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->subscribeObjectClassAttributes(mObjectClassHandle, attributes);
    mSubscribed = true;
  }
}

void ValueEntityObjectClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeObjectClass(mObjectClassHandle);
    mSubscribed = false;
  }
}

void ValueEntityObjectClass::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, const std::wstring& theObjectInstanceName)
{
  auto iter = mObjectInstancesByName.find(theObjectInstanceName);
  assert(iter == mObjectInstancesByName.end());
  ValueEntity* newObject = new ValueEntity(mRtiAmbassador, theObjectInstanceName, theObject);
  mObjectInstancesByName.insert(std::make_pair(theObjectInstanceName, newObject));
}

void ValueEntityObjectClass::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  std::wstring instanceName = mRtiAmbassador->getObjectInstanceName(theObject);
  auto iter = mObjectInstancesByName.find(instanceName);
  assert(iter != mObjectInstancesByName.end());
  mObjectInstancesByName.erase(iter);
}

ValueEntity* ValueEntityObjectClass::GetObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

ValueEntity* ValueEntityObjectClass::CreateObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return nullptr;
  }
  if (!mPublished)
  {
    throw rti1516ev::ObjectClassNotPublished(L"ValueEntity");
  }
  rti1516ev::ObjectInstanceHandle instanceHandle = mRtiAmbassador->registerObjectInstance(mObjectClassHandle, instanceName);
  ValueEntity* newObject = new ValueEntity(mRtiAmbassador, instanceName, instanceHandle);
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  return newObject;
}

// object instances of type 'ValueEntity'
ValueEntity::ValueEntity()
{
}

ValueEntity::ValueEntity(rti1516ev::RTIambassador* rtiAmbassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle)
  : mInstanceName(instanceName)
  , mInstanceHandle(instanceHandle)
  , mRtiAmbassador(rtiAmbassador)
{
}

ValueEntity::~ValueEntity()
{
}

// attribute Value : HLAopaqueData
std::vector<uint8_t> ValueEntity::GetValue() const
{
  return mValue.get();
}

void ValueEntity::SetValue(std::vector<uint8_t> newValue)
{
  mValue.set(newValue);
}

rti1516ev::AttributeHandleValueMap ValueEntity::getChangedAttributes() const
{
  rti1516ev::AttributeHandleValueMap result;
  
  result = HLAobjectRoot::getChangedAttributes();
  if (mDirty & kValueBit)
  {
    result[mObjectClass->GetValueAttributeHandle()] = mValue.encode();
  }
  return result;
}

void ValueEntity::reflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes)
{
  for (auto& attributeHandleValue : attributes)
  {
    rti1516ev::AttributeHandle attributeHandle = attributeHandleValue.first;
    if (attributeHandle == mObjectClass->GetValueAttributeHandle())
    {
      mLastUpdated |= kValueBit;
    }
  } // for (auto& attributeHandleValue : attributes)
} // ValueEntity::reflectAttributeValues

// object class type 'DOMemberSource'
DOMemberSourceObjectClass::DOMemberSourceObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mObjectClassHandle = rtiAmbassador->getObjectClassHandle(L"HLAobjectRoot.DOMemberSource");
  // attribute DOSourceMemberName : HLAASCIIstring
  mDOSourceMemberNameAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"DOSourceMemberName");
  // attribute DOSourceMemberConnectionType : HLAASCIIstring
  mDOSourceMemberConnectionTypeAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"DOSourceMemberConnectionType");
  // attribute DOSourceMemberDataBytes : HLAopaqueData
  mDOSourceMemberDataBytesAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"DOSourceMemberDataBytes");
}

void DOMemberSourceObjectClass::Publish()
{
  if (!mPublished)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->publishObjectClassAttributes(mObjectClassHandle, attributes);
    mPublished = true;
  }
}

void DOMemberSourceObjectClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishObjectClass(mObjectClassHandle);
    mPublished = false;
  }
}

void DOMemberSourceObjectClass::Subscribe()
{
  if (!mSubscribed)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->subscribeObjectClassAttributes(mObjectClassHandle, attributes);
    mSubscribed = true;
  }
}

void DOMemberSourceObjectClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeObjectClass(mObjectClassHandle);
    mSubscribed = false;
  }
}

void DOMemberSourceObjectClass::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, const std::wstring& theObjectInstanceName)
{
  auto iter = mObjectInstancesByName.find(theObjectInstanceName);
  assert(iter == mObjectInstancesByName.end());
  DOMemberSource* newObject = new DOMemberSource(mRtiAmbassador, theObjectInstanceName, theObject);
  mObjectInstancesByName.insert(std::make_pair(theObjectInstanceName, newObject));
}

void DOMemberSourceObjectClass::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  std::wstring instanceName = mRtiAmbassador->getObjectInstanceName(theObject);
  auto iter = mObjectInstancesByName.find(instanceName);
  assert(iter != mObjectInstancesByName.end());
  mObjectInstancesByName.erase(iter);
}

DOMemberSource* DOMemberSourceObjectClass::GetObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

DOMemberSource* DOMemberSourceObjectClass::CreateObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return nullptr;
  }
  if (!mPublished)
  {
    throw rti1516ev::ObjectClassNotPublished(L"DOMemberSource");
  }
  rti1516ev::ObjectInstanceHandle instanceHandle = mRtiAmbassador->registerObjectInstance(mObjectClassHandle, instanceName);
  DOMemberSource* newObject = new DOMemberSource(mRtiAmbassador, instanceName, instanceHandle);
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  return newObject;
}

// object instances of type 'DOMemberSource'
DOMemberSource::DOMemberSource()
{
}

DOMemberSource::DOMemberSource(rti1516ev::RTIambassador* rtiAmbassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle)
  : mInstanceName(instanceName)
  , mInstanceHandle(instanceHandle)
  , mRtiAmbassador(rtiAmbassador)
{
}

DOMemberSource::~DOMemberSource()
{
}

// attribute DOSourceMemberName : HLAASCIIstring
std::string DOMemberSource::GetDOSourceMemberName() const
{
  return mDOSourceMemberName.get();
}

void DOMemberSource::SetDOSourceMemberName(std::string newValue)
{
  mDOSourceMemberName.set(newValue);
}

// attribute DOSourceMemberConnectionType : HLAASCIIstring
std::string DOMemberSource::GetDOSourceMemberConnectionType() const
{
  return mDOSourceMemberConnectionType.get();
}

void DOMemberSource::SetDOSourceMemberConnectionType(std::string newValue)
{
  mDOSourceMemberConnectionType.set(newValue);
}

// attribute DOSourceMemberDataBytes : HLAopaqueData
std::vector<uint8_t> DOMemberSource::GetDOSourceMemberDataBytes() const
{
  return mDOSourceMemberDataBytes.get();
}

void DOMemberSource::SetDOSourceMemberDataBytes(std::vector<uint8_t> newValue)
{
  mDOSourceMemberDataBytes.set(newValue);
}

rti1516ev::AttributeHandleValueMap DOMemberSource::getChangedAttributes() const
{
  rti1516ev::AttributeHandleValueMap result;
  
  result = HLAobjectRoot::getChangedAttributes();
  if (mDirty & kDOSourceMemberNameBit)
  {
    result[mObjectClass->GetDOSourceMemberNameAttributeHandle()] = mDOSourceMemberName.encode();
  }
  if (mDirty & kDOSourceMemberConnectionTypeBit)
  {
    result[mObjectClass->GetDOSourceMemberConnectionTypeAttributeHandle()] = mDOSourceMemberConnectionType.encode();
  }
  if (mDirty & kDOSourceMemberDataBytesBit)
  {
    result[mObjectClass->GetDOSourceMemberDataBytesAttributeHandle()] = mDOSourceMemberDataBytes.encode();
  }
  return result;
}

void DOMemberSource::reflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes)
{
  for (auto& attributeHandleValue : attributes)
  {
    rti1516ev::AttributeHandle attributeHandle = attributeHandleValue.first;
    if (attributeHandle == mObjectClass->GetDOSourceMemberNameAttributeHandle())
    {
      mLastUpdated |= kDOSourceMemberNameBit;
    }
    else if (attributeHandle == mObjectClass->GetDOSourceMemberConnectionTypeAttributeHandle())
    {
      mLastUpdated |= kDOSourceMemberConnectionTypeBit;
    }
    else if (attributeHandle == mObjectClass->GetDOSourceMemberDataBytesAttributeHandle())
    {
      mLastUpdated |= kDOSourceMemberDataBytesBit;
    }
  } // for (auto& attributeHandleValue : attributes)
} // DOMemberSource::reflectAttributeValues

// object class type 'DOMemberTarget'
DOMemberTargetObjectClass::DOMemberTargetObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mObjectClassHandle = rtiAmbassador->getObjectClassHandle(L"HLAobjectRoot.DOMemberTarget");
  // attribute DOTargetMemberName : HLAASCIIstring
  mDOTargetMemberNameAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"DOTargetMemberName");
  // attribute DOTargetMemberConnectionType : HLAASCIIstring
  mDOTargetMemberConnectionTypeAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"DOTargetMemberConnectionType");
}

void DOMemberTargetObjectClass::Publish()
{
  if (!mPublished)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->publishObjectClassAttributes(mObjectClassHandle, attributes);
    mPublished = true;
  }
}

void DOMemberTargetObjectClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishObjectClass(mObjectClassHandle);
    mPublished = false;
  }
}

void DOMemberTargetObjectClass::Subscribe()
{
  if (!mSubscribed)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->subscribeObjectClassAttributes(mObjectClassHandle, attributes);
    mSubscribed = true;
  }
}

void DOMemberTargetObjectClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeObjectClass(mObjectClassHandle);
    mSubscribed = false;
  }
}

void DOMemberTargetObjectClass::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, const std::wstring& theObjectInstanceName)
{
  auto iter = mObjectInstancesByName.find(theObjectInstanceName);
  assert(iter == mObjectInstancesByName.end());
  DOMemberTarget* newObject = new DOMemberTarget(mRtiAmbassador, theObjectInstanceName, theObject);
  mObjectInstancesByName.insert(std::make_pair(theObjectInstanceName, newObject));
}

void DOMemberTargetObjectClass::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  std::wstring instanceName = mRtiAmbassador->getObjectInstanceName(theObject);
  auto iter = mObjectInstancesByName.find(instanceName);
  assert(iter != mObjectInstancesByName.end());
  mObjectInstancesByName.erase(iter);
}

DOMemberTarget* DOMemberTargetObjectClass::GetObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

DOMemberTarget* DOMemberTargetObjectClass::CreateObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return nullptr;
  }
  if (!mPublished)
  {
    throw rti1516ev::ObjectClassNotPublished(L"DOMemberTarget");
  }
  rti1516ev::ObjectInstanceHandle instanceHandle = mRtiAmbassador->registerObjectInstance(mObjectClassHandle, instanceName);
  DOMemberTarget* newObject = new DOMemberTarget(mRtiAmbassador, instanceName, instanceHandle);
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  return newObject;
}

// object instances of type 'DOMemberTarget'
DOMemberTarget::DOMemberTarget()
{
}

DOMemberTarget::DOMemberTarget(rti1516ev::RTIambassador* rtiAmbassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle)
  : mInstanceName(instanceName)
  , mInstanceHandle(instanceHandle)
  , mRtiAmbassador(rtiAmbassador)
{
}

DOMemberTarget::~DOMemberTarget()
{
}

// attribute DOTargetMemberName : HLAASCIIstring
std::string DOMemberTarget::GetDOTargetMemberName() const
{
  return mDOTargetMemberName.get();
}

void DOMemberTarget::SetDOTargetMemberName(std::string newValue)
{
  mDOTargetMemberName.set(newValue);
}

// attribute DOTargetMemberConnectionType : HLAASCIIstring
std::string DOMemberTarget::GetDOTargetMemberConnectionType() const
{
  return mDOTargetMemberConnectionType.get();
}

void DOMemberTarget::SetDOTargetMemberConnectionType(std::string newValue)
{
  mDOTargetMemberConnectionType.set(newValue);
}

rti1516ev::AttributeHandleValueMap DOMemberTarget::getChangedAttributes() const
{
  rti1516ev::AttributeHandleValueMap result;
  
  result = HLAobjectRoot::getChangedAttributes();
  if (mDirty & kDOTargetMemberNameBit)
  {
    result[mObjectClass->GetDOTargetMemberNameAttributeHandle()] = mDOTargetMemberName.encode();
  }
  if (mDirty & kDOTargetMemberConnectionTypeBit)
  {
    result[mObjectClass->GetDOTargetMemberConnectionTypeAttributeHandle()] = mDOTargetMemberConnectionType.encode();
  }
  return result;
}

void DOMemberTarget::reflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes)
{
  for (auto& attributeHandleValue : attributes)
  {
    rti1516ev::AttributeHandle attributeHandle = attributeHandleValue.first;
    if (attributeHandle == mObjectClass->GetDOTargetMemberNameAttributeHandle())
    {
      mLastUpdated |= kDOTargetMemberNameBit;
    }
    else if (attributeHandle == mObjectClass->GetDOTargetMemberConnectionTypeAttributeHandle())
    {
      mLastUpdated |= kDOTargetMemberConnectionTypeBit;
    }
  } // for (auto& attributeHandleValue : attributes)
} // DOMemberTarget::reflectAttributeValues

// object class type 'BusManagement'
BusManagementObjectClass::BusManagementObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mObjectClassHandle = rtiAmbassador->getObjectClassHandle(L"HLAobjectRoot.BusManagement");
  // attribute NetworkID : HLAASCIIstring
  mNetworkIDAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"NetworkID");
}

void BusManagementObjectClass::Publish()
{
  if (!mPublished)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->publishObjectClassAttributes(mObjectClassHandle, attributes);
    mPublished = true;
  }
}

void BusManagementObjectClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishObjectClass(mObjectClassHandle);
    mPublished = false;
  }
}

void BusManagementObjectClass::Subscribe()
{
  if (!mSubscribed)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->subscribeObjectClassAttributes(mObjectClassHandle, attributes);
    mSubscribed = true;
  }
}

void BusManagementObjectClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeObjectClass(mObjectClassHandle);
    mSubscribed = false;
  }
}

void BusManagementObjectClass::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, const std::wstring& theObjectInstanceName)
{
  auto iter = mObjectInstancesByName.find(theObjectInstanceName);
  assert(iter == mObjectInstancesByName.end());
  BusManagement* newObject = new BusManagement(mRtiAmbassador, theObjectInstanceName, theObject);
  mObjectInstancesByName.insert(std::make_pair(theObjectInstanceName, newObject));
}

void BusManagementObjectClass::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  std::wstring instanceName = mRtiAmbassador->getObjectInstanceName(theObject);
  auto iter = mObjectInstancesByName.find(instanceName);
  assert(iter != mObjectInstancesByName.end());
  mObjectInstancesByName.erase(iter);
}

BusManagement* BusManagementObjectClass::GetObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

BusManagement* BusManagementObjectClass::CreateObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return nullptr;
  }
  if (!mPublished)
  {
    throw rti1516ev::ObjectClassNotPublished(L"BusManagement");
  }
  rti1516ev::ObjectInstanceHandle instanceHandle = mRtiAmbassador->registerObjectInstance(mObjectClassHandle, instanceName);
  BusManagement* newObject = new BusManagement(mRtiAmbassador, instanceName, instanceHandle);
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  return newObject;
}

// object instances of type 'BusManagement'
BusManagement::BusManagement()
{
}

BusManagement::BusManagement(rti1516ev::RTIambassador* rtiAmbassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle)
  : mInstanceName(instanceName)
  , mInstanceHandle(instanceHandle)
  , mRtiAmbassador(rtiAmbassador)
{
}

BusManagement::~BusManagement()
{
}

// attribute NetworkID : HLAASCIIstring
std::string BusManagement::GetNetworkID() const
{
  return mNetworkID.get();
}

void BusManagement::SetNetworkID(std::string newValue)
{
  mNetworkID.set(newValue);
}

rti1516ev::AttributeHandleValueMap BusManagement::getChangedAttributes() const
{
  rti1516ev::AttributeHandleValueMap result;
  
  result = HLAobjectRoot::getChangedAttributes();
  if (mDirty & kNetworkIDBit)
  {
    result[mObjectClass->GetNetworkIDAttributeHandle()] = mNetworkID.encode();
  }
  return result;
}

void BusManagement::reflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes)
{
  for (auto& attributeHandleValue : attributes)
  {
    rti1516ev::AttributeHandle attributeHandle = attributeHandleValue.first;
    if (attributeHandle == mObjectClass->GetNetworkIDAttributeHandle())
    {
      mLastUpdated |= kNetworkIDBit;
    }
  } // for (auto& attributeHandleValue : attributes)
} // BusManagement::reflectAttributeValues

// object class type 'BusManagementCan'
BusManagementCanObjectClass::BusManagementCanObjectClass(rti1516ev::RTIambassador* rtiAmbassador, BusManagementObjectClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mObjectClassHandle = rtiAmbassador->getObjectClassHandle(L"HLAobjectRoot.BusManagement.BusManagementCan");
  // attribute BusState : CanBusState
  mBusStateAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"BusState");
  // attribute TxErrorCount : HLAinteger32LE
  mTxErrorCountAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"TxErrorCount");
  // attribute RxErrorCount : HLAinteger32LE
  mRxErrorCountAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"RxErrorCount");
  // attribute SendMessagesAsRx : HLAboolean
  mSendMessagesAsRxAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"SendMessagesAsRx");
}

void BusManagementCanObjectClass::Publish()
{
  if (!mPublished)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->publishObjectClassAttributes(mObjectClassHandle, attributes);
    mPublished = true;
  }
}

void BusManagementCanObjectClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishObjectClass(mObjectClassHandle);
    mPublished = false;
  }
}

void BusManagementCanObjectClass::Subscribe()
{
  if (!mSubscribed)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->subscribeObjectClassAttributes(mObjectClassHandle, attributes);
    mSubscribed = true;
  }
}

void BusManagementCanObjectClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeObjectClass(mObjectClassHandle);
    mSubscribed = false;
  }
}

void BusManagementCanObjectClass::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, const std::wstring& theObjectInstanceName)
{
  auto iter = mObjectInstancesByName.find(theObjectInstanceName);
  assert(iter == mObjectInstancesByName.end());
  BusManagementCan* newObject = new BusManagementCan(mRtiAmbassador, theObjectInstanceName, theObject);
  mObjectInstancesByName.insert(std::make_pair(theObjectInstanceName, newObject));
}

void BusManagementCanObjectClass::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  std::wstring instanceName = mRtiAmbassador->getObjectInstanceName(theObject);
  auto iter = mObjectInstancesByName.find(instanceName);
  assert(iter != mObjectInstancesByName.end());
  mObjectInstancesByName.erase(iter);
}

BusManagementCan* BusManagementCanObjectClass::GetObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

BusManagementCan* BusManagementCanObjectClass::CreateObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return nullptr;
  }
  if (!mPublished)
  {
    throw rti1516ev::ObjectClassNotPublished(L"BusManagementCan");
  }
  rti1516ev::ObjectInstanceHandle instanceHandle = mRtiAmbassador->registerObjectInstance(mObjectClassHandle, instanceName);
  BusManagementCan* newObject = new BusManagementCan(mRtiAmbassador, instanceName, instanceHandle);
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  return newObject;
}

// object instances of type 'BusManagementCan'
BusManagementCan::BusManagementCan()
{
}

BusManagementCan::BusManagementCan(rti1516ev::RTIambassador* rtiAmbassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle)
  : mInstanceName(instanceName)
  , mInstanceHandle(instanceHandle)
  , mRtiAmbassador(rtiAmbassador)
{
}

BusManagementCan::~BusManagementCan()
{
}

// attribute BusState : CanBusState
CanBusState BusManagementCan::GetBusState() const
{
  return static_cast<CanBusState>(mBusState.get());
}

void BusManagementCan::SetBusState(CanBusState newValue)
{
  mBusState.set(newValue);
}

// attribute TxErrorCount : HLAinteger32LE
int32_t BusManagementCan::GetTxErrorCount() const
{
  return mTxErrorCount.get();
}

void BusManagementCan::SetTxErrorCount(int32_t newValue)
{
  mTxErrorCount.set(newValue);
}

// attribute RxErrorCount : HLAinteger32LE
int32_t BusManagementCan::GetRxErrorCount() const
{
  return mRxErrorCount.get();
}

void BusManagementCan::SetRxErrorCount(int32_t newValue)
{
  mRxErrorCount.set(newValue);
}

// attribute SendMessagesAsRx : HLAboolean
bool BusManagementCan::GetSendMessagesAsRx() const
{
  return mSendMessagesAsRx.get();
}

void BusManagementCan::SetSendMessagesAsRx(bool newValue)
{
  mSendMessagesAsRx.set(newValue);
}

rti1516ev::AttributeHandleValueMap BusManagementCan::getChangedAttributes() const
{
  rti1516ev::AttributeHandleValueMap result;
  
  result = BusManagement::getChangedAttributes();
  if (mDirty & kBusStateBit)
  {
    result[mObjectClass->GetBusStateAttributeHandle()] = mBusState.encode();
  }
  if (mDirty & kTxErrorCountBit)
  {
    result[mObjectClass->GetTxErrorCountAttributeHandle()] = mTxErrorCount.encode();
  }
  if (mDirty & kRxErrorCountBit)
  {
    result[mObjectClass->GetRxErrorCountAttributeHandle()] = mRxErrorCount.encode();
  }
  if (mDirty & kSendMessagesAsRxBit)
  {
    result[mObjectClass->GetSendMessagesAsRxAttributeHandle()] = mSendMessagesAsRx.encode();
  }
  return result;
}

void BusManagementCan::reflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes)
{
  for (auto& attributeHandleValue : attributes)
  {
    rti1516ev::AttributeHandle attributeHandle = attributeHandleValue.first;
    if (attributeHandle == mObjectClass->GetBusStateAttributeHandle())
    {
      mLastUpdated |= kBusStateBit;
    }
    else if (attributeHandle == mObjectClass->GetTxErrorCountAttributeHandle())
    {
      mLastUpdated |= kTxErrorCountBit;
    }
    else if (attributeHandle == mObjectClass->GetRxErrorCountAttributeHandle())
    {
      mLastUpdated |= kRxErrorCountBit;
    }
    else if (attributeHandle == mObjectClass->GetSendMessagesAsRxAttributeHandle())
    {
      mLastUpdated |= kSendMessagesAsRxBit;
    }
  } // for (auto& attributeHandleValue : attributes)
} // BusManagementCan::reflectAttributeValues

// object class type 'BusController'
BusControllerObjectClass::BusControllerObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mObjectClassHandle = rtiAmbassador->getObjectClassHandle(L"HLAobjectRoot.BusController");
  // attribute NetworkID : HLAASCIIstring
  mNetworkIDAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"NetworkID");
  // attribute DeviceID : HLAASCIIstring
  mDeviceIDAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"DeviceID");
}

void BusControllerObjectClass::Publish()
{
  if (!mPublished)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->publishObjectClassAttributes(mObjectClassHandle, attributes);
    mPublished = true;
  }
}

void BusControllerObjectClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishObjectClass(mObjectClassHandle);
    mPublished = false;
  }
}

void BusControllerObjectClass::Subscribe()
{
  if (!mSubscribed)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->subscribeObjectClassAttributes(mObjectClassHandle, attributes);
    mSubscribed = true;
  }
}

void BusControllerObjectClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeObjectClass(mObjectClassHandle);
    mSubscribed = false;
  }
}

void BusControllerObjectClass::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, const std::wstring& theObjectInstanceName)
{
  auto iter = mObjectInstancesByName.find(theObjectInstanceName);
  assert(iter == mObjectInstancesByName.end());
  BusController* newObject = new BusController(mRtiAmbassador, theObjectInstanceName, theObject);
  mObjectInstancesByName.insert(std::make_pair(theObjectInstanceName, newObject));
}

void BusControllerObjectClass::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  std::wstring instanceName = mRtiAmbassador->getObjectInstanceName(theObject);
  auto iter = mObjectInstancesByName.find(instanceName);
  assert(iter != mObjectInstancesByName.end());
  mObjectInstancesByName.erase(iter);
}

BusController* BusControllerObjectClass::GetObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

BusController* BusControllerObjectClass::CreateObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return nullptr;
  }
  if (!mPublished)
  {
    throw rti1516ev::ObjectClassNotPublished(L"BusController");
  }
  rti1516ev::ObjectInstanceHandle instanceHandle = mRtiAmbassador->registerObjectInstance(mObjectClassHandle, instanceName);
  BusController* newObject = new BusController(mRtiAmbassador, instanceName, instanceHandle);
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  return newObject;
}

// object instances of type 'BusController'
BusController::BusController()
{
}

BusController::BusController(rti1516ev::RTIambassador* rtiAmbassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle)
  : mInstanceName(instanceName)
  , mInstanceHandle(instanceHandle)
  , mRtiAmbassador(rtiAmbassador)
{
}

BusController::~BusController()
{
}

// attribute NetworkID : HLAASCIIstring
std::string BusController::GetNetworkID() const
{
  return mNetworkID.get();
}

void BusController::SetNetworkID(std::string newValue)
{
  mNetworkID.set(newValue);
}

// attribute DeviceID : HLAASCIIstring
std::string BusController::GetDeviceID() const
{
  return mDeviceID.get();
}

void BusController::SetDeviceID(std::string newValue)
{
  mDeviceID.set(newValue);
}

rti1516ev::AttributeHandleValueMap BusController::getChangedAttributes() const
{
  rti1516ev::AttributeHandleValueMap result;
  
  result = HLAobjectRoot::getChangedAttributes();
  if (mDirty & kNetworkIDBit)
  {
    result[mObjectClass->GetNetworkIDAttributeHandle()] = mNetworkID.encode();
  }
  if (mDirty & kDeviceIDBit)
  {
    result[mObjectClass->GetDeviceIDAttributeHandle()] = mDeviceID.encode();
  }
  return result;
}

void BusController::reflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes)
{
  for (auto& attributeHandleValue : attributes)
  {
    rti1516ev::AttributeHandle attributeHandle = attributeHandleValue.first;
    if (attributeHandle == mObjectClass->GetNetworkIDAttributeHandle())
    {
      mLastUpdated |= kNetworkIDBit;
    }
    else if (attributeHandle == mObjectClass->GetDeviceIDAttributeHandle())
    {
      mLastUpdated |= kDeviceIDBit;
    }
  } // for (auto& attributeHandleValue : attributes)
} // BusController::reflectAttributeValues

// object class type 'BusControllerCan'
BusControllerCanObjectClass::BusControllerCanObjectClass(rti1516ev::RTIambassador* rtiAmbassador, BusControllerObjectClass* baseClass)
{
  mRtiAmbassador = rtiAmbassador;
  mBaseClass = baseClass;
  mObjectClassHandle = rtiAmbassador->getObjectClassHandle(L"HLAobjectRoot.BusController.BusControllerCan");
  // attribute BaudRate : HLAinteger32LE
  mBaudRateAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"BaudRate");
  // attribute DataBaudRate : HLAinteger32LE
  mDataBaudRateAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"DataBaudRate");
  // attribute PreScaler : HLAinteger32LE
  mPreScalerAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"PreScaler");
  // attribute OperationMode : CanOperationMode
  mOperationModeAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"OperationMode");
  // attribute Sync_Seg : HLAinteger32LE
  mSync_SegAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"Sync_Seg");
  // attribute Prop_Seg : HLAinteger32LE
  mProp_SegAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"Prop_Seg");
  // attribute Phase_Seg1 : HLAinteger32LE
  mPhase_Seg1AttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"Phase_Seg1");
  // attribute Phase_Seg2 : HLAinteger32LE
  mPhase_Seg2AttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"Phase_Seg2");
  // attribute SamplingMode : CanSamplingMode
  mSamplingModeAttributeHandle = rtiAmbassador->getAttributeHandle(mObjectClassHandle, L"SamplingMode");
}

void BusControllerCanObjectClass::Publish()
{
  if (!mPublished)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->publishObjectClassAttributes(mObjectClassHandle, attributes);
    mPublished = true;
  }
}

void BusControllerCanObjectClass::Unpublish()
{
  if (mPublished)
  {
    mRtiAmbassador->unpublishObjectClass(mObjectClassHandle);
    mPublished = false;
  }
}

void BusControllerCanObjectClass::Subscribe()
{
  if (!mSubscribed)
  {
    rti1516ev::AttributeHandleSet attributes;
    mRtiAmbassador->subscribeObjectClassAttributes(mObjectClassHandle, attributes);
    mSubscribed = true;
  }
}

void BusControllerCanObjectClass::Unsubscribe()
{
  if (mSubscribed)
  {
    mRtiAmbassador->unsubscribeObjectClass(mObjectClassHandle);
    mSubscribed = false;
  }
}

void BusControllerCanObjectClass::DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, const std::wstring& theObjectInstanceName)
{
  auto iter = mObjectInstancesByName.find(theObjectInstanceName);
  assert(iter == mObjectInstancesByName.end());
  BusControllerCan* newObject = new BusControllerCan(mRtiAmbassador, theObjectInstanceName, theObject);
  mObjectInstancesByName.insert(std::make_pair(theObjectInstanceName, newObject));
}

void BusControllerCanObjectClass::RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject)
{
  std::wstring instanceName = mRtiAmbassador->getObjectInstanceName(theObject);
  auto iter = mObjectInstancesByName.find(instanceName);
  assert(iter != mObjectInstancesByName.end());
  mObjectInstancesByName.erase(iter);
}

BusControllerCan* BusControllerCanObjectClass::GetObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return iter->second;
  }
  else
  {
    return nullptr;
  }
}

BusControllerCan* BusControllerCanObjectClass::CreateObjectInstance(const std::wstring& instanceName)
{
  auto iter = mObjectInstancesByName.find(instanceName);
  if (iter != mObjectInstancesByName.end())
  {
    return nullptr;
  }
  if (!mPublished)
  {
    throw rti1516ev::ObjectClassNotPublished(L"BusControllerCan");
  }
  rti1516ev::ObjectInstanceHandle instanceHandle = mRtiAmbassador->registerObjectInstance(mObjectClassHandle, instanceName);
  BusControllerCan* newObject = new BusControllerCan(mRtiAmbassador, instanceName, instanceHandle);
  mObjectInstancesByName.insert(std::make_pair(instanceName, newObject));
  return newObject;
}

// object instances of type 'BusControllerCan'
BusControllerCan::BusControllerCan()
{
}

BusControllerCan::BusControllerCan(rti1516ev::RTIambassador* rtiAmbassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle)
  : mInstanceName(instanceName)
  , mInstanceHandle(instanceHandle)
  , mRtiAmbassador(rtiAmbassador)
{
}

BusControllerCan::~BusControllerCan()
{
}

// attribute BaudRate : HLAinteger32LE
int32_t BusControllerCan::GetBaudRate() const
{
  return mBaudRate.get();
}

void BusControllerCan::SetBaudRate(int32_t newValue)
{
  mBaudRate.set(newValue);
}

// attribute DataBaudRate : HLAinteger32LE
int32_t BusControllerCan::GetDataBaudRate() const
{
  return mDataBaudRate.get();
}

void BusControllerCan::SetDataBaudRate(int32_t newValue)
{
  mDataBaudRate.set(newValue);
}

// attribute PreScaler : HLAinteger32LE
int32_t BusControllerCan::GetPreScaler() const
{
  return mPreScaler.get();
}

void BusControllerCan::SetPreScaler(int32_t newValue)
{
  mPreScaler.set(newValue);
}

// attribute OperationMode : CanOperationMode
CanOperationMode BusControllerCan::GetOperationMode() const
{
  return static_cast<CanOperationMode>(mOperationMode.get());
}

void BusControllerCan::SetOperationMode(CanOperationMode newValue)
{
  mOperationMode.set(newValue);
}

// attribute Sync_Seg : HLAinteger32LE
int32_t BusControllerCan::GetSync_Seg() const
{
  return mSync_Seg.get();
}

void BusControllerCan::SetSync_Seg(int32_t newValue)
{
  mSync_Seg.set(newValue);
}

// attribute Prop_Seg : HLAinteger32LE
int32_t BusControllerCan::GetProp_Seg() const
{
  return mProp_Seg.get();
}

void BusControllerCan::SetProp_Seg(int32_t newValue)
{
  mProp_Seg.set(newValue);
}

// attribute Phase_Seg1 : HLAinteger32LE
int32_t BusControllerCan::GetPhase_Seg1() const
{
  return mPhase_Seg1.get();
}

void BusControllerCan::SetPhase_Seg1(int32_t newValue)
{
  mPhase_Seg1.set(newValue);
}

// attribute Phase_Seg2 : HLAinteger32LE
int32_t BusControllerCan::GetPhase_Seg2() const
{
  return mPhase_Seg2.get();
}

void BusControllerCan::SetPhase_Seg2(int32_t newValue)
{
  mPhase_Seg2.set(newValue);
}

// attribute SamplingMode : CanSamplingMode
CanSamplingMode BusControllerCan::GetSamplingMode() const
{
  return static_cast<CanSamplingMode>(mSamplingMode.get());
}

void BusControllerCan::SetSamplingMode(CanSamplingMode newValue)
{
  mSamplingMode.set(newValue);
}

rti1516ev::AttributeHandleValueMap BusControllerCan::getChangedAttributes() const
{
  rti1516ev::AttributeHandleValueMap result;
  
  result = BusController::getChangedAttributes();
  if (mDirty & kBaudRateBit)
  {
    result[mObjectClass->GetBaudRateAttributeHandle()] = mBaudRate.encode();
  }
  if (mDirty & kDataBaudRateBit)
  {
    result[mObjectClass->GetDataBaudRateAttributeHandle()] = mDataBaudRate.encode();
  }
  if (mDirty & kPreScalerBit)
  {
    result[mObjectClass->GetPreScalerAttributeHandle()] = mPreScaler.encode();
  }
  if (mDirty & kOperationModeBit)
  {
    result[mObjectClass->GetOperationModeAttributeHandle()] = mOperationMode.encode();
  }
  if (mDirty & kSync_SegBit)
  {
    result[mObjectClass->GetSync_SegAttributeHandle()] = mSync_Seg.encode();
  }
  if (mDirty & kProp_SegBit)
  {
    result[mObjectClass->GetProp_SegAttributeHandle()] = mProp_Seg.encode();
  }
  if (mDirty & kPhase_Seg1Bit)
  {
    result[mObjectClass->GetPhase_Seg1AttributeHandle()] = mPhase_Seg1.encode();
  }
  if (mDirty & kPhase_Seg2Bit)
  {
    result[mObjectClass->GetPhase_Seg2AttributeHandle()] = mPhase_Seg2.encode();
  }
  if (mDirty & kSamplingModeBit)
  {
    result[mObjectClass->GetSamplingModeAttributeHandle()] = mSamplingMode.encode();
  }
  return result;
}

void BusControllerCan::reflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes)
{
  for (auto& attributeHandleValue : attributes)
  {
    rti1516ev::AttributeHandle attributeHandle = attributeHandleValue.first;
    if (attributeHandle == mObjectClass->GetBaudRateAttributeHandle())
    {
      mLastUpdated |= kBaudRateBit;
    }
    else if (attributeHandle == mObjectClass->GetDataBaudRateAttributeHandle())
    {
      mLastUpdated |= kDataBaudRateBit;
    }
    else if (attributeHandle == mObjectClass->GetPreScalerAttributeHandle())
    {
      mLastUpdated |= kPreScalerBit;
    }
    else if (attributeHandle == mObjectClass->GetOperationModeAttributeHandle())
    {
      mLastUpdated |= kOperationModeBit;
    }
    else if (attributeHandle == mObjectClass->GetSync_SegAttributeHandle())
    {
      mLastUpdated |= kSync_SegBit;
    }
    else if (attributeHandle == mObjectClass->GetProp_SegAttributeHandle())
    {
      mLastUpdated |= kProp_SegBit;
    }
    else if (attributeHandle == mObjectClass->GetPhase_Seg1AttributeHandle())
    {
      mLastUpdated |= kPhase_Seg1Bit;
    }
    else if (attributeHandle == mObjectClass->GetPhase_Seg2AttributeHandle())
    {
      mLastUpdated |= kPhase_Seg2Bit;
    }
    else if (attributeHandle == mObjectClass->GetSamplingModeAttributeHandle())
    {
      mLastUpdated |= kSamplingModeBit;
    }
  } // for (auto& attributeHandleValue : attributes)
} // BusControllerCan::reflectAttributeValues

 

void ClassRegistry::Initialize(rti1516ev::RTIambassador* rtiAmbassador)
{
  mHLAobjectRootObjectClass = std::unique_ptr<HLAobjectRootObjectClass>(new HLAobjectRootObjectClass(rtiAmbassador));
  mSystemVariableObjectClass = std::unique_ptr<SystemVariableObjectClass>(new SystemVariableObjectClass(rtiAmbassador, getHLAobjectRootObjectClass()));
  mValueEntityObjectClass = std::unique_ptr<ValueEntityObjectClass>(new ValueEntityObjectClass(rtiAmbassador, getHLAobjectRootObjectClass()));
  mDOMemberSourceObjectClass = std::unique_ptr<DOMemberSourceObjectClass>(new DOMemberSourceObjectClass(rtiAmbassador, getHLAobjectRootObjectClass()));
  mDOMemberTargetObjectClass = std::unique_ptr<DOMemberTargetObjectClass>(new DOMemberTargetObjectClass(rtiAmbassador, getHLAobjectRootObjectClass()));
  mBusManagementObjectClass = std::unique_ptr<BusManagementObjectClass>(new BusManagementObjectClass(rtiAmbassador, getHLAobjectRootObjectClass()));
  mBusManagementCanObjectClass = std::unique_ptr<BusManagementCanObjectClass>(new BusManagementCanObjectClass(rtiAmbassador, getBusManagementObjectClass()));
  mBusControllerObjectClass = std::unique_ptr<BusControllerObjectClass>(new BusControllerObjectClass(rtiAmbassador, getHLAobjectRootObjectClass()));
  mBusControllerCanObjectClass = std::unique_ptr<BusControllerCanObjectClass>(new BusControllerCanObjectClass(rtiAmbassador, getBusControllerObjectClass()));
} // Initialize

} // namespace NDistributedSimulation
} // namespace NRTFederateEncoding
