
// Code automatically generated by T4 template from D:\vfs\OpenRTI-codegen\tests\rti1516ev\codegen\\RTFederate.xml, do not edit
#pragma once

#include <vector>
#include "RTI/Handle.h"
#include "RTI/RTIambassador.h"
#include "RTI/encoding/BasicDataElements.h"
#include "RTI/encoding/HLAfixedRecord.h"
#include "RTI/encoding/HLAfixedArray.h"
#include "RTI/encoding/HLAvariableArray.h"
#include "RTI/encoding/HLAopaqueData.h"
#include "RTI/encoding/HLAhandle.h"
#include "RTFederateObjectInterfaces.h"
#include "RTFederateEncodings.h"

namespace NDistSimIB {
namespace NRTFederateEncoding {

class HLAobjectRoot;
class HLAobjectRootObjectClass : public IHLAobjectRootObjectClass
{
  public:
    // IHLAobjectRootObjectClass
    HLAobjectRootObjectClass() = default;
    virtual ~HLAobjectRootObjectClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    IHLAobjectRoot* GetObjectInstance(const std::wstring& instanceName) override;
    IHLAobjectRoot* CreateObjectInstance(const std::wstring& instanceName) override;

    // internal
    HLAobjectRootObjectClass(rti1516ev::RTIambassador* rtiAmbassador);
    // attribute HLAprivilegeToDeleteObject : no data type
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    IHLAobjectRoot* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    rti1516ev::AttributeHandleSet GetAllAttributeHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute HLAprivilegeToDeleteObject : no data type
    std::map<std::wstring, HLAobjectRoot*> mObjectInstancesByName;
    std::map<rti1516ev::ObjectInstanceHandle, HLAobjectRoot*> mObjectInstancesByHandle;
};

class HLAobjectRoot : public IHLAobjectRoot
{
  public:

    virtual ~HLAobjectRoot();
    HLAobjectRoot(const HLAobjectRoot&) = delete;
    HLAobjectRoot(HLAobjectRoot&&) = delete;
    HLAobjectRoot& operator=(const HLAobjectRoot&) = delete;
    HLAobjectRoot& operator=(HLAobjectRoot&&) = delete;
    IHLAobjectRootObjectClass* GetObjectClass() const { return mObjectClass; }
    std::wstring GetObjectInstanceName() const override { return mInstanceName; }
    // attribute HLAprivilegeToDeleteObject : no data type
    // IHLAobjectRoot

    rti1516ev::AttributeHandleValueMap GetAllAttributeValues() const;
    rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
    bool IsValid() const { return mObjectInstanceHandle.isValid(); }
    bool IsOwner() const { return mIsOwner; }
  private:
    friend class HLAobjectRootObjectClass;

    HLAobjectRoot();
    HLAobjectRoot(HLAobjectRootObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* ambassador);

    HLAobjectRootObjectClass* mObjectClass;
    std::wstring mInstanceName;
    rti1516ev::RTIambassador* mRtiAmbassador;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    bool mIsOwner = false;
    // Attribute value encoders
    // attribute HLAprivilegeToDeleteObject : no data type
};

class SystemVariable;
class SystemVariableObjectClass : public ISystemVariableObjectClass
{
  public:
    // ISystemVariableObjectClass
    SystemVariableObjectClass() = default;
    virtual ~SystemVariableObjectClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    ISystemVariable* GetObjectInstance(const std::wstring& instanceName) override;
    ISystemVariable* CreateObjectInstance(const std::wstring& instanceName) override;

    // internal
    SystemVariableObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass);

    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute Value : HLAopaqueData
    rti1516ev::AttributeHandle GetValueAttributeHandle() const { return mValueAttributeHandle; }
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    ISystemVariable* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    rti1516ev::AttributeHandleSet GetAllAttributeHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAobjectRootObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute Value : HLAopaqueData
    rti1516ev::AttributeHandle mValueAttributeHandle;
    std::map<std::wstring, SystemVariable*> mObjectInstancesByName;
    std::map<rti1516ev::ObjectInstanceHandle, SystemVariable*> mObjectInstancesByHandle;
};

class SystemVariable : public ISystemVariable
{
  public:

    virtual ~SystemVariable();
    SystemVariable(const SystemVariable&) = delete;
    SystemVariable(SystemVariable&&) = delete;
    SystemVariable& operator=(const SystemVariable&) = delete;
    SystemVariable& operator=(SystemVariable&&) = delete;
    ISystemVariableObjectClass* GetObjectClass() const { return mObjectClass; }
    std::wstring GetObjectInstanceName() const override { return mInstanceName; }
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute Value : HLAopaqueData
    std::vector<uint8_t> GetValue() const override;
    void SetValue(std::vector<uint8_t> newValue) override;
    // ISystemVariable
    void UpdateAllAttributeValues() override;
    void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time) override;
    void UpdateModifiedAttributeValues() override;
    void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time) override;
    AttributeBits GetUpdatedAttributes() const override { return mLastUpdated; }
    uint32_t RegisterUpdateCallback(UpdateCallbackType callback) override;
    void UnregisterUpdateCallback(uint32_t callbackToken) override;

    rti1516ev::AttributeHandleValueMap GetAllAttributeValues() const;
    rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
    void ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributes);
    bool IsValid() const { return mObjectInstanceHandle.isValid(); }
    bool IsOwner() const { return mIsOwner; }
  private:
    friend class SystemVariableObjectClass;

    SystemVariable();
    SystemVariable(SystemVariableObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* ambassador);

    void ExecuteUpdateCallbacks();
    SystemVariableObjectClass* mObjectClass;
    std::wstring mInstanceName;
    rti1516ev::RTIambassador* mRtiAmbassador;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    bool mIsOwner = false;
    // modified by ReflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::map<uint32_t, UpdateCallbackType> mUpdateCallbacks;
    uint32_t mLastCallbackToken = 0;
    // Attribute value encoders
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute Value : HLAopaqueData
    rti1516ev::HLAopaqueData mValue;
};

class ValueEntity;
class ValueEntityObjectClass : public IValueEntityObjectClass
{
  public:
    // IValueEntityObjectClass
    ValueEntityObjectClass() = default;
    virtual ~ValueEntityObjectClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    IValueEntity* GetObjectInstance(const std::wstring& instanceName) override;
    IValueEntity* CreateObjectInstance(const std::wstring& instanceName) override;

    // internal
    ValueEntityObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass);

    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute Value : HLAopaqueData
    rti1516ev::AttributeHandle GetValueAttributeHandle() const { return mValueAttributeHandle; }
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    IValueEntity* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    rti1516ev::AttributeHandleSet GetAllAttributeHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAobjectRootObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute Value : HLAopaqueData
    rti1516ev::AttributeHandle mValueAttributeHandle;
    std::map<std::wstring, ValueEntity*> mObjectInstancesByName;
    std::map<rti1516ev::ObjectInstanceHandle, ValueEntity*> mObjectInstancesByHandle;
};

class ValueEntity : public IValueEntity
{
  public:

    virtual ~ValueEntity();
    ValueEntity(const ValueEntity&) = delete;
    ValueEntity(ValueEntity&&) = delete;
    ValueEntity& operator=(const ValueEntity&) = delete;
    ValueEntity& operator=(ValueEntity&&) = delete;
    IValueEntityObjectClass* GetObjectClass() const { return mObjectClass; }
    std::wstring GetObjectInstanceName() const override { return mInstanceName; }
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute Value : HLAopaqueData
    std::vector<uint8_t> GetValue() const override;
    void SetValue(std::vector<uint8_t> newValue) override;
    // IValueEntity
    void UpdateAllAttributeValues() override;
    void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time) override;
    void UpdateModifiedAttributeValues() override;
    void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time) override;
    AttributeBits GetUpdatedAttributes() const override { return mLastUpdated; }
    uint32_t RegisterUpdateCallback(UpdateCallbackType callback) override;
    void UnregisterUpdateCallback(uint32_t callbackToken) override;

    rti1516ev::AttributeHandleValueMap GetAllAttributeValues() const;
    rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
    void ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributes);
    bool IsValid() const { return mObjectInstanceHandle.isValid(); }
    bool IsOwner() const { return mIsOwner; }
  private:
    friend class ValueEntityObjectClass;

    ValueEntity();
    ValueEntity(ValueEntityObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* ambassador);

    void ExecuteUpdateCallbacks();
    ValueEntityObjectClass* mObjectClass;
    std::wstring mInstanceName;
    rti1516ev::RTIambassador* mRtiAmbassador;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    bool mIsOwner = false;
    // modified by ReflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::map<uint32_t, UpdateCallbackType> mUpdateCallbacks;
    uint32_t mLastCallbackToken = 0;
    // Attribute value encoders
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute Value : HLAopaqueData
    rti1516ev::HLAopaqueData mValue;
};

class DOMemberSource;
class DOMemberSourceObjectClass : public IDOMemberSourceObjectClass
{
  public:
    // IDOMemberSourceObjectClass
    DOMemberSourceObjectClass() = default;
    virtual ~DOMemberSourceObjectClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    IDOMemberSource* GetObjectInstance(const std::wstring& instanceName) override;
    IDOMemberSource* CreateObjectInstance(const std::wstring& instanceName) override;

    // internal
    DOMemberSourceObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass);

    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute DOSourceMemberName : HLAASCIIstring
    rti1516ev::AttributeHandle GetDOSourceMemberNameAttributeHandle() const { return mDOSourceMemberNameAttributeHandle; }
    // attribute DOSourceMemberConnectionType : HLAASCIIstring
    rti1516ev::AttributeHandle GetDOSourceMemberConnectionTypeAttributeHandle() const { return mDOSourceMemberConnectionTypeAttributeHandle; }
    // attribute DOSourceMemberDataBytes : HLAopaqueData
    rti1516ev::AttributeHandle GetDOSourceMemberDataBytesAttributeHandle() const { return mDOSourceMemberDataBytesAttributeHandle; }
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    IDOMemberSource* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    rti1516ev::AttributeHandleSet GetAllAttributeHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAobjectRootObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute DOSourceMemberName : HLAASCIIstring
    rti1516ev::AttributeHandle mDOSourceMemberNameAttributeHandle;
    // attribute DOSourceMemberConnectionType : HLAASCIIstring
    rti1516ev::AttributeHandle mDOSourceMemberConnectionTypeAttributeHandle;
    // attribute DOSourceMemberDataBytes : HLAopaqueData
    rti1516ev::AttributeHandle mDOSourceMemberDataBytesAttributeHandle;
    std::map<std::wstring, DOMemberSource*> mObjectInstancesByName;
    std::map<rti1516ev::ObjectInstanceHandle, DOMemberSource*> mObjectInstancesByHandle;
};

class DOMemberSource : public IDOMemberSource
{
  public:

    virtual ~DOMemberSource();
    DOMemberSource(const DOMemberSource&) = delete;
    DOMemberSource(DOMemberSource&&) = delete;
    DOMemberSource& operator=(const DOMemberSource&) = delete;
    DOMemberSource& operator=(DOMemberSource&&) = delete;
    IDOMemberSourceObjectClass* GetObjectClass() const { return mObjectClass; }
    std::wstring GetObjectInstanceName() const override { return mInstanceName; }
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute DOSourceMemberName : HLAASCIIstring
    std::string GetDOSourceMemberName() const override;
    void SetDOSourceMemberName(std::string newValue) override;
    // attribute DOSourceMemberConnectionType : HLAASCIIstring
    std::string GetDOSourceMemberConnectionType() const override;
    void SetDOSourceMemberConnectionType(std::string newValue) override;
    // attribute DOSourceMemberDataBytes : HLAopaqueData
    std::vector<uint8_t> GetDOSourceMemberDataBytes() const override;
    void SetDOSourceMemberDataBytes(std::vector<uint8_t> newValue) override;
    // IDOMemberSource
    void UpdateAllAttributeValues() override;
    void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time) override;
    void UpdateModifiedAttributeValues() override;
    void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time) override;
    AttributeBits GetUpdatedAttributes() const override { return mLastUpdated; }
    uint32_t RegisterUpdateCallback(UpdateCallbackType callback) override;
    void UnregisterUpdateCallback(uint32_t callbackToken) override;

    rti1516ev::AttributeHandleValueMap GetAllAttributeValues() const;
    rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
    void ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributes);
    bool IsValid() const { return mObjectInstanceHandle.isValid(); }
    bool IsOwner() const { return mIsOwner; }
  private:
    friend class DOMemberSourceObjectClass;

    DOMemberSource();
    DOMemberSource(DOMemberSourceObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* ambassador);

    void ExecuteUpdateCallbacks();
    DOMemberSourceObjectClass* mObjectClass;
    std::wstring mInstanceName;
    rti1516ev::RTIambassador* mRtiAmbassador;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    bool mIsOwner = false;
    // modified by ReflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::map<uint32_t, UpdateCallbackType> mUpdateCallbacks;
    uint32_t mLastCallbackToken = 0;
    // Attribute value encoders
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute DOSourceMemberName : HLAASCIIstring
    rti1516ev::HLAASCIIstring mDOSourceMemberName;
    // attribute DOSourceMemberConnectionType : HLAASCIIstring
    rti1516ev::HLAASCIIstring mDOSourceMemberConnectionType;
    // attribute DOSourceMemberDataBytes : HLAopaqueData
    rti1516ev::HLAopaqueData mDOSourceMemberDataBytes;
};

class DOMemberTarget;
class DOMemberTargetObjectClass : public IDOMemberTargetObjectClass
{
  public:
    // IDOMemberTargetObjectClass
    DOMemberTargetObjectClass() = default;
    virtual ~DOMemberTargetObjectClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    IDOMemberTarget* GetObjectInstance(const std::wstring& instanceName) override;
    IDOMemberTarget* CreateObjectInstance(const std::wstring& instanceName) override;

    // internal
    DOMemberTargetObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass);

    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute DOTargetMemberName : HLAASCIIstring
    rti1516ev::AttributeHandle GetDOTargetMemberNameAttributeHandle() const { return mDOTargetMemberNameAttributeHandle; }
    // attribute DOTargetMemberConnectionType : HLAASCIIstring
    rti1516ev::AttributeHandle GetDOTargetMemberConnectionTypeAttributeHandle() const { return mDOTargetMemberConnectionTypeAttributeHandle; }
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    IDOMemberTarget* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    rti1516ev::AttributeHandleSet GetAllAttributeHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAobjectRootObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute DOTargetMemberName : HLAASCIIstring
    rti1516ev::AttributeHandle mDOTargetMemberNameAttributeHandle;
    // attribute DOTargetMemberConnectionType : HLAASCIIstring
    rti1516ev::AttributeHandle mDOTargetMemberConnectionTypeAttributeHandle;
    std::map<std::wstring, DOMemberTarget*> mObjectInstancesByName;
    std::map<rti1516ev::ObjectInstanceHandle, DOMemberTarget*> mObjectInstancesByHandle;
};

class DOMemberTarget : public IDOMemberTarget
{
  public:

    virtual ~DOMemberTarget();
    DOMemberTarget(const DOMemberTarget&) = delete;
    DOMemberTarget(DOMemberTarget&&) = delete;
    DOMemberTarget& operator=(const DOMemberTarget&) = delete;
    DOMemberTarget& operator=(DOMemberTarget&&) = delete;
    IDOMemberTargetObjectClass* GetObjectClass() const { return mObjectClass; }
    std::wstring GetObjectInstanceName() const override { return mInstanceName; }
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute DOTargetMemberName : HLAASCIIstring
    std::string GetDOTargetMemberName() const override;
    void SetDOTargetMemberName(std::string newValue) override;
    // attribute DOTargetMemberConnectionType : HLAASCIIstring
    std::string GetDOTargetMemberConnectionType() const override;
    void SetDOTargetMemberConnectionType(std::string newValue) override;
    // IDOMemberTarget
    void UpdateAllAttributeValues() override;
    void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time) override;
    void UpdateModifiedAttributeValues() override;
    void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time) override;
    AttributeBits GetUpdatedAttributes() const override { return mLastUpdated; }
    uint32_t RegisterUpdateCallback(UpdateCallbackType callback) override;
    void UnregisterUpdateCallback(uint32_t callbackToken) override;

    rti1516ev::AttributeHandleValueMap GetAllAttributeValues() const;
    rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
    void ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributes);
    bool IsValid() const { return mObjectInstanceHandle.isValid(); }
    bool IsOwner() const { return mIsOwner; }
  private:
    friend class DOMemberTargetObjectClass;

    DOMemberTarget();
    DOMemberTarget(DOMemberTargetObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* ambassador);

    void ExecuteUpdateCallbacks();
    DOMemberTargetObjectClass* mObjectClass;
    std::wstring mInstanceName;
    rti1516ev::RTIambassador* mRtiAmbassador;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    bool mIsOwner = false;
    // modified by ReflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::map<uint32_t, UpdateCallbackType> mUpdateCallbacks;
    uint32_t mLastCallbackToken = 0;
    // Attribute value encoders
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute DOTargetMemberName : HLAASCIIstring
    rti1516ev::HLAASCIIstring mDOTargetMemberName;
    // attribute DOTargetMemberConnectionType : HLAASCIIstring
    rti1516ev::HLAASCIIstring mDOTargetMemberConnectionType;
};

class BusManagement;
class BusManagementObjectClass : public IBusManagementObjectClass
{
  public:
    // IBusManagementObjectClass
    BusManagementObjectClass() = default;
    virtual ~BusManagementObjectClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    IBusManagement* GetObjectInstance(const std::wstring& instanceName) override;
    IBusManagement* CreateObjectInstance(const std::wstring& instanceName) override;

    // internal
    BusManagementObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass);

    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute NetworkID : HLAASCIIstring
    rti1516ev::AttributeHandle GetNetworkIDAttributeHandle() const { return mNetworkIDAttributeHandle; }
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    IBusManagement* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    rti1516ev::AttributeHandleSet GetAllAttributeHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAobjectRootObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute NetworkID : HLAASCIIstring
    rti1516ev::AttributeHandle mNetworkIDAttributeHandle;
    std::map<std::wstring, BusManagement*> mObjectInstancesByName;
    std::map<rti1516ev::ObjectInstanceHandle, BusManagement*> mObjectInstancesByHandle;
};

class BusManagement : public IBusManagement
{
  public:

    virtual ~BusManagement();
    BusManagement(const BusManagement&) = delete;
    BusManagement(BusManagement&&) = delete;
    BusManagement& operator=(const BusManagement&) = delete;
    BusManagement& operator=(BusManagement&&) = delete;
    IBusManagementObjectClass* GetObjectClass() const { return mObjectClass; }
    std::wstring GetObjectInstanceName() const override { return mInstanceName; }
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute NetworkID : HLAASCIIstring
    std::string GetNetworkID() const override;
    void SetNetworkID(std::string newValue) override;
    // IBusManagement
    void UpdateAllAttributeValues() override;
    void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time) override;
    void UpdateModifiedAttributeValues() override;
    void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time) override;
    AttributeBits GetUpdatedAttributes() const override { return mLastUpdated; }

    rti1516ev::AttributeHandleValueMap GetAllAttributeValues() const;
    rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
    void ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributes);
    bool IsValid() const { return mObjectInstanceHandle.isValid(); }
    bool IsOwner() const { return mIsOwner; }
  private:
    friend class BusManagementObjectClass;

    BusManagement();
    BusManagement(BusManagementObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* ambassador);

    BusManagementObjectClass* mObjectClass;
    std::wstring mInstanceName;
    rti1516ev::RTIambassador* mRtiAmbassador;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    bool mIsOwner = false;
    // modified by ReflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    // Attribute value encoders
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute NetworkID : HLAASCIIstring
    rti1516ev::HLAASCIIstring mNetworkID;
};

class BusManagementCan;
class BusManagementCanObjectClass : public IBusManagementCanObjectClass
{
  public:
    // IBusManagementCanObjectClass
    BusManagementCanObjectClass() = default;
    virtual ~BusManagementCanObjectClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    IBusManagementCan* GetObjectInstance(const std::wstring& instanceName) override;
    IBusManagementCan* CreateObjectInstance(const std::wstring& instanceName) override;

    // internal
    BusManagementCanObjectClass(rti1516ev::RTIambassador* rtiAmbassador, BusManagementObjectClass* baseClass);

    // attribute NetworkID : HLAASCIIstring
    rti1516ev::AttributeHandle GetNetworkIDAttributeHandle() const { return mBaseClass->GetNetworkIDAttributeHandle(); }
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute BusState : CanBusState
    rti1516ev::AttributeHandle GetBusStateAttributeHandle() const { return mBusStateAttributeHandle; }
    // attribute TxErrorCount : HLAinteger32LE
    rti1516ev::AttributeHandle GetTxErrorCountAttributeHandle() const { return mTxErrorCountAttributeHandle; }
    // attribute RxErrorCount : HLAinteger32LE
    rti1516ev::AttributeHandle GetRxErrorCountAttributeHandle() const { return mRxErrorCountAttributeHandle; }
    // attribute SendMessagesAsRx : HLAboolean
    rti1516ev::AttributeHandle GetSendMessagesAsRxAttributeHandle() const { return mSendMessagesAsRxAttributeHandle; }
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    IBusManagementCan* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    rti1516ev::AttributeHandleSet GetAllAttributeHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    BusManagementObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute BusState : CanBusState
    rti1516ev::AttributeHandle mBusStateAttributeHandle;
    // attribute TxErrorCount : HLAinteger32LE
    rti1516ev::AttributeHandle mTxErrorCountAttributeHandle;
    // attribute RxErrorCount : HLAinteger32LE
    rti1516ev::AttributeHandle mRxErrorCountAttributeHandle;
    // attribute SendMessagesAsRx : HLAboolean
    rti1516ev::AttributeHandle mSendMessagesAsRxAttributeHandle;
    std::map<std::wstring, BusManagementCan*> mObjectInstancesByName;
    std::map<rti1516ev::ObjectInstanceHandle, BusManagementCan*> mObjectInstancesByHandle;
};

class BusManagementCan : public IBusManagementCan
{
  public:

    virtual ~BusManagementCan();
    BusManagementCan(const BusManagementCan&) = delete;
    BusManagementCan(BusManagementCan&&) = delete;
    BusManagementCan& operator=(const BusManagementCan&) = delete;
    BusManagementCan& operator=(BusManagementCan&&) = delete;
    IBusManagementCanObjectClass* GetObjectClass() const { return mObjectClass; }
    std::wstring GetObjectInstanceName() const override { return mInstanceName; }
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute NetworkID : HLAASCIIstring
    std::string GetNetworkID() const override;
    void SetNetworkID(std::string newValue) override;
    // attribute BusState : CanBusState
    CanBusState GetBusState() const override;
    void SetBusState(CanBusState newValue) override;
    // attribute TxErrorCount : HLAinteger32LE
    int32_t GetTxErrorCount() const override;
    void SetTxErrorCount(int32_t newValue) override;
    // attribute RxErrorCount : HLAinteger32LE
    int32_t GetRxErrorCount() const override;
    void SetRxErrorCount(int32_t newValue) override;
    // attribute SendMessagesAsRx : HLAboolean
    bool GetSendMessagesAsRx() const override;
    void SetSendMessagesAsRx(bool newValue) override;
    // IBusManagementCan
    void UpdateAllAttributeValues() override;
    void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time) override;
    void UpdateModifiedAttributeValues() override;
    void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time) override;
    AttributeBits GetUpdatedAttributes() const override { return mLastUpdated; }
    uint32_t RegisterUpdateCallback(UpdateCallbackType callback) override;
    void UnregisterUpdateCallback(uint32_t callbackToken) override;

    rti1516ev::AttributeHandleValueMap GetAllAttributeValues() const;
    rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
    void ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributes);
    bool IsValid() const { return mObjectInstanceHandle.isValid(); }
    bool IsOwner() const { return mIsOwner; }
  private:
    friend class BusManagementCanObjectClass;

    BusManagementCan();
    BusManagementCan(BusManagementCanObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* ambassador);

    void ExecuteUpdateCallbacks();
    BusManagementCanObjectClass* mObjectClass;
    std::wstring mInstanceName;
    rti1516ev::RTIambassador* mRtiAmbassador;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    bool mIsOwner = false;
    // modified by ReflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::map<uint32_t, UpdateCallbackType> mUpdateCallbacks;
    uint32_t mLastCallbackToken = 0;
    // Attribute value encoders
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute NetworkID : HLAASCIIstring
    rti1516ev::HLAASCIIstring mNetworkID;
    // attribute BusState : CanBusState
    rti1516ev::HLAinteger32LE mBusState;
    // attribute TxErrorCount : HLAinteger32LE
    rti1516ev::HLAinteger32LE mTxErrorCount;
    // attribute RxErrorCount : HLAinteger32LE
    rti1516ev::HLAinteger32LE mRxErrorCount;
    // attribute SendMessagesAsRx : HLAboolean
    rti1516ev::HLAboolean mSendMessagesAsRx;
};

class BusController;
class BusControllerObjectClass : public IBusControllerObjectClass
{
  public:
    // IBusControllerObjectClass
    BusControllerObjectClass() = default;
    virtual ~BusControllerObjectClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    IBusController* GetObjectInstance(const std::wstring& instanceName) override;
    IBusController* CreateObjectInstance(const std::wstring& instanceName) override;

    // internal
    BusControllerObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass);

    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute NetworkID : HLAASCIIstring
    rti1516ev::AttributeHandle GetNetworkIDAttributeHandle() const { return mNetworkIDAttributeHandle; }
    // attribute DeviceID : HLAASCIIstring
    rti1516ev::AttributeHandle GetDeviceIDAttributeHandle() const { return mDeviceIDAttributeHandle; }
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    IBusController* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    rti1516ev::AttributeHandleSet GetAllAttributeHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAobjectRootObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute NetworkID : HLAASCIIstring
    rti1516ev::AttributeHandle mNetworkIDAttributeHandle;
    // attribute DeviceID : HLAASCIIstring
    rti1516ev::AttributeHandle mDeviceIDAttributeHandle;
    std::map<std::wstring, BusController*> mObjectInstancesByName;
    std::map<rti1516ev::ObjectInstanceHandle, BusController*> mObjectInstancesByHandle;
};

class BusController : public IBusController
{
  public:

    virtual ~BusController();
    BusController(const BusController&) = delete;
    BusController(BusController&&) = delete;
    BusController& operator=(const BusController&) = delete;
    BusController& operator=(BusController&&) = delete;
    IBusControllerObjectClass* GetObjectClass() const { return mObjectClass; }
    std::wstring GetObjectInstanceName() const override { return mInstanceName; }
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute NetworkID : HLAASCIIstring
    std::string GetNetworkID() const override;
    void SetNetworkID(std::string newValue) override;
    // attribute DeviceID : HLAASCIIstring
    std::string GetDeviceID() const override;
    void SetDeviceID(std::string newValue) override;
    // IBusController
    void UpdateAllAttributeValues() override;
    void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time) override;
    void UpdateModifiedAttributeValues() override;
    void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time) override;
    AttributeBits GetUpdatedAttributes() const override { return mLastUpdated; }

    rti1516ev::AttributeHandleValueMap GetAllAttributeValues() const;
    rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
    void ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributes);
    bool IsValid() const { return mObjectInstanceHandle.isValid(); }
    bool IsOwner() const { return mIsOwner; }
  private:
    friend class BusControllerObjectClass;

    BusController();
    BusController(BusControllerObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* ambassador);

    BusControllerObjectClass* mObjectClass;
    std::wstring mInstanceName;
    rti1516ev::RTIambassador* mRtiAmbassador;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    bool mIsOwner = false;
    // modified by ReflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    // Attribute value encoders
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute NetworkID : HLAASCIIstring
    rti1516ev::HLAASCIIstring mNetworkID;
    // attribute DeviceID : HLAASCIIstring
    rti1516ev::HLAASCIIstring mDeviceID;
};

class BusControllerCan;
class BusControllerCanObjectClass : public IBusControllerCanObjectClass
{
  public:
    // IBusControllerCanObjectClass
    BusControllerCanObjectClass() = default;
    virtual ~BusControllerCanObjectClass() = default;
    void Publish() override;
    void Unpublish() override;
    void Subscribe() override;
    void Unsubscribe() override;
    IBusControllerCan* GetObjectInstance(const std::wstring& instanceName) override;
    IBusControllerCan* CreateObjectInstance(const std::wstring& instanceName) override;

    // internal
    BusControllerCanObjectClass(rti1516ev::RTIambassador* rtiAmbassador, BusControllerObjectClass* baseClass);

    // attribute NetworkID : HLAASCIIstring
    rti1516ev::AttributeHandle GetNetworkIDAttributeHandle() const { return mBaseClass->GetNetworkIDAttributeHandle(); }
    // attribute DeviceID : HLAASCIIstring
    rti1516ev::AttributeHandle GetDeviceIDAttributeHandle() const { return mBaseClass->GetDeviceIDAttributeHandle(); }
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute BaudRate : HLAinteger32LE
    rti1516ev::AttributeHandle GetBaudRateAttributeHandle() const { return mBaudRateAttributeHandle; }
    // attribute DataBaudRate : HLAinteger32LE
    rti1516ev::AttributeHandle GetDataBaudRateAttributeHandle() const { return mDataBaudRateAttributeHandle; }
    // attribute PreScaler : HLAinteger32LE
    rti1516ev::AttributeHandle GetPreScalerAttributeHandle() const { return mPreScalerAttributeHandle; }
    // attribute OperationMode : CanOperationMode
    rti1516ev::AttributeHandle GetOperationModeAttributeHandle() const { return mOperationModeAttributeHandle; }
    // attribute Sync_Seg : HLAinteger32LE
    rti1516ev::AttributeHandle GetSync_SegAttributeHandle() const { return mSync_SegAttributeHandle; }
    // attribute Prop_Seg : HLAinteger32LE
    rti1516ev::AttributeHandle GetProp_SegAttributeHandle() const { return mProp_SegAttributeHandle; }
    // attribute Phase_Seg1 : HLAinteger32LE
    rti1516ev::AttributeHandle GetPhase_Seg1AttributeHandle() const { return mPhase_Seg1AttributeHandle; }
    // attribute Phase_Seg2 : HLAinteger32LE
    rti1516ev::AttributeHandle GetPhase_Seg2AttributeHandle() const { return mPhase_Seg2AttributeHandle; }
    // attribute SamplingMode : CanSamplingMode
    rti1516ev::AttributeHandle GetSamplingModeAttributeHandle() const { return mSamplingModeAttributeHandle; }
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    IBusControllerCan* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    rti1516ev::AttributeHandleSet GetAllAttributeHandles();
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    BusControllerObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute BaudRate : HLAinteger32LE
    rti1516ev::AttributeHandle mBaudRateAttributeHandle;
    // attribute DataBaudRate : HLAinteger32LE
    rti1516ev::AttributeHandle mDataBaudRateAttributeHandle;
    // attribute PreScaler : HLAinteger32LE
    rti1516ev::AttributeHandle mPreScalerAttributeHandle;
    // attribute OperationMode : CanOperationMode
    rti1516ev::AttributeHandle mOperationModeAttributeHandle;
    // attribute Sync_Seg : HLAinteger32LE
    rti1516ev::AttributeHandle mSync_SegAttributeHandle;
    // attribute Prop_Seg : HLAinteger32LE
    rti1516ev::AttributeHandle mProp_SegAttributeHandle;
    // attribute Phase_Seg1 : HLAinteger32LE
    rti1516ev::AttributeHandle mPhase_Seg1AttributeHandle;
    // attribute Phase_Seg2 : HLAinteger32LE
    rti1516ev::AttributeHandle mPhase_Seg2AttributeHandle;
    // attribute SamplingMode : CanSamplingMode
    rti1516ev::AttributeHandle mSamplingModeAttributeHandle;
    std::map<std::wstring, BusControllerCan*> mObjectInstancesByName;
    std::map<rti1516ev::ObjectInstanceHandle, BusControllerCan*> mObjectInstancesByHandle;
};

class BusControllerCan : public IBusControllerCan
{
  public:

    virtual ~BusControllerCan();
    BusControllerCan(const BusControllerCan&) = delete;
    BusControllerCan(BusControllerCan&&) = delete;
    BusControllerCan& operator=(const BusControllerCan&) = delete;
    BusControllerCan& operator=(BusControllerCan&&) = delete;
    IBusControllerCanObjectClass* GetObjectClass() const { return mObjectClass; }
    std::wstring GetObjectInstanceName() const override { return mInstanceName; }
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute NetworkID : HLAASCIIstring
    std::string GetNetworkID() const override;
    void SetNetworkID(std::string newValue) override;
    // attribute DeviceID : HLAASCIIstring
    std::string GetDeviceID() const override;
    void SetDeviceID(std::string newValue) override;
    // attribute BaudRate : HLAinteger32LE
    int32_t GetBaudRate() const override;
    void SetBaudRate(int32_t newValue) override;
    // attribute DataBaudRate : HLAinteger32LE
    int32_t GetDataBaudRate() const override;
    void SetDataBaudRate(int32_t newValue) override;
    // attribute PreScaler : HLAinteger32LE
    int32_t GetPreScaler() const override;
    void SetPreScaler(int32_t newValue) override;
    // attribute OperationMode : CanOperationMode
    CanOperationMode GetOperationMode() const override;
    void SetOperationMode(CanOperationMode newValue) override;
    // attribute Sync_Seg : HLAinteger32LE
    int32_t GetSync_Seg() const override;
    void SetSync_Seg(int32_t newValue) override;
    // attribute Prop_Seg : HLAinteger32LE
    int32_t GetProp_Seg() const override;
    void SetProp_Seg(int32_t newValue) override;
    // attribute Phase_Seg1 : HLAinteger32LE
    int32_t GetPhase_Seg1() const override;
    void SetPhase_Seg1(int32_t newValue) override;
    // attribute Phase_Seg2 : HLAinteger32LE
    int32_t GetPhase_Seg2() const override;
    void SetPhase_Seg2(int32_t newValue) override;
    // attribute SamplingMode : CanSamplingMode
    CanSamplingMode GetSamplingMode() const override;
    void SetSamplingMode(CanSamplingMode newValue) override;
    // IBusControllerCan
    void UpdateAllAttributeValues() override;
    void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time) override;
    void UpdateModifiedAttributeValues() override;
    void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time) override;
    AttributeBits GetUpdatedAttributes() const override { return mLastUpdated; }
    uint32_t RegisterUpdateCallback(UpdateCallbackType callback) override;
    void UnregisterUpdateCallback(uint32_t callbackToken) override;

    rti1516ev::AttributeHandleValueMap GetAllAttributeValues() const;
    rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
    void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
    void ProvideAttributeValues(const rti1516ev::AttributeHandleSet& attributes);
    bool IsValid() const { return mObjectInstanceHandle.isValid(); }
    bool IsOwner() const { return mIsOwner; }
  private:
    friend class BusControllerCanObjectClass;

    BusControllerCan();
    BusControllerCan(BusControllerCanObjectClass* objectClass, const std::wstring& instanceName, rti1516ev::RTIambassador* ambassador);

    void ExecuteUpdateCallbacks();
    BusControllerCanObjectClass* mObjectClass;
    std::wstring mInstanceName;
    rti1516ev::RTIambassador* mRtiAmbassador;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    bool mIsOwner = false;
    // modified by ReflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::map<uint32_t, UpdateCallbackType> mUpdateCallbacks;
    uint32_t mLastCallbackToken = 0;
    // Attribute value encoders
    // attribute HLAprivilegeToDeleteObject : no data type
    // attribute NetworkID : HLAASCIIstring
    rti1516ev::HLAASCIIstring mNetworkID;
    // attribute DeviceID : HLAASCIIstring
    rti1516ev::HLAASCIIstring mDeviceID;
    // attribute BaudRate : HLAinteger32LE
    rti1516ev::HLAinteger32LE mBaudRate;
    // attribute DataBaudRate : HLAinteger32LE
    rti1516ev::HLAinteger32LE mDataBaudRate;
    // attribute PreScaler : HLAinteger32LE
    rti1516ev::HLAinteger32LE mPreScaler;
    // attribute OperationMode : CanOperationMode
    rti1516ev::HLAinteger32LE mOperationMode;
    // attribute Sync_Seg : HLAinteger32LE
    rti1516ev::HLAinteger32LE mSync_Seg;
    // attribute Prop_Seg : HLAinteger32LE
    rti1516ev::HLAinteger32LE mProp_Seg;
    // attribute Phase_Seg1 : HLAinteger32LE
    rti1516ev::HLAinteger32LE mPhase_Seg1;
    // attribute Phase_Seg2 : HLAinteger32LE
    rti1516ev::HLAinteger32LE mPhase_Seg2;
    // attribute SamplingMode : CanSamplingMode
    rti1516ev::HLAinteger32LE mSamplingMode;
};

 

class ObjectClassRegistry : public IObjectClassRegistry
{
  public:
    ObjectClassRegistry();
    ~ObjectClassRegistry();
    void Initialize(rti1516ev::RTIambassador* rtiAmbassador);
    static ObjectClassRegistry* GetInstance() { return sClassRegistry; }

    IHLAobjectRootObjectClass* getHLAobjectRootObjectClass() const override { return mHLAobjectRootObjectClass.get(); }
    ISystemVariableObjectClass* getSystemVariableObjectClass() const override { return mSystemVariableObjectClass.get(); }
    IValueEntityObjectClass* getValueEntityObjectClass() const override { return mValueEntityObjectClass.get(); }
    IDOMemberSourceObjectClass* getDOMemberSourceObjectClass() const override { return mDOMemberSourceObjectClass.get(); }
    IDOMemberTargetObjectClass* getDOMemberTargetObjectClass() const override { return mDOMemberTargetObjectClass.get(); }
    IBusManagementObjectClass* getBusManagementObjectClass() const override { return mBusManagementObjectClass.get(); }
    IBusManagementCanObjectClass* getBusManagementCanObjectClass() const override { return mBusManagementCanObjectClass.get(); }
    IBusControllerObjectClass* getBusControllerObjectClass() const override { return mBusControllerObjectClass.get(); }
    IBusControllerCanObjectClass* getBusControllerCanObjectClass() const override { return mBusControllerCanObjectClass.get(); }

    void DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    void ReflectAttributeValues(rti1516ev::ObjectInstanceHandle theObject, const rti1516ev::AttributeHandleValueMap & attributes);
    void ProvideAttributeValues(rti1516ev::ObjectClassHandle theObjectClass, rti1516ev::ObjectInstanceHandle theObject, const rti1516ev::AttributeHandleSet& attributeHandles);
    void ObjectInstanceNameReservationSucceeded(std::wstring const & theObjectInstanceName);
    void ObjectInstanceNameReservationFailed(std::wstring const & theObjectInstanceName);
    void RegisterObjectInstanceName(const std::wstring& theObjectInstanceName, std::function<void(bool)> completionCallback);

  private:
    std::map<std::wstring, std::function<void(bool)> > mInstanceNameReservationCallbacks;
    static ObjectClassRegistry* sClassRegistry;
    rti1516ev::RTIambassador* mRtiAmbassador;
    std::unique_ptr<HLAobjectRootObjectClass> mHLAobjectRootObjectClass;
    std::unique_ptr<SystemVariableObjectClass> mSystemVariableObjectClass;
    std::unique_ptr<ValueEntityObjectClass> mValueEntityObjectClass;
    std::unique_ptr<DOMemberSourceObjectClass> mDOMemberSourceObjectClass;
    std::unique_ptr<DOMemberTargetObjectClass> mDOMemberTargetObjectClass;
    std::unique_ptr<BusManagementObjectClass> mBusManagementObjectClass;
    std::unique_ptr<BusManagementCanObjectClass> mBusManagementCanObjectClass;
    std::unique_ptr<BusControllerObjectClass> mBusControllerObjectClass;
    std::unique_ptr<BusControllerCanObjectClass> mBusControllerCanObjectClass;
}; // class ObjectClassRegistry

} // namespace NDistSimIB
} // namespace NRTFederateEncoding
