
// Code automatically generated by T4 template from D:\vfs\OpenRTI-codegen\tests\rti1516ev\codegen\\RTFederate.xml, do not edit
#pragma once

#include <vector>
#include "RTI/Handle.h"
#include "RTI/RTIambassador.h"
#include "RTI/encoding/BasicDataElements.h"
#include "RTI/encoding/HLAfixedRecord.h"
#include "RTI/encoding/HLAfixedArray.h"
#include "RTI/encoding/HLAvariableArray.h"
#include "RTI/encoding/HLAopaqueData.h"
#include "RTFederateEncodings.h"

namespace NDistributedSimulation {
namespace NRTFederateEncoding {

class HLAobjectRoot;
class HLAobjectRootObjectClass
{
  public:
    HLAobjectRootObjectClass(rti1516ev::RTIambassador* rtiAmbassador);
    // attribute HLAprivilegeToDeleteObject : no data type
    void Publish();
    void Unpublish();
    void Subscribe();
    void Unsubscribe();
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    HLAobjectRoot* GetObjectInstance(const std::wstring& instanceName);
    HLAobjectRoot* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    HLAobjectRoot* CreateObjectInstance(const std::wstring& instanceName);
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute HLAprivilegeToDeleteObject : no data type
  std::map<std::wstring, HLAobjectRoot*> mObjectInstancesByName;
  std::map<rti1516ev::ObjectInstanceHandle, HLAobjectRoot*> mObjectInstancesByHandle;
};

class HLAobjectRoot
{
  public:
    using AttributeBits = uint32_t;
    static const uint32_t kNone = 0x0;

    HLAobjectRoot();
    HLAobjectRoot(rti1516ev::RTIambassador* ambassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle);
    ~HLAobjectRoot();
    HLAobjectRoot(const HLAobjectRoot&) = delete;
    HLAobjectRoot(HLAobjectRoot&&) = delete;
    HLAobjectRoot& operator=(const HLAobjectRoot&) = delete;
    HLAobjectRoot& operator=(HLAobjectRoot&&) = delete;

    // attribute HLAprivilegeToDeleteObject : no data type
     rti1516ev::AttributeHandleValueMap HLAobjectRoot::GetAllAttributeValues() const;
     rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
     AttributeBits getUpdatedAttributes() const { return mLastUpdated; }

  protected:

  private:
    // modified by last reflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::wstring mInstanceName;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    rti1516ev::RTIambassador* mRtiAmbassador;
    HLAobjectRootObjectClass* mObjectClass;
    // Attribute value encoders
    // attribute HLAprivilegeToDeleteObject : no data type
};

class SystemVariable;
class SystemVariableObjectClass
{
  public:
    SystemVariableObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass);

    // attribute Value : HLAopaqueData
    rti1516ev::AttributeHandle GetValueAttributeHandle() const { return mValueAttributeHandle; }
    void Publish();
    void Unpublish();
    void Subscribe();
    void Unsubscribe();
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    SystemVariable* GetObjectInstance(const std::wstring& instanceName);
    SystemVariable* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    SystemVariable* CreateObjectInstance(const std::wstring& instanceName);
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAobjectRootObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute Value : HLAopaqueData
    rti1516ev::AttributeHandle mValueAttributeHandle;
  std::map<std::wstring, SystemVariable*> mObjectInstancesByName;
  std::map<rti1516ev::ObjectInstanceHandle, SystemVariable*> mObjectInstancesByHandle;
};

class SystemVariable : public HLAobjectRoot
{
  public:
    using AttributeBits = uint32_t;
    static const uint32_t kNone = 0x0;
    static const uint32_t kValueBit = 0x1;

    SystemVariable();
    SystemVariable(rti1516ev::RTIambassador* ambassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle);
    ~SystemVariable();
    SystemVariable(const SystemVariable&) = delete;
    SystemVariable(SystemVariable&&) = delete;
    SystemVariable& operator=(const SystemVariable&) = delete;
    SystemVariable& operator=(SystemVariable&&) = delete;

    // attribute Value : HLAopaqueData
    std::vector<uint8_t> GetValue() const;
    void SetValue(std::vector<uint8_t> newValue);
     rti1516ev::AttributeHandleValueMap SystemVariable::GetAllAttributeValues() const;
     rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
     void UpdateAllAttributeValues();
     void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time);
     void UpdateModifiedAttributeValues();
     void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time);
     void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
     AttributeBits getUpdatedAttributes() const { return mLastUpdated; }

  protected:
    void ClearDirtyBits()
    {
      mDirty = kNone;
    }

  private:
    // modified by last reflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::wstring mInstanceName;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    rti1516ev::RTIambassador* mRtiAmbassador;
    SystemVariableObjectClass* mObjectClass;
    // Attribute value encoders
    // attribute Value : HLAopaqueData
    rti1516ev::HLAopaqueData mValue;
};

class ValueEntity;
class ValueEntityObjectClass
{
  public:
    ValueEntityObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass);

    // attribute Value : HLAopaqueData
    rti1516ev::AttributeHandle GetValueAttributeHandle() const { return mValueAttributeHandle; }
    void Publish();
    void Unpublish();
    void Subscribe();
    void Unsubscribe();
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    ValueEntity* GetObjectInstance(const std::wstring& instanceName);
    ValueEntity* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    ValueEntity* CreateObjectInstance(const std::wstring& instanceName);
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAobjectRootObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute Value : HLAopaqueData
    rti1516ev::AttributeHandle mValueAttributeHandle;
  std::map<std::wstring, ValueEntity*> mObjectInstancesByName;
  std::map<rti1516ev::ObjectInstanceHandle, ValueEntity*> mObjectInstancesByHandle;
};

class ValueEntity : public HLAobjectRoot
{
  public:
    using AttributeBits = uint32_t;
    static const uint32_t kNone = 0x0;
    static const uint32_t kValueBit = 0x1;

    ValueEntity();
    ValueEntity(rti1516ev::RTIambassador* ambassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle);
    ~ValueEntity();
    ValueEntity(const ValueEntity&) = delete;
    ValueEntity(ValueEntity&&) = delete;
    ValueEntity& operator=(const ValueEntity&) = delete;
    ValueEntity& operator=(ValueEntity&&) = delete;

    // attribute Value : HLAopaqueData
    std::vector<uint8_t> GetValue() const;
    void SetValue(std::vector<uint8_t> newValue);
     rti1516ev::AttributeHandleValueMap ValueEntity::GetAllAttributeValues() const;
     rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
     void UpdateAllAttributeValues();
     void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time);
     void UpdateModifiedAttributeValues();
     void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time);
     void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
     AttributeBits getUpdatedAttributes() const { return mLastUpdated; }

  protected:
    void ClearDirtyBits()
    {
      mDirty = kNone;
    }

  private:
    // modified by last reflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::wstring mInstanceName;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    rti1516ev::RTIambassador* mRtiAmbassador;
    ValueEntityObjectClass* mObjectClass;
    // Attribute value encoders
    // attribute Value : HLAopaqueData
    rti1516ev::HLAopaqueData mValue;
};

class DOMemberSource;
class DOMemberSourceObjectClass
{
  public:
    DOMemberSourceObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass);

    // attribute DOSourceMemberName : HLAASCIIstring
    rti1516ev::AttributeHandle GetDOSourceMemberNameAttributeHandle() const { return mDOSourceMemberNameAttributeHandle; }
    // attribute DOSourceMemberConnectionType : HLAASCIIstring
    rti1516ev::AttributeHandle GetDOSourceMemberConnectionTypeAttributeHandle() const { return mDOSourceMemberConnectionTypeAttributeHandle; }
    // attribute DOSourceMemberDataBytes : HLAopaqueData
    rti1516ev::AttributeHandle GetDOSourceMemberDataBytesAttributeHandle() const { return mDOSourceMemberDataBytesAttributeHandle; }
    void Publish();
    void Unpublish();
    void Subscribe();
    void Unsubscribe();
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    DOMemberSource* GetObjectInstance(const std::wstring& instanceName);
    DOMemberSource* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    DOMemberSource* CreateObjectInstance(const std::wstring& instanceName);
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAobjectRootObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute DOSourceMemberName : HLAASCIIstring
    rti1516ev::AttributeHandle mDOSourceMemberNameAttributeHandle;
    // attribute DOSourceMemberConnectionType : HLAASCIIstring
    rti1516ev::AttributeHandle mDOSourceMemberConnectionTypeAttributeHandle;
    // attribute DOSourceMemberDataBytes : HLAopaqueData
    rti1516ev::AttributeHandle mDOSourceMemberDataBytesAttributeHandle;
  std::map<std::wstring, DOMemberSource*> mObjectInstancesByName;
  std::map<rti1516ev::ObjectInstanceHandle, DOMemberSource*> mObjectInstancesByHandle;
};

class DOMemberSource : public HLAobjectRoot
{
  public:
    using AttributeBits = uint32_t;
    static const uint32_t kNone = 0x0;
    static const uint32_t kDOSourceMemberNameBit = 0x1;
    static const uint32_t kDOSourceMemberConnectionTypeBit = 0x2;
    static const uint32_t kDOSourceMemberDataBytesBit = 0x4;

    DOMemberSource();
    DOMemberSource(rti1516ev::RTIambassador* ambassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle);
    ~DOMemberSource();
    DOMemberSource(const DOMemberSource&) = delete;
    DOMemberSource(DOMemberSource&&) = delete;
    DOMemberSource& operator=(const DOMemberSource&) = delete;
    DOMemberSource& operator=(DOMemberSource&&) = delete;

    // attribute DOSourceMemberName : HLAASCIIstring
    std::string GetDOSourceMemberName() const;
    void SetDOSourceMemberName(std::string newValue);
    // attribute DOSourceMemberConnectionType : HLAASCIIstring
    std::string GetDOSourceMemberConnectionType() const;
    void SetDOSourceMemberConnectionType(std::string newValue);
    // attribute DOSourceMemberDataBytes : HLAopaqueData
    std::vector<uint8_t> GetDOSourceMemberDataBytes() const;
    void SetDOSourceMemberDataBytes(std::vector<uint8_t> newValue);
     rti1516ev::AttributeHandleValueMap DOMemberSource::GetAllAttributeValues() const;
     rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
     void UpdateAllAttributeValues();
     void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time);
     void UpdateModifiedAttributeValues();
     void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time);
     void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
     AttributeBits getUpdatedAttributes() const { return mLastUpdated; }

  protected:
    void ClearDirtyBits()
    {
      mDirty = kNone;
    }

  private:
    // modified by last reflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::wstring mInstanceName;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    rti1516ev::RTIambassador* mRtiAmbassador;
    DOMemberSourceObjectClass* mObjectClass;
    // Attribute value encoders
    // attribute DOSourceMemberName : HLAASCIIstring
    rti1516ev::HLAASCIIstring mDOSourceMemberName;
    // attribute DOSourceMemberConnectionType : HLAASCIIstring
    rti1516ev::HLAASCIIstring mDOSourceMemberConnectionType;
    // attribute DOSourceMemberDataBytes : HLAopaqueData
    rti1516ev::HLAopaqueData mDOSourceMemberDataBytes;
};

class DOMemberTarget;
class DOMemberTargetObjectClass
{
  public:
    DOMemberTargetObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass);

    // attribute DOTargetMemberName : HLAASCIIstring
    rti1516ev::AttributeHandle GetDOTargetMemberNameAttributeHandle() const { return mDOTargetMemberNameAttributeHandle; }
    // attribute DOTargetMemberConnectionType : HLAASCIIstring
    rti1516ev::AttributeHandle GetDOTargetMemberConnectionTypeAttributeHandle() const { return mDOTargetMemberConnectionTypeAttributeHandle; }
    void Publish();
    void Unpublish();
    void Subscribe();
    void Unsubscribe();
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    DOMemberTarget* GetObjectInstance(const std::wstring& instanceName);
    DOMemberTarget* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    DOMemberTarget* CreateObjectInstance(const std::wstring& instanceName);
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAobjectRootObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute DOTargetMemberName : HLAASCIIstring
    rti1516ev::AttributeHandle mDOTargetMemberNameAttributeHandle;
    // attribute DOTargetMemberConnectionType : HLAASCIIstring
    rti1516ev::AttributeHandle mDOTargetMemberConnectionTypeAttributeHandle;
  std::map<std::wstring, DOMemberTarget*> mObjectInstancesByName;
  std::map<rti1516ev::ObjectInstanceHandle, DOMemberTarget*> mObjectInstancesByHandle;
};

class DOMemberTarget : public HLAobjectRoot
{
  public:
    using AttributeBits = uint32_t;
    static const uint32_t kNone = 0x0;
    static const uint32_t kDOTargetMemberNameBit = 0x1;
    static const uint32_t kDOTargetMemberConnectionTypeBit = 0x2;

    DOMemberTarget();
    DOMemberTarget(rti1516ev::RTIambassador* ambassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle);
    ~DOMemberTarget();
    DOMemberTarget(const DOMemberTarget&) = delete;
    DOMemberTarget(DOMemberTarget&&) = delete;
    DOMemberTarget& operator=(const DOMemberTarget&) = delete;
    DOMemberTarget& operator=(DOMemberTarget&&) = delete;

    // attribute DOTargetMemberName : HLAASCIIstring
    std::string GetDOTargetMemberName() const;
    void SetDOTargetMemberName(std::string newValue);
    // attribute DOTargetMemberConnectionType : HLAASCIIstring
    std::string GetDOTargetMemberConnectionType() const;
    void SetDOTargetMemberConnectionType(std::string newValue);
     rti1516ev::AttributeHandleValueMap DOMemberTarget::GetAllAttributeValues() const;
     rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
     void UpdateAllAttributeValues();
     void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time);
     void UpdateModifiedAttributeValues();
     void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time);
     void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
     AttributeBits getUpdatedAttributes() const { return mLastUpdated; }

  protected:
    void ClearDirtyBits()
    {
      mDirty = kNone;
    }

  private:
    // modified by last reflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::wstring mInstanceName;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    rti1516ev::RTIambassador* mRtiAmbassador;
    DOMemberTargetObjectClass* mObjectClass;
    // Attribute value encoders
    // attribute DOTargetMemberName : HLAASCIIstring
    rti1516ev::HLAASCIIstring mDOTargetMemberName;
    // attribute DOTargetMemberConnectionType : HLAASCIIstring
    rti1516ev::HLAASCIIstring mDOTargetMemberConnectionType;
};

class BusManagement;
class BusManagementObjectClass
{
  public:
    BusManagementObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass);

    // attribute NetworkID : HLAASCIIstring
    rti1516ev::AttributeHandle GetNetworkIDAttributeHandle() const { return mNetworkIDAttributeHandle; }
    void Publish();
    void Unpublish();
    void Subscribe();
    void Unsubscribe();
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    BusManagement* GetObjectInstance(const std::wstring& instanceName);
    BusManagement* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    BusManagement* CreateObjectInstance(const std::wstring& instanceName);
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAobjectRootObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute NetworkID : HLAASCIIstring
    rti1516ev::AttributeHandle mNetworkIDAttributeHandle;
  std::map<std::wstring, BusManagement*> mObjectInstancesByName;
  std::map<rti1516ev::ObjectInstanceHandle, BusManagement*> mObjectInstancesByHandle;
};

class BusManagement : public HLAobjectRoot
{
  public:
    using AttributeBits = uint32_t;
    static const uint32_t kNone = 0x0;
    static const uint32_t kNetworkIDBit = 0x1;

    BusManagement();
    BusManagement(rti1516ev::RTIambassador* ambassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle);
    ~BusManagement();
    BusManagement(const BusManagement&) = delete;
    BusManagement(BusManagement&&) = delete;
    BusManagement& operator=(const BusManagement&) = delete;
    BusManagement& operator=(BusManagement&&) = delete;

    // attribute NetworkID : HLAASCIIstring
    std::string GetNetworkID() const;
    void SetNetworkID(std::string newValue);
     rti1516ev::AttributeHandleValueMap BusManagement::GetAllAttributeValues() const;
     rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
     void UpdateAllAttributeValues();
     void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time);
     void UpdateModifiedAttributeValues();
     void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time);
     void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
     AttributeBits getUpdatedAttributes() const { return mLastUpdated; }

  protected:
    void ClearDirtyBits()
    {
      mDirty = kNone;
    }

  private:
    // modified by last reflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::wstring mInstanceName;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    rti1516ev::RTIambassador* mRtiAmbassador;
    BusManagementObjectClass* mObjectClass;
    // Attribute value encoders
    // attribute NetworkID : HLAASCIIstring
    rti1516ev::HLAASCIIstring mNetworkID;
};

class BusManagementCan;
class BusManagementCanObjectClass
{
  public:
    BusManagementCanObjectClass(rti1516ev::RTIambassador* rtiAmbassador, BusManagementObjectClass* baseClass);

    // attribute BusState : CanBusState
    rti1516ev::AttributeHandle GetBusStateAttributeHandle() const { return mBusStateAttributeHandle; }
    // attribute TxErrorCount : HLAinteger32LE
    rti1516ev::AttributeHandle GetTxErrorCountAttributeHandle() const { return mTxErrorCountAttributeHandle; }
    // attribute RxErrorCount : HLAinteger32LE
    rti1516ev::AttributeHandle GetRxErrorCountAttributeHandle() const { return mRxErrorCountAttributeHandle; }
    // attribute SendMessagesAsRx : HLAboolean
    rti1516ev::AttributeHandle GetSendMessagesAsRxAttributeHandle() const { return mSendMessagesAsRxAttributeHandle; }
    void Publish();
    void Unpublish();
    void Subscribe();
    void Unsubscribe();
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    BusManagementCan* GetObjectInstance(const std::wstring& instanceName);
    BusManagementCan* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    BusManagementCan* CreateObjectInstance(const std::wstring& instanceName);
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    BusManagementObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute BusState : CanBusState
    rti1516ev::AttributeHandle mBusStateAttributeHandle;
    // attribute TxErrorCount : HLAinteger32LE
    rti1516ev::AttributeHandle mTxErrorCountAttributeHandle;
    // attribute RxErrorCount : HLAinteger32LE
    rti1516ev::AttributeHandle mRxErrorCountAttributeHandle;
    // attribute SendMessagesAsRx : HLAboolean
    rti1516ev::AttributeHandle mSendMessagesAsRxAttributeHandle;
  std::map<std::wstring, BusManagementCan*> mObjectInstancesByName;
  std::map<rti1516ev::ObjectInstanceHandle, BusManagementCan*> mObjectInstancesByHandle;
};

class BusManagementCan : public BusManagement
{
  public:
    using AttributeBits = uint32_t;
    static const uint32_t kNone = 0x0;
    static const uint32_t kBusStateBit = 0x1;
    static const uint32_t kTxErrorCountBit = 0x2;
    static const uint32_t kRxErrorCountBit = 0x4;
    static const uint32_t kSendMessagesAsRxBit = 0x8;

    BusManagementCan();
    BusManagementCan(rti1516ev::RTIambassador* ambassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle);
    ~BusManagementCan();
    BusManagementCan(const BusManagementCan&) = delete;
    BusManagementCan(BusManagementCan&&) = delete;
    BusManagementCan& operator=(const BusManagementCan&) = delete;
    BusManagementCan& operator=(BusManagementCan&&) = delete;

    // attribute BusState : CanBusState
    CanBusState GetBusState() const;
    void SetBusState(CanBusState newValue);
    // attribute TxErrorCount : HLAinteger32LE
    int32_t GetTxErrorCount() const;
    void SetTxErrorCount(int32_t newValue);
    // attribute RxErrorCount : HLAinteger32LE
    int32_t GetRxErrorCount() const;
    void SetRxErrorCount(int32_t newValue);
    // attribute SendMessagesAsRx : HLAboolean
    bool GetSendMessagesAsRx() const;
    void SetSendMessagesAsRx(bool newValue);
     rti1516ev::AttributeHandleValueMap BusManagementCan::GetAllAttributeValues() const;
     rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
     void UpdateAllAttributeValues();
     void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time);
     void UpdateModifiedAttributeValues();
     void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time);
     void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
     AttributeBits getUpdatedAttributes() const { return mLastUpdated; }

  protected:
    void ClearDirtyBits()
    {
      BusManagement::ClearDirtyBits();
      mDirty = kNone;
    }

  private:
    // modified by last reflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::wstring mInstanceName;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    rti1516ev::RTIambassador* mRtiAmbassador;
    BusManagementCanObjectClass* mObjectClass;
    // Attribute value encoders
    // attribute BusState : CanBusState
    rti1516ev::HLAinteger32LE mBusState;
    // attribute TxErrorCount : HLAinteger32LE
    rti1516ev::HLAinteger32LE mTxErrorCount;
    // attribute RxErrorCount : HLAinteger32LE
    rti1516ev::HLAinteger32LE mRxErrorCount;
    // attribute SendMessagesAsRx : HLAboolean
    rti1516ev::HLAboolean mSendMessagesAsRx;
};

class BusController;
class BusControllerObjectClass
{
  public:
    BusControllerObjectClass(rti1516ev::RTIambassador* rtiAmbassador, HLAobjectRootObjectClass* baseClass);

    // attribute NetworkID : HLAASCIIstring
    rti1516ev::AttributeHandle GetNetworkIDAttributeHandle() const { return mNetworkIDAttributeHandle; }
    // attribute DeviceID : HLAASCIIstring
    rti1516ev::AttributeHandle GetDeviceIDAttributeHandle() const { return mDeviceIDAttributeHandle; }
    void Publish();
    void Unpublish();
    void Subscribe();
    void Unsubscribe();
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    BusController* GetObjectInstance(const std::wstring& instanceName);
    BusController* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    BusController* CreateObjectInstance(const std::wstring& instanceName);
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    HLAobjectRootObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute NetworkID : HLAASCIIstring
    rti1516ev::AttributeHandle mNetworkIDAttributeHandle;
    // attribute DeviceID : HLAASCIIstring
    rti1516ev::AttributeHandle mDeviceIDAttributeHandle;
  std::map<std::wstring, BusController*> mObjectInstancesByName;
  std::map<rti1516ev::ObjectInstanceHandle, BusController*> mObjectInstancesByHandle;
};

class BusController : public HLAobjectRoot
{
  public:
    using AttributeBits = uint32_t;
    static const uint32_t kNone = 0x0;
    static const uint32_t kNetworkIDBit = 0x1;
    static const uint32_t kDeviceIDBit = 0x2;

    BusController();
    BusController(rti1516ev::RTIambassador* ambassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle);
    ~BusController();
    BusController(const BusController&) = delete;
    BusController(BusController&&) = delete;
    BusController& operator=(const BusController&) = delete;
    BusController& operator=(BusController&&) = delete;

    // attribute NetworkID : HLAASCIIstring
    std::string GetNetworkID() const;
    void SetNetworkID(std::string newValue);
    // attribute DeviceID : HLAASCIIstring
    std::string GetDeviceID() const;
    void SetDeviceID(std::string newValue);
     rti1516ev::AttributeHandleValueMap BusController::GetAllAttributeValues() const;
     rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
     void UpdateAllAttributeValues();
     void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time);
     void UpdateModifiedAttributeValues();
     void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time);
     void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
     AttributeBits getUpdatedAttributes() const { return mLastUpdated; }

  protected:
    void ClearDirtyBits()
    {
      mDirty = kNone;
    }

  private:
    // modified by last reflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::wstring mInstanceName;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    rti1516ev::RTIambassador* mRtiAmbassador;
    BusControllerObjectClass* mObjectClass;
    // Attribute value encoders
    // attribute NetworkID : HLAASCIIstring
    rti1516ev::HLAASCIIstring mNetworkID;
    // attribute DeviceID : HLAASCIIstring
    rti1516ev::HLAASCIIstring mDeviceID;
};

class BusControllerCan;
class BusControllerCanObjectClass
{
  public:
    BusControllerCanObjectClass(rti1516ev::RTIambassador* rtiAmbassador, BusControllerObjectClass* baseClass);

    // attribute BaudRate : HLAinteger32LE
    rti1516ev::AttributeHandle GetBaudRateAttributeHandle() const { return mBaudRateAttributeHandle; }
    // attribute DataBaudRate : HLAinteger32LE
    rti1516ev::AttributeHandle GetDataBaudRateAttributeHandle() const { return mDataBaudRateAttributeHandle; }
    // attribute PreScaler : HLAinteger32LE
    rti1516ev::AttributeHandle GetPreScalerAttributeHandle() const { return mPreScalerAttributeHandle; }
    // attribute OperationMode : CanOperationMode
    rti1516ev::AttributeHandle GetOperationModeAttributeHandle() const { return mOperationModeAttributeHandle; }
    // attribute Sync_Seg : HLAinteger32LE
    rti1516ev::AttributeHandle GetSync_SegAttributeHandle() const { return mSync_SegAttributeHandle; }
    // attribute Prop_Seg : HLAinteger32LE
    rti1516ev::AttributeHandle GetProp_SegAttributeHandle() const { return mProp_SegAttributeHandle; }
    // attribute Phase_Seg1 : HLAinteger32LE
    rti1516ev::AttributeHandle GetPhase_Seg1AttributeHandle() const { return mPhase_Seg1AttributeHandle; }
    // attribute Phase_Seg2 : HLAinteger32LE
    rti1516ev::AttributeHandle GetPhase_Seg2AttributeHandle() const { return mPhase_Seg2AttributeHandle; }
    // attribute SamplingMode : CanSamplingMode
    rti1516ev::AttributeHandle GetSamplingModeAttributeHandle() const { return mSamplingModeAttributeHandle; }
    void Publish();
    void Unpublish();
    void Subscribe();
    void Unsubscribe();
    void DiscoverObjectInstance (rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    rti1516ev::ObjectClassHandle GetObjectClassHandle() const { return mObjectClassHandle; }
    BusControllerCan* GetObjectInstance(const std::wstring& instanceName);
    BusControllerCan* GetObjectInstance(rti1516ev::ObjectInstanceHandle instanceHandle);
    BusControllerCan* CreateObjectInstance(const std::wstring& instanceName);
  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    // object class handle
    rti1516ev::ObjectClassHandle mObjectClassHandle;
    BusControllerObjectClass* mBaseClass;
    bool mPublished = false;
    bool mSubscribed = false;
    // Attribute handles
    // attribute BaudRate : HLAinteger32LE
    rti1516ev::AttributeHandle mBaudRateAttributeHandle;
    // attribute DataBaudRate : HLAinteger32LE
    rti1516ev::AttributeHandle mDataBaudRateAttributeHandle;
    // attribute PreScaler : HLAinteger32LE
    rti1516ev::AttributeHandle mPreScalerAttributeHandle;
    // attribute OperationMode : CanOperationMode
    rti1516ev::AttributeHandle mOperationModeAttributeHandle;
    // attribute Sync_Seg : HLAinteger32LE
    rti1516ev::AttributeHandle mSync_SegAttributeHandle;
    // attribute Prop_Seg : HLAinteger32LE
    rti1516ev::AttributeHandle mProp_SegAttributeHandle;
    // attribute Phase_Seg1 : HLAinteger32LE
    rti1516ev::AttributeHandle mPhase_Seg1AttributeHandle;
    // attribute Phase_Seg2 : HLAinteger32LE
    rti1516ev::AttributeHandle mPhase_Seg2AttributeHandle;
    // attribute SamplingMode : CanSamplingMode
    rti1516ev::AttributeHandle mSamplingModeAttributeHandle;
  std::map<std::wstring, BusControllerCan*> mObjectInstancesByName;
  std::map<rti1516ev::ObjectInstanceHandle, BusControllerCan*> mObjectInstancesByHandle;
};

class BusControllerCan : public BusController
{
  public:
    using AttributeBits = uint32_t;
    static const uint32_t kNone = 0x0;
    static const uint32_t kBaudRateBit = 0x1;
    static const uint32_t kDataBaudRateBit = 0x2;
    static const uint32_t kPreScalerBit = 0x4;
    static const uint32_t kOperationModeBit = 0x8;
    static const uint32_t kSync_SegBit = 0x10;
    static const uint32_t kProp_SegBit = 0x20;
    static const uint32_t kPhase_Seg1Bit = 0x40;
    static const uint32_t kPhase_Seg2Bit = 0x80;
    static const uint32_t kSamplingModeBit = 0x100;

    BusControllerCan();
    BusControllerCan(rti1516ev::RTIambassador* ambassador, const std::wstring& instanceName, rti1516ev::ObjectInstanceHandle instanceHandle);
    ~BusControllerCan();
    BusControllerCan(const BusControllerCan&) = delete;
    BusControllerCan(BusControllerCan&&) = delete;
    BusControllerCan& operator=(const BusControllerCan&) = delete;
    BusControllerCan& operator=(BusControllerCan&&) = delete;

    // attribute BaudRate : HLAinteger32LE
    int32_t GetBaudRate() const;
    void SetBaudRate(int32_t newValue);
    // attribute DataBaudRate : HLAinteger32LE
    int32_t GetDataBaudRate() const;
    void SetDataBaudRate(int32_t newValue);
    // attribute PreScaler : HLAinteger32LE
    int32_t GetPreScaler() const;
    void SetPreScaler(int32_t newValue);
    // attribute OperationMode : CanOperationMode
    CanOperationMode GetOperationMode() const;
    void SetOperationMode(CanOperationMode newValue);
    // attribute Sync_Seg : HLAinteger32LE
    int32_t GetSync_Seg() const;
    void SetSync_Seg(int32_t newValue);
    // attribute Prop_Seg : HLAinteger32LE
    int32_t GetProp_Seg() const;
    void SetProp_Seg(int32_t newValue);
    // attribute Phase_Seg1 : HLAinteger32LE
    int32_t GetPhase_Seg1() const;
    void SetPhase_Seg1(int32_t newValue);
    // attribute Phase_Seg2 : HLAinteger32LE
    int32_t GetPhase_Seg2() const;
    void SetPhase_Seg2(int32_t newValue);
    // attribute SamplingMode : CanSamplingMode
    CanSamplingMode GetSamplingMode() const;
    void SetSamplingMode(CanSamplingMode newValue);
     rti1516ev::AttributeHandleValueMap BusControllerCan::GetAllAttributeValues() const;
     rti1516ev::AttributeHandleValueMap GetModifiedAttributeValues() const;
     void UpdateAllAttributeValues();
     void UpdateAllAttributeValues(const rti1516ev::LogicalTime& time);
     void UpdateModifiedAttributeValues();
     void UpdateModifiedAttributeValues(const rti1516ev::LogicalTime& time);
     void ReflectAttributeValues(const rti1516ev::AttributeHandleValueMap& attributes);
     AttributeBits getUpdatedAttributes() const { return mLastUpdated; }

  protected:
    void ClearDirtyBits()
    {
      BusController::ClearDirtyBits();
      mDirty = kNone;
    }

  private:
    // modified by last reflectAttributeValues
    AttributeBits mLastUpdated = kNone;
    // to be sent with next updateAttributes
    AttributeBits mDirty = kNone;
    std::wstring mInstanceName;
    rti1516ev::ObjectInstanceHandle mObjectInstanceHandle;
    rti1516ev::RTIambassador* mRtiAmbassador;
    BusControllerCanObjectClass* mObjectClass;
    // Attribute value encoders
    // attribute BaudRate : HLAinteger32LE
    rti1516ev::HLAinteger32LE mBaudRate;
    // attribute DataBaudRate : HLAinteger32LE
    rti1516ev::HLAinteger32LE mDataBaudRate;
    // attribute PreScaler : HLAinteger32LE
    rti1516ev::HLAinteger32LE mPreScaler;
    // attribute OperationMode : CanOperationMode
    rti1516ev::HLAinteger32LE mOperationMode;
    // attribute Sync_Seg : HLAinteger32LE
    rti1516ev::HLAinteger32LE mSync_Seg;
    // attribute Prop_Seg : HLAinteger32LE
    rti1516ev::HLAinteger32LE mProp_Seg;
    // attribute Phase_Seg1 : HLAinteger32LE
    rti1516ev::HLAinteger32LE mPhase_Seg1;
    // attribute Phase_Seg2 : HLAinteger32LE
    rti1516ev::HLAinteger32LE mPhase_Seg2;
    // attribute SamplingMode : CanSamplingMode
    rti1516ev::HLAinteger32LE mSamplingMode;
};

 

class ClassRegistry
{
  public:
    ClassRegistry(rti1516ev::RTIambassador* rtiAmbassador);
    HLAobjectRootObjectClass* getHLAobjectRootObjectClass() const { return mHLAobjectRootObjectClass.get(); }
    SystemVariableObjectClass* getSystemVariableObjectClass() const { return mSystemVariableObjectClass.get(); }
    ValueEntityObjectClass* getValueEntityObjectClass() const { return mValueEntityObjectClass.get(); }
    DOMemberSourceObjectClass* getDOMemberSourceObjectClass() const { return mDOMemberSourceObjectClass.get(); }
    DOMemberTargetObjectClass* getDOMemberTargetObjectClass() const { return mDOMemberTargetObjectClass.get(); }
    BusManagementObjectClass* getBusManagementObjectClass() const { return mBusManagementObjectClass.get(); }
    BusManagementCanObjectClass* getBusManagementCanObjectClass() const { return mBusManagementCanObjectClass.get(); }
    BusControllerObjectClass* getBusControllerObjectClass() const { return mBusControllerObjectClass.get(); }
    BusControllerCanObjectClass* getBusControllerCanObjectClass() const { return mBusControllerCanObjectClass.get(); }

    void Initialize();

    void DiscoverObjectInstance(rti1516ev::ObjectInstanceHandle theObject, std::wstring const & theObjectInstanceName);
    void RemoveObjectInstance(rti1516ev::ObjectInstanceHandle theObject);
    void ReflectAttributeValues(rti1516ev::ObjectInstanceHandle theObject, const rti1516ev::AttributeHandleValueMap & attributes);

  private:
    rti1516ev::RTIambassador* mRtiAmbassador;
    std::unique_ptr<HLAobjectRootObjectClass> mHLAobjectRootObjectClass;
    std::unique_ptr<SystemVariableObjectClass> mSystemVariableObjectClass;
    std::unique_ptr<ValueEntityObjectClass> mValueEntityObjectClass;
    std::unique_ptr<DOMemberSourceObjectClass> mDOMemberSourceObjectClass;
    std::unique_ptr<DOMemberTargetObjectClass> mDOMemberTargetObjectClass;
    std::unique_ptr<BusManagementObjectClass> mBusManagementObjectClass;
    std::unique_ptr<BusManagementCanObjectClass> mBusManagementCanObjectClass;
    std::unique_ptr<BusControllerObjectClass> mBusControllerObjectClass;
    std::unique_ptr<BusControllerCanObjectClass> mBusControllerCanObjectClass;
}; // class ClassRegistry

} // namespace NDistributedSimulation
} // namespace NRTFederateEncoding
