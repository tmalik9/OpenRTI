
// Code automatically generated by T4 template from D:\vfs\OpenRTI-codegen\tests\rti1516ev\codegen\\RTFederate.xml, do not edit

// Name: CANoe RT Federate
// Copyright: Copyright (c) Vector Informatik GmbH. All rights reserved.
// Version: 1.0
// Description: CANoe Simulation Object Model

#pragma once

#include <vector>
#include "RTI/encoding/HLAopaqueData.h"

namespace NDistSimIB {
namespace NRTFederateEncoding {



typedef int64_t VTimeNS;

typedef int32_t VMessageId;

enum BusType : int32_t
{
      kBtInvalid = 0,
      kBtCAN = 1,
      kBtLIN = 5,
      kBtFlexRay = 7,
      kBtEthernet = 11,
}; // enum BusType

enum SimulatedFlag : uint8_t
{
      kSimulated_fromBus = 0,
      kSimulated_fromTool = 1,
      kSimulated_internalEvent = 2,
}; // enum SimulatedFlag

enum DirMask : uint8_t
{
      kMskTxRequest = 0,
      kMskRx = 1,
      kMskTx = 2,
}; // enum DirMask

enum MessageFlags : int32_t
{
      kMsgFlagRemoteFrame = 0x10,
      kMsgFlagEDL = 0x1000,
      kMsgFlagBRS = 0x2000,
}; // enum MessageFlags

enum LinkStatus : int32_t
{
      kLinkUnknown = 0,
      kLinkDown = 1,
      kLinkUp = 2,
      kLinkNegotiate = 3,
      kLinkError = 4,
}; // enum LinkStatus

enum EthernetPhy : int32_t
{
      kPhyUnknown = 0,
      kPhyIEEE_802_3 = 1,
      kPhyBroadR_Reach = 2,
}; // enum EthernetPhy

enum Duplex : int32_t
{
      kDuplexUnkown = 0,
      kDuplexHalf = 1,
      kDuplexFull = 2,
}; // enum Duplex

enum MdiType : int32_t
{
      kMdiUnknown = 0,
      kMdiStraight = 1,
      kMdiCrossover = 2,
}; // enum MdiType

enum Connector : int32_t
{
      kConnectorUnknown = 0,
      kConnectorRJ45 = 1,
      kConnectorDSub = 2,
}; // enum Connector

enum ClockMode : int32_t
{
      kClockModeUnknown = 0,
      kClockModeMaster = 1,
      kClockModeSlave = 2,
}; // enum ClockMode

enum BrPair : int32_t
{
      kBrPairUnknown = 0,
      kBrPair1Pair = 1,
      kBrPair2Pair = 2,
      kBrPair4Pair = 3,
}; // enum BrPair

enum CanOperationMode : int32_t
{
      kCanOperationModeCan = 0,
      kCanOperationModeCanFD = 1,
      kCanOperationModeCanXL = 2,
}; // enum CanOperationMode

enum CanSamplingMode : int32_t
{
      kCanSamplingModeSampling_1 = 0,
      kCanSamplingModeSampling_3 = 1,
}; // enum CanSamplingMode

enum CanBusState : int32_t
{
      kCanBusStateOnline = 0,
      kCanBusStateOffline = 1,
      kCanBusStateError = 2,
}; // enum CanBusState

// Base class for all bus events, inclulding error and status events
class BusEvent
{
  public:
    virtual ~BusEvent() noexcept {}
    virtual uint32_t getVersion() const = 0;

}; // class BusEvent

// Base class for all other bus messages
class BusMessage : public BusEvent
{
  public:
    virtual ~BusMessage() noexcept {}
    virtual void SetClientIndex(int16_t value) = 0;
    virtual int16_t GetClientIndex() const = 0;
    virtual bool IsClientIndexAvailable() const = 0;
    virtual void SetDir(DirMask value) = 0;
    virtual DirMask GetDir() const = 0;
    virtual bool IsDirAvailable() const = 0;
    virtual void SetOriginalTimeStamp(VTimeNS value) = 0;
    virtual VTimeNS GetOriginalTimeStamp() const = 0;
    virtual bool IsOriginalTimeStampAvailable() const = 0;
    virtual void SetSimulated(SimulatedFlag value) = 0;
    virtual SimulatedFlag GetSimulated() const = 0;
    virtual bool IsSimulatedAvailable() const = 0;

}; // class BusMessage

// CAN Frame
class CANFrame : public BusMessage
{
  public:
    virtual ~CANFrame() noexcept {}
    virtual void SetId(VMessageId value) = 0;
    virtual VMessageId GetId() const = 0;
    virtual bool IsIdAvailable() const = 0;
    virtual void SetFlags(int32_t value) = 0;
    virtual int32_t GetFlags() const = 0;
    virtual bool IsFlagsAvailable() const = 0;
    virtual void SetDataLength(uint8_t value) = 0;
    virtual uint8_t GetDataLength() const = 0;
    virtual bool IsDataLengthAvailable() const = 0;
    virtual void SetData(const std::vector<uint8_t>& value) = 0;
    virtual void SetData(const uint8_t* value, size_t size) = 0;
    virtual const std::vector<uint8_t>& GetData() const = 0;
    virtual bool IsDataAvailable() const = 0;
    virtual void SetFrameLengthNS(int32_t value) = 0;
    virtual int32_t GetFrameLengthNS() const = 0;
    virtual bool IsFrameLengthNSAvailable() const = 0;
    virtual void SetBitCount(int16_t value) = 0;
    virtual int16_t GetBitCount() const = 0;
    virtual bool IsBitCountAvailable() const = 0;

}; // class CANFrame

// CAN Error Frame
class CANErrorFrame : public BusEvent
{
  public:
    virtual ~CANErrorFrame() noexcept {}
    virtual void SetErrorBitPosition(int16_t value) = 0;
    virtual int16_t GetErrorBitPosition() const = 0;
    virtual bool IsErrorBitPositionAvailable() const = 0;
    virtual void SetFrameLengthNS(int32_t value) = 0;
    virtual int32_t GetFrameLengthNS() const = 0;
    virtual bool IsFrameLengthNSAvailable() const = 0;
    virtual void SetClientIndex(int16_t value) = 0;
    virtual int16_t GetClientIndex() const = 0;
    virtual bool IsClientIndexAvailable() const = 0;

}; // class CANErrorFrame

// Ethernet Status Event
class EthernetStatus : public BusEvent
{
  public:
    virtual ~EthernetStatus() noexcept {}
    virtual void SetBusType(int16_t value) = 0;
    virtual int16_t GetBusType() const = 0;
    virtual bool IsBusTypeAvailable() const = 0;
    virtual void SetHardwareChannel(int64_t value) = 0;
    virtual int64_t GetHardwareChannel() const = 0;
    virtual bool IsHardwareChannelAvailable() const = 0;
    virtual void SetLinkStatus(LinkStatus value) = 0;
    virtual LinkStatus GetLinkStatus() const = 0;
    virtual bool IsLinkStatusAvailable() const = 0;
    virtual void SetBitrate(int32_t value) = 0;
    virtual int32_t GetBitrate() const = 0;
    virtual bool IsBitrateAvailable() const = 0;
    virtual void SetEthernetPhy(EthernetPhy value) = 0;
    virtual EthernetPhy GetEthernetPhy() const = 0;
    virtual bool IsEthernetPhyAvailable() const = 0;
    virtual void SetDuplex(Duplex value) = 0;
    virtual Duplex GetDuplex() const = 0;
    virtual bool IsDuplexAvailable() const = 0;
    virtual void SetMdiType(MdiType value) = 0;
    virtual MdiType GetMdiType() const = 0;
    virtual bool IsMdiTypeAvailable() const = 0;
    virtual void SetConnector(Connector value) = 0;
    virtual Connector GetConnector() const = 0;
    virtual bool IsConnectorAvailable() const = 0;
    virtual void SetClockMode(ClockMode value) = 0;
    virtual ClockMode GetClockMode() const = 0;
    virtual bool IsClockModeAvailable() const = 0;
    virtual void SetBrPair(BrPair value) = 0;
    virtual BrPair GetBrPair() const = 0;
    virtual bool IsBrPairAvailable() const = 0;
    virtual void SetDeviceOperationMode(int32_t value) = 0;
    virtual int32_t GetDeviceOperationMode() const = 0;
    virtual bool IsDeviceOperationModeAvailable() const = 0;

}; // class EthernetStatus

// Ethernet Packet
class EthernetPacket : public BusMessage
{
  public:
    virtual ~EthernetPacket() noexcept {}
    virtual void SetBusType(int16_t value) = 0;
    virtual int16_t GetBusType() const = 0;
    virtual bool IsBusTypeAvailable() const = 0;
    virtual void SetHardwareChannel(int64_t value) = 0;
    virtual int64_t GetHardwareChannel() const = 0;
    virtual bool IsHardwareChannelAvailable() const = 0;
    virtual void SetFrameDuration(VTimeNS value) = 0;
    virtual VTimeNS GetFrameDuration() const = 0;
    virtual bool IsFrameDurationAvailable() const = 0;
    virtual void SetEthernetChecksum(int32_t value) = 0;
    virtual int32_t GetEthernetChecksum() const = 0;
    virtual bool IsEthernetChecksumAvailable() const = 0;
    virtual void SetPacketData(const std::vector<uint8_t>& value) = 0;
    virtual void SetPacketData(const uint8_t* value, size_t size) = 0;
    virtual const std::vector<uint8_t>& GetPacketData() const = 0;
    virtual bool IsPacketDataAvailable() const = 0;

}; // class EthernetPacket

class EthernetPacketForwarded : public EthernetPacket
{
  public:
    virtual ~EthernetPacketForwarded() noexcept {}

}; // class EthernetPacketForwarded

class EthernetPacketError : public BusMessage
{
  public:
    virtual ~EthernetPacketError() noexcept {}
    virtual void SetBusType(int16_t value) = 0;
    virtual int16_t GetBusType() const = 0;
    virtual bool IsBusTypeAvailable() const = 0;
    virtual void SetHardwareChannel(int64_t value) = 0;
    virtual int64_t GetHardwareChannel() const = 0;
    virtual bool IsHardwareChannelAvailable() const = 0;
    virtual void SetFrameDuration(VTimeNS value) = 0;
    virtual VTimeNS GetFrameDuration() const = 0;
    virtual bool IsFrameDurationAvailable() const = 0;
    virtual void SetErrorCode(int32_t value) = 0;
    virtual int32_t GetErrorCode() const = 0;
    virtual bool IsErrorCodeAvailable() const = 0;
    virtual void SetEthernetChecksum(int32_t value) = 0;
    virtual int32_t GetEthernetChecksum() const = 0;
    virtual bool IsEthernetChecksumAvailable() const = 0;
    virtual void SetPacketData(const std::vector<uint8_t>& value) = 0;
    virtual void SetPacketData(const uint8_t* value, size_t size) = 0;
    virtual const std::vector<uint8_t>& GetPacketData() const = 0;
    virtual bool IsPacketDataAvailable() const = 0;

}; // class EthernetPacketError

class EthernetPacketErrorForwarded : public EthernetPacketError
{
  public:
    virtual ~EthernetPacketErrorForwarded() noexcept {}

}; // class EthernetPacketErrorForwarded


} // namespace NDistSimIB
} // namespace NRTFederateEncoding
