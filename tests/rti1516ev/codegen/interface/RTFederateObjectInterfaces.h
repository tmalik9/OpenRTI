
// Code automatically generated by FOMCodeGen version 2.0.1.15 from RTFederate.xml, do not edit

// Name: CANoe RT Federate
// Copyright: Copyright (c) Vector Informatik GmbH. All rights reserved.
// Version: 1.0
// Description: CANoe Simulation Object Model

#pragma once

#include <vector>
#include <functional>
#include <memory>


#include "RTFederateDataTypes.h"

namespace NDistSimIB {
namespace NRTFederateEncoding {

class IHLAobjectRoot;
class IHLAobjectRootObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IHLAobjectRoot>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IHLAobjectRoot>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IHLAobjectRoot>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<IHLAobjectRoot> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IHLAobjectRoot> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IHLAobjectRoot> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IHLAobjectRoot : public std::enable_shared_from_this<IHLAobjectRoot>
{
  public:
    using AttributeBits = uint32_t;
    static const AttributeBits kNone = 0x0;

    IHLAobjectRoot() {}
    virtual ~IHLAobjectRoot() {}
    IHLAobjectRoot(const IHLAobjectRoot&) = delete;
    IHLAobjectRoot(IHLAobjectRoot&&) = delete;
    IHLAobjectRoot& operator=(const IHLAobjectRoot&) = delete;
    IHLAobjectRoot& operator=(IHLAobjectRoot&&) = delete;

    virtual std::wstring GetObjectInstanceName() const = 0;
    virtual bool IsValid() const = 0;
    virtual bool IsOwner() const = 0;
    virtual void Release() = 0;
    // attribute HLAprivilegeToDeleteObject : no data type
};

class ISystemVariable;
class ISystemVariableObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<ISystemVariable>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<ISystemVariable>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<ISystemVariable>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<ISystemVariable> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<ISystemVariable> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<ISystemVariable> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class ISystemVariable : public IHLAobjectRoot
{
  public:
    static const AttributeBits kValueBit = 0x2;

    ISystemVariable() {}
    ~ISystemVariable() {}
    ISystemVariable(const ISystemVariable&) = delete;
    ISystemVariable(ISystemVariable&&) = delete;
    ISystemVariable& operator=(const ISystemVariable&) = delete;
    ISystemVariable& operator=(ISystemVariable&&) = delete;

    // attribute Value : HLAopaqueData
    virtual std::vector<uint8_t> GetValue() const = 0;
    virtual void SetValue(const std::vector<uint8_t>& newValue) = 0;
    // send all attribute values
    virtual void UpdateAllAttributeValues() = 0;
    // send all attribute values, as TSO message
    virtual void UpdateAllAttributeValues(int64_t time) = 0;
    // send attribute values which have been modified since last call
    virtual void UpdateModifiedAttributeValues() = 0;
    // send attribute values which have been modified since last call, as TSO message
    virtual void UpdateModifiedAttributeValues(int64_t time) = 0;
    // bitmask of attributes ever received
    virtual AttributeBits GetReceivedAttributes() const = 0;
    // bitmask of attributes received in last update (cleared after update callbacks executed)
    virtual AttributeBits GetUpdatedAttributes() const = 0;
    // bitmask of attributes ever modified
    virtual AttributeBits GetInitializedAttributes() const = 0;
    // bitmask of attributes modified since last updateAttributeValues/provideAttributeValues
    // (cleared by UpdateAttributeValues or ProvideAttributeValues)
    virtual AttributeBits GetModifiedAttributes() const = 0;
    // request attribute values which haven't been updated in last reflectAttributeValues
    virtual void RequestAttributeValues() = 0;
    // request all attribute values
    virtual void RequestAllAttributeValues() = 0;
    using UpdateCallback = std::function<void(std::shared_ptr<ISystemVariable>)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallback callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
    using UpdateCallbackWithTime = std::function<void(std::shared_ptr<ISystemVariable>, int64_t time, OrderType orderType)>;
    virtual uint32_t RegisterUpdateCallbackWithTime(UpdateCallbackWithTime callback) = 0;
    virtual void UnregisterUpdateCallbackWithTime(uint32_t callbackToken) = 0;
};

class IValueEntity;
class IValueEntityObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IValueEntity>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IValueEntity>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IValueEntity>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<IValueEntity> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IValueEntity> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IValueEntity> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IValueEntity : public IHLAobjectRoot
{
  public:
    static const AttributeBits kValueBit = 0x2;

    IValueEntity() {}
    ~IValueEntity() {}
    IValueEntity(const IValueEntity&) = delete;
    IValueEntity(IValueEntity&&) = delete;
    IValueEntity& operator=(const IValueEntity&) = delete;
    IValueEntity& operator=(IValueEntity&&) = delete;

    // attribute Value : HLAopaqueData
    virtual std::vector<uint8_t> GetValue() const = 0;
    virtual void SetValue(const std::vector<uint8_t>& newValue) = 0;
    // send all attribute values
    virtual void UpdateAllAttributeValues() = 0;
    // send all attribute values, as TSO message
    virtual void UpdateAllAttributeValues(int64_t time) = 0;
    // send attribute values which have been modified since last call
    virtual void UpdateModifiedAttributeValues() = 0;
    // send attribute values which have been modified since last call, as TSO message
    virtual void UpdateModifiedAttributeValues(int64_t time) = 0;
    // bitmask of attributes ever received
    virtual AttributeBits GetReceivedAttributes() const = 0;
    // bitmask of attributes received in last update (cleared after update callbacks executed)
    virtual AttributeBits GetUpdatedAttributes() const = 0;
    // bitmask of attributes ever modified
    virtual AttributeBits GetInitializedAttributes() const = 0;
    // bitmask of attributes modified since last updateAttributeValues/provideAttributeValues
    // (cleared by UpdateAttributeValues or ProvideAttributeValues)
    virtual AttributeBits GetModifiedAttributes() const = 0;
    // request attribute values which haven't been updated in last reflectAttributeValues
    virtual void RequestAttributeValues() = 0;
    // request all attribute values
    virtual void RequestAllAttributeValues() = 0;
    using UpdateCallback = std::function<void(std::shared_ptr<IValueEntity>)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallback callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
    using UpdateCallbackWithTime = std::function<void(std::shared_ptr<IValueEntity>, int64_t time, OrderType orderType)>;
    virtual uint32_t RegisterUpdateCallbackWithTime(UpdateCallbackWithTime callback) = 0;
    virtual void UnregisterUpdateCallbackWithTime(uint32_t callbackToken) = 0;
};

class IDOMemberSource;
class IDOMemberSourceObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IDOMemberSource>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IDOMemberSource>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IDOMemberSource>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<IDOMemberSource> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IDOMemberSource> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IDOMemberSource> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IDOMemberSource : public IHLAobjectRoot
{
  public:
    static const AttributeBits kDOSourceMemberNameBit = 0x2;
    static const AttributeBits kDOSourceMemberConnectionTypeBit = 0x4;
    static const AttributeBits kDOSourceMemberDataBytesBit = 0x8;

    IDOMemberSource() {}
    ~IDOMemberSource() {}
    IDOMemberSource(const IDOMemberSource&) = delete;
    IDOMemberSource(IDOMemberSource&&) = delete;
    IDOMemberSource& operator=(const IDOMemberSource&) = delete;
    IDOMemberSource& operator=(IDOMemberSource&&) = delete;

    // attribute DOSourceMemberName : HLAASCIIstring
    virtual std::string GetDOSourceMemberName() const = 0;
    virtual void SetDOSourceMemberName(std::string newValue) = 0;
    // attribute DOSourceMemberConnectionType : HLAASCIIstring
    virtual std::string GetDOSourceMemberConnectionType() const = 0;
    virtual void SetDOSourceMemberConnectionType(std::string newValue) = 0;
    // attribute DOSourceMemberDataBytes : HLAopaqueData
    virtual std::vector<uint8_t> GetDOSourceMemberDataBytes() const = 0;
    virtual void SetDOSourceMemberDataBytes(const std::vector<uint8_t>& newValue) = 0;
    // send all attribute values
    virtual void UpdateAllAttributeValues() = 0;
    // send all attribute values, as TSO message
    virtual void UpdateAllAttributeValues(int64_t time) = 0;
    // send attribute values which have been modified since last call
    virtual void UpdateModifiedAttributeValues() = 0;
    // send attribute values which have been modified since last call, as TSO message
    virtual void UpdateModifiedAttributeValues(int64_t time) = 0;
    // bitmask of attributes ever received
    virtual AttributeBits GetReceivedAttributes() const = 0;
    // bitmask of attributes received in last update (cleared after update callbacks executed)
    virtual AttributeBits GetUpdatedAttributes() const = 0;
    // bitmask of attributes ever modified
    virtual AttributeBits GetInitializedAttributes() const = 0;
    // bitmask of attributes modified since last updateAttributeValues/provideAttributeValues
    // (cleared by UpdateAttributeValues or ProvideAttributeValues)
    virtual AttributeBits GetModifiedAttributes() const = 0;
    // request attribute values which haven't been updated in last reflectAttributeValues
    virtual void RequestAttributeValues() = 0;
    // request all attribute values
    virtual void RequestAllAttributeValues() = 0;
    using UpdateCallback = std::function<void(std::shared_ptr<IDOMemberSource>)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallback callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
    using UpdateCallbackWithTime = std::function<void(std::shared_ptr<IDOMemberSource>, int64_t time, OrderType orderType)>;
    virtual uint32_t RegisterUpdateCallbackWithTime(UpdateCallbackWithTime callback) = 0;
    virtual void UnregisterUpdateCallbackWithTime(uint32_t callbackToken) = 0;
};

class IDOMemberTarget;
class IDOMemberTargetObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IDOMemberTarget>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IDOMemberTarget>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IDOMemberTarget>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<IDOMemberTarget> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IDOMemberTarget> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IDOMemberTarget> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IDOMemberTarget : public IHLAobjectRoot
{
  public:
    static const AttributeBits kDOTargetMemberNameBit = 0x2;
    static const AttributeBits kDOTargetMemberConnectionTypeBit = 0x4;

    IDOMemberTarget() {}
    ~IDOMemberTarget() {}
    IDOMemberTarget(const IDOMemberTarget&) = delete;
    IDOMemberTarget(IDOMemberTarget&&) = delete;
    IDOMemberTarget& operator=(const IDOMemberTarget&) = delete;
    IDOMemberTarget& operator=(IDOMemberTarget&&) = delete;

    // attribute DOTargetMemberName : HLAASCIIstring
    virtual std::string GetDOTargetMemberName() const = 0;
    virtual void SetDOTargetMemberName(std::string newValue) = 0;
    // attribute DOTargetMemberConnectionType : HLAASCIIstring
    virtual std::string GetDOTargetMemberConnectionType() const = 0;
    virtual void SetDOTargetMemberConnectionType(std::string newValue) = 0;
    // send all attribute values
    virtual void UpdateAllAttributeValues() = 0;
    // send all attribute values, as TSO message
    virtual void UpdateAllAttributeValues(int64_t time) = 0;
    // send attribute values which have been modified since last call
    virtual void UpdateModifiedAttributeValues() = 0;
    // send attribute values which have been modified since last call, as TSO message
    virtual void UpdateModifiedAttributeValues(int64_t time) = 0;
    // bitmask of attributes ever received
    virtual AttributeBits GetReceivedAttributes() const = 0;
    // bitmask of attributes received in last update (cleared after update callbacks executed)
    virtual AttributeBits GetUpdatedAttributes() const = 0;
    // bitmask of attributes ever modified
    virtual AttributeBits GetInitializedAttributes() const = 0;
    // bitmask of attributes modified since last updateAttributeValues/provideAttributeValues
    // (cleared by UpdateAttributeValues or ProvideAttributeValues)
    virtual AttributeBits GetModifiedAttributes() const = 0;
    // request attribute values which haven't been updated in last reflectAttributeValues
    virtual void RequestAttributeValues() = 0;
    // request all attribute values
    virtual void RequestAllAttributeValues() = 0;
    using UpdateCallback = std::function<void(std::shared_ptr<IDOMemberTarget>)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallback callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
    using UpdateCallbackWithTime = std::function<void(std::shared_ptr<IDOMemberTarget>, int64_t time, OrderType orderType)>;
    virtual uint32_t RegisterUpdateCallbackWithTime(UpdateCallbackWithTime callback) = 0;
    virtual void UnregisterUpdateCallbackWithTime(uint32_t callbackToken) = 0;
};

class IBusManagement;
class IBusManagementObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IBusManagement>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IBusManagement>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IBusManagement>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<IBusManagement> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IBusManagement> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IBusManagement> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IBusManagement : public IHLAobjectRoot
{
  public:
    static const AttributeBits kNetworkIDBit = 0x2;

    IBusManagement() {}
    ~IBusManagement() {}
    IBusManagement(const IBusManagement&) = delete;
    IBusManagement(IBusManagement&&) = delete;
    IBusManagement& operator=(const IBusManagement&) = delete;
    IBusManagement& operator=(IBusManagement&&) = delete;

    // attribute NetworkID : HLAASCIIstring
    virtual std::string GetNetworkID() const = 0;
    virtual void SetNetworkID(std::string newValue) = 0;
    // send all attribute values
    virtual void UpdateAllAttributeValues() = 0;
    // send all attribute values, as TSO message
    virtual void UpdateAllAttributeValues(int64_t time) = 0;
    // send attribute values which have been modified since last call
    virtual void UpdateModifiedAttributeValues() = 0;
    // send attribute values which have been modified since last call, as TSO message
    virtual void UpdateModifiedAttributeValues(int64_t time) = 0;
    // bitmask of attributes ever received
    virtual AttributeBits GetReceivedAttributes() const = 0;
    // bitmask of attributes received in last update (cleared after update callbacks executed)
    virtual AttributeBits GetUpdatedAttributes() const = 0;
    // bitmask of attributes ever modified
    virtual AttributeBits GetInitializedAttributes() const = 0;
    // bitmask of attributes modified since last updateAttributeValues/provideAttributeValues
    // (cleared by UpdateAttributeValues or ProvideAttributeValues)
    virtual AttributeBits GetModifiedAttributes() const = 0;
    // request attribute values which haven't been updated in last reflectAttributeValues
    virtual void RequestAttributeValues() = 0;
    // request all attribute values
    virtual void RequestAllAttributeValues() = 0;
};

class IBusManagementCan;
class IBusManagementCanObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IBusManagementCan>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IBusManagementCan>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IBusManagementCan>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<IBusManagementCan> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IBusManagementCan> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IBusManagementCan> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IBusManagementCan : public IBusManagement
{
  public:
    static const AttributeBits kBusStateBit = 0x4;
    static const AttributeBits kTxErrorCountBit = 0x8;
    static const AttributeBits kRxErrorCountBit = 0x10;
    static const AttributeBits kSendMessagesAsRxBit = 0x20;

    IBusManagementCan() {}
    ~IBusManagementCan() {}
    IBusManagementCan(const IBusManagementCan&) = delete;
    IBusManagementCan(IBusManagementCan&&) = delete;
    IBusManagementCan& operator=(const IBusManagementCan&) = delete;
    IBusManagementCan& operator=(IBusManagementCan&&) = delete;

    // attribute BusState : CanBusState
    virtual CanBusState GetBusState() const = 0;
    virtual void SetBusState(CanBusState newValue) = 0;
    // attribute TxErrorCount : HLAinteger32LE
    virtual int32_t GetTxErrorCount() const = 0;
    virtual void SetTxErrorCount(int32_t newValue) = 0;
    // attribute RxErrorCount : HLAinteger32LE
    virtual int32_t GetRxErrorCount() const = 0;
    virtual void SetRxErrorCount(int32_t newValue) = 0;
    // attribute SendMessagesAsRx : HLAboolean
    virtual bool GetSendMessagesAsRx() const = 0;
    virtual void SetSendMessagesAsRx(bool newValue) = 0;
    using UpdateCallback = std::function<void(std::shared_ptr<IBusManagementCan>)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallback callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
    using UpdateCallbackWithTime = std::function<void(std::shared_ptr<IBusManagementCan>, int64_t time, OrderType orderType)>;
    virtual uint32_t RegisterUpdateCallbackWithTime(UpdateCallbackWithTime callback) = 0;
    virtual void UnregisterUpdateCallbackWithTime(uint32_t callbackToken) = 0;
};

class IBusManagementEthernet;
class IBusManagementEthernetObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IBusManagementEthernet>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IBusManagementEthernet>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IBusManagementEthernet>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<IBusManagementEthernet> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IBusManagementEthernet> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IBusManagementEthernet> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IBusManagementEthernet : public IBusManagement
{
  public:
    static const AttributeBits kPortNameBit = 0x4;
    static const AttributeBits kSendMessagesAsRxBit = 0x8;

    IBusManagementEthernet() {}
    ~IBusManagementEthernet() {}
    IBusManagementEthernet(const IBusManagementEthernet&) = delete;
    IBusManagementEthernet(IBusManagementEthernet&&) = delete;
    IBusManagementEthernet& operator=(const IBusManagementEthernet&) = delete;
    IBusManagementEthernet& operator=(IBusManagementEthernet&&) = delete;

    // attribute PortName : HLAASCIIstring
    virtual std::string GetPortName() const = 0;
    virtual void SetPortName(std::string newValue) = 0;
    // attribute SendMessagesAsRx : HLAboolean
    virtual bool GetSendMessagesAsRx() const = 0;
    virtual void SetSendMessagesAsRx(bool newValue) = 0;
    using UpdateCallback = std::function<void(std::shared_ptr<IBusManagementEthernet>)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallback callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
    using UpdateCallbackWithTime = std::function<void(std::shared_ptr<IBusManagementEthernet>, int64_t time, OrderType orderType)>;
    virtual uint32_t RegisterUpdateCallbackWithTime(UpdateCallbackWithTime callback) = 0;
    virtual void UnregisterUpdateCallbackWithTime(uint32_t callbackToken) = 0;
};

class IFlexRayCluster;
class IFlexRayClusterObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IFlexRayCluster>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IFlexRayCluster>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IFlexRayCluster>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<IFlexRayCluster> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IFlexRayCluster> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IFlexRayCluster> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IFlexRayCluster : public IBusManagement
{
  public:
    static const AttributeBits kgColdstartAttemptsBit = 0x4;
    static const AttributeBits kgCycleCountMaxBit = 0x8;
    static const AttributeBits kgdActionPointOffsetBit = 0x10;
    static const AttributeBits kgdDynamicSlotIdlePhaseBit = 0x20;
    static const AttributeBits kgdMiniSlotBit = 0x40;
    static const AttributeBits kgdMiniSlotActionPointOffsetBit = 0x80;
    static const AttributeBits kgdStaticSlotBit = 0x100;
    static const AttributeBits kgdSymbolWindowBit = 0x200;
    static const AttributeBits kgdSymbolWindowActionPointOffsetBit = 0x400;
    static const AttributeBits kgdTSSTransmitterBit = 0x800;
    static const AttributeBits kgdWakeupTxActiveBit = 0x1000;
    static const AttributeBits kgdWakeupTxIdleBit = 0x2000;
    static const AttributeBits kgListenNoiseBit = 0x4000;
    static const AttributeBits kgMacroPerCycleBit = 0x8000;
    static const AttributeBits kgMaxWithoutClockCorrectionFatalBit = 0x10000;
    static const AttributeBits kgMaxWithoutClockCorrectionPassiveBit = 0x20000;
    static const AttributeBits kgNumberOfMiniSlotsBit = 0x40000;
    static const AttributeBits kgNumberOfStaticSlotsBit = 0x80000;
    static const AttributeBits kgPayloadLengthStaticBit = 0x100000;
    static const AttributeBits kgSyncFrameIDCountMaxBit = 0x200000;

    IFlexRayCluster() {}
    ~IFlexRayCluster() {}
    IFlexRayCluster(const IFlexRayCluster&) = delete;
    IFlexRayCluster(IFlexRayCluster&&) = delete;
    IFlexRayCluster& operator=(const IFlexRayCluster&) = delete;
    IFlexRayCluster& operator=(IFlexRayCluster&&) = delete;

    // attribute gColdstartAttempts : HLAoctet
    virtual uint8_t GetgColdstartAttempts() const = 0;
    virtual void SetgColdstartAttempts(uint8_t newValue) = 0;
    // attribute gCycleCountMax : HLAoctet
    virtual uint8_t GetgCycleCountMax() const = 0;
    virtual void SetgCycleCountMax(uint8_t newValue) = 0;
    // attribute gdActionPointOffset : HLAinteger32LE
    virtual int32_t GetgdActionPointOffset() const = 0;
    virtual void SetgdActionPointOffset(int32_t newValue) = 0;
    // attribute gdDynamicSlotIdlePhase : HLAinteger32LE
    virtual int32_t GetgdDynamicSlotIdlePhase() const = 0;
    virtual void SetgdDynamicSlotIdlePhase(int32_t newValue) = 0;
    // attribute gdMiniSlot : HLAinteger32LE
    virtual int32_t GetgdMiniSlot() const = 0;
    virtual void SetgdMiniSlot(int32_t newValue) = 0;
    // attribute gdMiniSlotActionPointOffset : HLAinteger32LE
    virtual int32_t GetgdMiniSlotActionPointOffset() const = 0;
    virtual void SetgdMiniSlotActionPointOffset(int32_t newValue) = 0;
    // attribute gdStaticSlot : HLAinteger32LE
    virtual int32_t GetgdStaticSlot() const = 0;
    virtual void SetgdStaticSlot(int32_t newValue) = 0;
    // attribute gdSymbolWindow : HLAinteger32LE
    virtual int32_t GetgdSymbolWindow() const = 0;
    virtual void SetgdSymbolWindow(int32_t newValue) = 0;
    // attribute gdSymbolWindowActionPointOffset : HLAinteger32LE
    virtual int32_t GetgdSymbolWindowActionPointOffset() const = 0;
    virtual void SetgdSymbolWindowActionPointOffset(int32_t newValue) = 0;
    // attribute gdTSSTransmitter : HLAinteger32LE
    virtual int32_t GetgdTSSTransmitter() const = 0;
    virtual void SetgdTSSTransmitter(int32_t newValue) = 0;
    // attribute gdWakeupTxActive : HLAinteger32LE
    virtual int32_t GetgdWakeupTxActive() const = 0;
    virtual void SetgdWakeupTxActive(int32_t newValue) = 0;
    // attribute gdWakeupTxIdle : HLAinteger32LE
    virtual int32_t GetgdWakeupTxIdle() const = 0;
    virtual void SetgdWakeupTxIdle(int32_t newValue) = 0;
    // attribute gListenNoise : HLAoctet
    virtual uint8_t GetgListenNoise() const = 0;
    virtual void SetgListenNoise(uint8_t newValue) = 0;
    // attribute gMacroPerCycle : HLAinteger32LE
    virtual int32_t GetgMacroPerCycle() const = 0;
    virtual void SetgMacroPerCycle(int32_t newValue) = 0;
    // attribute gMaxWithoutClockCorrectionFatal : HLAoctet
    virtual uint8_t GetgMaxWithoutClockCorrectionFatal() const = 0;
    virtual void SetgMaxWithoutClockCorrectionFatal(uint8_t newValue) = 0;
    // attribute gMaxWithoutClockCorrectionPassive : HLAoctet
    virtual uint8_t GetgMaxWithoutClockCorrectionPassive() const = 0;
    virtual void SetgMaxWithoutClockCorrectionPassive(uint8_t newValue) = 0;
    // attribute gNumberOfMiniSlots : HLAinteger32LE
    virtual int32_t GetgNumberOfMiniSlots() const = 0;
    virtual void SetgNumberOfMiniSlots(int32_t newValue) = 0;
    // attribute gNumberOfStaticSlots : HLAinteger32LE
    virtual int32_t GetgNumberOfStaticSlots() const = 0;
    virtual void SetgNumberOfStaticSlots(int32_t newValue) = 0;
    // attribute gPayloadLengthStatic : HLAinteger32LE
    virtual int32_t GetgPayloadLengthStatic() const = 0;
    virtual void SetgPayloadLengthStatic(int32_t newValue) = 0;
    // attribute gSyncFrameIDCountMax : HLAoctet
    virtual uint8_t GetgSyncFrameIDCountMax() const = 0;
    virtual void SetgSyncFrameIDCountMax(uint8_t newValue) = 0;
    using UpdateCallback = std::function<void(std::shared_ptr<IFlexRayCluster>)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallback callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
    using UpdateCallbackWithTime = std::function<void(std::shared_ptr<IFlexRayCluster>, int64_t time, OrderType orderType)>;
    virtual uint32_t RegisterUpdateCallbackWithTime(UpdateCallbackWithTime callback) = 0;
    virtual void UnregisterUpdateCallbackWithTime(uint32_t callbackToken) = 0;
};

class IBusController;
class IBusControllerObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IBusController>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IBusController>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IBusController>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<IBusController> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IBusController> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IBusController> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IBusController : public IHLAobjectRoot
{
  public:
    static const AttributeBits kNetworkIDBit = 0x2;
    static const AttributeBits kDeviceIDBit = 0x4;

    IBusController() {}
    ~IBusController() {}
    IBusController(const IBusController&) = delete;
    IBusController(IBusController&&) = delete;
    IBusController& operator=(const IBusController&) = delete;
    IBusController& operator=(IBusController&&) = delete;

    // attribute NetworkID : HLAASCIIstring
    virtual std::string GetNetworkID() const = 0;
    virtual void SetNetworkID(std::string newValue) = 0;
    // attribute DeviceID : HLAASCIIstring
    virtual std::string GetDeviceID() const = 0;
    virtual void SetDeviceID(std::string newValue) = 0;
    // send all attribute values
    virtual void UpdateAllAttributeValues() = 0;
    // send all attribute values, as TSO message
    virtual void UpdateAllAttributeValues(int64_t time) = 0;
    // send attribute values which have been modified since last call
    virtual void UpdateModifiedAttributeValues() = 0;
    // send attribute values which have been modified since last call, as TSO message
    virtual void UpdateModifiedAttributeValues(int64_t time) = 0;
    // bitmask of attributes ever received
    virtual AttributeBits GetReceivedAttributes() const = 0;
    // bitmask of attributes received in last update (cleared after update callbacks executed)
    virtual AttributeBits GetUpdatedAttributes() const = 0;
    // bitmask of attributes ever modified
    virtual AttributeBits GetInitializedAttributes() const = 0;
    // bitmask of attributes modified since last updateAttributeValues/provideAttributeValues
    // (cleared by UpdateAttributeValues or ProvideAttributeValues)
    virtual AttributeBits GetModifiedAttributes() const = 0;
    // request attribute values which haven't been updated in last reflectAttributeValues
    virtual void RequestAttributeValues() = 0;
    // request all attribute values
    virtual void RequestAllAttributeValues() = 0;
};

class IBusControllerCan;
class IBusControllerCanObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IBusControllerCan>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IBusControllerCan>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IBusControllerCan>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<IBusControllerCan> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IBusControllerCan> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IBusControllerCan> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IBusControllerCan : public IBusController
{
  public:
    static const AttributeBits kBaudRateBit = 0x8;
    static const AttributeBits kDataBaudRateBit = 0x10;
    static const AttributeBits kPreScalerBit = 0x20;
    static const AttributeBits kOperationModeBit = 0x40;
    static const AttributeBits kSync_SegBit = 0x80;
    static const AttributeBits kProp_SegBit = 0x100;
    static const AttributeBits kPhase_Seg1Bit = 0x200;
    static const AttributeBits kPhase_Seg2Bit = 0x400;
    static const AttributeBits kSamplingModeBit = 0x800;

    IBusControllerCan() {}
    ~IBusControllerCan() {}
    IBusControllerCan(const IBusControllerCan&) = delete;
    IBusControllerCan(IBusControllerCan&&) = delete;
    IBusControllerCan& operator=(const IBusControllerCan&) = delete;
    IBusControllerCan& operator=(IBusControllerCan&&) = delete;

    // attribute BaudRate : HLAinteger32LE
    virtual int32_t GetBaudRate() const = 0;
    virtual void SetBaudRate(int32_t newValue) = 0;
    // attribute DataBaudRate : HLAinteger32LE
    virtual int32_t GetDataBaudRate() const = 0;
    virtual void SetDataBaudRate(int32_t newValue) = 0;
    // attribute PreScaler : HLAinteger32LE
    virtual int32_t GetPreScaler() const = 0;
    virtual void SetPreScaler(int32_t newValue) = 0;
    // attribute OperationMode : CanOperationMode
    virtual CanOperationMode GetOperationMode() const = 0;
    virtual void SetOperationMode(CanOperationMode newValue) = 0;
    // attribute Sync_Seg : HLAinteger32LE
    virtual int32_t GetSync_Seg() const = 0;
    virtual void SetSync_Seg(int32_t newValue) = 0;
    // attribute Prop_Seg : HLAinteger32LE
    virtual int32_t GetProp_Seg() const = 0;
    virtual void SetProp_Seg(int32_t newValue) = 0;
    // attribute Phase_Seg1 : HLAinteger32LE
    virtual int32_t GetPhase_Seg1() const = 0;
    virtual void SetPhase_Seg1(int32_t newValue) = 0;
    // attribute Phase_Seg2 : HLAinteger32LE
    virtual int32_t GetPhase_Seg2() const = 0;
    virtual void SetPhase_Seg2(int32_t newValue) = 0;
    // attribute SamplingMode : CanSamplingMode
    virtual CanSamplingMode GetSamplingMode() const = 0;
    virtual void SetSamplingMode(CanSamplingMode newValue) = 0;
    using UpdateCallback = std::function<void(std::shared_ptr<IBusControllerCan>)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallback callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
    using UpdateCallbackWithTime = std::function<void(std::shared_ptr<IBusControllerCan>, int64_t time, OrderType orderType)>;
    virtual uint32_t RegisterUpdateCallbackWithTime(UpdateCallbackWithTime callback) = 0;
    virtual void UnregisterUpdateCallbackWithTime(uint32_t callbackToken) = 0;
};

class IBusControllerEthernet;
class IBusControllerEthernetObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IBusControllerEthernet>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IBusControllerEthernet>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IBusControllerEthernet>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<IBusControllerEthernet> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IBusControllerEthernet> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IBusControllerEthernet> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IBusControllerEthernet : public IBusController
{
  public:
    static const AttributeBits kPortNameBit = 0x8;

    IBusControllerEthernet() {}
    ~IBusControllerEthernet() {}
    IBusControllerEthernet(const IBusControllerEthernet&) = delete;
    IBusControllerEthernet(IBusControllerEthernet&&) = delete;
    IBusControllerEthernet& operator=(const IBusControllerEthernet&) = delete;
    IBusControllerEthernet& operator=(IBusControllerEthernet&&) = delete;

    // attribute PortName : HLAASCIIstring
    virtual std::string GetPortName() const = 0;
    virtual void SetPortName(std::string newValue) = 0;
    using UpdateCallback = std::function<void(std::shared_ptr<IBusControllerEthernet>)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallback callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
    using UpdateCallbackWithTime = std::function<void(std::shared_ptr<IBusControllerEthernet>, int64_t time, OrderType orderType)>;
    virtual uint32_t RegisterUpdateCallbackWithTime(UpdateCallbackWithTime callback) = 0;
    virtual void UnregisterUpdateCallbackWithTime(uint32_t callbackToken) = 0;
};

class IFlexRayControllerStatus;
class IFlexRayControllerStatusObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IFlexRayControllerStatus>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IFlexRayControllerStatus>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IFlexRayControllerStatus>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<IFlexRayControllerStatus> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IFlexRayControllerStatus> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IFlexRayControllerStatus> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IFlexRayControllerStatus : public IBusController
{
  public:
    static const AttributeBits kPocStateBit = 0x8;
    static const AttributeBits kchiHaltRequestBit = 0x10;
    static const AttributeBits kcoldstartNoiseBit = 0x20;
    static const AttributeBits kfreezeBit = 0x40;
    static const AttributeBits kchiReadyRequestBit = 0x80;
    static const AttributeBits kerrorModeBit = 0x100;
    static const AttributeBits kslotModeBit = 0x200;
    static const AttributeBits kstartupStateBit = 0x400;
    static const AttributeBits kwakeupStatusBit = 0x800;

    IFlexRayControllerStatus() {}
    ~IFlexRayControllerStatus() {}
    IFlexRayControllerStatus(const IFlexRayControllerStatus&) = delete;
    IFlexRayControllerStatus(IFlexRayControllerStatus&&) = delete;
    IFlexRayControllerStatus& operator=(const IFlexRayControllerStatus&) = delete;
    IFlexRayControllerStatus& operator=(IFlexRayControllerStatus&&) = delete;

    // attribute PocState : FlexRayPocState
    virtual FlexRayPocState GetPocState() const = 0;
    virtual void SetPocState(FlexRayPocState newValue) = 0;
    // attribute chiHaltRequest : HLAboolean
    virtual bool GetchiHaltRequest() const = 0;
    virtual void SetchiHaltRequest(bool newValue) = 0;
    // attribute coldstartNoise : HLAboolean
    virtual bool GetcoldstartNoise() const = 0;
    virtual void SetcoldstartNoise(bool newValue) = 0;
    // attribute freeze : HLAboolean
    virtual bool Getfreeze() const = 0;
    virtual void Setfreeze(bool newValue) = 0;
    // attribute chiReadyRequest : HLAboolean
    virtual bool GetchiReadyRequest() const = 0;
    virtual void SetchiReadyRequest(bool newValue) = 0;
    // attribute errorMode : FlexRayErrorModeType
    virtual FlexRayErrorModeType GeterrorMode() const = 0;
    virtual void SeterrorMode(FlexRayErrorModeType newValue) = 0;
    // attribute slotMode : FlexRaySlotModeType
    virtual FlexRaySlotModeType GetslotMode() const = 0;
    virtual void SetslotMode(FlexRaySlotModeType newValue) = 0;
    // attribute startupState : FlexRayStartupStateType
    virtual FlexRayStartupStateType GetstartupState() const = 0;
    virtual void SetstartupState(FlexRayStartupStateType newValue) = 0;
    // attribute wakeupStatus : FlexRayWakeupStatusType
    virtual FlexRayWakeupStatusType GetwakeupStatus() const = 0;
    virtual void SetwakeupStatus(FlexRayWakeupStatusType newValue) = 0;
    using UpdateCallback = std::function<void(std::shared_ptr<IFlexRayControllerStatus>)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallback callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
    using UpdateCallbackWithTime = std::function<void(std::shared_ptr<IFlexRayControllerStatus>, int64_t time, OrderType orderType)>;
    virtual uint32_t RegisterUpdateCallbackWithTime(UpdateCallbackWithTime callback) = 0;
    virtual void UnregisterUpdateCallbackWithTime(uint32_t callbackToken) = 0;
};

class IFlexRayController;
class IFlexRayControllerObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IFlexRayController>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IFlexRayController>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IFlexRayController>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<IFlexRayController> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IFlexRayController> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IFlexRayController> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IFlexRayController : public IBusController
{
  public:
    static const AttributeBits kPocRequestBit = 0x8;
    static const AttributeBits kChiCommandBit = 0x10;
    static const AttributeBits kpAllowHaltDueToClockBit = 0x20;
    static const AttributeBits kpAllowPassiveToActiveBit = 0x40;
    static const AttributeBits kpChannelsBit = 0x80;
    static const AttributeBits kpClusterDriftDampingBit = 0x100;
    static const AttributeBits kpdAcceptedStartupRangeBit = 0x200;
    static const AttributeBits kpdListenTimeoutBit = 0x400;
    static const AttributeBits kpKeySlotIdBit = 0x800;
    static const AttributeBits kpKeySlotOnlyEnabledBit = 0x1000;
    static const AttributeBits kpKeySlotUsedForStartupBit = 0x2000;
    static const AttributeBits kpKeySlotUsedForSyncBit = 0x4000;
    static const AttributeBits kpLatestTxBit = 0x8000;
    static const AttributeBits kpMacroInitialOffsetABit = 0x10000;
    static const AttributeBits kpMacroInitialOffsetBBit = 0x20000;
    static const AttributeBits kpMicroInitialOffsetABit = 0x40000;
    static const AttributeBits kpMicroInitialOffsetBBit = 0x80000;
    static const AttributeBits kpMicroPerCycleBit = 0x100000;
    static const AttributeBits kpOffsetCorrectionOutBit = 0x200000;
    static const AttributeBits kpOffsetCorrectionStartBit = 0x400000;
    static const AttributeBits kpRateCorrectionOutBit = 0x800000;
    static const AttributeBits kpWakeupChannelBit = 0x1000000;
    static const AttributeBits kpWakeupPatternBit = 0x2000000;
    static const AttributeBits kpdMicrotickBit = 0x4000000;
    static const AttributeBits kpSamplesPerMicrotickBit = 0x8000000;

    IFlexRayController() {}
    ~IFlexRayController() {}
    IFlexRayController(const IFlexRayController&) = delete;
    IFlexRayController(IFlexRayController&&) = delete;
    IFlexRayController& operator=(const IFlexRayController&) = delete;
    IFlexRayController& operator=(IFlexRayController&&) = delete;

    // attribute PocRequest : FlexRayPocState
    virtual FlexRayPocState GetPocRequest() const = 0;
    virtual void SetPocRequest(FlexRayPocState newValue) = 0;
    // attribute ChiCommand : FlexRayChiCommand
    virtual FlexRayChiCommand GetChiCommand() const = 0;
    virtual void SetChiCommand(FlexRayChiCommand newValue) = 0;
    // attribute pAllowHaltDueToClock : HLAoctet
    virtual uint8_t GetpAllowHaltDueToClock() const = 0;
    virtual void SetpAllowHaltDueToClock(uint8_t newValue) = 0;
    // attribute pAllowPassiveToActive : HLAoctet
    virtual uint8_t GetpAllowPassiveToActive() const = 0;
    virtual void SetpAllowPassiveToActive(uint8_t newValue) = 0;
    // attribute pChannels : FlexRayChannel
    virtual FlexRayChannel GetpChannels() const = 0;
    virtual void SetpChannels(FlexRayChannel newValue) = 0;
    // attribute pClusterDriftDamping : HLAoctet
    virtual uint8_t GetpClusterDriftDamping() const = 0;
    virtual void SetpClusterDriftDamping(uint8_t newValue) = 0;
    // attribute pdAcceptedStartupRange : HLAinteger32LE
    virtual int32_t GetpdAcceptedStartupRange() const = 0;
    virtual void SetpdAcceptedStartupRange(int32_t newValue) = 0;
    // attribute pdListenTimeout : HLAinteger32LE
    virtual int32_t GetpdListenTimeout() const = 0;
    virtual void SetpdListenTimeout(int32_t newValue) = 0;
    // attribute pKeySlotId : HLAinteger16LE
    virtual int16_t GetpKeySlotId() const = 0;
    virtual void SetpKeySlotId(int16_t newValue) = 0;
    // attribute pKeySlotOnlyEnabled : HLAoctet
    virtual uint8_t GetpKeySlotOnlyEnabled() const = 0;
    virtual void SetpKeySlotOnlyEnabled(uint8_t newValue) = 0;
    // attribute pKeySlotUsedForStartup : HLAoctet
    virtual uint8_t GetpKeySlotUsedForStartup() const = 0;
    virtual void SetpKeySlotUsedForStartup(uint8_t newValue) = 0;
    // attribute pKeySlotUsedForSync : HLAoctet
    virtual uint8_t GetpKeySlotUsedForSync() const = 0;
    virtual void SetpKeySlotUsedForSync(uint8_t newValue) = 0;
    // attribute pLatestTx : HLAinteger16LE
    virtual int16_t GetpLatestTx() const = 0;
    virtual void SetpLatestTx(int16_t newValue) = 0;
    // attribute pMacroInitialOffsetA : HLAoctet
    virtual uint8_t GetpMacroInitialOffsetA() const = 0;
    virtual void SetpMacroInitialOffsetA(uint8_t newValue) = 0;
    // attribute pMacroInitialOffsetB : HLAoctet
    virtual uint8_t GetpMacroInitialOffsetB() const = 0;
    virtual void SetpMacroInitialOffsetB(uint8_t newValue) = 0;
    // attribute pMicroInitialOffsetA : HLAinteger32LE
    virtual int32_t GetpMicroInitialOffsetA() const = 0;
    virtual void SetpMicroInitialOffsetA(int32_t newValue) = 0;
    // attribute pMicroInitialOffsetB : HLAinteger32LE
    virtual int32_t GetpMicroInitialOffsetB() const = 0;
    virtual void SetpMicroInitialOffsetB(int32_t newValue) = 0;
    // attribute pMicroPerCycle : HLAinteger32LE
    virtual int32_t GetpMicroPerCycle() const = 0;
    virtual void SetpMicroPerCycle(int32_t newValue) = 0;
    // attribute pOffsetCorrectionOut : HLAinteger32LE
    virtual int32_t GetpOffsetCorrectionOut() const = 0;
    virtual void SetpOffsetCorrectionOut(int32_t newValue) = 0;
    // attribute pOffsetCorrectionStart : HLAinteger16LE
    virtual int16_t GetpOffsetCorrectionStart() const = 0;
    virtual void SetpOffsetCorrectionStart(int16_t newValue) = 0;
    // attribute pRateCorrectionOut : HLAinteger32LE
    virtual int32_t GetpRateCorrectionOut() const = 0;
    virtual void SetpRateCorrectionOut(int32_t newValue) = 0;
    // attribute pWakeupChannel : FlexRayChannel
    virtual FlexRayChannel GetpWakeupChannel() const = 0;
    virtual void SetpWakeupChannel(FlexRayChannel newValue) = 0;
    // attribute pWakeupPattern : HLAoctet
    virtual uint8_t GetpWakeupPattern() const = 0;
    virtual void SetpWakeupPattern(uint8_t newValue) = 0;
    // attribute pdMicrotick : FlexRayClockPeriod
    virtual FlexRayClockPeriod GetpdMicrotick() const = 0;
    virtual void SetpdMicrotick(FlexRayClockPeriod newValue) = 0;
    // attribute pSamplesPerMicrotick : HLAoctet
    virtual uint8_t GetpSamplesPerMicrotick() const = 0;
    virtual void SetpSamplesPerMicrotick(uint8_t newValue) = 0;
    using UpdateCallback = std::function<void(std::shared_ptr<IFlexRayController>)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallback callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
    using UpdateCallbackWithTime = std::function<void(std::shared_ptr<IFlexRayController>, int64_t time, OrderType orderType)>;
    virtual uint32_t RegisterUpdateCallbackWithTime(UpdateCallbackWithTime callback) = 0;
    virtual void UnregisterUpdateCallbackWithTime(uint32_t callbackToken) = 0;
};

class IFlexRaySendBuffer;
class IFlexRaySendBufferObjectClass
{
  public:
    using DiscoverObjectInstanceCallback = std::function<void(std::shared_ptr<IFlexRaySendBuffer>)>;
    using RemoveObjectInstanceCallback = std::function<void(std::shared_ptr<IFlexRaySendBuffer>)>;
    using ObjectCreatedCallbackType = std::function<void(std::shared_ptr<IFlexRaySendBuffer>, bool success)>;
    virtual void Publish() = 0;
    virtual void Unpublish() = 0;
    virtual void Subscribe(bool deliverToSelf) = 0;
    virtual void Unsubscribe() = 0;
    virtual std::shared_ptr<IFlexRaySendBuffer> GetObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IFlexRaySendBuffer> CreateObjectInstance(const std::wstring& instanceName) = 0;
    virtual std::shared_ptr<IFlexRaySendBuffer> CreateObjectInstance(const std::wstring& instanceName, ObjectCreatedCallbackType createdCallback) = 0;

    virtual uint32_t RegisterDiscoverObjectInstanceCallback(DiscoverObjectInstanceCallback callback) = 0;
    virtual void UnregisterDiscoverObjectInstanceCallback(uint32_t callbackToken) = 0;

    virtual uint32_t RegisterRemoveObjectInstanceCallback(RemoveObjectInstanceCallback callback) = 0;
    virtual void UnregisterRemoveObjectInstanceCallback(uint32_t callbackToken) = 0;
};

class IFlexRaySendBuffer : public IHLAobjectRoot
{
  public:
    static const AttributeBits kSenderBit = 0x2;
    static const AttributeBits kTransmissionModeBit = 0x4;
    static const AttributeBits kPayloadBit = 0x8;
    static const AttributeBits kCycleOffsetBit = 0x10;
    static const AttributeBits kCycleRepetitionBit = 0x20;
    static const AttributeBits kSlotIdBit = 0x40;
    static const AttributeBits kChannelBit = 0x80;
    static const AttributeBits kPPIndicatorBit = 0x100;
    static const AttributeBits kHeaderCRCBit = 0x200;

    IFlexRaySendBuffer() {}
    ~IFlexRaySendBuffer() {}
    IFlexRaySendBuffer(const IFlexRaySendBuffer&) = delete;
    IFlexRaySendBuffer(IFlexRaySendBuffer&&) = delete;
    IFlexRaySendBuffer& operator=(const IFlexRaySendBuffer&) = delete;
    IFlexRaySendBuffer& operator=(IFlexRaySendBuffer&&) = delete;

    // attribute Sender : HLAobjectInstanceHandle.FlexRayController
    virtual IFlexRayController* GetSender() const = 0;
    virtual void SetSender(IFlexRayController* newValue) = 0;
    // attribute TransmissionMode : FlexRayTransmissionMode
    virtual FlexRayTransmissionMode GetTransmissionMode() const = 0;
    virtual void SetTransmissionMode(FlexRayTransmissionMode newValue) = 0;
    // attribute Payload : FlexRayPayload
    virtual const FlexRayPayload& GetPayload() const = 0;
    virtual FlexRayPayload& GetPayload() = 0;
    virtual void SetPayload(const FlexRayPayload& newValue) = 0;
    // attribute CycleOffset : HLAoctet
    virtual uint8_t GetCycleOffset() const = 0;
    virtual void SetCycleOffset(uint8_t newValue) = 0;
    // attribute CycleRepetition : HLAoctet
    virtual uint8_t GetCycleRepetition() const = 0;
    virtual void SetCycleRepetition(uint8_t newValue) = 0;
    // attribute SlotId : HLAinteger16LE
    virtual int16_t GetSlotId() const = 0;
    virtual void SetSlotId(int16_t newValue) = 0;
    // attribute Channel : FlexRayChannel
    virtual FlexRayChannel GetChannel() const = 0;
    virtual void SetChannel(FlexRayChannel newValue) = 0;
    // attribute PPIndicator : HLAboolean
    virtual bool GetPPIndicator() const = 0;
    virtual void SetPPIndicator(bool newValue) = 0;
    // attribute HeaderCRC : HLAinteger16LE
    virtual int16_t GetHeaderCRC() const = 0;
    virtual void SetHeaderCRC(int16_t newValue) = 0;
    // send all attribute values
    virtual void UpdateAllAttributeValues() = 0;
    // send all attribute values, as TSO message
    virtual void UpdateAllAttributeValues(int64_t time) = 0;
    // send attribute values which have been modified since last call
    virtual void UpdateModifiedAttributeValues() = 0;
    // send attribute values which have been modified since last call, as TSO message
    virtual void UpdateModifiedAttributeValues(int64_t time) = 0;
    // bitmask of attributes ever received
    virtual AttributeBits GetReceivedAttributes() const = 0;
    // bitmask of attributes received in last update (cleared after update callbacks executed)
    virtual AttributeBits GetUpdatedAttributes() const = 0;
    // bitmask of attributes ever modified
    virtual AttributeBits GetInitializedAttributes() const = 0;
    // bitmask of attributes modified since last updateAttributeValues/provideAttributeValues
    // (cleared by UpdateAttributeValues or ProvideAttributeValues)
    virtual AttributeBits GetModifiedAttributes() const = 0;
    // request attribute values which haven't been updated in last reflectAttributeValues
    virtual void RequestAttributeValues() = 0;
    // request all attribute values
    virtual void RequestAllAttributeValues() = 0;
    using UpdateCallback = std::function<void(std::shared_ptr<IFlexRaySendBuffer>)>;
    virtual uint32_t RegisterUpdateCallback(UpdateCallback callback) = 0;
    virtual void UnregisterUpdateCallback(uint32_t callbackToken) = 0;
    using UpdateCallbackWithTime = std::function<void(std::shared_ptr<IFlexRaySendBuffer>, int64_t time, OrderType orderType)>;
    virtual uint32_t RegisterUpdateCallbackWithTime(UpdateCallbackWithTime callback) = 0;
    virtual void UnregisterUpdateCallbackWithTime(uint32_t callbackToken) = 0;
};


class IObjectClassRegistry
{
  public:
    virtual IHLAobjectRootObjectClass* GetHLAobjectRootObjectClass() const = 0;
    virtual ISystemVariableObjectClass* GetSystemVariableObjectClass() const = 0;
    virtual IValueEntityObjectClass* GetValueEntityObjectClass() const = 0;
    virtual IDOMemberSourceObjectClass* GetDOMemberSourceObjectClass() const = 0;
    virtual IDOMemberTargetObjectClass* GetDOMemberTargetObjectClass() const = 0;
    virtual IBusManagementObjectClass* GetBusManagementObjectClass() const = 0;
    virtual IBusManagementCanObjectClass* GetBusManagementCanObjectClass() const = 0;
    virtual IBusManagementEthernetObjectClass* GetBusManagementEthernetObjectClass() const = 0;
    virtual IFlexRayClusterObjectClass* GetFlexRayClusterObjectClass() const = 0;
    virtual IBusControllerObjectClass* GetBusControllerObjectClass() const = 0;
    virtual IBusControllerCanObjectClass* GetBusControllerCanObjectClass() const = 0;
    virtual IBusControllerEthernetObjectClass* GetBusControllerEthernetObjectClass() const = 0;
    virtual IFlexRayControllerStatusObjectClass* GetFlexRayControllerStatusObjectClass() const = 0;
    virtual IFlexRayControllerObjectClass* GetFlexRayControllerObjectClass() const = 0;
    virtual IFlexRaySendBufferObjectClass* GetFlexRaySendBufferObjectClass() const = 0;
  protected:
    virtual ~IObjectClassRegistry() {}
}; // class IObjectClassRegistry

} // namespace NDistSimIB
} // namespace NRTFederateEncoding
